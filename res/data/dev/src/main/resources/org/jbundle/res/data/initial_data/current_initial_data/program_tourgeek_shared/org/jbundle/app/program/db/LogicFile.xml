<?xml version="1.0" encoding="UTF-8" standalone="no"?><file>
	<LogicFile ID="1">
		<LastChanged>2012-03-26T09:28:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Account</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == Account.ACCT_DETAIL_GRID_SCREEN)
    screen = Record.makeNewScreen(AcctDetail.ACCT_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(ACCOUNT_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(ACCOUNT_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountBudgetGridScreen</MethodClassName>
		<LogicSource>return new AccountBudget(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountBudgetGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountBudgetScreen</MethodClassName>
		<LogicSource>return new AccountBudget(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountBudgetScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6">
		<LastChanged>2012-01-31T10:43:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getIndexOfConverterToPass</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountDescConverter</MethodClassName>
		<LogicSource><![CDATA[int iIndex = -1;
boolean bOldTranslation = this.setEnableTranslation(false);	// To avoid re-calling this method in getField()
if (((BaseField)this.getField()).getRecord().getField(FinStmtDetail.ACCOUNT_ID).isNull())
    iIndex = -1;  // No account ID - use this one
else if (bSetData)
    iIndex = -1;      // On data input, set the fin stmt desc.
else if (this.getField().isNull())
    iIndex = 0; // Account Desc is null, return
else
    iIndex = -1;  // Use alternate desc (Acct Desc was overidden)
this.setEnableTranslation(bOldTranslation);
return iIndex;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountField</MethodClassName>
		<LogicSource>return new Account(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="8">
		<LastChanged>2012-01-31T14:17:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountField</MethodClassName>
		<LogicSource><![CDATA[Record recAccount = this.makeReferenceRecord();
BaseField fldAcctNo = recAccount.getField(Account.ACCOUNT_NO);
fldAcctNo.addListener(new MainReadOnlyHandler(Account.ACCOUNT_NO_KEY));
Converter conv = fldAcctNo; // new GlConverter(fldAcctNo); (Don't need a converter since AccountNo has one already)
conv = new FieldDescConverter(conv, this);	// Use the description for this field
conv.setupDefaultView(itsLocation, targetScreen, conv, iDisplayFieldDesc, properties);

return this.setupTableLookup(targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, ScreenConstants.DONT_DISPLAY_FIELD_DESC, recAccount, null, Account.DESCRIPTION, true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="9">
		<LastChanged>2012-01-31T10:43:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(Account.ACCOUNT_FILE).setKeyArea(Account.ACCOUNT_NO_KEY);
this.getScreenRecord().getField(AccountScreenRecord.ACCOUNT_KEY_AREA).addListener(new SortOrderHandler(this));

this.getMainRecord().addListener(new ExtractRangeFilter(Account.DESCRIPTION, this.getScreenRecord().getField(AccountScreenRecord.ACCT_NAME_SORT)));
this.getScreenRecord().getField(AccountScreenRecord.ACCT_NAME_SORT).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="10">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="11">
		<LastChanged>2012-01-31T10:43:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
this.getScreenRecord().getField(AccountScreenRecord.ACCT_NAME_SORT).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="12">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, Account.ACCT_DETAIL_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="13">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountGridScreen</MethodClassName>
		<LogicSource>return new Account(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="16">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="17">
		<LastChanged>2012-01-31T10:43:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(Account.ACCOUNT_FILE).setKeyArea(Account.ACCOUNT_NO_KEY);
this.addMainKeyBehavior();
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="18">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="19">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, Account.ACCT_DETAIL_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="20">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountScreen</MethodClassName>
		<LogicSource>return new Account(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="21">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="22">
		<LastChanged>2012-03-26T09:32:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatch</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == AcctBatch.ACCT_BATCH_DETAIL_SCREEN)
    screen = Record.makeNewScreen(AcctBatchDetail.ACCT_BATCH_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == AcctBatch.ACCT_BATCH_POST)
    screen = Record.makeNewScreen(ACCT_BATCH_POST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(ACCT_BATCH_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(ACCT_BATCH_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="23">
		<LastChanged>2012-01-31T14:37:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>onAutoDist</MethodName>
		<LogicDescription>Do the auto-distribution</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Record recAccount</MethodInterface>
		<MethodClassName>AcctBatchDetail</MethodClassName>
		<LogicSource><![CDATA[if (!recAccount.getField(Account.AUTO_DIST_ID).isNull())
{
    try   {
        Record recAcctBatchDetail = (Record)this.clone(true);
        AutoDist recAutoDist = new AutoDist(this.findRecordOwner());
        ((ReferenceField)recAccount.getField(Account.AUTO_DIST_ID)).setReferenceRecord(recAutoDist);
        Record record = ((ReferenceField)recAccount.getField(Account.AUTO_DIST_ID)).getReference();
        if (record == null)
            return DBConstants.NORMAL_RETURN;
        AutoDistDetail recAutoDistDetail = new AutoDistDetail(this.getRecordOwner());
        recAutoDistDetail.addListener(new SubFileFilter(recAutoDist));
        double dAmount = this.getField(AcctBatchDetail.AMOUNT).getValue();
        double dBalance = dAmount;
        double dPercentTotal = 0;
        while (recAutoDistDetail.hasNext())
        {
            recAutoDistDetail.next();
            recAcctBatchDetail.addNew();
            for (int i = DBConstants.MAIN_FIELD; i < recAcctBatchDetail.getFieldCount(); i++)
            {
                recAcctBatchDetail.getField(i).moveFieldToThis(this.getField(i));
            }
            recAcctBatchDetail.getField(AcctBatchDetail.ACCOUNT_ID).moveFieldToThis(recAutoDistDetail.getField(AutoDistDetail.DIST_ACCOUNT_ID));
            recAcctBatchDetail.getField(AcctBatchDetail.AUTO_DIST).setState(true);
            double dPercent = recAutoDistDetail.getField(AutoDistDetail.DIST_PERCENT).getValue();
            dPercentTotal += dPercent;
            double dValue = Math.floor(-dAmount * dPercent * 100 + 0.5) / 100;
            dBalance = Math.floor((dValue + dBalance) * 100 + 0.5) / 100;
            if (dPercentTotal > .98) if (dPercentTotal < 1.02) if (dBalance != 0.00) if (!recAutoDistDetail.hasNext())
            { // If this is the last one, make sure the distribution equals 0. (alows for 33.33% x 3 = 100%)
                dValue = dValue - dBalance;     // Make sure balance = 0;
            }
            recAcctBatchDetail.getField(AcctBatchDetail.AMOUNT).setValue(dValue);
            recAcctBatchDetail.add();   // Add the counter-balance entry
        }
        recAcctBatchDetail.free();
        recAcctBatchDetail = null;
        recAutoDist.free();
        recAutoDist = null;
        recAutoDistDetail.free();
        recAutoDistDetail = null;
    } catch (DBException ex)    {
        ex.printStackTrace();
    } catch (CloneNotSupportedException e)  {
        // Never
    }
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="24">
		<LastChanged>2013-01-22T14:04:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>onCounterBalance</MethodName>
		<LogicDescription>Create counter-balance entry</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Record recAccount</MethodInterface>
		<MethodClassName>AcctBatchDetail</MethodClassName>
		<LogicSource><![CDATA[if (recAccount.getField(Account.COUNTER_ACCOUNT_ID).getState())
{
    try   {
        Record recAcctBatchDetail = (Record)this.clone(true);
        recAcctBatchDetail.addNew();
        recAcctBatchDetail.moveFields(this, null, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE, true, false, false, false);
        recAcctBatchDetail.getField(AcctBatchDetail.ACCOUNT_ID).moveFieldToThis(recAccount.getField(Account.COUNTER_ACCOUNT_ID));
        recAcctBatchDetail.getField(AcctBatchDetail.AMOUNT).setValue(-this.getField(AcctBatchDetail.AMOUNT).getValue());
        recAcctBatchDetail.getField(AcctBatchDetail.COUNTER_BALANCE).setState(true);
        recAcctBatchDetail.add();   // Add the counter-balance entry
        recAcctBatchDetail.free();
        recAcctBatchDetail = null;
    } catch (DBException ex)    {
        ex.printStackTrace();
    } catch (CloneNotSupportedException e)  {
        // Never
    }
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="25">
		<LastChanged>2013-01-22T14:04:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>onReversal</MethodName>
		<LogicDescription><![CDATA[Create a new transaction set that reverses the transaction sequence
that the current record is in.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetail</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = true;
RecordOwner screen = this.getRecordOwner();
if (screen == null)
    return false;
int iSequence = (int)this.getField(AcctBatchDetail.SEQUENCE).getValue();
if (this.isModified())
{
    try {
        if (this.getEditMode() == DBConstants.EDIT_ADD)
            this.add();
        else if (this.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
            this.set();
        else
            return false;
    } catch (DBException ex)    {
        screen.getTask().setLastError(ex.getMessage());
        return false;
    }
}
else if (this.getEditMode() != Constants.EDIT_CURRENT)
    return false;
Record recAcctBatch = (Record)screen.getRecord(AcctBatch.ACCT_BATCH_FILE);
if (recAcctBatch == null)
    return false;
if (recAcctBatch.getField(AcctBatch.BALANCE).getValue() != 0.00)
{
    String strError = "Batch must be balanced";
    ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strError);
    this.getTask().setLastError(strError);
    return false;
}

try   {
    BaseField fldTrxSeq = (BaseField)this.getField(AcctBatchDetail.SEQUENCE).clone();
    fldTrxSeq.setValue(iSequence);
    Record recAcctBatchDetail = (Record)this.clone();
    if (recAcctBatchDetail == null)
        return false;
    Record recAcctBatchDetailOut = (Record)this.clone(true);
    recAcctBatchDetail.setKeyArea(AcctBatchDetail.ACCT_BATCH_ID_KEY);
    while (recAcctBatchDetail.getListener() != null)
    {
        recAcctBatchDetail.removeListener(recAcctBatchDetail.getListener(), true);
    }
    recAcctBatchDetail.addNew();
    FileListener listener = new SubFileFilter(recAcctBatch.getField(AcctBatch.ID), AcctBatchDetail.ACCT_BATCH_ID, fldTrxSeq, AcctBatchDetail.SEQUENCE, null, null);
    recAcctBatchDetail.addListener(listener);
    recAcctBatchDetail.close();
    double dBalance = 0;
    while (recAcctBatchDetail.hasNext())
    {
        recAcctBatchDetail.next();
        dBalance += recAcctBatchDetail.getField(AcctBatchDetail.AMOUNT).getValue();
    }
    if (dBalance != 0)
    {
        bSuccess = false;
        Task task = this.getRecordOwner().getTask();
        String strError = "Transaction must be balanced";
        strError = ((BaseApplication)task.getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strError);
        task.setLastError(strError);
    }
    else
    {
        recAcctBatchDetail.close();
        while (recAcctBatchDetail.hasNext())
        {
            recAcctBatchDetail.next();
            if (recAcctBatchDetail.getField(AcctBatchDetail.AUTO_REVERSAL).getState())
                continue;   // Don't re-add this
            recAcctBatchDetail.edit();
            recAcctBatchDetail.getField(AcctBatchDetail.AUTO_ACCRUAL).setState(true);
            recAcctBatchDetailOut.addNew();
            recAcctBatchDetailOut.moveFields(recAcctBatchDetail, null, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE, true, false, false, false);
            recAcctBatchDetailOut.getField(AcctBatchDetail.SEQUENCE).moveFieldToThis(recAcctBatch.getField(AcctBatch.NEXT_SEQUENCE));
            recAcctBatchDetailOut.getField(AcctBatchDetail.AMOUNT).setValue(-recAcctBatchDetail.getField(AcctBatchDetail.AMOUNT).getValue());
            recAcctBatchDetailOut.getField(AcctBatchDetail.AUTO_REVERSAL).setState(true);
            recAcctBatchDetailOut.add();     // Add the counter-balance entry
            recAcctBatchDetail.set();
        }
    }
    recAcctBatchDetail.free();
    recAcctBatchDetail = null;
    fldTrxSeq.free();
    fldTrxSeq = null;
    recAcctBatchDetailOut.free();
    recAcctBatchDetailOut = null;
} catch (DBException ex)    {
    ex.printStackTrace();
} catch (CloneNotSupportedException e)  {
    // Never
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="26">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>AcctBatchDetailGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recAcctBatch, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AcctBatchDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="27">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getRecord(AcctBatch.ACCT_BATCH_FILE).getField(AcctBatch.ID).addListener(new FieldReSelectHandler(this));
this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE).addListener(new SubCountHandler(this.getRecord(AcctBatch.ACCT_BATCH_FILE).getField(AcctBatch.BALANCE), AcctBatchDetail.AMOUNT, false, true));
this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE).addListener(new BatchSequenceHandler(this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE).getField(AcctBatchDetail.SEQUENCE), this.getRecord(AcctBatch.ACCT_BATCH_FILE).getField(AcctBatch.NEXT_SEQUENCE), this.getRecord(AcctBatch.ACCT_BATCH_FILE).getField(AcctBatch.BALANCE)));
this.getMainRecord().addListener(new AcctBatchValidateBeh(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="28">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, AcctBatchDetail.REVERSAL, AcctBatchDetail.REVERSAL, AcctBatchDetail.REVERSAL, "Create Accrual-Reversal Entries for the selected transaction");</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="29">
		<LastChanged>2012-01-31T10:43:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(AcctBatchDetail.REVERSAL))
{
    int iSelection = this.getScreenFieldView().getSelectedRow();
    AcctBatchDetail record = (AcctBatchDetail)this.getMainRecord();
    Record recAtTarget = null;
    if (iSelection != -1)
    {
        try   {
            recAtTarget = (Record)((GridTable)record.getTable()).get(iSelection);
        } catch (DBException ex)    {
            ex.printStackTrace();
            recAtTarget = null;
        }
    }
    if (recAtTarget == null)
    {
        String strError = "Transaction must be selected to be reversed";
        ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strError);
        this.getTask().setLastError(strError);
        return false;
    }
    // Write an refresh the header first
    Record recAcctBatch = this.getRecord(AcctBatch.ACCT_BATCH_FILE);
    if ((recAcctBatch.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
        && (recAcctBatch.isModified()))
    {       // Update and refresh, so the detail has the correct info
        try {
            Object bookmark = recAcctBatch.getHandle(DBConstants.BOOKMARK_HANDLE);
            recAcctBatch.set();
            recAcctBatch.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
        } catch (DBException ex)    {
            ex.printStackTrace();
        }
    }
    return record.onReversal();
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="31">
		<LastChanged>2012-01-23T08:57:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailGridScreen</MethodClassName>
		<LogicSource>return new AcctBatchHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="32">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailGridScreen</MethodClassName>
		<LogicSource>return new AcctBatchDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="33">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailGridScreen</MethodClassName>
		<LogicSource>return new AcctBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="34">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="35">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="36">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>AcctBatchDetailScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recAcctBatch, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AcctBatchDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="37">
		<LastChanged>2012-01-31T10:43:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE).addListener(new SubCountHandler(this.getRecord(AcctBatch.ACCT_BATCH_FILE).getField(AcctBatch.BALANCE), AcctBatchDetail.AMOUNT, false, true));
this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE).addListener(new BatchSequenceHandler(this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE).getField(AcctBatchDetail.SEQUENCE), this.getRecord(AcctBatch.ACCT_BATCH_FILE).getField(AcctBatch.NEXT_SEQUENCE), this.getRecord(AcctBatch.ACCT_BATCH_FILE).getField(AcctBatch.BALANCE)));
this.getMainRecord().addListener(new AcctBatchValidateBeh(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="38">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Reversal", "Reversal", "Reversal", "Create Accrual-Reversal Entries for the selected transaction");</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="39">
		<LastChanged>2012-01-31T10:43:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase("Reversal"))
	return ((AcctBatchDetail)this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE)).onReversal();
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="41">
		<LastChanged>2012-01-23T08:57:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailScreen</MethodClassName>
		<LogicSource>return new AcctBatchHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="42">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailScreen</MethodClassName>
		<LogicSource>return new AcctBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="43">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailScreen</MethodClassName>
		<LogicSource>return new AcctBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="44">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="45">
		<LastChanged>2012-01-31T12:05:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(AcctBatch.USER_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(AcctBatchScreenRecord.USER_ID), AcctBatch.USER_ID, this.getScreenRecord().getField(AcctBatchScreenRecord.RECURRING), AcctBatch.RECURRING, null, null));
this.getScreenRecord().getField(AcctBatchScreenRecord.USER_ID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(AcctBatchScreenRecord.RECURRING).addListener(new FieldReSelectHandler(this));

this.getMainRecord().getField(AcctBatch.RECURRING).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(AcctBatch.TRX_DATE), BooleanField.YES, true));
FieldListener listener = new CopyStringHandler(this.getMainRecord().getField(AcctBatch.TRX_DATE), DBConstants.BLANK, this.getMainRecord().getField(AcctBatch.RECURRING));
listener.setRespondsToMode(DBConstants.INIT_MOVE, true);
this.getMainRecord().getField(AcctBatch.TRX_DATE).addListener(listener);
this.getScreenRecord().getField(AcctBatchScreenRecord.RECURRING).addListener(new StickyValueHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="46">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.POST, MenuConstants.POST, null);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="47">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchGridScreen</MethodClassName>
		<LogicSource>return new AcctBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="48">
		<LastChanged>2012-01-31T10:43:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);

this.getScreenRecord().getField(AcctBatchScreenRecord.RECURRING).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(AcctBatchScreenRecord.USER_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="49">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, AcctBatch.ACCT_BATCH_DETAIL_SCREEN, true, iCommandOptions, null) != null);
if (strCommand.equalsIgnoreCase(MenuConstants.POST))
	return (this.onForm(null, AcctBatch.ACCT_BATCH_POST, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="50">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchGridScreen</MethodClassName>
		<LogicSource>return new AcctBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="51">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="52">
		<LastChanged>2012-01-31T10:43:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchPost</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(AcctBatch.RECURRING).removeListener((FieldListener)this.getMainRecord().getField(AcctBatch.RECURRING).getListener(DisableOnFieldHandler.class.getName()), true);
this.getMainRecord().getField(AcctBatch.TRX_DATE).removeListener((FieldListener)this.getMainRecord().getField(AcctBatch.TRX_DATE).getListener(CopyStringHandler.class.getName()), true);
if (this.getMainRecord().getField(AcctBatch.RECURRING).getState())
    this.getMainRecord().getField(AcctBatch.TRX_DATE).initField(true);

this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE).addListener(new SubFileFilter(this.getRecord(AcctBatch.ACCT_BATCH_FILE)));
this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE).addListener(new SubCountHandler(this.getRecord(AcctBatch.ACCT_BATCH_FILE).getField(AcctBatch.BALANCE), AcctBatchDetail.AMOUNT, false, true));
this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE).addListener(new BatchSequenceHandler(this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE).getField(AcctBatchDetail.SEQUENCE), this.getRecord(AcctBatch.ACCT_BATCH_FILE).getField(AcctBatch.NEXT_SEQUENCE), this.getRecord(AcctBatch.ACCT_BATCH_FILE).getField(AcctBatch.BALANCE)));
this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE).addListener(new AcctPostCheckHandler(this.getRecord(AcctBatch.ACCT_BATCH_FILE)));
this.getRecord(AcctBatch.ACCT_BATCH_FILE).getField(AcctBatch.TRX_DATE).addListener(new AcctBatchSetRecurringBeh(this.getRecord(AcctBatch.ACCT_BATCH_FILE)));
this.getRecord(AcctBatch.ACCT_BATCH_FILE).getField(AcctBatch.AUTO_REVERSAL).addListener(new AcctBatchSetRecurringBeh(this.getRecord(AcctBatch.ACCT_BATCH_FILE)));
Record recAcctBatchDetail = this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE);
recAcctBatchDetail.close();
try   {
    while (recAcctBatchDetail.hasNext())
    {
        recAcctBatchDetail.next();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="53">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchPost</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.POST))
	return this.onPost();
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="54">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>onPost</MethodName>
		<LogicDescription>Post the detail transaction to the G/L</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>AcctBatchPost</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
String POSTING_RESOURCE = application.getResourceClassName(this.getClass().getName(), "AcctBatchPostingResources");
// Step 1 - make sure batch is valid
AcctBatch recAcctBatch = (AcctBatch)this.getRecord(AcctBatch.ACCT_BATCH_FILE);
AcctBatchDetail recAcctBatchDetail = (AcctBatchDetail)this.getRecord(AcctBatchDetail.ACCT_BATCH_DETAIL_FILE);
AcctDetail recAcctDetail = (AcctDetail)this.getRecord(AcctDetail.ACCT_DETAIL_FILE);
AcctDetailDist recAcctDetailDist = (AcctDetailDist)this.getRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE);
TransactionType recTransactionType = (TransactionType)this.getRecord(TransactionType.TRANSACTION_TYPE_FILE);
Period recPeriod = (Period)this.getRecord(Period.PERIOD_FILE);
try   {
    if (recAcctBatch.getEditMode() == Constants.EDIT_CURRENT)
    {
        if (recAcctBatch.edit() != DBConstants.NORMAL_RETURN)
        {
            this.displayError(application.getResources(POSTING_RESOURCE, true).getString("BATCH_IN_USE"));
            return false;
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}
if (recAcctBatch.getEditMode() != Constants.EDIT_IN_PROGRESS)
{   // Error - I need exclusive use of this record
    this.displayError(application.getResources(POSTING_RESOURCE, true).getString("BATCH_NOT_VALID"));
    return false;
}
if (recAcctBatch.getField(AcctBatch.TRX_DATE).isNull())
{
    this.displayError(application.getResources(POSTING_RESOURCE, true).getString("NEED_TRX_DATE"));
    return false;
}
if (recAcctBatch.getField(AcctBatch.BALANCE).getValue() != 0)
{
    this.displayError(application.getResources(POSTING_RESOURCE, true).getString("DOESNT_BALANCE"));
    return false;
}
if (recAcctBatch.getField(AcctBatch.AUTO_REVERSAL).getState() == true)
    if (recAcctBatch.getField(AcctBatch.AUTO_REVERSAL_DATE).isNull())
{
    this.displayError(application.getResources(POSTING_RESOURCE, true).getString("NEED_AUTO_REVERSE"));
    return false;
}
// Step 2 - Post it the the G/L
recAcctBatchDetail.close();
recAcctDetailDist.startDistTrx();
try   {
    int iTypeManual = recTransactionType.getTrxTypeID(TransactionType.GENLED, AcctDetail.ACCT_DETAIL_FILE, AcctDetail.MANUALENTRY, AcctDetail.MANUALENTRY);
    int iTypeRecurring = recTransactionType.getTrxTypeID(TransactionType.GENLED, AcctDetail.ACCT_DETAIL_FILE, AcctDetail.RECURRINGTRX, AcctDetail.RECURRINGTRX);
    int iTypeAccrual = recTransactionType.getTrxTypeID(TransactionType.GENLED, AcctDetail.ACCT_DETAIL_FILE, AcctDetail.ACCRUAL, AcctDetail.ACCRUAL);
    int iTypeReversal = recTransactionType.getTrxTypeID(TransactionType.GENLED, AcctDetail.ACCT_DETAIL_FILE, AcctDetail.ACCRUALREVERSAL, AcctDetail.ACCRUALREVERSAL);
    int iTypeClosing = recTransactionType.getTrxTypeID(TransactionType.GENLED, AcctDetail.ACCT_DETAIL_FILE, AcctDetail.CLOSINGENTRY, AcctDetail.CLOSINGENTRY);
    recAcctBatch.getField(AcctBatch.TRX_ENTRY).initField(DBConstants.DONT_DISPLAY);     // Trx entry date/time

    double dBatchSeq = -1;
    while (recAcctBatchDetail.hasNext())
    {
        recAcctBatchDetail.next();

        // Add the acct detail for this transaction (note: I do not use the methods in acctDetail, because they summarize trx at eom. I can't because there is no detail audit trail.
        recAcctDetail.addNew();
        if (recAcctBatchDetail.getField(AcctBatchDetail.SEQUENCE).getValue() != dBatchSeq)
            recAcctDetailDist.getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID).setValue(0);  // Start of trx
        dBatchSeq = recAcctBatchDetail.getField(AcctBatchDetail.SEQUENCE).getValue();
        recAcctDetail.getField(AcctDetail.ACCOUNT_ID).moveFieldToThis(recAcctBatchDetail.getField(AcctBatchDetail.ACCOUNT_ID));
        recAcctDetail.getField(AcctDetail.TRX_DATE).moveFieldToThis(recAcctBatch.getField(AcctBatch.TRX_DATE));
        if (recAcctBatchDetail.getField(AcctBatchDetail.AUTO_REVERSAL).getState())
            recAcctDetail.getField(AcctDetail.TRX_DATE).moveFieldToThis(recAcctBatch.getField(AcctBatch.AUTO_REVERSAL_DATE));
        recAcctDetail.getField(AcctDetail.TRX_TYPE_ID).setValue(iTypeManual);
        if (recAcctBatch.getField(AcctBatch.RECURRING).getState())
            recAcctDetail.getField(AcctDetail.TRX_TYPE_ID).setValue(iTypeRecurring);
        if (recAcctBatchDetail.getField(AcctBatchDetail.AUTO_ACCRUAL).getState())
            recAcctDetail.getField(AcctDetail.TRX_TYPE_ID).setValue(iTypeAccrual);
        if (recAcctBatchDetail.getField(AcctBatchDetail.AUTO_REVERSAL).getState())
            recAcctDetail.getField(AcctDetail.TRX_TYPE_ID).setValue(iTypeReversal);
        if (recAcctBatch.getField(AcctBatch.AUTO_CLOSING).getState() == true)
            recAcctDetail.getField(AcctDetail.TRX_TYPE_ID).setValue(iTypeClosing);
        recAcctDetail.getField(AcctDetail.TRX_ENTRY).moveFieldToThis(recAcctBatch.getField(AcctBatch.TRX_ENTRY));
        recAcctDetail.getField(AcctDetail.AMOUNT_LOCAL).moveFieldToThis(recAcctBatchDetail.getField(AcctBatchDetail.AMOUNT));
        recAcctDetail.getField(AcctDetail.SOURCE).moveFieldToThis(recAcctBatch.getField(AcctBatch.SOURCE));
        recAcctDetail.getField(AcctDetail.COMMENTS).moveFieldToThis(recAcctBatch.getField(AcctBatch.COMMENTS));

        boolean bSuccess = recAcctDetail.onPostTrx();
        if (!bSuccess)
            return bSuccess;
        BaseField fldCrAccountID = recAcctDetail.getField(AcctDetail.ACCOUNT_ID);
        bSuccess = recAcctDetail.onPostManualDist(recAcctDetailDist);
        if (!bSuccess)
            return bSuccess;
        if (recAcctDetailDist.getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID).getValue() == 0)
        {   // First transaction in a group... group = this trx number
            Object objectID = recAcctDetailDist.getLastModified(DBConstants.DATA_SOURCE_HANDLE);
            recAcctDetailDist.setHandle(objectID, DBConstants.DATA_SOURCE_HANDLE);
            recAcctDetailDist.edit();
            recAcctDetailDist.getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID).moveFieldToThis(recAcctDetailDist.getField(AcctDetailDist.ID));
            recAcctDetailDist.set();
        }
    }
    recAcctDetailDist.endDistTrx();
} catch (DBException ex)    {
    ex.printStackTrace();
    //+recAcctDetail.getDatabase().rollback();
    return false;
}
// Step 3 - Delete the batch (if not recurring)
if (recAcctBatch.getField(AcctBatch.RECURRING).getState() == false)
{
    recAcctBatchDetail.close();
    try   {
        while (recAcctBatchDetail.hasNext())
        {
            recAcctBatchDetail.next();
            recAcctBatchDetail.edit();
            recAcctBatchDetail.remove();
        }
        recAcctBatch.remove();
        recAcctBatch.addNew();
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
}
else
{
    this.getMainRecord().getField(AcctBatch.TRX_DATE).setData(null);
    this.getMainRecord().getField(AcctBatch.AUTO_REVERSAL_DATE).setData(null);
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="55">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchPost</MethodClassName>
		<LogicSource><![CDATA[super;
new AcctBatchDetail(this);
new AcctDetail(this);
new AcctDetailDist(this);
new TransactionType(this);
new Period(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="56">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchPost</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="57">
		<LastChanged>2012-01-31T12:07:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(AcctBatchScreenRecord.USER_ID).moveFieldToThis(this.getMainRecord().getField(AcctBatch.USER_ID));
this.getScreenRecord().getField(AcctBatchScreenRecord.RECURRING).moveFieldToThis(this.getMainRecord().getField(AcctBatch.RECURRING));

this.getMainRecord().getField(AcctBatch.RECURRING).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(AcctBatch.TRX_DATE), BooleanField.YES, true));
FieldListener listener = new CopyStringHandler(this.getMainRecord().getField(AcctBatch.TRX_DATE), DBConstants.BLANK, this.getMainRecord().getField(AcctBatch.RECURRING));
listener.setRespondsToMode(DBConstants.INIT_MOVE, true);
this.getMainRecord().getField(AcctBatch.TRX_DATE).addListener(listener);

this.getMainRecord().setKeyArea(AcctBatch.USER_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(AcctBatchScreenRecord.USER_ID), AcctBatch.USER_ID, this.getScreenRecord().getField(AcctBatchScreenRecord.RECURRING), AcctBatch.RECURRING, null, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="58">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchScreen</MethodClassName>
		<LogicSource>return new AcctBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="59">
		<LastChanged>2012-01-31T05:32:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, AcctBatch.AUTOCLOSING, "Go", AcctBatch.AUTOCLOSING, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="60">
		<LastChanged>2012-01-31T05:32:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, AcctBatch.ACCT_BATCH_DETAIL_SCREEN, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(MenuConstants.POST))
	return (this.onForm(null, AcctBatch.ACCT_BATCH_POST, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(AcctBatch.AUTOCLOSING))
{
	AcctBatch recAcctBatch = (AcctBatch)this.getMainRecord();
	return recAcctBatch.onAutoClosing();
}
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="61">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchScreen</MethodClassName>
		<LogicSource>return new AcctBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="62">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="63">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>AcctBatchSetRecurringBeh</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Record recAcctBatch</MethodInterface>
		<MethodClassName>AcctBatchSetRecurringBeh</MethodClassName>
		<LogicSource>m_recAcctBatch = recAcctBatch;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="64">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription>If the field changed, check for recurring.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchSetRecurringBeh</MethodClassName>
		<LogicSource><![CDATA[BaseField fldAccrual = m_recAcctBatch.getField(AcctBatch.AUTO_REVERSAL);
DateField fldAccrualDate = (DateField)m_recAcctBatch.getField(AcctBatch.AUTO_REVERSAL_DATE);
DateField fldTrxDate = (DateField)m_recAcctBatch.getField(AcctBatch.TRX_DATE);
if (fldAccrual.getState() == false)
{
	fldAccrualDate.setString(Constants.BLANK);
	fldAccrualDate.setEnabled(false);
}
else
{
	fldAccrualDate.setEnabled(true);
	if (!fldTrxDate.isNull())
	{
		if (m_recPeriod == null)
		{
			m_recPeriod = new Period(this.getOwner().getRecord().findRecordOwner());
			if (m_recPeriod.getRecordOwner() != null)
				m_recPeriod.getRecordOwner().removeRecord(m_recPeriod);
		}
		Date date = fldTrxDate.getDateTime();
		date = m_recPeriod.getPeriodEndDate(date);
		fldAccrualDate.setDate(date, DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
		Calendar calendar = fldAccrualDate.getCalendar();
		calendar.add(Calendar.DATE, 1);
		fldAccrualDate.setCalendar(calendar, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);	// Start of next period
	}
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="65">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription>Remember to close the period.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchSetRecurringBeh</MethodClassName>
		<LogicSource><![CDATA[if (m_recPeriod != null)
	m_recPeriod.close();
m_recPeriod = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="66">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchValidateBeh</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
if ((iChangeType == DBConstants.ADD_TYPE) || (iChangeType == DBConstants.UPDATE_TYPE))
{
    Task task = null;
    if (this.getOwner().getRecordOwner() != null)
        task = this.getOwner().getRecordOwner().getTask();
    if (task == null)
        task = BaseApplet.getSharedInstance();
    if (this.getOwner().getField(AcctBatchDetail.ACCOUNT_ID).isNull())
    {
        String strError = "You must enter an Account number";
        strError = ((BaseApplication)task.getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strError);
        return task.setLastError(strError);
    }
    if (this.getOwner().getField(AcctBatchDetail.ACCOUNT_ID).isNull())
    {
        String strError = "You must enter a non-zero amount";
        strError = ((BaseApplication)task.getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strError);
        return task.setLastError(strError);
    }
}
if (iChangeType == DBConstants.AFTER_ADD_TYPE)
{
    Record recAccount = ((ReferenceField)this.getOwner().getField(AcctBatchDetail.ACCOUNT_ID)).getReference();
    if ((recAccount == null) || (recAccount.getEditMode() != Constants.EDIT_CURRENT))
        return iErrorCode;
    if (recAccount.getField(Account.COUNTER_ACCOUNT_ID).getState())
    {
        return ((AcctBatchDetail)this.getOwner()).onCounterBalance(recAccount);
    }
    else if (!recAccount.getField(Account.AUTO_DIST_ID).isNull())
    {
        return ((AcctBatchDetail)this.getOwner()).onAutoDist(recAccount);
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="67">
		<LastChanged>2012-03-26T09:27:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetail</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == AcctDetail.ACCT_DIST_GRID_SCREEN)
    screen = Record.makeNewScreen(ACCT_DETAIL_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(ACCT_DETAIL_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(ACCT_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="69">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>updateAcctDetail</MethodName>
		<LogicDescription>Update or Write the account detail for this trx</LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseField accountID, Date dateTrx, TransactionType recTrxType, Date dateTrxEntry, double amount</MethodInterface>
		<MethodClassName>AcctDetail</MethodClassName>
		<LogicSource><![CDATA[int iOpenMode = this.getOpenMode();
try   {
    this.setKeyArea(AcctDetail.ACCOUNT_ID_KEY);
    this.getField(AcctDetail.ACCOUNT_ID).moveFieldToThis(accountID);
    ((DateTimeField)this.getField(AcctDetail.TRX_DATE)).setDateTime(dateTrx, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
    this.getField(AcctDetail.TRX_TYPE_ID).moveFieldToThis(recTrxType.getField(TransactionType.ID));
    ((DateTimeField)this.getField(AcctDetail.TRX_ENTRY)).setDateTime(dateTrxEntry, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);

    boolean bSuccess = this.seek("=");
    this.setOpenMode(iOpenMode & ~DBConstants.OPEN_READ_ONLY);  //Often this record comes from a display which is read only
    if (!bSuccess)
    {
        this.addNew();
        this.getField(AcctDetail.ACCOUNT_ID).moveFieldToThis(accountID);
        ((DateField)this.getField(AcctDetail.TRX_DATE)).setDateTime(dateTrx, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
        ((DateField)this.getField(AcctDetail.TRX_ENTRY)).setDateTime(dateTrxEntry, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
        this.getField(AcctDetail.TRX_TYPE_ID).moveFieldToThis(recTrxType.getField(TransactionType.ID));
        this.getField(AcctDetail.AMOUNT_LOCAL).setValue(amount);
        this.getField(AcctDetail.SOURCE).moveFieldToThis(recTrxType.getField(TransactionType.SYSTEM_CODE));
        if (this.getField(AcctDetail.SOURCE).isNull())
            this.getField(AcctDetail.SOURCE).moveFieldToThis(recTrxType.getField(TransactionType.SYSTEM_DESC));
        this.getField(AcctDetail.COMMENTS).moveFieldToThis(recTrxType.getField(TransactionType.GROUP_DESC));
        this.add();
        Object bookmark = this.getLastModified(DBConstants.BOOKMARK_HANDLE);
        this.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
    }
    else
    {
        this.edit();
    // Add code to re-try if locked+++
        double dNewAmount = this.getField(AcctDetail.AMOUNT_LOCAL).getValue();
        dNewAmount = dNewAmount + amount;
        this.getField(AcctDetail.AMOUNT_LOCAL).setValue(dNewAmount);
        this.set();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    this.setOpenMode(iOpenMode);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="70">
		<LastChanged>2012-07-19T14:26:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>AcctDetailCalcEndBal</MethodName>
		<LogicDescription/>
		<MethodReturns>null, AcctDetailScreenRecord.END_BALANCE, null</MethodReturns>
		<MethodInterface>Record recAcctDetailScreenRecord</MethodInterface>
		<MethodClassName>AcctDetailCalcEndBal</MethodClassName>
		<LogicSource>m_recAcctDetailScreenRecord = recAcctDetailScreenRecord;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="71">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>computeValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailCalcEndBal</MethodClassName>
		<LogicSource><![CDATA[double dEndValue = m_recAcctDetailScreenRecord.getField(AcctDetailScreenRecord.START_BALANCE).getValue();
dEndValue += m_recAcctDetailScreenRecord.getField(AcctDetailScreenRecord.CHANGE_BALANCE).getValue();
return dEndValue;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="72">
		<LastChanged>2011-09-09T12:21:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>AcctDetailCalcStartBal</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Record recAccount, Record recAcctDetailScreenRecord</MethodInterface>
		<MethodClassName>AcctDetailCalcStartBal</MethodClassName>
		<LogicSource><![CDATA[m_recAccount = recAccount;
m_recAcctDetailScreenRecord = recAcctDetailScreenRecord;
super;
if (m_recAcctDetailScreenRecord != null)
	m_recAcctDetailScreenRecord.addListener(new FileRemoveBOnCloseHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="73">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailCalcStartBal</MethodClassName>
		<LogicSource><![CDATA[int errorCode = super; // Initialize the record
if (errorCode != DBConstants.NORMAL_RETURN)
    return errorCode;
if (iChangeType == DBConstants.AFTER_REQUERY_TYPE)
{
	if (m_recAcctDetailScreenRecord.getField(AcctDetailScreenRecord.CALC_START).getState())
    {
        if (m_recAcctDetail == null)
        {
            m_recAcctDetail = new AcctDetail(this.getOwner().findRecordOwner());
            if (m_recAcctDetail.getRecordOwner() != null)
                m_recAcctDetail.getRecordOwner().removeRecord(m_recAcctDetail);
            m_recAcctDetail.addListener(new SubFileFilter(m_recAccount));

            m_recAcctDetail.addListener(new CompareFileFilter(AcctDetail.TRX_DATE, m_recAcctDetailScreenRecord.getField(AcctDetailScreenRecord.START_DATE), "<", null, false));
            m_recAcctDetail.addListener(new SubCountHandler(m_recAcctDetailScreenRecord.getField(AcctDetailScreenRecord.START_BALANCE), AcctDetail.AMOUNT_LOCAL, false, true));   // Init this field override for other value
        }
        m_recAcctDetailScreenRecord.getField(AcctDetailScreenRecord.START_BALANCE).initField(DBConstants.DISPLAY);
        m_recAcctDetail.close();
        try   {
            while (m_recAcctDetail.hasNext())
            {   // Go through and count
                m_recAcctDetail.next();
            }
        } catch (DBException ex)    {
            ex.printStackTrace();
        }
    }
}
return errorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="74">
		<LastChanged>2011-09-09T12:22:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailCalcStartBal</MethodClassName>
		<LogicSource><![CDATA[m_recAcctDetail = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="75">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDist</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID).addListener(new InitOnceFieldHandler(null));
this.addListener(new NoDeleteModifyHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="76">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,005</Sequence>
		<MethodName>addDetailTrx</MethodName>
		<LogicDescription>Add the detail transaction (and post to AcctDetail)</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseField accountID, DateTimeField trxDate, BaseField fldTrxID, TransactionType recTrxType, DateTimeField trxEntryDate, double dAmount, int iUserID, AcctDetail recAcctDetail, Period recPeriod</MethodInterface>
		<MethodClassName>AcctDetailDist</MethodClassName>
		<LogicSource><![CDATA[// First, get the correct period for this posting
if (dAmount == 0)
    return true;
boolean bFreePeriod = false;
if (recPeriod == null)
{
    recPeriod = new Period(this.findRecordOwner());
    bFreePeriod = true;
}
boolean bFreeAcctDetail = false;
if (recAcctDetail == null)
{
    recAcctDetail = new AcctDetail(this.findRecordOwner());
    bFreeAcctDetail = true;
}
Date dateTrx = null;
if ((trxDate != null) && (trxDate.getValue() != 0))
    dateTrx = trxDate.getDateTime();
else
    dateTrx = new Date(); // Today (default)
Date dateTrxPost = recPeriod.getPeriodEndDate(dateTrx);

Date dateEntry = null;
if ((trxEntryDate != null) && (trxEntryDate.getValue() != 0))
    dateEntry = trxEntryDate.getDateTime();
else
    dateEntry = new Date();
Date dateTrxEntry = recPeriod.getPeriodEndDate(dateEntry);

// Okay, first post the transaction to the AcctDetail
recAcctDetail.updateAcctDetail(accountID, dateTrxPost, recTrxType, dateTrxEntry, dAmount);

// Now, add the transaction detail (the audit-trail)
try   {
    this.addNew();

    this.getField(AcctDetailDist.ACCT_DETAIL_ID).moveFieldToThis(recAcctDetail.getField(AcctDetail.ID));
    if (fldTrxID != null)
        this.getField(AcctDetailDist.TRX_ID).moveFieldToThis(fldTrxID);
    this.getField(AcctDetailDist.TRX_DESC_ID).moveFieldToThis(recTrxType.getField(TransactionType.SOURCE_TRX_DESC_ID));
    this.getField(AcctDetailDist.TRX_TYPE_ID).moveFieldToThis(recTrxType.getField(TransactionType.ID));

    ((DateTimeField)this.getField(AcctDetailDist.TRX_DATE)).setDateTime(dateTrx, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);

    this.getField(AcctDetailDist.AMOUNT).setValue(dAmount);
    ((DateTimeField)this.getField(AcctDetailDist.TRX_ENTRY)).setDateTime(dateEntry, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
    this.getField(AcctDetailDist.USER_ID).setValue(iUserID);
    if (this.getField(AcctDetailDist.USER_ID).getValue() <= 0)
        this.getField(AcctDetailDist.USER_ID).initField(DBConstants.DISPLAY);
    if (this.getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID).isNull())
        this.getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID).setValue(0);    // Can't be null (key)
    this.add();

    if (this.getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID).getValue() == 0)
    {   // First transaction in a group... group = this trx number
        Object objectID = this.getLastModified(DBConstants.DATA_SOURCE_HANDLE);
        this.setHandle(objectID, DBConstants.DATA_SOURCE_HANDLE);
        this.edit();
        this.getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID).moveFieldToThis(this.getField(AcctDetailDist.ID));
        this.set();
    }

} catch (DBException ex)    {
    ex.printStackTrace();
    //+ rollback
}
if (bFreePeriod)
    recPeriod.free();
if (bFreeAcctDetail)
    recAcctDetail.free();
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="77">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,020</Sequence>
		<MethodName>endDistTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDist</MethodClassName>
		<LogicSource><![CDATA[this.getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID).setValue(0);
//+ this.commitTrx();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="78">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,010</Sequence>
		<MethodName>startDistTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDist</MethodClassName>
		<LogicSource><![CDATA[this.getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID).setValue(0);
//+ this.startTrx();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="79">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseTrxDistGridScreen*2</MethodName>
		<LogicDescription>Constructor - passing BaseTrx</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BaseTrxDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="80">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrxDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().getField(AcctDetailDist.ACCT_DETAIL_ID).addListener(new ReadSecondaryHandler(this.getRecord(AcctDetail.ACCT_DETAIL_FILE)));

this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="81">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrxDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[return super;	// Override this to display the header info]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="82">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrxDistGridScreen</MethodClassName>
		<LogicSource>return new AcctDetailDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="83">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrxDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new AcctDetail(this);
// Remember to add to code in your override to check the m_recBaseTrx]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="84">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrxDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="85">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>AcctDetailGridScreen*2</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recAccount, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AcctDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="86">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new ExtractRangeFilter(AcctDetail.TRX_DATE, this.getScreenRecord().getField(AcctDetailScreenRecord.START_DATE), this.getScreenRecord().getField(AcctDetailScreenRecord.END_DATE), ExtractRangeFilter.PAD_DEFAULT));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(AcctDetailScreenRecord.CHANGE_BALANCE), AcctDetail.AMOUNT_LOCAL, true, true));    // Init this field override for other value

this.getHeaderRecord().getField(Account.ID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(AcctDetailScreenRecord.START_DATE).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(AcctDetailScreenRecord.END_DATE).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(AcctDetailScreenRecord.CALC_START).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new AcctDetailCalcStartBal(this.getRecord(Account.ACCOUNT_FILE), this.getScreenRecord()));
this.getScreenRecord().getField(AcctDetailScreenRecord.START_BALANCE).addListener(new AcctDetailCalcEndBal(this.getScreenRecord()));
this.getScreenRecord().getField(AcctDetailScreenRecord.CHANGE_BALANCE).addListener(new AcctDetailCalcEndBal(this.getScreenRecord()));

this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="87">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="88">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailGridScreen</MethodClassName>
		<LogicSource>return new AcctDetailScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="89">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="90">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, AcctDetail.ACCT_DIST_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="92">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailGridScreen</MethodClassName>
		<LogicSource>return new AccountHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="93">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailGridScreen</MethodClassName>
		<LogicSource>return new AcctDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="94">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailGridScreen</MethodClassName>
		<LogicSource>return new Account(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="95">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="96">
		<LastChanged>2012-01-31T12:03:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(AcctDetailScreenRecord.ACCOUNT_ID).setEnabled(true);
this.getRecord(Account.ACCOUNT_FILE).getField(Account.ACCOUNT_NO).setEnabled(true);   // Enable Key Field
this.getScreenRecord().getField(AcctDetailScreenRecord.START_DATE).addListener(new RegisterValueHandler(null));
this.getScreenRecord().getField(AcctDetailScreenRecord.END_DATE).addListener(new RegisterValueHandler(null));
this.getScreenRecord().getField(AcctDetailScreenRecord.CALC_START).addListener(new RegisterValueHandler(null));
if ((this.getScreenRecord().getField(AcctDetailScreenRecord.START_DATE).isNull()) ||
    (this.getScreenRecord().getField(AcctDetailScreenRecord.END_DATE).isNull()))
{   // If the starting and ending date haven't been set yet, set them to the current period start and end.
    Date date = new Date();     // Now
    Period recPeriod = new Period((RecordOwner)this.getParentScreen()); // Note: I Use READ_MOVE, because RegisterBehavior doesn't respond to it.
    if (this.getScreenRecord().getField(AcctDetailScreenRecord.START_DATE).isNull())
        ((DateTimeField)this.getScreenRecord().getField(AcctDetailScreenRecord.START_DATE)).setDate(recPeriod.getPeriodStartDate(date), DBConstants.DISPLAY, DBConstants.READ_MOVE);
    if (this.getScreenRecord().getField(AcctDetailScreenRecord.END_DATE).isNull())
        ((DateTimeField)this.getScreenRecord().getField(AcctDetailScreenRecord.END_DATE)).setDate(recPeriod.getPeriodEndDate(date), DBConstants.DISPLAY, DBConstants.READ_MOVE);
    recPeriod.free();
    recPeriod = null;
}
this.getScreenRecord().getField(AcctDetailScreenRecord.START_DATE).setEnabled(true);
this.getScreenRecord().getField(AcctDetailScreenRecord.END_DATE).setEnabled(true);
this.getScreenRecord().getField(AcctDetailScreenRecord.CALC_START).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="97">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="98">
		<LastChanged>2012-01-31T14:40:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailJournal</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(AcctDetail.TRX_DATE_KEY);

SubFileFilter listener = new SubFileFilter(this.getScreenRecord().getField(GenledScreenRecord.START_DATE), AcctDetail.TRX_DATE, null, null, null, null);
listener.setEndKey(false);
this.getMainRecord().addListener(listener);
listener = new SubFileFilter(this.getScreenRecord().getField(GenledScreenRecord.END_DATE), AcctDetail.TRX_DATE, null, null, null, null);
listener.setInitialKey(false);
this.getMainRecord().addListener(listener);
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(GenledScreenRecord.REPORT_COUNT), false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(GenledScreenRecord.REPORT_TOTAL), AcctDetail.AMOUNT_LOCAL, false, true));        

this.setProperty(LIMIT_PARAM, LIMIT_UNLIMITED);   // Unlimited detail records]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="99">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailJournal</MethodClassName>
		<LogicSource>return new GenledScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="100">
		<LastChanged>2012-01-23T09:38:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailJournal</MethodClassName>
		<LogicSource>return new AcctDetailJournalToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="101">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailJournal</MethodClassName>
		<LogicSource>return new AcctDetailJournalFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="102">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailJournal</MethodClassName>
		<LogicSource>return new AcctDetailJournalHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="103">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailJournal</MethodClassName>
		<LogicSource>return new AcctDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="105">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailJournal</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="106">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailJournalFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="107">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailJournalHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="108">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailJournalToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="109">
		<LastChanged>2012-01-31T14:52:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedger</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(Account.ACCOUNT_NO_KEY);

SubFileFilter listener = new SubFileFilter(((AccountField)this.getScreenRecord().getField(GenledScreenRecord.START_ACCOUNT_ID)).getReferenceRecord().getField(Account.ACCOUNT_NO), Account.ACCOUNT_NO, null, null, null, null);
listener.setEndKey(false);
this.getMainRecord().addListener(listener);
listener = new SubFileFilter(((AccountField)this.getScreenRecord().getField(GenledScreenRecord.END_ACCOUNT_ID)).getReferenceRecord().getField(Account.ACCOUNT_NO), Account.ACCOUNT_NO, null, null, null, null);
listener.setInitialKey(false);
this.getMainRecord().addListener(listener);

this.getRecord(AcctDetail.ACCT_DETAIL_FILE).addListener(new SubFileFilter(this.getRecord(Account.ACCOUNT_FILE)));

listener = new SubFileFilter(this.getScreenRecord().getField(GenledScreenRecord.START_DATE), AcctDetail.TRX_DATE, null, null, null, null);
listener.setEndKey(false);
this.getRecord(AcctDetail.ACCT_DETAIL_FILE).addListener(listener);

listener = new SubFileFilter(this.getScreenRecord().getField(GenledScreenRecord.END_DATE), AcctDetail.TRX_DATE, null, null, null, null);
listener.setInitialKey(false);
this.getRecord(AcctDetail.ACCT_DETAIL_FILE).addListener(listener);

CalcAcctBalHandler calcListener = null;
this.getMainRecord().addListener(calcListener = new CalcAcctBalHandler(this.getScreenRecord().getField(GenledScreenRecord.START_BALANCE), null, this.getScreenRecord().getField(GenledScreenRecord.START_DATE), false, this.getScreenRecord().getField(GenledScreenRecord.REPORT_TOTAL)));
// Profit Center filter
this.getMainRecord().addListener(new ProfitCenterFilter(Account.ACCOUNT_NO, this.getScreenRecord().getField(GenledScreenRecord.PROFIT_CENTER_ID)));
// Start and end entry date filters
this.getRecord(AcctDetail.ACCT_DETAIL_FILE).addListener(new CompareFileFilter(this.getRecord(AcctDetail.ACCT_DETAIL_FILE).getField(AcctDetail.TRX_ENTRY), this.getScreenRecord().getField(GenledScreenRecord.START_ENTRY), FileFilter.GREATER_THAN_EQUAL));
calcListener.getAcctDetail().addListener(new CompareFileFilter(this.getRecord(AcctDetail.ACCT_DETAIL_FILE).getField(AcctDetail.TRX_ENTRY), this.getScreenRecord().getField(GenledScreenRecord.START_ENTRY), FileFilter.GREATER_THAN_EQUAL));
this.getRecord(AcctDetail.ACCT_DETAIL_FILE).addListener(new CompareFileFilter(this.getRecord(AcctDetail.ACCT_DETAIL_FILE).getField(AcctDetail.TRX_ENTRY), this.getScreenRecord().getField(GenledScreenRecord.END_ENTRY), FileFilter.LESS_THAN_EQUAL));
calcListener.getAcctDetail().addListener(new CompareFileFilter(this.getRecord(AcctDetail.ACCT_DETAIL_FILE).getField(AcctDetail.TRX_ENTRY), this.getScreenRecord().getField(GenledScreenRecord.END_ENTRY), FileFilter.LESS_THAN_EQUAL));

this.getRecord(AcctDetail.ACCT_DETAIL_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(GenledScreenRecord.CHANGE_BALANCE), AcctDetail.AMOUNT_LOCAL, false, true));    // Init this field override for other value
this.getRecord(AcctDetail.ACCT_DETAIL_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(GenledScreenRecord.REPORT_TOTAL), AcctDetail.AMOUNT_LOCAL, false, false));    // Add changes to the report total
this.getScreenRecord().getField(GenledScreenRecord.END_BALANCE).addListener(new FieldListener(null)
{    // For the ending balance, return the start + change.
    public Object doGetData()
    {
        double dStartBalance = this.getOwner().getRecord().getField(GenledScreenRecord.START_BALANCE).getValue();
        double dChangeBalance = this.getOwner().getRecord().getField(GenledScreenRecord.CHANGE_BALANCE).getValue();
        this.getOwner().setValue(dStartBalance + dChangeBalance);
        return super.doGetData();
    }
});
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(GenledScreenRecord.REPORT_COUNT), false, true));

this.getRecord(AcctDetail.ACCT_DETAIL_FILE).addListener(new ExtractRangeFilter(AcctDetail.TRX_ENTRY, this.getScreenRecord().getField(GenledScreenRecord.START_ENTRY), this.getScreenRecord().getField(GenledScreenRecord.END_ENTRY), ExtractRangeFilter.PAD_END_FIELD));

this.setProperty(LIMIT_PARAM, LIMIT_UNLIMITED);   // Unlimited detail records]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="110">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedger</MethodClassName>
		<LogicSource>return new GenledScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="111">
		<LastChanged>2012-01-23T09:38:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedger</MethodClassName>
		<LogicSource>return new AcctDetailLedgerToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="112">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedger</MethodClassName>
		<LogicSource>return new AcctDetailLedgerDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="113">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedger</MethodClassName>
		<LogicSource>return new AcctDetailLedgerFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="114">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedger</MethodClassName>
		<LogicSource>return new AcctDetailLedgerHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="115">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedger</MethodClassName>
		<LogicSource>return new Account(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="116">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedger</MethodClassName>
		<LogicSource><![CDATA[super;
new AcctDetail(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="117">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedger</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="118">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedgerDetail</MethodClassName>
		<LogicSource>return new AcctDetailLedgerDetailEnd(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="119">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedgerDetail</MethodClassName>
		<LogicSource>return new AcctDetailLedgerDetailStart(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="120">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedgerDetail</MethodClassName>
		<LogicSource>return this.getRecord(AcctDetail.ACCT_DETAIL_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="121">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedgerDetail</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="122">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedgerDetailEnd</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="123">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedgerDetailStart</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="124">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedgerFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="125">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedgerHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="126">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedgerToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="127">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="128">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="129">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, AcctDetail.ACCT_DIST_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="130">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailScreen</MethodClassName>
		<LogicSource>return new AcctDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="131">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="132">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>AcctDetailDistGridScreen*2</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AcctDetailDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="133">
		<LastChanged>2012-06-15T11:56:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));
this.getHeaderRecord().getField(AcctDetail.ID).addListener(new FieldReSelectHandler(this));
this.setEditing(false);
this.setAppending(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="134">
		<LastChanged>2012-03-27T01:35:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strGroup = AcctDetailDist.DIST_GROUP;
if (this.getTask() != null)
    strGroup = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strGroup);
BaseField.createScreenComponent(TransactionType.TRX_ID_SFIELD_CLASS, this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, this.getMainRecord().getField(AcctDetailDist.TRX_ID), ScreenConstants.DEFAULT_DISPLAY, null);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, AcctDetailDist.DIST_GROUP, AcctDetailDist.DIST_GROUP, strGroup);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="135">
		<LastChanged>2012-03-27T01:35:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>45</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strGroup = AcctDetailDist.DIST_GROUP;
if (this.getTask() != null)
    strGroup = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strGroup);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strGroup, AcctDetailDist.DIST_GROUP, AcctDetailDist.DIST_GROUP, null);
BaseField.createScreenComponent(TransactionType.TRX_ID_SFIELD_CLASS, toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, this.getMainRecord().getField(AcctDetailDist.TRX_ID), ScreenConstants.DEFAULT_DISPLAY, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="136">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(this.getHeaderRecord(), AcctDetail.ACCT_DIST_GRID_SCREEN, true, iCommandOptions, null) != null);
else if(strCommand.equalsIgnoreCase(AcctDetailDist.DIST_GROUP))
    return (this.onForm(this.getMainRecord(), AcctDetailDist.DIST_GROUP_SCREEN, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="138">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGridScreen</MethodClassName>
		<LogicSource>return new AcctDetailHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="139">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGridScreen</MethodClassName>
		<LogicSource>return new AcctDetailDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="140">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGridScreen</MethodClassName>
		<LogicSource>return new AcctDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="141">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="142">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="143">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(AcctDetailDist.ACCT_DETAIL_ID).addListener(new ReadSecondaryHandler(this.getRecord(AcctDetail.ACCT_DETAIL_FILE)));
this.setEditing(false);
this.getRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE).getField(AcctDetailDist.ACCT_DETAIL_ID).setEnabled(true);
this.getRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE).getField(AcctDetailDist.TRX_ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="144">
		<LastChanged>2012-03-27T01:30:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistScreen</MethodClassName>
		<LogicSource><![CDATA[String strGroup = AcctDetailDist.DIST_GROUP;
if (this.getTask() != null)
    strGroup = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strGroup);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strGroup, AcctDetailDist.DIST_GROUP, AcctDetailDist.DIST_GROUP, null);
BaseField.createScreenComponent(TransactionType.TRX_ID_SFIELD_CLASS, toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, this.getMainRecord().getField(AcctDetailDist.TRX_ID), ScreenConstants.DEFAULT_DISPLAY, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="145">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(this.getRecord(AcctDetail.ACCT_DETAIL_FILE), AcctDetail.ACCT_DIST_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="146">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistScreen</MethodClassName>
		<LogicSource>return new AcctDetailDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="147">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new AcctDetail(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="148">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="149">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>AcctPostCheckHandler</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Record recAcctBatch</MethodInterface>
		<MethodClassName>AcctPostCheckHandler</MethodClassName>
		<LogicSource>m_recAcctBatch = recAcctBatch;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="150">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctPostCheckHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
	return iErrorCode;
if ((iChangeType == DBConstants.MOVE_NEXT_TYPE) || (iChangeType == DBConstants.ADD_TYPE) || (iChangeType == DBConstants.UPDATE_TYPE))
{
	if (this.getOwner().getField(AcctBatchDetail.AUTO_REVERSAL).getState() == true)
		m_recAcctBatch.getField(AcctBatch.AUTO_REVERSAL).setState(true);
}
return iErrorCode;
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="154">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addComponent</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AddPaPaxConverter</MethodClassName>
		<LogicSource><![CDATA[super;
m_screenParent = (BasePanel)((ScreenField)sField).getParentScreen();	// This screen]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="155">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription>User clicked to button to add the booking passengers to the profile.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AddPaPaxConverter</MethodClassName>
		<LogicSource><![CDATA[BookingPax recBookingPax = (BookingPax)m_screenParent.getRecord(BookingPax.BOOKING_PAX_FILE);
Profile recProfile = (Profile)m_screenParent.getRecord(Profile.PROFILE_FILE);
Profile recProfileDetail = (Profile)((ReferenceField)recBookingPax.getField(BookingPax.PROFILE_ID)).getReferenceRecord();
recBookingPax.addPaxDetail(recBookingPax, recProfileDetail);
//  Now create the maint screen for this new record
if (recProfileDetail.getEditMode() == DBConstants.EDIT_CURRENT)
{
    BasePanel parentScreen = Screen.makeWindow(m_screenParent.getTask().getApplication());
    ScreenParent screen = recProfileDetail.makeScreen(null, parentScreen, ScreenConstants.MAINT_MODE, true, true, true, true, null);
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="161">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AddressTypeField</MethodClassName>
		<LogicSource>return new AddressType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="162">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AddressTypeField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="163">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AffiliationField</MethodClassName>
		<LogicSource>return new Affiliation(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="164">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AffiliationField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Affiliation.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="165">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AffiliationGridScreen</MethodClassName>
		<LogicSource>return new Affiliation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="166">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AffiliationGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="167">
		<LastChanged>2012-01-31T10:43:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AffiliationScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(Affiliation.DESCRIPTION_KEY);
this.addMainKeyBehavior();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="168">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AffiliationScreen</MethodClassName>
		<LogicSource>return new Affiliation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="169">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AffiliationScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="170">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setString</MethodName>
		<LogicDescription>Make sure Short name is the same</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>char fieldPtr, int dataLength, Boolean bDisplayOption</MethodInterface>
		<MethodClassName>AgencyName</MethodClassName>
		<LogicSource><![CDATA[int validateResult = super.setString(fieldPtr, dataLength, bDisplayOption);
if (validateResult == DBConstants.NORMAL_RETURN)
{
	BaseField shortField = (this.getRecord()) . getField(kShortName);
	shortField.setString(fieldPtr, dataLength, bDisplayOption);
}
return validateResult;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="171">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>movetoField</MethodName>
		<LogicDescription>Validate the Agency Number</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>char fieldPtr, int dataLength, Boolean bDisplayOption</MethodInterface>
		<MethodClassName>AgencyNumber</MethodClassName>
		<LogicSource><![CDATA[int validateResult;
Record thisRecord = this.getRecord();
int recordModified = thisRecord.recordModified();
validateResult = super.setString(fieldPtr, dataLength, bDisplayOption);
if (validateResult == DBConstants.NORMAL_RETURN)
	CheckKeyField(kNumberKey, recordModified);
return validateResult;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="172">
		<LastChanged>2012-03-28T16:33:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirlineField</MethodClassName>
		<LogicSource>return Record.makeRecordFromClassName(AirlineModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="173">
		<LastChanged>2012-03-28T16:34:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirlineField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), AirlineModel.AIRLINE_CODE_KEY, AirlineModel.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="174">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirlineGridScreen</MethodClassName>
		<LogicSource>return new Airline(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="175">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirlineGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="176">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirlineScreen</MethodClassName>
		<LogicSource>return new Airline(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="194">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="195">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="198">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffReport</MethodClassName>
		<LogicSource><![CDATA[super;
Record recApTrx = this.getMainRecord();
recApTrx.addListener(new ApTrxBaseFilter(ApTrx.TRX_STATUS_ID)
{
    public boolean checkTrxStatus(TrxStatus recTrxStatus)
    {
        if ((recTrxStatus.getField(TrxStatus.STATUS_CODE).toString().indexOf(ApTrx.DEP_ESTIMATE.substring(0, 6)) != -1)
            || (recTrxStatus.getField(TrxStatus.STATUS_CODE).toString().indexOf(ApTrx.INVOICE) != -1)
            || (recTrxStatus.getField(TrxStatus.STATUS_CODE).toString().indexOf(ApTrx.CREDIT_MEMO) != -1))
                return true;    // Include this
        return false; // Don't include this.
    }
});

Record recCurrencys = ((ReferenceField)this.getScreenRecord().getField(ApCutoffScreenRecord.CURRENCYS_ID)).getReferenceRecord(null);
this.getRecord(Currencys.CURRENCYS_FILE).addListener(new CompareFileFilter(Currencys.ID, recCurrencys.getField(Currencys.ID), "=", null, true));

Record recPaymentHistory = this.getRecord(PaymentHistory.PAYMENT_HISTORY_FILE);
recPaymentHistory.addListener(new SubFileFilter(recApTrx));
recPaymentHistory.addListener(new CompareFileFilter(PaymentHistory.TRX_DATE, this.getScreenRecord().getField(ApCutoffScreenRecord.CUTOFF_DATE), "<=", null, true));

this.getMainRecord().setOpenMode(this.getMainRecord().getOpenMode() | DBConstants.OPEN_READ_ONLY);
recPaymentHistory.addListener(new SubCountHandler(this.getMainRecord().getField(ApTrx.INVOICE_BALANCE), PaymentHistory.AMOUNT_APPLIED, true, true));
recPaymentHistory.addListener(new SubCountHandler(this.getMainRecord().getField(ApTrx.INVOICE_BALANCE_LOCAL), PaymentHistory.AMOUNT_LOCAL, true, true));

SubCountHandler listener = null;
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.VEN_EST_TOTAL), ApTrx.DEPARTURE_ESTIMATE, true, true, true));
listener.setBreakField(this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.VEN_EST_USD_TOTAL), ApTrx.DEPARTURE_ESTIMATE_LOCAL, true, true, true));
listener.setBreakField(this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.VEN_INV_TOTAL), ApTrx.INVOICE_AMOUNT, true, true, true));
listener.setBreakField(this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.VEN_INV_USD_TOTAL), ApTrx.INVOICE_LOCAL, true, true, true));
listener.setBreakField(this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.VEN_INV_BAL_TOTAL), ApTrx.INVOICE_BALANCE, true, true, true));
listener.setBreakField(this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.VEN_INV_BAL_USD_TOTAL), ApTrx.INVOICE_BALANCE_LOCAL, true, true, true));
listener.setBreakField(this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID));

this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.CURR_EST_TOTAL), ApTrx.DEPARTURE_ESTIMATE, true, true, true));
listener.setBreakField(this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.CURR_EST_USD_TOTAL), ApTrx.DEPARTURE_ESTIMATE_LOCAL, true, true, true));
listener.setBreakField(this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.CURR_INVOICE_TOTAL), ApTrx.INVOICE_AMOUNT, true, true, true));
listener.setBreakField(this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.CURR_INVOICE_USD_TOTAL), ApTrx.INVOICE_LOCAL, true, true, true));
listener.setBreakField(this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.CURR_INV_BAL_TOTAL), ApTrx.INVOICE_BALANCE, true, true, true));
listener.setBreakField(this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.CURR_INV_BAL_USD_TOTAL), ApTrx.INVOICE_BALANCE_LOCAL, true, true, true));
listener.setBreakField(this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.EST_USD_TOTAL), ApTrx.DEPARTURE_ESTIMATE_LOCAL, true, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.INV_USD_TOTAL), ApTrx.INVOICE_LOCAL, true, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(ApCutoffScreenRecord.INV_BAL_USD_TOTAL), ApTrx.INVOICE_BALANCE_LOCAL, true, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="199">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffReport</MethodClassName>
		<LogicSource>return new ApCutoffScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="200">
		<LastChanged>2012-01-23T09:38:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffReport</MethodClassName>
		<LogicSource>return new ApCutoffToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="201">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffReport</MethodClassName>
		<LogicSource>return new ApCutoffFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="202">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffReport</MethodClassName>
		<LogicSource>return new ApCutoffHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="204">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffReport</MethodClassName>
		<LogicSource><![CDATA[super;
new PaymentHistory(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="205">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="206">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="207">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournal</MethodClassName>
		<LogicSource><![CDATA[super;

this.getRecord(Vendor.VENDOR_FILE).setKeyArea(Vendor.CURRENCYS_ID_KEY);
this.getRecord(Vendor.VENDOR_FILE).addListener(new CompareFileFilter(this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID), this.getScreenRecord().getField(ApReportScreenRecord.VENDOR_ID), "=", null, true));
this.getRecord(Vendor.VENDOR_FILE).addListener(new CompareFileFilter(this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.CURRENCYS_ID), this.getScreenRecord().getField(ApReportScreenRecord.CURRENCYS_ID), "=", null, true));

this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubFileFilter(this.getRecord(Vendor.VENDOR_FILE)));
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new ApTrxFilter(ApTrx.TRX_STATUS_ID, (ScreenRecord)this.getScreenRecord()));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(ApReportScreenRecord.TOTAL_VENDORS), false, true));

this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(ApReportScreenRecord.TOTAL_ESTIMATE), ApTrx.DEPARTURE_ESTIMATE, true, true, true));
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(ApReportScreenRecord.TOTAL_INVOICE), ApTrx.INVOICE_AMOUNT, true, true, true));
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(ApReportScreenRecord.TOTAL_BALANCE), ApTrx.INVOICE_BALANCE, true, true, true));
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(ApReportScreenRecord.TOTAL_USD_BAL), ApTrx.INVOICE_BALANCE_LOCAL, true, true, false));
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(ApReportScreenRecord.GRAND_USD_BAL), ApTrx.INVOICE_BALANCE_LOCAL, false, false, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="208">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournal</MethodClassName>
		<LogicSource>return new ApReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="209">
		<LastChanged>2012-01-23T09:38:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournal</MethodClassName>
		<LogicSource>return new ApJournalToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="210">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournal</MethodClassName>
		<LogicSource>return new ApJournalFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="211">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournal</MethodClassName>
		<LogicSource>return new ApJournalHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="212">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournal</MethodClassName>
		<LogicSource>return new Vendor(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="213">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournal</MethodClassName>
		<LogicSource><![CDATA[super;
new ApTrx(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="214">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournal</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="215">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournalDetail</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="216">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournalFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="217">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournalHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="218">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournalToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="219">
		<LastChanged>2012-03-31T23:54:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>addNewApTrx</MethodName>
		<LogicDescription><![CDATA[Add a new voucher for this product detail
@param tblBookingDetail Product detail file.
@param fldTourID Tour ID (field).
@param fldVendorID Vendor ID (field).
@param fldVoucherType Unique ID (field).
@return An error code.]]></LogicDescription>
		<MethodReturns>ApTrx</MethodReturns>
		<MethodInterface>BaseField fldTourID, Vendor recVendor, int iProductTypeID</MethodInterface>
		<MethodClassName>ApTrx</MethodClassName>
		<LogicSource><![CDATA[ApTrx recApTrx = null;
try   {
    this.getField(ApTrx.AP_TRX_TYPE_ID).setValue(ApTrx.AP_TRX_TYPE);                
    if (iProductTypeID == ProductTypeModel.AIR_ID)
        this.getField(ApTrx.AP_TRX_TYPE_ID).setValue(ApTrx.TICKET_TRX_TYPE);                
    this.addNew();
    recApTrx = (ApTrx)this.getTable().getCurrentTable().getRecord();
    recApTrx.getField(ApTrx.TOUR_ID).moveFieldToThis(fldTourID);
    recApTrx.getField(ApTrx.VENDOR_ID).moveFieldToThis(recVendor.getField(Vendor.ID));
    recApTrx.getField(ApTrx.PRODUCT_TYPE_ID).setValue(iProductTypeID);

    TrxStatus recTrxStatus = (TrxStatus)((ReferenceField)recApTrx.getField(ApTrx.TRX_STATUS_ID)).getReferenceRecord();
    int iTrxStatusID = recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.DEP_ESTIMATE);
    recApTrx.getField(ApTrx.TRX_STATUS_ID).setValue(iTrxStatusID);
    recApTrx.add();
    Object bookmark = recApTrx.getLastModified(DBConstants.DATA_SOURCE_HANDLE);
    recApTrx.setHandle(bookmark, DBConstants.DATA_SOURCE_HANDLE);
} catch (DBException ex)   {
    ex.printStackTrace();
}
return recApTrx;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="220">
		<LastChanged>2012-04-01T00:02:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductCategory</MethodName>
		<LogicDescription>Get the product category for this tour</LogicDescription>
		<MethodReturns>ProductCategoryModel</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ApTrx</MethodClassName>
		<LogicSource><![CDATA[if (this.getField(ApTrx.TOUR_ID).isNull())
	return null;	// No tour
Record recTour = ((ReferenceField)this.getField(ApTrx.TOUR_ID)).getReference();
if (recTour == null)
	return null;
TourHeaderModel recTourHeader = (TourHeaderModel)((ReferenceField)recTour.getField(TourModel.TOUR_HEADER_ID)).getReference();
if (recTourHeader == null)
	return null;
ProductCategoryModel recProductCategory = (ProductCategoryModel)((ReferenceField)recTourHeader.getField(TourHeaderModel.PRODUCT_CAT_ID)).getReference();
return recProductCategory;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="221">
		<LastChanged>2012-03-27T16:41:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrx</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ApTrx.BROKER_DIST_GRID_SCREEN) == ApTrx.BROKER_DIST_GRID_SCREEN)
    screen = Record.makeNewScreen(BROKER_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ApTrx.BROKER_DIST_SCREEN) == ApTrx.BROKER_DIST_SCREEN)
    screen = Record.makeNewScreen(BROKER_DIST_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ApTrx.TOUR_AP_SCREEN) == ApTrx.TOUR_AP_SCREEN)
    screen = Record.makeNewScreen(TOUR_AP_TRX_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ApTrx.VENDOR_AP_SCREEN) == ApTrx.VENDOR_AP_SCREEN)
    screen = Record.makeNewScreen(VENDOR_AP_TRX_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ApTrx.PAYMENT_HISTORY) == ApTrx.PAYMENT_HISTORY)
    screen = Record.makeNewScreen(PAYMENT_HISTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ApTrx.PAYMENT_DISTRIBUTION) == ApTrx.PAYMENT_DISTRIBUTION)
    screen = Record.makeNewScreen(PAYMENT_HISTORY_LINK_TRX_GRID_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ApTrx.DISTRIBUTION_SCREEN) == ApTrx.DISTRIBUTION_SCREEN)
    screen = Record.makeNewScreen(AP_TRX_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DETAIL_MODE) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(VOUCHER_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(AP_TRX_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(VENDOR_AP_TRX_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="222">
		<LastChanged>2012-04-01T08:49:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>updateThisApTrx</MethodName>
		<LogicDescription><![CDATA[Update the voucher for this product detail
@param tblBookingDetail Product detail file.
@param fldTourID Tour ID (field).
@param fldVendorID Vendor ID (field).
@param fldVoucherType Unique ID (field).
@return An error code.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BaseTable tblBookingDetail, Record recTour, Vendor recVendor, int iProductTypeID</MethodInterface>
		<MethodClassName>ApTrx</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;

this.getField(ApTrx.DESCRIPTION).setString(DBConstants.BLANK);
((DateField)this.getField(ApTrx.START_SERVICE_DATE)).setData(null);
((DateField)this.getField(ApTrx.END_SERVICE_DATE)).setData(null);
this.getField(ApTrx.DEPARTURE_ESTIMATE).setValue(0.00);
this.getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL).setValue(0.00);

BookingDetailModel recBookingDetail = (BookingDetailModel)tblBookingDetail.getCurrentTable().getRecord();
int iOldOpenMode = this.getOpenMode();
try {
    if (this.getListener(UpdateDepEstHandler.class) == null)
        this.addListener(new UpdateDepEstHandler(null));
    this.setOpenMode(iOldOpenMode & ~DBConstants.OPEN_READ_ONLY);   // Allow write (I don't know where this file has been)
    this.edit();

    while (recBookingDetail != null)
    {
        boolean bProcessThisRecord = true;
        if (!recBookingDetail.getField(BookingDetailModel.AP_TRX_ID).isNull())
            if (!recBookingDetail.getField(BookingDetailModel.AP_TRX_ID).equals(this.getField(ApTrx.ID)))
                bProcessThisRecord = false;   // If this is already tacked to another ApTrx, skip it.
        if (!this.getField(ApTrx.TOUR_ID).equals(recBookingDetail.getField(BookingDetailModel.TOUR_ID)))
            break;
        if (this.getField(ApTrx.VENDOR_ID).compareTo(recBookingDetail.getField(BookingDetailModel.VENDOR_ID)) != 0)
            break;
        if (recVendor.getEditMode() == DBConstants.EDIT_CURRENT)
            if (OperationTypeField.LIKE_TOGETHER_CODE.equalsIgnoreCase(recVendor.getField(Vendor.OPERATION_TYPE_CODE).toString()))
                if (this.getField(ApTrx.PRODUCT_TYPE_ID).compareTo(recBookingDetail.getField(BookingDetailModel.PRODUCT_TYPE_ID)) != 0)
                    break;  // Each A/P Trx contains all detail items in this product type

        if (bProcessThisRecord)
        {
            this.addBookingDetailInfo(recBookingDetail);
    
            try
            {
                recBookingDetail.getTable().edit();
                ((BaseField)recBookingDetail.getField(BookingDetailModel.AP_TRX_ID)).moveFieldToThis(this.getField(ApTrx.ID));
                if (recBookingDetail.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
                    recBookingDetail.getTable().set(recBookingDetail);   // Possible that the listeners re-wrote this record already.
            }
            catch (DBException ex)
            {
                iErrorCode = ex.getErrorCode();
                return iErrorCode;
            }
        }

        recBookingDetail = (BookingDetailModel)tblBookingDetail.next();
        if (recVendor.getEditMode() == DBConstants.EDIT_CURRENT)
            if (OperationTypeField.INDIVIDUALLY_CODE.equalsIgnoreCase(recVendor.getField(Vendor.OPERATION_TYPE_CODE).toString()))
                break;  // Each A/P Trx contains one detail item
    }

    this.set();
}
catch (DBException ex) {
    iErrorCode = ex.getErrorCode();
} finally {
    this.setOpenMode(iOldOpenMode);   // Set it back
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="223">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
this.setEnabled(false);
this.getMainRecord().getField(ApTrx.CODE).setEnabled(true);
this.getMainRecord().getField(ApTrx.DESCRIPTION).setEnabled(true);
this.getMainRecord().getField(ApTrx.START_SERVICE_DATE).setEnabled(true);
this.getMainRecord().getField(ApTrx.END_SERVICE_DATE).setEnabled(true);
this.getMainRecord().getField(ApTrx.FINALIZATION_DATE).setEnabled(true);
this.getMainRecord().getField(ApTrx.INVOICE_NO).setEnabled(true);
this.getMainRecord().getField(ApTrx.INVOICE_DATE).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="224">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="225">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="227">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArControlScreen</MethodClassName>
		<LogicSource>return new ArControl(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="228">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReport</MethodClassName>
		<LogicSource><![CDATA[super;

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.AIR, TicketTrx.TICKET_TRX_FILE, TicketTrx.TICKETED);
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.TRX_STATUS_ID), recTrxStatus.getField(TrxStatus.ID), "="));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.ISSUE_DATE), this.getScreenRecord().getField(ArcReportScreenRecord.LAST_ARC_DATE), "<="));

this.getScreenRecord().getField(ArcReportScreenRecord.LAST_ARC_DATE).setSFieldToProperty();
this.getScreenRecord().getField(ArcReportScreenRecord.SUMMARY_ACCOUNT_ID).setSFieldToProperty();

if (this.getScreenRecord().getField(ArcReportScreenRecord.LAST_ARC_DATE).isNull())
    this.getScreenRecord().getField(ArcReportScreenRecord.LAST_ARC_DATE).setValue(DateField.todaysDate());
if (this.getScreenRecord().getField(ArcReportScreenRecord.SUMMARY_ACCOUNT_ID).isNull())
    this.getScreenRecord().getField(ArcReportScreenRecord.SUMMARY_ACCOUNT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.ARC_SUMMARY_ACCOUNT_ID)));
// Report totals
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(ArcReportScreenRecord.REPORT_TOTAL), TicketTrx.NET_FARE, true, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="229">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReport</MethodClassName>
		<LogicSource>return new ArcReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="230">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReport</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="231">
		<LastChanged>2012-01-23T09:38:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReport</MethodClassName>
		<LogicSource>return new ArcReportToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="232">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReport</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.POST))
{
    String strScreen = ArcReportPost.class.getName();

    strCommand = this.getScreenURL();
    strCommand = this.addScreenParams(this, strCommand);
    this.getParentScreen().popHistory(1, false);
    this.getParentScreen().pushHistory(strCommand, false); // Repush this command with the current values

    strCommand = Utility.addURLParam(null, DBParams.SCREEN, strScreen);
    strCommand = this.addScreenParams(this, strCommand);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="233">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReport</MethodClassName>
		<LogicSource>return new ArcReportFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="234">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReport</MethodClassName>
		<LogicSource>return new ArcReportHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="235">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReport</MethodClassName>
		<LogicSource>return new TicketTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="236">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReport</MethodClassName>
		<LogicSource><![CDATA[super;
new ApControl(this);
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="237">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="238">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReportFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="239">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReportHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="240">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReportPost</MethodClassName>
		<LogicSource><![CDATA[super;

this.getScreenRecord().getField(ArcReportScreenRecord.LAST_ARC_DATE).setSFieldToProperty();
this.getScreenRecord().getField(ArcReportScreenRecord.SUMMARY_ACCOUNT_ID).setSFieldToProperty();

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
int iNewTrxType = recTrxStatus.getTrxStatusID(TransactionType.AIR, TicketTrx.TICKET_TRX_FILE, TicketTrx.ARC_SUBMITTED);
recTrxStatus.getTrxStatusID(TransactionType.AIR, TicketTrx.TICKET_TRX_FILE, TicketTrx.TICKETED);
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.TRX_STATUS_ID), recTrxStatus.getField(TrxStatus.ID), "="));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.ISSUE_DATE), this.getScreenRecord().getField(ArcReportScreenRecord.LAST_ARC_DATE), "<="));

this.getMainRecord().addListener(new UpdateArcHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="241">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReportPost</MethodClassName>
		<LogicSource>return new ArcReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="242">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReportPost</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.POST))
	return this.onPost();
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="243">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>onPost</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ArcReportPost</MethodClassName>
		<LogicSource><![CDATA[try	{
	TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
	Object bookmark = recTrxStatus.getHandle(DBConstants.DATA_SOURCE_HANDLE);
	int iNewTrxType = recTrxStatus.getTrxStatusID(TransactionType.AIR, TicketTrx.TICKET_TRX_FILE, TicketTrx.ARC_SUBMITTED);
	recTrxStatus.setHandle(bookmark, DBConstants.DATA_SOURCE_HANDLE);
	Record recTicketTrx = this.getMainRecord();

	recTicketTrx.close();
	while (recTicketTrx.hasNext())
	{
		recTicketTrx.next();
		recTicketTrx.edit();
		recTicketTrx.getField(TicketTrx.TRX_STATUS_ID).setValue(iNewTrxType);
		recTicketTrx.getField(TicketTrx.ARC_DATE).setValue(DateField.todaysDate());
		recTicketTrx.set();
	}
} catch (DBException ex)	{
	ex.printStackTrace();
	return false;
}

return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="244">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReportPost</MethodClassName>
		<LogicSource>return new TicketTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="245">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReportPost</MethodClassName>
		<LogicSource><![CDATA[super;
new ApTrx(this);
new TrxStatus(this);
new ApControl(this);
new AcctDetail(this);
new Period(this);
new AcctDetailDist(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="246">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReportPost</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="247">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArcReportToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="249">
		<LastChanged>2012-03-29T07:47:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addDetailBehaviors</MethodName>
		<LogicDescription>Add the booking detail behaviors</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Rec recBooking</MethodInterface>
		<MethodClassName>ArTrx</MethodClassName>
		<LogicSource><![CDATA[this.addListener(new SubFileFilter((Record)recBooking, true));
this.addListener(new InitArTrxHandler((Record)recBooking));
if (this.getRecordOwner() instanceof GridScreenParent)
    ((BaseField)recBooking.getField(BookingModel.ID)).addListener(new FieldReSelectHandler((GridScreenParent)this.getRecordOwner()));
if (recBooking != null)
{   // Sub counts must be first.
    this.addListener(new SubCountHandler((BaseField)recBooking.getField(BookingModel.BALANCE), ArTrx.AMOUNT, true, true));

    this.addListener(new ArTrxInvoiceSubCountHandler(null, ArTrx.AMOUNT, true, true));
}
this.addListener(new CheckBookingStatusHandler((BookingModel)recBooking));
this.addListener(new UpdateArTrxAcctDetailHandler((Record)recBooking));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="250">
		<LastChanged>2012-03-27T16:36:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrx</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ArTrx.LINK_DISTRIBUTION_SCREEN) == ArTrx.LINK_DISTRIBUTION_SCREEN)
    screen = Record.makeNewScreen(AR_TRX_LINK_TRX_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode == ScreenConstants.DETAIL_MODE)
    || (iDocMode == ArTrx.DISTRIBUTION_SCREEN))
        screen = Record.makeNewScreen(AR_TRX_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == ArTrx.CR_DR_SCREEN)
    screen = Record.makeNewScreen(CR_DR_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == ArTrx.REFUND_SCREEN)
    screen = Record.makeNewScreen(REFUND_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == ArTrx.REFUND_PEND_SCREEN)
    screen = Record.makeNewScreen(REFUND_PEND_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == ArTrx.REFUND_CHECK_POST)
    screen = Record.makeNewScreen(REFUND_CHECK_POST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == ArTrx.REFUND_CHECK_XML_PRINT)
    screen = Record.makeNewScreen(REFUND_CHECK_XML_PRINT_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == ArTrx.REFUND_CHECK_CANNED_PRINT)
    screen = Record.makeNewScreen(REFUND_CHECK_PRINT_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(BOOKING_AR_TRX_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(BOOKING_AR_TRX_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="251">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxAgentGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(Profile.PROFILE_FILE).getField(Profile.PROFILE_CODE).addListener(new MainReadOnlyHandler(Profile.PROFILE_CODE_KEY));

this.getMainRecord().addListener(new SubFileFilter(this.getRecord(Profile.PROFILE_FILE), true));

this.getHeaderRecord().getField(Profile.ID).addListener(new FieldReSelectHandler(this));
Record recArTrx = this.getRecord(ArTrx.AR_TRX_FILE);
Record recBooking = this.getRecord(Booking.BOOKING_FILE);
Record recBookingLine = this.getRecord(BookingLine.BOOKING_LINE_FILE);
recArTrx.addListener(new SubFileFilter(recBooking));
recBooking.addListener(new RecountOnValidHandler(recArTrx));
recArTrx.addListener(new SubCountHandler(recBooking.getField(Booking.BALANCE), ArTrx.AMOUNT, true, true));
recBookingLine.addListener(new SubFileFilter(recBooking));
recBooking.addListener(new RecountOnValidHandler(recBookingLine));
recBookingLine.addListener(new SubCountHandler(recBooking.getField(Booking.GROSS), BookingLine.GROSS, true, true));
recBookingLine.addListener(new SubCountHandler(recBooking.getField(Booking.NET), BookingLine.NET, true, true));

recBooking.addListener(new SubCountHandler(this.getScreenRecord().getField(ArTrxAgentScreenRecord.BALANCE), Booking.BALANCE, true, true));

this.setEnabled(false);
this.setAppending(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="252">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxAgentGridScreen</MethodClassName>
		<LogicSource>return new ArTrxAgentScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="253">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxAgentGridScreen</MethodClassName>
		<LogicSource>return this.getRecord(Profile.PROFILE_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="254">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxAgentGridScreen</MethodClassName>
		<LogicSource>return new ArTrxAgentHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="255">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxAgentGridScreen</MethodClassName>
		<LogicSource>return new Booking(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="256">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxAgentGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ArTrx(this);
new Profile(this);
new BookingLine(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="257">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxAgentGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="258">
		<LastChanged>2012-02-01T08:00:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxAgentHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEnabled(false);
this.getRecord(Profile.PROFILE_FILE).getField(Profile.PROFILE_CODE).setEnabled(true);
this.getScreenRecord().getField(ArTrxAgentScreenRecord.PROFILE_ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="259">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxAgentHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="274">
		<LastChanged>2012-03-27T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Asset</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == Asset.ASSET_DEPRECIATION_GRID_SCREEN)
    screen = Record.makeNewScreen(AssetDepreciation.ASSET_DEPRECIATION_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(ASSET_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(ASSET_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="275">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetDrControl</MethodClassName>
		<LogicSource><![CDATA[super;
((TrxStatusField)this.getField(AssetDrControl.TRX_STATUS_ID)).setDesc(BankTrx.BANK_TRX_FILE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="276">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetDrControlScreen</MethodClassName>
		<LogicSource>return new AssetDrControl(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="277">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetDepreciationGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="278">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>AssetDepreciationGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AssetDepreciationGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="280">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetDepreciationGridScreen</MethodClassName>
		<LogicSource>return new AssetHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="281">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetDepreciationGridScreen</MethodClassName>
		<LogicSource>return new AssetDepreciation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="282">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetDepreciationGridScreen</MethodClassName>
		<LogicSource>return new Asset(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="283">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="284">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetDepreciationScreen</MethodClassName>
		<LogicSource>return new AssetDepreciation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="285">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetField</MethodClassName>
		<LogicSource>return new Asset(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="286">
		<LastChanged>2012-01-31T19:09:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), null, Asset.DESCRIPTION, false, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="287">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="288">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="289">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, Asset.ASSET_DEPRECIATION_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="290">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetGridScreen</MethodClassName>
		<LogicSource>return new Asset(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="291">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="292">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="293">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, Asset.ASSET_DEPRECIATION_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="294">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetScreen</MethodClassName>
		<LogicSource>return new Asset(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="295">
		<LastChanged>2012-03-26T09:40:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDist</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == AutoDist.AUTO_DIST_DETAIL_SCREEN)
    screen = Record.makeNewScreen(AutoDistDetail.AUTO_DIST_DETAIL_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(AUTO_DIST_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(AUTO_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="296">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(AutoDist.AUTO_DIST_FILE).getField(AutoDist.ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="297">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>AutoDistDetailGridScreen*2</MethodName>
		<LogicDescription>Constructor passing in Main file</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recAutoDist, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AutoDistDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="299">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistDetailGridScreen</MethodClassName>
		<LogicSource>return new AutoDistHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="300">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistDetailGridScreen</MethodClassName>
		<LogicSource>return new AutoDistDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="301">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistDetailGridScreen</MethodClassName>
		<LogicSource>return new AutoDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="302">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="303">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="304">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistDetailScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="305">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>AutoDistDetailScreen*2</MethodName>
		<LogicDescription>Constructor when passing header record</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recAutoDist, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AutoDistDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="307">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistDetailScreen</MethodClassName>
		<LogicSource>return new AutoDistHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="308">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistDetailScreen</MethodClassName>
		<LogicSource>return new AutoDistDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="309">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistDetailScreen</MethodClassName>
		<LogicSource>return new AutoDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="310">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="311">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), AutoDist.AUTO_DIST_DESC_KEY, AutoDist.AUTO_DIST_DESC, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="312">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="313">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="314">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, AutoDist.AUTO_DIST_DETAIL_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="315">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistGridScreen</MethodClassName>
		<LogicSource>return new AutoDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="316">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="317">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, AutoDist.AUTO_DIST_DETAIL_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="318">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistScreen</MethodClassName>
		<LogicSource>return new AutoDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="319">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>AutoJob</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Application application, String strParams</MethodInterface>
		<MethodClassName>AutoJob</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="320">
		<LastChanged>2012-03-27T10:45:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcct</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == BankAcct.BANK_TRX_GRID_SCREEN)
    screen = Record.makeNewScreen(BankTrx.BANK_TRX_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(BANK_ACCT_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(BANK_ACCT_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="321">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctField</MethodClassName>
		<LogicSource>return new BankAcct(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="322">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), BankAcct.DESCRIPTION_KEY, BankAcct.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="323">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="324">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="325">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, BankAcct.BANK_TRX_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="326">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctGridScreen</MethodClassName>
		<LogicSource>return new BankAcct(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="327">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="328">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctReport</MethodClassName>
		<LogicSource>return new BankAcctScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="329">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctReport</MethodClassName>
		<LogicSource><![CDATA[super;
new Currencys(this);
new Account(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="330">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="331">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="332">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, BankAcct.BANK_TRX_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="333">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctScreen</MethodClassName>
		<LogicSource>return new BankAcct(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="334">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="335">
		<LastChanged>2012-01-31T19:02:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.setAppending(false);
this.setEnabled(false);
this.getRecord(BankTrx.BANK_TRX_FILE).getField(BankTrx.DATE_RECONCILED).setEnabled(true);

this.getScreenRecord().getField(BankReconScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE).getField(AssetDrControl.BANK_ACCT_ID)));

this.getScreenRecord().getField(BankReconScreenRecord.BANK_ACCT_ID).addListener(new CurrentClearedHandler((DateTimeField)this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE).getField(AssetDrControl.DATE_RECONCILED), (CurrencyField)this.getScreenRecord().getField(BankReconScreenRecord.START_CLEARED)));

this.getMainRecord().setKeyArea(BankTrx.TRX_DATE_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(BankReconScreenRecord.BANK_ACCT_ID), BankTrx.BANK_ACCT_ID, null, null, null, null));
this.getMainRecord().addListener(new CheckReconDateHandler(this.getMainRecord().getField(BankTrx.DATE_RECONCILED), this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE).getField(AssetDrControl.DATE_RECONCILED)));

this.getScreenRecord().getField(BankReconScreenRecord.BANK_ACCT_ID).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new CountClearedHandler(this.getScreenRecord().getField(BankReconScreenRecord.DEPOSITS_CLEARED), BankTrx.AMOUNT, BankTrx.DATE_RECONCILED, true));
this.getMainRecord().addListener(new CountClearedHandler(this.getScreenRecord().getField(BankReconScreenRecord.CHECKS_CLEARED), BankTrx.AMOUNT, BankTrx.DATE_RECONCILED, false));

this.getScreenRecord().getField(BankReconScreenRecord.START_CLEARED).addListener(new CountNewClearedFieldHandler(BankReconScreenRecord.NEW_CLEARED));
this.getScreenRecord().getField(BankReconScreenRecord.CHECKS_CLEARED).addListener(new CountNewClearedFieldHandler(BankReconScreenRecord.NEW_CLEARED));
this.getScreenRecord().getField(BankReconScreenRecord.DEPOSITS_CLEARED).addListener(new CountNewClearedFieldHandler(BankReconScreenRecord.NEW_CLEARED));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="336">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconGridScreen</MethodClassName>
		<LogicSource>return new BankReconScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="337">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconGridScreen</MethodClassName>
		<LogicSource>return new BankReconHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="338">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>onForm</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconGridScreen</MethodClassName>
		<LogicSource><![CDATA[iDocMode = BankTrx.BANK_RECON_SCREEN;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="339">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconGridScreen</MethodClassName>
		<LogicSource>return new BankTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="340">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new AssetDrControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="341">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="342">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(false);
this.getScreenRecord().getField(BankReconScreenRecord.BANK_ACCT_ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="343">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="344">
		<LastChanged>2012-01-31T19:00:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setAppending(false);
this.setEnabled(false);
this.getRecord(BankTrx.BANK_TRX_FILE).getField(BankTrx.DATE_RECONCILED).setEnabled(true);
this.getScreenRecord().getField(BankReconScreenRecord.BANK_ACCT_ID).moveFieldToThis(this.getRecord(BankTrx.BANK_TRX_FILE).getField(BankTrx.BANK_ACCT_ID));
//xthis.getScreenRecord().getField(BankReconScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE).getField(AssetDrControl.BANK_ACCT_ID)));

this.getMainRecord().setKeyArea(BankTrx.TRX_DATE_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(BankReconScreenRecord.BANK_ACCT_ID), BankTrx.BANK_ACCT_ID, null, null, null, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="345">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconScreen</MethodClassName>
		<LogicSource>return new BankReconScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="346">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconScreen</MethodClassName>
		<LogicSource>return new BankTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="347">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="348">
		<LastChanged>2012-03-27T10:51:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrx</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == BankTrx.DISTRIBUTION_SCREEN)
    screen = Record.makeNewScreen(BANK_TRX_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & BankTrx.BANK_RECON_SCREEN) == BankTrx.BANK_RECON_SCREEN)
    screen = Record.makeNewScreen(BANK_RECON_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & BankTrx.PAYMENT_DISTRIBUTION_SCREEN) == BankTrx.PAYMENT_DISTRIBUTION_SCREEN)
{
    TrxDesc recTrxDesc = (TrxDesc)((ReferenceField)this.getField(BankTrx.PAYEE_TRX_DESC_ID)).getReference();
    if (properties == null)
        properties = new HashMap<String,Object>();
    properties.put(DBParams.HEADER_RECORD, this.getTableNames(false));
    properties.put(DBParams.HEADER_OBJECT_ID, this.getCounterField().toString());
    if (recTrxDesc != null)
        if ((recTrxDesc.getEditMode() == DBConstants.EDIT_CURRENT) || (recTrxDesc.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
            screen = recTrxDesc.makeLinkTrxScreen(itsLocation, parentScreen, iDocMode, properties);
}
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(BANK_TRX_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(BANK_TRX_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="349">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>onVoidTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrx</MethodClassName>
		<LogicSource><![CDATA[this.getField(BankTrx.AMOUNT).setValue(0);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="350">
		<LastChanged>2012-03-27T11:09:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetail</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(BANK_TRX_BATCH_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.POST_MODE)
    screen = Record.makeNewScreen(BankTrxBatch.BANK_TRX_BATCH_POST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(BANK_TRX_BATCH_DETAIL_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(BANK_TRX_BATCH_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="351">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE).getField(BankTrxBatchDetail.ID).addListener(new FieldReSelectHandler(this));
this.getRecord(BankTrxBatchDist.BANK_TRX_BATCH_DIST_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(BankTrxScreenRecord.CHANGE_BALANCE), BankTrxBatchDist.AMOUNT, false, true));
this.getScreenRecord().getField(BankTrxScreenRecord.CHANGE_BALANCE).addListener(new CalcBalanceHandler(this.getScreenRecord().getField(BankTrxScreenRecord.END_BALANCE), this.getScreenRecord().getField(BankTrxScreenRecord.CHANGE_BALANCE), this.getRecord(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE).getField(BankTrxBatchDetail.AMOUNT), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="352">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>45</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDistGridScreen</MethodClassName>
		<LogicSource>return new BankTrxScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="353">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BankTrxBatchDistGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BankTrxBatchDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="355">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDistGridScreen</MethodClassName>
		<LogicSource>return new BankTrxBatchDetailHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="356">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDistGridScreen</MethodClassName>
		<LogicSource>return new BankTrxBatchDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="357">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDistGridScreen</MethodClassName>
		<LogicSource>return new BankTrxBatchDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="358">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="359">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailHeaderScreen</MethodClassName>
		<LogicSource>this.setEditing(false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="360">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="361">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(BankTrxBatchDist.BANK_TRX_BATCH_DIST_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(BankTrxScreenRecord.CHANGE_BALANCE), BankTrxBatchDist.AMOUNT, false, true));
this.getScreenRecord().getField(BankTrxScreenRecord.CHANGE_BALANCE).addListener(new CalcBalanceHandler(this.getScreenRecord().getField(BankTrxScreenRecord.END_BALANCE), this.getScreenRecord().getField(BankTrxScreenRecord.CHANGE_BALANCE), this.getRecord(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE).getField(BankTrxBatchDetail.AMOUNT), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="362">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>45</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDistScreen</MethodClassName>
		<LogicSource>return new BankTrxScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="363">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>BankTrxBatchDistScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BankTrxBatchDistScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="365">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDistScreen</MethodClassName>
		<LogicSource>return new BankTrxBatchDetailHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="366">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDistScreen</MethodClassName>
		<LogicSource>return new BankTrxBatchDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="367">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDistScreen</MethodClassName>
		<LogicSource>return new BankTrxBatchDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="368">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDistScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="369">
		<LastChanged>2012-02-01T19:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

Record recAssetDrControl = this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE);
this.getMainRecord().getField(BankTrxBatchDetail.TRX_STATUS_ID).addListener(new InitFieldHandler(recAssetDrControl.getField(AssetDrControl.TRX_STATUS_ID)));

this.getMainRecord().setKeyArea(BankTrxBatchDetail.BANK_TRX_BATCH_ID_KEY);
this.getRecord(BankTrxBatch.BANK_TRX_BATCH_FILE).getField(BankTrxBatch.ID).addListener(new FieldReSelectHandler(this));

Record recCurrencys = this.getRecord(Currencys.CURRENCYS_FILE);
Record recBankTrxBatchDetail = this.getRecord(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE);
BankAcct recBankAcct = (BankAcct)((ReferenceField)this.getRecord(BankTrxBatch.BANK_TRX_BATCH_FILE).getField(BankTrxBatch.BANK_ACCT_ID)).getReferenceRecord();
this.getRecord(BankTrxBatch.BANK_TRX_BATCH_FILE).getField(BankTrxBatch.BANK_ACCT_ID).addListener(new ReadSecondaryHandler(recBankAcct));
recBankAcct.getField(BankAcct.CURRENCY_ID).addListener(new ReadSecondaryHandler(recCurrencys));

recBankTrxBatchDetail.getField(BankTrxBatchDetail.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(BankTrxBatch.BANK_TRX_BATCH_FILE).getField(BankTrxBatch.BANK_ACCT_ID)));
recBankTrxBatchDetail.getField(BankTrxBatchDetail.EXCHANGE).addListener(new InitFieldHandler(recCurrencys.getField(Currencys.LAST_RATE)));
recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT).addListener(new CalcBalanceHandler(recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT_LOCAL), recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT), recBankTrxBatchDetail.getField(BankTrxBatchDetail.EXCHANGE), CalcBalanceHandler.MULTIPLY, false));
recBankTrxBatchDetail.getField(BankTrxBatchDetail.EXCHANGE).addListener(new CalcBalanceHandler(recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT_LOCAL), recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT), recBankTrxBatchDetail.getField(BankTrxBatchDetail.EXCHANGE), CalcBalanceHandler.MULTIPLY, false));

this.getRecord(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE).getField(BankTrxBatchDetail.PAYEE_NAME).addListener(new FocusOnCheckAmount(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="371">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailGridScreen</MethodClassName>
		<LogicSource>return new BankTrxScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="372">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
String strDesc = "Distribution";
if (this.getTask() != null)
    strDesc = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString(strDesc);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);

this.getRecord(BankTrxBatch.BANK_TRX_BATCH_FILE).getField(BankTrxBatch.BANK_ACCT_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(BankTrxBatch.BANK_TRX_BATCH_FILE).getField(BankTrxBatch.BANK_ACCT_ID).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="373">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>BankTrxBatchDetailGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BankTrxBatchDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="376">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailGridScreen</MethodClassName>
		<LogicSource>return new BankTrxBatchDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="377">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Currencys(this);
new AssetDrControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="378">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="379">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchPost</MethodClassName>
		<LogicSource><![CDATA[super;

BankTrxBatchDetail recBankTrxBatchDetail = (BankTrxBatchDetail)this.getRecord(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE);
recBankTrxBatchDetail.addListener(new SubFileFilter(this.getMainRecord()));
recBankTrxBatchDetail.addListener(new SubCountHandler(this.getScreenRecord().getField(BankTrxScreenRecord.END_BALANCE), BankTrxBatchDetail.AMOUNT, false, true));
recBankTrxBatchDetail.addListener(new SubCountHandler(this.getScreenRecord().getField(BankTrxScreenRecord.TRX_COUNT), false, true));

BankTrxBatchDist recBankTrxBatchDist = (BankTrxBatchDist)this.getRecord(BankTrxBatchDist.BANK_TRX_BATCH_DIST_FILE);
recBankTrxBatchDist.addListener(new SubFileFilter(this.getRecord(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE)));
recBankTrxBatchDist.addListener(new SubCountHandler(this.getScreenRecord().getField(BankTrxScreenRecord.CHANGE_BALANCE), BankTrxBatchDist.AMOUNT, false, true));

try {
    recBankTrxBatchDetail.close();
    while (recBankTrxBatchDetail.hasNext())
    {
        recBankTrxBatchDetail.next();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="380">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchPost</MethodClassName>
		<LogicSource>return new BankTrxScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="383">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchPost</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getMainRecord().getTableNames(false).equalsIgnoreCase(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE))
    this.addRecord(((ReferenceField)this.getMainRecord().getField(BankTrxBatchDetail.BANK_TRX_BATCH_ID)).getReference(), true);
else
    new BankTrxBatchDetail(this);
new AssetDrControl(this);

new BankTrx(this);

new BankTrxBatchDist(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="384">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchPost</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="385">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;

Record recAssetDrControl = this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE);
this.getMainRecord().getField(BankTrxBatchDetail.TRX_STATUS_ID).addListener(new InitFieldHandler(recAssetDrControl.getField(AssetDrControl.TRX_STATUS_ID)));

this.getMainRecord().setKeyArea(BankTrxBatchDetail.BANK_TRX_BATCH_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getRecord(BankTrxBatch.BANK_TRX_BATCH_FILE)));

Record recCurrencys = this.getRecord(Currencys.CURRENCYS_FILE);
Record recBankTrxBatchDetail = this.getRecord(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE);
BankAcct recBankAcct = (BankAcct)((ReferenceField)this.getRecord(BankTrxBatch.BANK_TRX_BATCH_FILE).getField(BankTrxBatch.BANK_ACCT_ID)).getReferenceRecord();
this.getRecord(BankTrxBatch.BANK_TRX_BATCH_FILE).getField(BankTrxBatch.BANK_ACCT_ID).addListener(new ReadSecondaryHandler(recBankAcct));
recBankAcct.getField(BankAcct.CURRENCY_ID).addListener(new ReadSecondaryHandler(recCurrencys));

recBankTrxBatchDetail.getField(BankTrxBatchDetail.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(BankTrxBatch.BANK_TRX_BATCH_FILE).getField(BankTrxBatch.BANK_ACCT_ID)));
recBankTrxBatchDetail.getField(BankTrxBatchDetail.EXCHANGE).addListener(new InitFieldHandler(recCurrencys.getField(Currencys.LAST_RATE)));
recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT).addListener(new CalcBalanceHandler(recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT_LOCAL), recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT), recBankTrxBatchDetail.getField(BankTrxBatchDetail.EXCHANGE), CalcBalanceHandler.MULTIPLY, false));
recBankTrxBatchDetail.getField(BankTrxBatchDetail.EXCHANGE).addListener(new InitOnceFieldHandler(false));
recBankTrxBatchDetail.getField(BankTrxBatchDetail.EXCHANGE).addListener(new CalcBalanceHandler(recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT_LOCAL), recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT), recBankTrxBatchDetail.getField(BankTrxBatchDetail.EXCHANGE), CalcBalanceHandler.MULTIPLY, false));
recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT_LOCAL).addListener(new CalcBalanceHandler(recBankTrxBatchDetail.getField(BankTrxBatchDetail.EXCHANGE), recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT_LOCAL), recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT), CalcBalanceHandler.DIVIDE, false));

recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT).addListener(new DisableOnSignHandler(recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT_LOCAL), DisableOnSignHandler.NEGATIVE));
recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT).addListener(new DisableOnSignHandler(recBankTrxBatchDetail.getField(BankTrxBatchDetail.EXCHANGE), DisableOnSignHandler.NEGATIVE));

this.getRecord(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE).getField(BankTrxBatchDetail.PAYEE_NAME).addListener(new FocusOnCheckAmount(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="386">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailScreen</MethodClassName>
		<LogicSource>return new BankTrxScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="387">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[String strDesc = "Distribution";
if (this.getTask() != null)
    strDesc = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString(strDesc);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strDesc, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="389">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailScreen</MethodClassName>
		<LogicSource>return new BankTrxBatchDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="390">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Currencys(this);
new AssetDrControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="391">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="392">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BankTrxCalcBalance</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Record recBankAcct, BaseField fldBalance, BaseField fldFlag</MethodInterface>
		<MethodClassName>BankTrxCalcBalance</MethodClassName>
		<LogicSource><![CDATA[m_recBankAcct = recBankAcct;
m_fldBalance = fldBalance;
m_fldFlag = fldFlag;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="393">
		<LastChanged>2012-01-31T10:43:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxCalcBalance</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
if ((m_fldFlag == null) || (m_fldFlag.getState()))
{
    {
        if (m_recBankTrx == null)
        {
            RecordOwner recordOwner = this.getOwner().getRecord().findRecordOwner();
            m_recBankTrx = new BankTrx(recordOwner);
            if (recordOwner != null)
                recordOwner.removeRecord(m_recBankTrx);
            m_recBankTrx.addListener(new SubFileFilter(m_recBankAcct));

            m_recBankTrx.addListener(new SubCountHandler(m_fldBalance, BankTrx.AMOUNT, false, true));   // Init this field override for other value
        }
        m_fldBalance.initField(DBConstants.DISPLAY);
        m_fldBalance.setValue(0.00);
        m_recBankTrx.close();
        try   {
            while (m_recBankTrx.hasNext())
            {   // Go through and count
                m_recBankTrx.next();
            }
        } catch (DBException ex)    {
            ex.printStackTrace();
        }
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="394">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxDistGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="395">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BankTrxDistGridScreen*2</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recBankTrx, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BankTrxDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="397">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxDistGridScreen</MethodClassName>
		<LogicSource>return new BankTrxHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="398">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxDistGridScreen</MethodClassName>
		<LogicSource>return new BankTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="399">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(BankTrx.BANK_TRX_FILE).getField(BankTrx.BANK_ACCT_ID).setEnabled(true);
this.getRecord(BankTrx.BANK_TRX_FILE).getField(BankTrx.TRX_NUMBER).setEnabled(true);
this.getRecord(BankTrx.BANK_TRX_FILE).getField(BankTrx.ID).setEnabled(true);
this.getRecord(BankTrx.BANK_TRX_FILE).getField(BankTrx.TRX_NUMBER).addListener(new MainFieldHandler(BankTrx.TRX_NUMBER_KEY));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="400">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="401">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

SubFileFilter listener = new SubFileFilter(this.getScreenRecord().getField(BankTrxScreenRecord.START_DATE), BankTrx.TRX_DATE, null, null, null, null);
listener.setEndKey(false);
this.getMainRecord().addListener(listener);
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(BankTrxScreenRecord.CHANGE_BALANCE), BankTrx.AMOUNT, false, true));  // Init this field override for other value

this.getScreenRecord().getField(BankTrxScreenRecord.BANK_ACCT_ID).moveFieldToThis(this.getHeaderRecord().getField(BankAcct.ID));
((ReferenceField)this.getScreenRecord().getField(BankTrxScreenRecord.BANK_ACCT_ID)).setReferenceRecord(this.getHeaderRecord());
this.getScreenRecord().getField(BankTrxScreenRecord.BANK_ACCT_ID).addListener(new ReadSecondaryHandler(((ReferenceField)this.getScreenRecord().getField(BankTrxScreenRecord.BANK_ACCT_ID)).getReferenceRecord()));

this.getScreenRecord().getField(BankTrxScreenRecord.BANK_ACCT_ID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(BankTrxScreenRecord.START_DATE).addListener(new FieldReSelectHandler(this));

this.getScreenRecord().getField(BankTrxScreenRecord.DISPLAY_BALANCE).addListener(new BankTrxCalcBalance(this.getRecord(BankAcct.BANK_ACCT_FILE), this.getScreenRecord().getField(BankTrxScreenRecord.END_BALANCE), this.getScreenRecord().getField(BankTrxScreenRecord.DISPLAY_BALANCE)));
this.getScreenRecord().getField(BankTrxScreenRecord.BANK_ACCT_ID).addListener(new ChangeOnChangeHandler(this.getScreenRecord().getField(BankTrxScreenRecord.DISPLAY_BALANCE)));

this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="402">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((m_iDisplayFieldDesc & ScreenConstants.SELECT_MODE) != ScreenConstants.SELECT_MODE)
{
    BaseApplication application = (BaseApplication)this.getTask().getApplication();

    String strPaymentHistory = BankTrx.PAYMENT_DISTRIBUTION;
    strPaymentHistory = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strPaymentHistory);
    new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, LinkTrx.PAYMENT_HISTORY_ICON, BankTrx.PAYMENT_DISTRIBUTION, strPaymentHistory);

    new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION));
}
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="403">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxGridScreen</MethodClassName>
		<LogicSource>return new BankTrxScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="404">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>170</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();

new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);

String strPaymentHistory = BankTrx.PAYMENT_DISTRIBUTION;
strPaymentHistory = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strPaymentHistory);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strPaymentHistory, LinkTrx.PAYMENT_HISTORY_ICON, BankTrx.PAYMENT_DISTRIBUTION, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="405">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BankTrxGridScreen*2</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recBankAcct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BankTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="406">
		<LastChanged>2012-06-15T22:53:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(AcctDetailDist.DIST_DISTRIBUTION))
    return (this.onForm(null, BankTrx.DISTRIBUTION_SCREEN, true, iCommandOptions, null) != null);
if (strCommand.equalsIgnoreCase(BankTrx.PAYMENT_DISTRIBUTION))
{
    TrxDesc recTrxDesc = (TrxDesc)((ReferenceField)this.getMainRecord().getField(BankTrx.PAYEE_TRX_DESC_ID)).getReference();
    if ((recTrxDesc == null)
        || ((recTrxDesc.getEditMode() != DBConstants.EDIT_CURRENT) && (recTrxDesc.getEditMode() != DBConstants.EDIT_IN_PROGRESS)))
    {
        this.getTask().setStatusText(this.getTask().getApplication().getResources(this.getTask().getApplication().getProperty(Params.RESOURCE), true).getString("Payment distribution only exists if a payee is set"));
        return false;
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="408">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxGridScreen</MethodClassName>
		<LogicSource>return new BankAcctHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="409">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxGridScreen</MethodClassName>
		<LogicSource>return new BankTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="410">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxGridScreen</MethodClassName>
		<LogicSource>return new BankAcct(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="411">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="412">
		<LastChanged>2012-01-31T19:08:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(BankTrxScreenRecord.BANK_ACCT_ID).setEnabled(true);
this.getScreenRecord().getField(BankTrxScreenRecord.START_DATE).addListener(new RegisterValueHandler(null));
this.getScreenRecord().getField(BankTrxScreenRecord.DISPLAY_BALANCE).addListener(new RegisterValueHandler(null));
if (this.getScreenRecord().getField(BankTrxScreenRecord.START_DATE).isNull())
{   // If the starting and ending date haven't been set yet, set them to the current period start and end.
    Date date = new Date();     // Now
    Period recPeriod = new Period((BaseScreen)this.getParentScreen()); // Note: I Use READ_MOVE, because RegisterBehavior doesn't respond to it.
    if (this.getScreenRecord().getField(BankTrxScreenRecord.START_DATE).isNull())
        ((DateTimeField)this.getScreenRecord().getField(BankTrxScreenRecord.START_DATE)).setDate(recPeriod.getPeriodStartDate(date), DBConstants.DISPLAY, DBConstants.READ_MOVE);
    recPeriod.free();
    recPeriod = null;
}
this.getScreenRecord().getField(BankTrxScreenRecord.START_DATE).setEnabled(true);
this.getScreenRecord().getField(BankTrxScreenRecord.DISPLAY_BALANCE).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="413">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankAcctHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="414">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="415">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();

new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);

String strPaymentHistory = LinkTrx.PAYMENT_DISTRIBUTION;
strPaymentHistory = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strPaymentHistory);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strPaymentHistory, LinkTrx.PAYMENT_HISTORY_ICON, LinkTrx.PAYMENT_DISTRIBUTION, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="416">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(AcctDetailDist.DIST_DISTRIBUTION))
	return (this.onForm(null, AcctDetail.ACCT_DIST_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="417">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>onDelete</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxScreen</MethodClassName>
		<LogicSource><![CDATA[boolean flag = ((BankTrx)this.getMainRecord()).onVoid();
this.selectField(null, DBConstants.SELECT_FIRST_FIELD);
return flag;
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="418">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxScreen</MethodClassName>
		<LogicSource>return new BankTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="419">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="460">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>onPost</MethodName>
		<LogicDescription>Post this transaction to G/L</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseField fldTrxAccountID, BaseField fldDistAccountID</MethodInterface>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[this.checkFiles();
if ((fldTrxAccountID != null) && (fldDistAccountID != null))
    this.startDistTrx();
// Step 2a - Create and write the transaction (in BaseTrx).
boolean bSuccess = this.onPostTrx();
if (!bSuccess)
{       // Back out and void - bad trx.
    this.onVoidTrx();
    return false;
}
// Step 2b - Post the transaction side of the distribution.
if (fldTrxAccountID != null)
    bSuccess = this.onPostTrxDist(fldTrxAccountID, PostingType.TRX_POST);
if (!bSuccess)
{       // Back out and void - bad trx.
    this.onVoidTrx();
    return false;
}
// Step 2c - Post the distribution side of the transaction.
if (fldDistAccountID != null)
    bSuccess = this.onPostTrxDist(fldDistAccountID, PostingType.DIST_POST);
if (!bSuccess)
{       // Back out and void - bad trx.
    this.onVoidTrx();
    return false;
}
if ((fldTrxAccountID != null) && (fldDistAccountID != null))
    this.endDistTrx();
return true;    // Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="461">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>onPostTrx</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[try   {
// Step 2a - Write the transaction.
    this.writeAndRefresh();
} catch (DBException ex)    {
    ex.printStackTrace();
    //+recAcctDetail.getDatabase().rollback();
    return false;
}
return true;    // Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="462">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,050</Sequence>
		<MethodName>onPostTrxDist*4</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseField fldAccountID, double dTrxAmount, String strPostingType</MethodInterface>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[this.checkFiles();
return this.onPostTrxDist(fldAccountID, dTrxAmount, strPostingType, m_recAcctDetail, m_recAcctDetailDist, m_recPeriod);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="463">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,010</Sequence>
		<MethodName>onVoid</MethodName>
		<LogicDescription>Void this transaction and reverse the G/L postings</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[this.checkFiles();
this.startDistTrx();
// Step 2a - Create and write the bank transaction (in BankTrx).
if (!this.onVoidTrx())
    return this.cancelDistTrx();
// Step 2b - Go through all the transaction distribution and reverse them.
if (!this.onVoidReverse())
    return this.cancelDistTrx();
this.endDistTrx();
return true;    // Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="464">
		<LastChanged>2012-01-31T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,050</Sequence>
		<MethodName>onVoidDist</MethodName>
		<LogicDescription>Reverse this transaction distribution</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>AcctDetailDist recAcctDetailDist</MethodInterface>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[ReferenceField fldAcctDetailID = (ReferenceField)recAcctDetailDist.getField(AcctDetailDist.ACCT_DETAIL_ID);
AcctDetail recAcctDetail = (AcctDetail)fldAcctDetailID.getReference();
if (recAcctDetail == null)
    return this.setupErrorMessage(null, "Distribution does not have a valid transaction");

BaseField fldAccountID = recAcctDetail.getField(AcctDetail.ACCOUNT_ID);
ReferenceField fldTrxTypeID = (ReferenceField)recAcctDetail.getField(AcctDetail.TRX_TYPE_ID);
TransactionType recTransactionType = (TransactionType)fldTrxTypeID.getReference();      // Ouch.. this should NOT be necessary
if (recTransactionType == null)
    return this.setupErrorMessage(null, "Transaction type is not valid");

DateTimeField trxDate = (DateTimeField)recAcctDetailDist.getField(AcctDetailDist.TRX_DATE);
BaseField fldTrxID = recAcctDetailDist.getField(AcctDetailDist.TRX_ID);
DateTimeField trxEntryDate = (DateTimeField)this.getField(BaseTrx.TRX_ENTRY); // New Entry date!
int iUserID = (int)((UserField)this.getField(BaseTrx.TRX_USER_ID)).getUserID();   // New User ID
double dAmount = -recAcctDetailDist.getField(AcctDetailDist.AMOUNT).getValue();

m_recAcctDetailDist.addDetailTrx(fldAccountID, trxDate, fldTrxID, recTransactionType, trxEntryDate, dAmount, iUserID, recAcctDetail, m_recPeriod);
return true;    // Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="465">
		<LastChanged>2012-01-31T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,030</Sequence>
		<MethodName>onVoidReverse</MethodName>
		<LogicDescription>Reverse all the G/L Transactions</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[try   {
    AcctDetailDist recAcctDetailDist = this.getDistSearch();

    this.getField(BaseTrx.TRX_ENTRY).initField(DBConstants.DONT_DISPLAY); // New Entry date = now

    recAcctDetailDist.close();
    while (recAcctDetailDist.hasNext())
    {
        recAcctDetailDist.next();
        Record recAcctDetail = ((ReferenceField)recAcctDetailDist.getField(AcctDetailDist.ACCT_DETAIL_ID)).getReference();
        if (recAcctDetail != null)
            if (!recAcctDetail.isNull())
        {
            Record recTransactionType = ((ReferenceField)recAcctDetail.getField(AcctDetail.TRX_TYPE_ID)).getReference();
            if (recTransactionType != null)
                if (!recTransactionType.isNull())
            {
                if (recTransactionType.getField(TransactionType.SOURCE_TRX_STATUS_ID).getValue() == this.getField(BaseTrx.TRX_STATUS_ID).getValue())
                {
                    if (this.getField(BaseTrx.TRX_ENTRY).equals(recAcctDetailDist.getField(AcctDetailDist.TRX_ENTRY)))
                        continue;   // This is one of my new transactions (Don't reverse)
                    boolean bSuccess = this.onVoidDist(recAcctDetailDist);
                    if (!bSuccess)
                        return bSuccess;
                }
            }
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}
return true;    // Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="466">
		<LastChanged>2012-01-31T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,020</Sequence>
		<MethodName>onVoidTrx</MethodName>
		<LogicDescription>Zero this part of the transaction</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[// Step 2a - Write the transaction.
if (this.getField(BaseTrx.AMOUNT_LOCAL).getValue() == 0)
    return this.setupErrorMessage(null, "Transaction already cleared");
try   {
    if (this.getEditMode() == Constants.EDIT_CURRENT)
    {
        if (this.edit() != DBConstants.NORMAL_RETURN)
            return this.setupErrorMessage(null, "Transaction in use, can't post");
    }
    if (this.getEditMode() != Constants.EDIT_IN_PROGRESS)
            return this.setupErrorMessage(null, "Not a valid transaction, can't post");

    this.getField(BaseTrx.AMOUNT_LOCAL).setValue(0);      // Void this trx
    Object objectID = this.getHandle(DBConstants.DATA_SOURCE_HANDLE);
    this.set();
    this.setHandle(objectID, DBConstants.DATA_SOURCE_HANDLE);   // Restore

} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}
return true;    // Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="467">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BatchSequenceHandler</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>null, fldDest, fldSource</MethodReturns>
		<MethodInterface>BaseField fldDest, BaseField fldSource, BaseField fldBalance</MethodInterface>
		<MethodClassName>BatchSequenceHandler</MethodClassName>
		<LogicSource>m_fldBalance = fldBalance;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="468">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getBumpValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BatchSequenceHandler</MethodClassName>
		<LogicSource><![CDATA[double dIncAmount = 0;
double dAmount = m_fldBalance.getValue();
if (dAmount == 0)
    dIncAmount = 1;	// Bump sequence no when balance is 0.
return dIncAmount;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="475">
		<LastChanged>2012-01-31T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAgencyScreen</MethodClassName>
		<LogicSource><![CDATA[super;

Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Profile recProfile = (Profile)this.getRecord(Profile.PROFILE_FILE);
recBooking.addSecondProfile(recProfile);	// Agency Secondary logic
recProfile.setOpenMode(DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);
recProfile.addListener(new UpdateOnCloseHandler(null));	// Make sure profile information is updated]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="476">
		<LastChanged>2012-01-31T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAgencyScreen</MethodClassName>
		<LogicSource><![CDATA[return this.getRecord(Booking.BOOKING_FILE);	// Booking file is the main file]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="477">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAgencyScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Profile(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="478">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAgencyScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="481">
		<LastChanged>2012-07-19T14:24:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourScreen</MethodClassName>
		<LogicSource><![CDATA[super;

Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReferenceRecord();
TourHeader recTourHeader = (TourHeader)((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReferenceRecord();
TourClass recTourClass = (TourClass)((ReferenceField)recTourHeader.getField(TourHeader.TOUR_CLASS_ID)).getReferenceRecord(this);
Inventory recInventory = (Inventory)this.getRecord(Inventory.INVENTORY_FILE);
try {
    if (((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference() == null)
        recTour.addNew();
    if (((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReference() == null)
        recTourHeader.addNew();
} catch (DBException ex)    {
}

BaseField fldTourCode = this.getRecord(TourHeader.TOUR_HEADER_FILE).getField(TourHeader.CODE);
BaseField fldDepartureDate = this.getRecord(Tour.TOUR_FILE).getField(Tour.DEPARTURE_DATE);
BaseField fldTourDesc = this.getRecord(TourHeader.TOUR_HEADER_FILE).getField(TourHeader.DESCRIPTION);

FieldListener fieldBehavior = null;
fieldBehavior = new ChangeTourHeaderHandler(recTourHeader, recTourClass, recTour, recBooking, fldTourCode, fldDepartureDate, null);
fldTourCode.addListener(fieldBehavior);
recInventory.addListener(new FileRemoveBOnCloseHandler(fieldBehavior));
fieldBehavior = new ChangeTourHeaderHandler(recTourHeader, recTourClass, recTour, recBooking, fldTourCode, fldDepartureDate, fldTourDesc);
fldDepartureDate.addListener(fieldBehavior);
recInventory.addListener(new FileRemoveBOnCloseHandler(fieldBehavior));
fieldBehavior = new ChangeTourHeaderHandler(recTourHeader, recTourClass, recTour, recBooking, null, fldDepartureDate, fldTourDesc);
fldTourDesc.addListener(fieldBehavior);
recInventory.addListener(new FileRemoveBOnCloseHandler(fieldBehavior));

// Make sure you switch to the options screen if always resolve is set, also change when option button is pressed
fldTourCode.addListener(fieldBehavior = new CheckTourOptionDisplay(null));
recInventory.addListener(new FileRemoveBOnCloseHandler(fieldBehavior));
fldDepartureDate.addListener(fieldBehavior = new CheckTourOptionDisplay(null));
recInventory.addListener(new FileRemoveBOnCloseHandler(fieldBehavior));
fldTourDesc.addListener(fieldBehavior = new CheckTourOptionDisplay(null));
recInventory.addListener(new FileRemoveBOnCloseHandler(fieldBehavior));
this.getRecord(Booking.BOOKING_FILE).getField(Booking.ASK_FOR_ANSWER).addListener(fieldBehavior = new DisableOnFieldHandler(this.getRecord(Booking.BOOKING_FILE).getField(Booking.ASK_FOR_ANSWER), BooleanField.YES, false));
recInventory.addListener(new FileRemoveBOnCloseHandler(fieldBehavior));
this.getRecord(Booking.BOOKING_FILE).getField(Booking.ALWAYS_RESOLVE).addListener(fieldBehavior = new DisableOnFieldHandler(this.getRecord(Booking.BOOKING_FILE).getField(Booking.ALWAYS_RESOLVE), BooleanField.YES, false));
recInventory.addListener(new FileRemoveBOnCloseHandler(fieldBehavior));

// Make sure the screen record's field is set to the header ID
ReadSecondaryHandler pBehavior2 = new ReadSecondaryHandler(recTourHeader, null, DBConstants.DONT_CLOSE_ON_FREE, false, false);
this.getScreenRecord().getField(TourEntryScreenRecord.TOUR_HEADER_ID).addListener(pBehavior2);
recInventory.addListener(new FileRemoveBOnCloseHandler(pBehavior2));

if (recBooking.getField(Booking.TOUR_ID).getListener(CalcBookingDatesHandler.class) == null)
	recBooking.getField(Booking.TOUR_ID).addListener(new CalcBookingDatesHandler(recTour, recTourHeader));

FileListener fileBeh = null;
recTourHeader.addListener(fileBeh = new DisplayReadHandler(TourHeader.TOUR_CLASS_ID, this.getRecord(TourClass.TOUR_CLASS_FILE), TourClass.ID));
recInventory.addListener(new FileRemoveBOnCloseHandler(fileBeh));        
fileBeh = new EnableOnValidHandler(true, false);
recTour.addListener(fileBeh);
recInventory.addListener(new FileRemoveBOnCloseHandler(fileBeh));

fileBeh = new EnableOnValidHandler(Tour.DEPARTURE_DATE, EnableOnValidHandler.ENABLE_ON_VALID, EnableOnValidHandler.ENABLE_ON_NEW);
recTour.addListener(fileBeh); // Make sure date remains enabled
recInventory.addListener(new FileRemoveBOnCloseHandler(fileBeh));

fileBeh = new EnableOnValidHandler(Tour.SERV_CONF, EnableOnValidHandler.DISABLE_ON_VALID, EnableOnValidHandler.DISABLE_ON_NEW);
recTour.addListener(fileBeh); // Make sure date remains enabled
recInventory.addListener(new FileRemoveBOnCloseHandler(fileBeh));

recInventory.addListener(new UpdateOnCloseHandler(recTour, true));

fileBeh = new EnableOnValidHandler(this.getRecord(Tour.TOUR_FILE).getField(Tour.ID), true, false)
{
    public void setEnabled(boolean bEnableFlag)   // Init this field override for other value
    {
        if (bEnableFlag)
        {
            Record recTourHeader = this.getOwner();
            bEnableFlag = recTourHeader.getField(TourHeader.TOUR_SERIES).getState();    // Only for series tours
        }
        super.setEnabled(bEnableFlag);   // Init this field override for other value
    }
};
recTourHeader.addListener(fileBeh);
recInventory.addListener(new FileRemoveBOnCloseHandler(fileBeh));

fileBeh = new TourHeaderSelectHandler(null);
recTourHeader.addListener(fileBeh);
recInventory.addListener(new FileRemoveBOnCloseHandler(fileBeh));

ProductType recProductType = new ProductType(this);
int iProductType = recProductType.getProductTypeID(recTourHeader);
recProductType.free();
recProductType = null;
BaseField fldTourID = this.getRecord(TourHeader.TOUR_HEADER_FILE).getField(TourHeader.ID);
recTourHeader.addListener(new LookupInventoryHandler(recInventory, iProductType, fldTourID, fldDepartureDate, null, null));

this.getScreenRecord().getField(TourEntryScreenRecord.LAND_CLASS_ID).addListener(new UpdatePMC(recTour.getField(Tour.PMC_CUTOFF)));
if (recTour.getField(Tour.PMC_CUTOFF).getListener(UpdateLandClass.class) == null)
	recTour.getField(Tour.PMC_CUTOFF).addListener(new UpdateLandClass(this.getScreenRecord().getField(TourEntryScreenRecord.LAND_CLASS_ID)));

recTour.addScreenListeners(this);

fieldBehavior = new ChangeTourHeaderHandler(recTourHeader, recTourClass, recTour, recBooking, null, fldDepartureDate, fldTourDesc);
this.getScreenRecord().getField(TourEntryScreenRecord.TOUR_HEADER_ID).addListener(fieldBehavior);

this.getRecord(Tour.TOUR_FILE).addListener(fileBeh = new FileListener(null)
{
    public int doRecordChange(FieldInfo field, int iChangeType, boolean bDisplayOption)
    {
        int iErrorCode = super.doRecordChange(field, iChangeType, bDisplayOption);
        if (iErrorCode == DBConstants.NORMAL_RETURN)
            if (iChangeType == DBConstants.SELECT_TYPE)
        {
            BaseField fldDepartureDate = this.getOwner().getField(Tour.DEPARTURE_DATE);
            FieldListener listener = fldDepartureDate.getListener(ChangeTourHeaderHandler.class);
            listener.fieldChanged(bDisplayOption, DBConstants.SCREEN_MOVE); // Fake a departure date change
        }
        return iErrorCode;
    }
});
recInventory.addListener(new FileRemoveBOnCloseHandler(fileBeh));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="482">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourScreen</MethodClassName>
		<LogicSource>return new TourEntryScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="483">
		<LastChanged>2012-01-31T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourScreen</MethodClassName>
		<LogicSource><![CDATA[return this.getRecord(Booking.BOOKING_FILE);	// Booking file is the main file]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="484">
		<LastChanged>2012-01-31T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourScreen</MethodClassName>
		<LogicSource><![CDATA[new Inventory(this);
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReferenceRecord();	// These have already been set up in the screen header
TourHeader recTourHdr = (TourHeader)((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReferenceRecord();
TourClass recTourClass = (TourClass)((ReferenceField)recTourHdr.getField(TourHeader.TOUR_CLASS_ID)).getReferenceRecord(this);
if (this.getRecord(BookingControl.BOOKING_CONTROL_FILE) == null)
    new BookingControl(this);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="485">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="493">
		<LastChanged>2012-01-31T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LookupScreenRecord</MethodClassName>
		<LogicSource><![CDATA[super;

this.getField(LookupScreenRecord.BK_DISPLAY_TYPE).addListener(new SwitchBookingScreenHandler(null));

this.getField(LookupScreenRecord.BOOKING_LIST_FORMAT).addListener(new RegisterValueHandler(null));
int nCommandID = (int)this.getField(LookupScreenRecord.BOOKING_LIST_FORMAT).getValue();

this.getField(LookupScreenRecord.QUERY_KEY).addListener(new RegisterValueHandler(null));
this.getField(LookupScreenRecord.CURRENT_AGENT).addListener(new RegisterValueHandler(null));

this.getField(LookupScreenRecord.START_BK_DAYS).addListener(new RegisterValueHandler(null));
this.getField(LookupScreenRecord.START_BK_DATE).addListener(new InitDateOffsetHandler(this.getField(LookupScreenRecord.START_BK_DAYS), 0, 0, 0, false));
this.getField(LookupScreenRecord.START_BK_DATE).initField(DBConstants.DISPLAY);  // Recompute new initial value
this.getField(LookupScreenRecord.START_BK_DATE).addListener(new ReComputeTimeOffsetHandler(LookupScreenRecord.START_BK_DAYS));

this.getField(LookupScreenRecord.START_HDR_DAYS).addListener(new RegisterValueHandler(null));    
this.getField(LookupScreenRecord.TOUR_HDR_START_DATE).addListener(new InitDateOffsetHandler(this.getField(LookupScreenRecord.START_HDR_DAYS), 0, 0, 0));
this.getField(LookupScreenRecord.TOUR_HDR_START_DATE).initField(DBConstants.DISPLAY);   // Recompute new initial value
this.getField(LookupScreenRecord.TOUR_HDR_START_DATE).addListener(new ReComputeTimeOffsetHandler(LookupScreenRecord.START_HDR_DAYS));

this.getField(LookupScreenRecord.END_HDR_DAYS).addListener(new RegisterValueHandler(null));  
this.getField(LookupScreenRecord.TOUR_HDR_END_DATE).addListener(new ReComputeTimeOffsetHandler(LookupScreenRecord.END_HDR_DAYS));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="494">
		<LastChanged>2012-01-31T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>addBookingToolbar</MethodName>
		<LogicDescription>Add the standard toolbar for booking display</LogicDescription>
		<MethodReturns>ToolScreen</MethodReturns>
		<MethodInterface>BasePanel parentScreen</MethodInterface>
		<MethodClassName>LookupScreenRecord</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolScreen = new EmptyToolbar(null, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
this.getField(LookupScreenRecord.START_BK_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getField(LookupScreenRecord.CURRENT_AGENT).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getField(LookupScreenRecord.TOUR_HDR_END_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getField(LookupScreenRecord.TOUR_STATUS_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getField(LookupScreenRecord.BOOKING_STATUS_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
return toolScreen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="495">
		<LastChanged>2012-01-31T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,050</Sequence>
		<MethodName>addStandardToolbar</MethodName>
		<LogicDescription/>
		<MethodReturns>ToolScreen</MethodReturns>
		<MethodInterface>BasePanel parentScreen</MethodInterface>
		<MethodClassName>LookupScreenRecord</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolScreen = new EmptyToolbar(null, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
toolScreen.setupStartSFields();     // Back button
toolScreen.setupDisplaySFields();
//x new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Booking entry", Booking.BUTTON_LOCATION + "Booking", "Booking entry", null);
toolScreen.setupEndSFields();
this.getField(LookupScreenRecord.BK_DISPLAY_TYPE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getField(LookupScreenRecord.START_TARGET_FIELD).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getField(LookupScreenRecord.TOUR_HDR_START_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
return toolScreen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="496">
		<LastChanged>2012-01-31T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>addTourHdrToolbar</MethodName>
		<LogicDescription/>
		<MethodReturns>ToolScreen</MethodReturns>
		<MethodInterface>BasePanel parentScreen</MethodInterface>
		<MethodClassName>LookupScreenRecord</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolScreen = new EmptyToolbar(null, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
this.getField(LookupScreenRecord.TOUR_HDR_BROCHURE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getField(LookupScreenRecord.TOUR_HDR_AIRLINE_CODE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getField(LookupScreenRecord.TOUR_HDR_TOUR_TYPE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getField(LookupScreenRecord.TOUR_HDR_END_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
return toolScreen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="497">
		<LastChanged>2012-01-31T10:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>addTourToolbar</MethodName>
		<LogicDescription>Add the tour departure toolbar</LogicDescription>
		<MethodReturns>ToolScreen</MethodReturns>
		<MethodInterface>BasePanel parentScreen</MethodInterface>
		<MethodClassName>LookupScreenRecord</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolScreen = new EmptyToolbar(null, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
this.getField(LookupScreenRecord.TOUR_HDR_END_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getField(LookupScreenRecord.TOUR_HDR_TOUR_TYPE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

TourHeader recTourHeader = (TourHeader)((ReferenceField)this.getField(LookupScreenRecord.TOUR_HEADER_ID)).getReferenceRecord();
QueryConverter tourHdrConv = new QueryConverter((ReferenceField)this.getField(LookupScreenRecord.TOUR_HEADER_ID), recTourHeader, TourHeader.DESCRIPTION, true);
BaseField fldDepartureDate = this.getField(LookupScreenRecord.DEPARTURE_DATE);
BaseField fldStartDate = this.getField(LookupScreenRecord.START_TARGET_DATE);
BaseField fldEndDate = this.getField(LookupScreenRecord.END_TARGET_DATE);
recTourHeader.createTourHeaderPopup(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, tourHdrConv, ScreenConstants.DEFAULT_DISPLAY, fldDepartureDate, fldStartDate, fldEndDate, null);

this.getField(LookupScreenRecord.TOUR_STATUS_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

return toolScreen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="502">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RoomTypeField</MethodClassName>
		<LogicSource><![CDATA[String tempString = Constants.BLANK;
switch((int)this.convertIndexToValue(index))
{
	case PaxCategory.SINGLE_ID:
		tempString = PaxCategory.SINGLE;break;
	case PaxCategory.DOUBLE_ID:
		tempString = PaxCategory.DOUBLE;break;
	case PaxCategory.TRIPLE_ID:
		tempString = PaxCategory.TRIPLE;break;
	case PaxCategory.QUAD_ID:
		tempString = PaxCategory.QUAD;break;
	case PaxCategory.CHILD_ID:
		tempString = PaxCategory.CHILD;break;
	default:
		tempString = DBConstants.BLANK;break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="503">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>convertIndexToValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RoomTypeField</MethodClassName>
		<LogicSource>return index;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="504">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>convertValueToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RoomTypeField</MethodClassName>
		<LogicSource>return (int)(value);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="505">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RoomTypeField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="506">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSummaryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="507">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>displayField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BkTourNum</MethodClassName>
		<LogicSource><![CDATA[super.DisplayField();
if (fBkTourQuery.getMainRecord().IsRecordNew())
{
char tempString[10];
int dataLength = this.getText(tempString);
fBkTourQuery.getMainRecord().getField(kTourID).setString(tempString, dataLength, DISPLAY);
}
return;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="508">
		<LastChanged>2012-01-31T10:43:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new BookingSoftDeleteHandler(this.getField(Booking.DELETED))); // @pend(don) Add this +++ this.getField(Booking.DELETED)));

this.addListener(new DateChangedHandler(Booking.MOD_DATE));

this.addListener(new SetUserIDHandler(Booking.EMPLOYEE_ID, true));
this.addListener(new SetUserIDHandler(Booking.EMPLOYEE_MOD_ID, false));

this.addListener(new UpdateArTrxHandler(null));

this.addListener(new NewBookingHandler(null));

this.getField(Booking.PAX).addListener(new CalcDepositHandler(null));
this.getField(Booking.TOUR_ID).addListener(new CalcDepositHandler(null));

this.getField(Booking.BOOKING_STATUS_ID).addListener(new BookingStatusEventHandler(TourEvent.BOOKING_STATUS));

this.getField(Booking.BOOKED).addListener(new TourEventHandler(TourEvent.BOOKING));
this.getField(Booking.DEPOSIT_RECEIVED).addListener(new TourEventHandler(TourEvent.DEPOSIT_RECEIVED));
this.getField(Booking.FINAL_PAYMENT_RECEIVED).addListener(new TourEventHandler(TourEvent.FINAL_PAYMENT_RECEIVED));
this.getField(Booking.DEPOSIT_DUE).addListener(new TourEventHandler(TourEvent.DEPOSIT_DUE));
this.getField(Booking.FINAL_PAYMENT_DUE).addListener(new TourEventHandler(TourEvent.FINAL_PAY_DUE));
this.getField(Booking.CANCELLED).addListener(new TourEventHandler(TourEvent.CANCELLATION));
this.getField(Booking.CANCELLED).addListener(new BookingCancelledEventHandler(null));

this.getField(Booking.BALANCE).addListener(new BookingPaymentEventHandler(null));

this.getField(Booking.BOOKED).addListener(new CalcBookingActionDateHandler(null));
this.getField(Booking.BOOKING_DATE).addListener(new CalcBookingActionDateHandler(null));
this.getField(Booking.DEPOSIT_DUE).addListener(new CalcBookingActionDateHandler(null));
this.getField(Booking.FINAL_PAYMENT_DUE).addListener(new CalcBookingActionDateHandler(null));
this.getField(Booking.DEPOSIT_DUE_DATE).addListener(new CalcBookingActionDateHandler(null));
this.getField(Booking.FINAL_PAYMENT_DUE_DATE).addListener(new CalcBookingActionDateHandler(null));

this.getField(Booking.TOUR_PRICING_TYPE_ID).addListener(new ChangePricingTypeHandler(null));
this.getField(Booking.NON_TOUR_PRICING_TYPE_ID).addListener(new ChangePricingTypeHandler(null));

this.getField(Booking.DESCRIPTION).addListener(new SyncBookingFieldHandler(Tour.DESCRIPTION));
this.getField(Booking.CODE).addListener(new SyncBookingFieldHandler(Tour.CODE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="509">
		<LastChanged>2012-04-06T10:29:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>addControlDefaults</MethodName>
		<LogicDescription>Add the defaults from the control file when you have a new record</LogicDescription>
		<MethodReturns>Rec</MethodReturns>
		<MethodInterface>Rec recBookingControl, Rec recProfileControl</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[if (recBookingControl == null)
{
    recBookingControl = new BookingControl(this.findRecordOwner());
    this.addListener(new FreeOnFreeHandler(recBookingControl));
}
if (recProfileControl == null)
{
    recProfileControl = new ProfileControl(this.findRecordOwner());
    this.addListener(new FreeOnFreeHandler(recProfileControl));
}
this.getField(Booking.BOOKING_STATUS_ID).addListener(new InitFieldHandler(recBookingControl.getField(BookingControl.BOOKING_STATUS_ID)));
this.getField(Booking.MARKUP).addListener(new InitFieldHandler(recBookingControl.getField(BookingControl.MARKUP)));
this.getField(Booking.TOUR_PRICING_TYPE_ID).addListener(new InitFieldHandler(recBookingControl.getField(BookingControl.TOUR_PRICING_TYPE_ID)));
this.getField(Booking.NON_TOUR_PRICING_TYPE_ID).addListener(new InitFieldHandler(recBookingControl.getField(BookingControl.NON_TOUR_PRICING_TYPE_ID)));
this.getField(Booking.STD_COMMISSION).addListener(new InitFieldHandler(recBookingControl.getField(BookingControl.AGENCY_COMM)));
this.getField(Booking.LANGUAGE_ID).addListener(new InitFieldHandler(recProfileControl.getField(ProfileControl.LANGUAGE_ID)));
this.getField(Booking.CURRENCYS_ID).addListener(new InitFieldHandler(recProfileControl.getField(ProfileControl.CURRENCYS_ID)));

this.getField(Booking.PAX).addListener(new InitFieldHandler((BaseField)recBookingControl.getField(BookingControl.PAX), true, true));
this.getField(Booking.SINGLE_PAX).addListener(new InitFieldHandler((BaseField)recBookingControl.getField(BookingControl.SINGLE_PAX), true, true));
this.getField(Booking.DOUBLE_PAX).addListener(new InitFieldHandler((BaseField)recBookingControl.getField(BookingControl.DOUBLE_PAX), true, true));

if (recBookingControl.getField(BookingControl.AUTO_BOOKING_CODE).getState() == true)
    this.addListener(new MoveIDToCodeHandler(Booking.CODE)); // If auto-booking numbers are turned on, set them
return recBookingControl;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="510">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,500</Sequence>
		<MethodName>addPaxMod</MethodName>
		<LogicDescription>Add this Pax to the list of pax mods</LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>BaseField paxModRecNo</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[if (m_rdwPaxMods == null)
	this.setupPaxMod();
//+if (m_rdwPaxMod.Find((int)paxModRecNo.getValue()) == -1)
//+m_rdwPaxMods.Add((int)paxModRecNo.getValue());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="513">
		<LastChanged>2012-04-06T17:01:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addTourDetail</MethodName>
		<LogicDescription><![CDATA[Add all the tour detail to this booking.
@param recTour
@param recTourHeader
@param recBookingPax
@param recBookingAnswer If null, set up the default booking answers.
@param dateStart
@return An error code or NORMAL_RETURN if okay.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>TourModel recTour, TourHeaderModel recTourHeader, BookingPaxModel recBookingPax, BookingAnswerModel recBookingAnswer, Date dateStart, Field fldAskForAnswer</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;

BookingAnswer recBookingAnswerNew = null;
BookingPax recBookingPaxNew = null;
FileListener listener = null;
if (recBookingAnswer == null)
{   // If booking answer is not passed in, set up the default answers.
    recBookingAnswer = new BookingAnswer(this.findRecordOwner());
    recBookingAnswerNew = (BookingAnswer)recBookingAnswer;
    iErrorCode = ((BookingAnswer)recBookingAnswer).setupAnswerDetail(TourHeaderOption.TOUR, (BaseField)recTourHeader.getField(TourHeader.ID), (BaseField)recTourHeader.getField(TourHeader.ID), this, (BookingPax)recBookingPax, dateStart, (BaseField)fldAskForAnswer, true);
    if (iErrorCode != DBConstants.NORMAL_RETURN)
        return iErrorCode;
}

BaseField fldTourModuleID = (BaseField)recTourHeader.getField(TourHeader.ID);
try {
    if (recBookingPax == null)
    {
        recBookingPax = new BookingPax(this.findRecordOwner());
        recBookingPaxNew = (BookingPax)recBookingPax;
    }
    if (recBookingPax.getField(BookingPax.ID).isNull())
        recBookingPax.getField(BookingPax.ID).setValue(0);

    recBookingAnswer.setKeyArea(BookingAnswer.SCAN_ORDER_KEY);
    ((Record)recBookingAnswer).addListener(listener = new SubFileFilter(this.getField(Booking.ID), BookingAnswer.BOOKING_ID, (BaseField)recBookingPax.getField(BookingPax.ID), BookingAnswer.BOOKING_PAX_ID, fldTourModuleID, BookingAnswer.MODULE_ID));
//+++    recBookingAnswer.addListener(listener2 = new SubFileFilter(dateStart, BookingAnswer.MODULE_START_DATE, null, -1, null, -1));
    recBookingAnswer.getTable().close();
    while (recBookingAnswer.getTable().hasNext())
    {
        recBookingAnswer.getTable().next();
        iErrorCode = ((BookingAnswer)recBookingAnswer).addAnswerDetail(this, (Tour)recTour, (BookingPax)recBookingPax, fldTourModuleID, dateStart);
        if (iErrorCode != DBConstants.NORMAL_RETURN)
            ; // Keep going
    }
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    ((Record)recBookingAnswer).removeListener(listener, true);
    if (recBookingAnswerNew != null)
        recBookingAnswer.free();
    recBookingAnswer = null;
    if (recBookingPaxNew != null)
        recBookingPaxNew.free();
    recBookingPaxNew = null;
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="514">
		<LastChanged>2012-04-06T10:17:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>calcBookingDates</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Rec recTour, Rec recTourHeader</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[TourClass recTourClass = (TourClass)((ReferenceField)recTourHeader.getField(TourHeader.TOUR_CLASS_ID)).getReference();
recTourClass.fixBasedFields();
Calendar depositDate = ((DateTimeField)this.getField(Booking.BOOKING_DATE)).getCalendar();
// Add deposit due days to booking date
depositDate.add(Calendar.DATE, (int)recTourClass.getField(TourClass.DEPOSIT_DUE_DAYS).getValue());

Calendar finalDate = ((DateTimeField)recTour.getField(Tour.DEPARTURE_DATE)).getCalendar();
// Subtract Final payment days from departure date.
finalDate.add(Calendar.DATE, -(int)recTourClass.getField(TourClass.FINAL_PAY_DAYS).getValue());

Calendar calCurrentTime = Calendar.getInstance();
if (finalDate.before(calCurrentTime))
    finalDate = calCurrentTime; 
((DateTimeField)this.getField(Booking.FINAL_PAYMENT_DUE_DATE)).setCalendar(finalDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
if (depositDate.after(finalDate))
    depositDate = finalDate;
((DateTimeField)this.getField(Booking.DEPOSIT_DUE_DATE)).setCalendar(depositDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);

if (!recTourClass.getField(TourClass.INITIAL_BOOKING_STATUS_ID).isNull())
    this.getField(Booking.BOOKING_STATUS_ID).moveFieldToThis(recTourClass.getField(TourClass.INITIAL_BOOKING_STATUS_ID));
if (!recTourClass.getField(TourClass.MARKUP).isNull())
    this.getField(Booking.MARKUP).moveFieldToThis(recTourClass.getField(TourClass.MARKUP));
if (!recTourClass.getField(TourClass.TOUR_PRICING_TYPE_ID).isNull())
    this.getField(Booking.TOUR_PRICING_TYPE_ID).moveFieldToThis(recTourClass.getField(TourClass.TOUR_PRICING_TYPE_ID));
if (!recTourClass.getField(TourClass.NON_TOUR_PRICING_TYPE_ID).isNull())
    this.getField(Booking.NON_TOUR_PRICING_TYPE_ID).moveFieldToThis(recTourClass.getField(TourClass.NON_TOUR_PRICING_TYPE_ID));
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="515">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription>Destructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[if (m_rdwPaxMods != null)
	m_rdwPaxMods.removeAllElements();
m_rdwPaxMods = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="517">
		<LastChanged>2012-02-02T22:37:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>getCountPax</MethodName>
		<LogicDescription>Get number of pax</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource>return (int)this.getField(Booking.PAX).getValue();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="518">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>getCountPaxMod</MethodName>
		<LogicDescription>Get number of pax for this mod</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[if (m_rdwPaxMods == null)
	return this.getCountPax();
return m_rdwPaxMods.size();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="519">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>getPaxMod</MethodName>
		<LogicDescription>Get the pax mod at this index</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>int nIndex</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[if (m_rdwPaxMods == null)
	this.setupPaxMod();
return ((Integer)m_rdwPaxMods.elementAt(nIndex)).intValue();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="520">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,400</Sequence>
		<MethodName>removePaxMod</MethodName>
		<LogicDescription>Remove the mod at this position</LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>int nIndex</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[if (m_rdwPaxMods == null)
	return;
m_rdwPaxMods.removeElementAt(nIndex);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="522">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,500</Sequence>
		<MethodName>setupPaxMod</MethodName>
		<LogicDescription>Init/Clear the Pax Mod List</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[if (m_rdwPaxMods != null)
	m_rdwPaxMods = new Vector();
m_rdwPaxMods.removeAllElements();
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="524">
		<LastChanged>2012-01-31T10:43:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;        

this.setAppending(false);
this.setEditing(false);
this.getMainRecord().setSelected(true); // Need all selected to do source command.

ArTrx recArTrx = (ArTrx)this.getRecord(ArTrx.AR_TRX_FILE);
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
recBooking.addArDetail(recArTrx, null, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="525">
		<LastChanged>2012-01-31T10:43:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = super;

ToolScreen toolbar2 = new EmptyToolbar(this.getNextLocation(ScreenConstants.LAST_LOCATION, ScreenConstants.DONT_SET_ANCHOR), this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
BaseField converter = null;
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.GROSS);
ScreenComponent sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.STD_COMMISSION);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.NET);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);

converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.DEPOSIT);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.DEPOSIT_DUE_DATE);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);

converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.FINAL_PAYMENT_DUE_DATE);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.BALANCE);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);

return toolbar;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="526">
		<LastChanged>2012-01-31T10:43:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getRecord(ArTrx.AR_TRX_FILE) != null)
    return this.getRecord(ArTrx.AR_TRX_FILE);
return new ArTrx(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="528">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="529">
		<LastChanged>2012-01-31T10:43:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource><![CDATA[super;
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);

BookingDetail record = (BookingDetail)this.getMainRecord();
record.setKeyArea(BookingDetail.BOOKING_ID_KEY);
record.addDetailBehaviors(recBooking, recTour);
record.addListener(new CompareFileFilter(BookingDetail.PRODUCT_STATUS_ID, Integer.toString(ProductStatus.CANCELED), FileListener.NOT_EQUAL, null, true));
record.addListener(new CompareFileFilter(BookingDetail.PRODUCT_TYPE_ID, Integer.toString(ProductType.ITEM_ID), FileListener.NOT_EQUAL, null, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="530">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource>return new BookingDetailScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="532">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource>return new BookingDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="535">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getDescription</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource>return this.getBookingDetail().getProductDesc();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="536">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>getEndDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource>return this.getBookingDetail().getEndDate();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="537">
		<LastChanged>2012-02-08T04:49:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>170</Sequence>
		<MethodName>getHighlightColor</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource><![CDATA[String strProductType = this.getBookingDetail().getField(BookingDetail.PRODUCT_TYPE).toString();
int color = Colors.NULL;
if (strProductType != null)
    color = m_htcolorHighlight.get(strProductType);
if (color == Colors.NULL)
    color = Colors.GREEN;
return color;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="538">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>140</Sequence>
		<MethodName>getIcon</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource><![CDATA[String strIcon = null;
if (iIconType == CalendarConstants.START_ICON)
    strIcon = this.getBookingDetail().getStartIcon();
else if (iIconType == CalendarConstants.END_ICON)
    strIcon = this.getBookingDetail().getEndIcon();
else if (iIconType == CalendarConstants.START_ICON + BookingConstants.INFO_LOOKUP)
    return m_iconLookup;
else if (iIconType == CalendarConstants.START_ICON + BookingConstants.COST_LOOKUP)
    return m_iconPrice;
else if (iIconType == CalendarConstants.START_ICON + BookingConstants.INVENTORY_LOOKUP)
    return m_iconInventory;
else if (iIconType == CalendarConstants.START_ICON + BookingConstants.PRODUCT_LOOKUP)
    return m_iconProduct;
else
    return null;    //??        if (strIcon == null)
if (strIcon == null)
    return null;
return this.getTask().loadImageIcon(strIcon, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="539">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>160</Sequence>
		<MethodName>getMealDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource>return this.getBookingDetail().getMealDesc(date, false, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="540">
		<LastChanged>2012-02-08T04:52:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>180</Sequence>
		<MethodName>getSelectColor</MethodName>
		<LogicDescription>Get the selection colot</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource><![CDATA[return Colors.NULL;	// Have the calendar screen figure out a color]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="541">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>getStartDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource>return this.getBookingDetail().getStartDate();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="542">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>190</Sequence>
		<MethodName>getVisualJavaBean</MethodName>
		<LogicDescription>Get the Visual Javabean</LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>int iPanelType</MethodInterface>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource>return null;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="543">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>230</Sequence>
		<MethodName>setEndDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource><![CDATA[this.editTargetRecord();
date = this.getBookingDetail().setEndDate(date);
this.updateTargetRecord();
return date;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="545">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>220</Sequence>
		<MethodName>setStartDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource><![CDATA[this.editTargetRecord();
date = this.getBookingDetail().setStartDate(date);
this.updateTargetRecord();
return date;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="558">
		<LastChanged>2012-03-28T16:36:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingField</MethodClassName>
		<LogicSource>return Record.makeRecordFromClassName(BookingModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="559">
		<LastChanged>2012-03-28T16:37:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingField</MethodClassName>
		<LogicSource><![CDATA[Record recBooking = this.getReferenceRecord();
Converter fldDisplayFieldDesc = recBooking.getField(BookingModel.DESCRIPTION);
fldDisplayFieldDesc = new FieldLengthConverter(fldDisplayFieldDesc, 30);
return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, recBooking, BookingModel.CODE_KEY, fldDisplayFieldDesc, true, true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="560">
		<LastChanged>2012-02-01T14:31:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(false);
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
BookingPax recBookingPax = (BookingPax)this.getRecord(BookingPax.BOOKING_PAX_FILE);
Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
Record screenRecord = this.getScreenRecord();

int iCommandID = (int)screenRecord.getField(LookupScreenRecord.BOOKING_LIST_FORMAT).getValue();
if (((NumberField)screenRecord.getField(LookupScreenRecord.QUERY_KEY)).getValue() > 5)
    ((NumberField)screenRecord.getField(LookupScreenRecord.QUERY_KEY)).setValue(0);
FieldListener behCheckRange = new CheckRangeHandler(-5, 5);
screenRecord.getField(LookupScreenRecord.QUERY_KEY).addListener(behCheckRange);
recBooking.addListener(new FileRemoveBOnCloseHandler(behCheckRange));

KeyArea tempKey = recBooking.makeIndex(DBConstants.NOT_UNIQUE, null); // Add temp key
tempKey.addKeyField(Booking.GENERIC_NAME, DBConstants.ASCENDING);        // by Agency name
SortOrderHandler behQueryKeyHandler = new SortOrderHandler(this);
behQueryKeyHandler.setGridTable(Tour.DESCRIPTION_KEY, recTour, -1);
behQueryKeyHandler.setGridTable(Tour.DEPARTURE_DATE_KEY, recTour, -1);
behQueryKeyHandler.setGridTable(BookingPax.SUR_NAME_KEY, recBookingPax, -1);
behQueryKeyHandler.setGridTable(Booking.BOOKING_DATE_KEY, recBooking, -1);
behQueryKeyHandler.setGridTable(Booking.MOD_DATE_KEY, recBooking, -1);
behQueryKeyHandler.setGridTable(tempKey.getKeyName(), recBooking, -1);
screenRecord.getField(LookupScreenRecord.QUERY_KEY).addListener(behQueryKeyHandler);

this.getMainRecord().addListener(new CompareFileFilter(recBooking.getField(Booking.EMPLOYEE_ID), screenRecord.getField(LookupScreenRecord.CURRENT_AGENT), "=", null, true));
screenRecord.getField(LookupScreenRecord.CURRENT_AGENT).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(recBooking.getField(Booking.BOOKING_DATE), screenRecord.getField(LookupScreenRecord.START_BK_DATE), ">=", null, true));
screenRecord.getField(LookupScreenRecord.START_BK_DATE).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.DEPARTURE_DATE), screenRecord.getField(LookupScreenRecord.TOUR_HDR_START_DATE), ">=", null, true));
screenRecord.getField(LookupScreenRecord.TOUR_HDR_START_DATE).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.DEPARTURE_DATE), screenRecord.getField(LookupScreenRecord.TOUR_HDR_END_DATE), "<=", null, true));
screenRecord.getField(LookupScreenRecord.TOUR_HDR_END_DATE).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new StartSearchFilter(screenRecord.getField(LookupScreenRecord.START_TARGET_FIELD)));
screenRecord.getField(LookupScreenRecord.START_TARGET_FIELD).addListener(new FieldReSelectHandler(this));
FieldListener behInitOnChange = new InitOnChangeHandler(screenRecord.getField(LookupScreenRecord.START_TARGET_FIELD));
screenRecord.getField(LookupScreenRecord.QUERY_KEY).addListener(behInitOnChange);
recBooking.addListener(new FileRemoveBOnCloseHandler(behInitOnChange));

this.getMainRecord().addListener(new CompareFileFilter(Booking.BOOKING_STATUS_ID, screenRecord.getField(LookupScreenRecord.BOOKING_STATUS_ID), "=", null, true));
screenRecord.getField(LookupScreenRecord.BOOKING_STATUS_ID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.TOUR_STATUS_ID), screenRecord.getField(LookupScreenRecord.TOUR_STATUS_ID), "=", null, true));
screenRecord.getField(LookupScreenRecord.TOUR_STATUS_ID).addListener(new FieldReSelectHandler(this));

this.getScreenRecord().getField(LookupScreenRecord.BK_DISPLAY_TYPE).setValue(DisplayTypeField.BOOKING_DISPLAY, DBConstants.DISPLAY, DBConstants.INIT_MOVE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="561">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
//x new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + "Booking", BOOKING_ENTRY, application.getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(BOOKING_ENTRY));
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="562">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (!(this.getScreenRecord() instanceof LookupScreenRecord))
    return new LookupScreenRecord(this);
else
    return this.getScreenRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="563">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingGridScreen</MethodClassName>
		<LogicSource><![CDATA[((LookupScreenRecord)this.getScreenRecord()).addStandardToolbar(this);  // I'm running stand-alone
return ((LookupScreenRecord)this.getScreenRecord()).addBookingToolbar(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="566">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingGridScreen</MethodClassName>
		<LogicSource>return new BookingLookupQuery(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="567">
		<LastChanged>2012-01-31T10:43:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record query = this.getMainRecord();

Converter converter = query.getField(Tour.TOUR_FILE, Tour.DESCRIPTION);
converter = new FieldLengthConverter(converter, 30);
this.addColumn(converter);
this.addColumn(query.getField(Tour.TOUR_FILE, Tour.DEPARTURE_DATE));
converter = query.getField(Tour.TOUR_FILE, Tour.TOUR_STATUS_ID);
this.addColumn(converter);
BookingPax recBookingPax = (BookingPax)this.getRecord(BookingPax.BOOKING_PAX_FILE);
converter = new FirstMLastConverter(recBookingPax, BookingPax.NAME_PREFIX, BookingPax.FIRST_NAME, BookingPax.MIDDLE_NAME, BookingPax.SUR_NAME);
converter = new FieldDescConverter(converter, "Passenger Name");
this.addColumn(converter);
converter = new DateConverter(query.getField(Booking.BOOKING_FILE, Booking.BOOKING_DATE), DBConstants.DATE_FORMAT);
this.addColumn(converter);
converter = query.getField(Booking.BOOKING_FILE, Booking.BOOKING_STATUS_ID);
this.addColumn(converter);
converter = new DateConverter(query.getField(Booking.BOOKING_FILE, Booking.MOD_DATE), DBConstants.DATE_FORMAT);
this.addColumn(converter);
this.addColumn(query.getField(Booking.BOOKING_FILE, Booking.GENERIC_NAME));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="568">
		<LastChanged>2012-02-02T22:45:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHistory</MethodClassName>
		<LogicSource><![CDATA[// Don't call inherited
this.addListener(new UniqueKeyHandler(this.getField(BookingHistory.HISTORY_DATE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="574">
		<LastChanged>2012-01-31T10:43:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>91</Sequence>
		<MethodName>setupEndDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotel</MethodClassName>
		<LogicSource><![CDATA[Date dateStart = this.getStartDate();
if (dateStart == null)
    return dateStart;
long lNights = (long)this.getField(BookingHotel.NIGHTS).getValue();
Date dateEnd = new Date(dateStart.getTime() + (lNights * DBConstants.KMS_IN_A_DAY));
Calendar calendar = DateTimeField.m_calendar;
int iHour = 12;	// Default 12:00 pm
int iMinute = 0;
if (this.getProduct() != null)
{
	Hotel recHotel = (Hotel)this.getProduct();
	if (!recHotel.getField(Hotel.CHECK_OUT).isNull())
	{
		calendar.setTime(((TimeField)recHotel.getField(Hotel.CHECK_OUT)).getDateTime());
		iHour = calendar.get(Calendar.HOUR_OF_DAY);
		iMinute = calendar.get(Calendar.MINUTE);
	}
}
calendar.setTime(dateEnd);
calendar.set(Calendar.HOUR_OF_DAY, iHour);
calendar.set(Calendar.MINUTE, iMinute);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);
dateEnd = calendar.getTime();
return dateEnd;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="575">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getEndIcon</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotel</MethodClassName>
		<LogicSource>return this.getStartIcon();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="577">
		<LastChanged>2012-02-02T19:59:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>95</Sequence>
		<MethodName>getMealDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotel</MethodClassName>
		<LogicSource><![CDATA[if (!this.getField(BookingDetail.MEAL_SUMMARY).isNull())
    if (!bDetailedDesc)
{ // Use the cached meal summary
    Date dateStart = this.getStartDate();
    Calendar calendar = Converter.gCalendar;
    calendar.setTime(dateStart);
    calendar.set(Calendar.HOUR_OF_DAY, 0);
    calendar.set(Calendar.MINUTE, 0);
    calendar.set(Calendar.SECOND, 0);
    calendar.set(Calendar.MILLISECOND, 0);
    dateStart = calendar.getTime();   // Start of day 0
    StringTokenizer st = new StringTokenizer(this.getField(BookingDetail.MEAL_SUMMARY).toString(), Constants.RETURN);
    if (dateTarget.before(dateStart))
        return null;
    for (int iDay = 0; ; iDay++)
    {
        if (!st.hasMoreTokens())
            return null;
        String strMealToken = st.nextToken();
        dateStart.setTime(dateStart.getTime() + Constants.KMS_IN_A_DAY);    // End of iDay
        if (dateTarget.before(dateStart))
            return strMealToken;
    }
}
MealPlan recMealPlanLocal = null;
Calendar calendar = DateTimeField.m_calendar;
if (recMealPlan != null)
    recMealPlanLocal = (MealPlan)recMealPlan;
else
    recMealPlanLocal = new MealPlan(this.findRecordOwner());
String strMealDesc = Constants.BLANK;
Date startDate = this.getStartDate();
calendar.setTime(startDate);
calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.MINUTE, 0);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);
startDate = calendar.getTime();

calendar.setTime(dateTarget);
calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.MINUTE, 0);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);
dateTarget = calendar.getTime();

long lTimeToTarget = dateTarget.getTime() - startDate.getTime();
long iTargetDay = lTimeToTarget / DBConstants.KMS_IN_A_DAY;   // Day 0 = first day
Hotel recHotel = (Hotel)this.getProduct();
if (recHotel != null)
    recHotel.setOpenMode(recHotel.getOpenMode() | DBConstants.OPEN_CACHE_RECORDS);    // Cache recently used records.
int iNights = (int)this.getField(BookingHotel.NIGHTS).getValue();
if (recHotel != null)
    if ((recHotel.getEditMode() == DBConstants.EDIT_CURRENT) || (recHotel.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
        if (iTargetDay < iNights)
{   // Add meal plan
    int iRateType = (int)this.getField(BookingHotel.RATE_ID).getValue();
    int iRateClass = (int)this.getField(BookingHotel.CLASS_ID).getValue();
    strMealDesc += recHotel.getMealDesc(dateTarget, iRateType, iRateClass, bDetailedDesc, recMealPlanLocal, null);
}
int mealID1 = this.getFieldSeq(BookingHotel.MEAL_PLAN_1ID);
int mealID2 = this.getFieldSeq(BookingHotel.MEAL_PLAN_2ID);
int mealID4 = this.getFieldSeq(BookingHotel.MEAL_PLAN_1ID);
for (int fieldSeq = mealID1; fieldSeq <= mealID4; fieldSeq += mealID2 - mealID1)
{
    if (this.getField(fieldSeq).getLength() != 0)
    {
        short iQty = (short)this.getField(fieldSeq+1).getValue();
        MealDays fldMealDays = (MealDays)this.getField(fieldSeq+2);
        for (short day = 0; day <= iTargetDay; day++)
        {   // Once for each day
            if (fldMealDays.mealOnThisDay(day))
            {
                if (day == iTargetDay) if (iQty > 0)
                {
                    if (strMealDesc.length() > 0)
                        strMealDesc += " ";
                    strMealDesc += recMealPlanLocal.getMealDesc(this.getField(fieldSeq), bDetailedDesc);
                }
                iQty--;   // One less meal
            }
        }
    }
}
if (recMealPlan == null)
    recMealPlanLocal.free();
return strMealDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="579">
		<LastChanged>2012-01-31T10:43:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>94</Sequence>
		<MethodName>setupProductDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotel</MethodClassName>
		<LogicSource><![CDATA[String string = super;
if (string != null)
    if (string.length() > 0)
{
    string += " - ";
    String tempString = this.getField(BookingHotel.NIGHTS).toString();
    string += tempString;
    string += " night";
    if (this.getField(BookingHotel.NIGHTS).getValue() > 1)
        string += "s";
}
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="582">
		<LastChanged>2012-04-12T07:50:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>99</Sequence>
		<MethodName>initBookingDetailFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotel</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
int iNights = 1;
if (this.getRecordOwner() != null)
    if (this.getRecordOwner().getRecord(BookingControl.BOOKING_CONTROL_FILE) != null)
        if (!this.getRecordOwner().getRecord(BookingControl.BOOKING_CONTROL_FILE).getField(BookingControl.NIGHTS).isNull())
            iNights = (int)this.getRecordOwner().getRecord(BookingControl.BOOKING_CONTROL_FILE).getField(BookingControl.NIGHTS).getValue();
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingHotel.NIGHTS).isNull()))
    this.getField(BookingHotel.NIGHTS).setValue(iNights, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingHotel.RATE_ID).isNull()))
    this.getField(BookingHotel.RATE_ID).moveFieldToThis((BaseField)recTour.getField(Tour.HOTEL_RATE_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingHotel.CLASS_ID).isNull()))
    this.getField(BookingHotel.CLASS_ID).moveFieldToThis((BaseField)recTour.getField(Tour.HOTEL_CLASS_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="585">
		<LastChanged>2012-02-01T10:14:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>moveTourHeaderFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotel</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;

if (recTourHeaderDetail != null)
{
    this.getField(BookingHotel.NIGHTS).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderHotel.NIGHTS));
    if (recTourHeaderDetail.getField(TourHeaderHotel.NIGHTS).getLength() != 0)
        this.getField(BookingHotel.NIGHTS).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderHotel.NIGHTS));
    int iDetailFieldSeq = recTourHeaderDetail.getFieldSeq(TourHeaderHotel.MEAL_1);
    int mealID1 = this.getFieldSeq(BookingHotel.MEAL_PLAN_1ID);
    int mealDays4 = this.getFieldSeq(BookingHotel.MEAL_PLAN_4_DAYS);
    for (int iFieldSeq = mealID1;  iFieldSeq <= mealDays4; iFieldSeq++, iDetailFieldSeq++)
    {   // Move meal stuff
        this.getField(iFieldSeq).moveFieldToThis(recTourHeaderDetail.getField(iDetailFieldSeq));
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="586">
		<LastChanged>2012-01-31T10:43:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>setDetailProductProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotel</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
int iNights = ((Integer)Utility.getAs(properties, BookingHotel.NIGHTS, Integer.class, IntegerField.ZERO)).intValue();
int iRateTypeID = ((Integer)Utility.getAs(properties, BookingHotel.RATE_ID, Integer.class, IntegerField.ZERO)).intValue();
int iRateClassID = ((Integer)Utility.getAs(properties, BookingHotel.CLASS_ID, Integer.class, IntegerField.ZERO)).intValue();
if ((this.getField(BookingHotel.NIGHTS).getValue() == 0) || (iNights > 0))
{
    if (iNights == 0)
        iNights = 1;
    this.getField(BookingHotel.NIGHTS).setValue(iNights);
}
Record recBooking = null;
if (!this.getField(BookingDetail.BOOKING_ID).isNull())
    recBooking = ((ReferenceField)this.getField(BookingDetail.BOOKING_ID)).getReference();
Record recTour = null;
if (recBooking != null)
    recTour = ((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
if ((this.getField(BookingHotel.RATE_ID).getValue() == 0) || (iRateTypeID != 0))
{
    if (iRateTypeID == 0)
        if (recTour != null)
            iRateTypeID = (int)recTour.getField(Tour.HOTEL_RATE_ID).getValue();
    if (iRateTypeID != 0)
        this.getField(BookingHotel.RATE_ID).setValue(iRateTypeID);
}
if ((this.getField(BookingHotel.CLASS_ID).getValue() == 0) || (iRateClassID != 0))
{
    if (iRateClassID == 0)
        if (recTour != null)
            iRateClassID = (int)recTour.getField(Tour.HOTEL_CLASS_ID).getValue();
    if (iRateClassID != 0)
        this.getField(BookingHotel.CLASS_ID).setValue(iRateClassID);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="587">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="588">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelGridScreen</MethodClassName>
		<LogicSource>return new BookingHotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="589">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="590">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="592">
		<LastChanged>2012-02-01T14:27:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BookingHotel recBookingHotel = (BookingHotel)this.getMainRecord();

recBookingHotel.getField(BookingHotel.NIGHTS).setEnabled(true);
for (int iFieldSeq = recBookingHotel.getFieldSeq(BookingHotel.MEAL_PLAN_1ID); iFieldSeq <= recBookingHotel.getFieldSeq(BookingHotel.MEAL_PLAN_4_DAYS); iFieldSeq++)
{
    recBookingHotel.getField(iFieldSeq).setEnabled(true);
}

recBookingHotel.getField(BookingHotel.MEAL_PLAN_1ID).addListener(new MoveOnChangeHandler(recBookingHotel.getField(BookingHotel.MEAL_PLAN_1_QTY), recBookingHotel.getField(BookingHotel.NIGHTS), true, false));
recBookingHotel.getField(BookingHotel.MEAL_PLAN_2ID).addListener(new MoveOnChangeHandler(recBookingHotel.getField(BookingHotel.MEAL_PLAN_2_QTY), recBookingHotel.getField(BookingHotel.NIGHTS), true, false));
recBookingHotel.getField(BookingHotel.MEAL_PLAN_3ID).addListener(new MoveOnChangeHandler(recBookingHotel.getField(BookingHotel.MEAL_PLAN_3_QTY), recBookingHotel.getField(BookingHotel.NIGHTS), true, false));
recBookingHotel.getField(BookingHotel.MEAL_PLAN_4ID).addListener(new MoveOnChangeHandler(recBookingHotel.getField(BookingHotel.MEAL_PLAN_4_QTY), recBookingHotel.getField(BookingHotel.NIGHTS), true, false));

// Display the USD equivalents
BaseField fldExchange = recBookingHotel.getField(BookingHotel.EXCHANGE);
Record recBookingHotelScreenRecord = this.getScreenRecord();
FieldListener fieldListener = null;
recBookingHotel.getField(BookingHotel.SINGLE_COST).addListener(fieldListener = new CalcBalanceHandler(recBookingHotelScreenRecord.getField(BookingHotelScreenRecord.SINGLE_COST_LOCAL), recBookingHotel.getField(BookingHotel.SINGLE_COST), fldExchange, CalcBalanceHandler.MULTIPLY, false));
fieldListener.setRespondsToMode(DBConstants.READ_MOVE, true);
recBookingHotel.getField(BookingHotel.DOUBLE_COST).addListener(fieldListener = new CalcBalanceHandler(recBookingHotelScreenRecord.getField(BookingHotelScreenRecord.DOUBLE_COST_LOCAL), recBookingHotel.getField(BookingHotel.DOUBLE_COST), fldExchange, CalcBalanceHandler.MULTIPLY, false));
fieldListener.setRespondsToMode(DBConstants.READ_MOVE, true);
recBookingHotel.getField(BookingHotel.TRIPLE_COST).addListener(fieldListener = new CalcBalanceHandler(recBookingHotelScreenRecord.getField(BookingHotelScreenRecord.TRIPLE_COST_LOCAL), recBookingHotel.getField(BookingHotel.TRIPLE_COST), fldExchange, CalcBalanceHandler.MULTIPLY, false));
fieldListener.setRespondsToMode(DBConstants.READ_MOVE, true);
recBookingHotel.getField(BookingHotel.QUAD_COST).addListener(fieldListener = new CalcBalanceHandler(recBookingHotelScreenRecord.getField(BookingHotelScreenRecord.QUAD_COST_LOCAL), recBookingHotel.getField(BookingHotel.QUAD_COST), fldExchange, CalcBalanceHandler.MULTIPLY, false));
fieldListener.setRespondsToMode(DBConstants.READ_MOVE, true);

for (int i = 0; i < this.getSFieldCount(); i++)
{
    ScreenField sField = this.getSField(i);
    if (sField instanceof SCannedBox)
    {
        String strCommand = ((SCannedBox)sField).getButtonCommand();
        if (Hotel.MEAL_DETAIL.equals(strCommand))
            this.getRecord(Hotel.HOTEL_FILE).addListener(new EnableOnValidHandler(sField, true, false));
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="593">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelScreen</MethodClassName>
		<LogicSource>return new BookingHotelScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="594">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelScreen</MethodClassName>
		<LogicSource>return new BookingHotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="595">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new HotelPricing(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="596">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="597">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLand</MethodClassName>
		<LogicSource><![CDATA[super;

FieldListener dependentStateListener = this.getField(BookingDetail.PRODUCT_TYPE).getListener(ProductTypeHandler.class);

FieldListener fieldListener = new RecomputeProductDesc(null);
fieldListener.setRespondsToMode(DBConstants.INIT_MOVE, false);
fieldListener.setRespondsToMode(DBConstants.READ_MOVE, false);
this.getField(BookingLand.CLASS_ID).addListener(fieldListener);
fieldListener.setDependentStateListener(dependentStateListener);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="603">
		<LastChanged>2012-04-12T07:49:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>95</Sequence>
		<MethodName>getMealDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLand</MethodClassName>
		<LogicSource><![CDATA[ProductModel recLand = this.getProduct();
if (recLand != null)
    recLand.setOpenMode(recLand.getOpenMode() | DBConstants.OPEN_CACHE_RECORDS);    // Cache recently used records.
if (recLand != null)
    if ((recLand.getEditMode() == DBConstants.EDIT_CURRENT) || (recLand.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
{
    short sBreakfasts = (short)recLand.getField(Land.BREAKFASTS).getValue();
    short sLunches = (short)recLand.getField(Land.LUNCHES).getValue();
    short sDinners = (short)recLand.getField(Land.DINNERS).getValue();
    return this.getMealDescFromCount(dateTarget, bDetailedDesc, recMealPlan, sBreakfasts, sLunches, sDinners);
}
return DBConstants.BLANK;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="605">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>94</Sequence>
		<MethodName>setupProductDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLand</MethodClassName>
		<LogicSource><![CDATA[String string = super;
if (string != null)
    if (string.length() > 0)
{
    Record recLandClass = ((ReferenceField)this.getField(BookingLand.CLASS_ID)).getReference();
    if (recLandClass != null)
        if (!recLandClass.getField(LandClass.DESCRIPTION).isNull())
            string += " - " + recLandClass.getField(LandClass.DESCRIPTION).toString();
}
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="607">
		<LastChanged>2012-04-12T07:49:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>98</Sequence>
		<MethodName>initBookingDetailFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLand</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
{
    if ((!bOnlyIfTargetIsNull) || (this.getField(BookingLand.RATE_ID).isNull()))
        this.getField(BookingLand.RATE_ID).moveFieldToThis((BaseField)recTour.getField(Tour.LAND_RATE_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    ReferenceField fldLandClass = (ReferenceField)this.getField(BookingLand.CLASS_ID);
    BaseField fldPMC = this.getField(BookingLand.PMC_CUTOFF);
    if ((!bOnlyIfTargetIsNull) || (fldPMC.isNull()))
        fldPMC.moveFieldToThis((BaseField)recTour.getField(Tour.PMC_CUTOFF), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    if ((!bOnlyIfTargetIsNull) || (fldLandClass.isNull()))
    {
        if (fldPMC.isNull())
            fldLandClass.moveFieldToThis((BaseField)recTour.getField(Tour.LAND_CLASS_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
        else
        {
            int iPaxCount = this.getNoPax();
            if (iPaxCount >= fldPMC.getValue())
                fldLandClass.setValue(fldLandClass.getIDFromCode(LandClass.PRIVATE_VEHICLE_CODE), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
            else
                fldLandClass.setValue(fldLandClass.getIDFromCode(LandClass.SEAT_IN_COACH_CODE), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
        }
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="609">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>99</Sequence>
		<MethodName>moveTourHeaderFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLand</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (recTourHeaderDetail != null)
{
    if (recTourHeaderDetail.getField(TourHeaderLand.PMC_CUTOFF).getLength() != 0)
        this.getField(BookingLand.PMC_CUTOFF).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderLand.PMC_CUTOFF), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
}
if (!this.getField(BookingLand.PMC_CUTOFF).isModified()) if (recTour.getField(Tour.PMC_CUTOFF).getLength() != 0)
    this.getField(BookingLand.PMC_CUTOFF).moveFieldToThis(recTour.getField(Tour.PMC_CUTOFF), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if (this.getField(BookingLand.CLASS_ID).getValue() == 0)
{
    BaseField fldPMC = this.getField(BookingLand.PMC_CUTOFF);
    ReferenceField fldLandClass = (ReferenceField)this.getField(BookingLand.CLASS_ID);
    if (fldPMC.isNull())
        fldLandClass.setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    else
    {
        int iPaxCount = this.getNoPax();
        if (iPaxCount >= fldPMC.getValue())
            fldLandClass.setValue(fldLandClass.getIDFromCode(LandClass.PRIVATE_VEHICLE_CODE), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
        else
            fldLandClass.setValue(fldLandClass.getIDFromCode(LandClass.SEAT_IN_COACH_CODE), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="610">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setDetailProductProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLand</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="611">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="612">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandGridScreen</MethodClassName>
		<LogicSource>return new BookingLand(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="613">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="614">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="616">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BookingLand recBookingLand = (BookingLand)this.getMainRecord();

recBookingLand.getField(BookingLand.PMC_CUTOFF).setEnabled(true);

// Display the USD equivalents
BaseField fldExchange = recBookingLand.getField(BookingDetail.EXCHANGE);
Record recBookingLandScreenRecord = this.getScreenRecord();
FieldListener fieldListener = null;
recBookingLand.getField(BookingLand.PMC_COST).addListener(fieldListener = new CalcBalanceHandler(recBookingLandScreenRecord.getField(BookingLandScreenRecord.PMC_COST_LOCAL), recBookingLand.getField(BookingLand.PMC_COST), fldExchange, CalcBalanceHandler.MULTIPLY, false));
fieldListener.setRespondsToMode(DBConstants.READ_MOVE, true);
recBookingLand.getField(BookingLand.SIC_COST).addListener(fieldListener = new CalcBalanceHandler(recBookingLandScreenRecord.getField(BookingLandScreenRecord.SIC_COST_LOCAL), recBookingLand.getField(BookingLand.SIC_COST), fldExchange, CalcBalanceHandler.MULTIPLY, false));
fieldListener.setRespondsToMode(DBConstants.READ_MOVE, true);
recBookingLand.getField(BookingLand.PP_COST).addListener(fieldListener = new CalcBalanceHandler(recBookingLandScreenRecord.getField(BookingLandScreenRecord.PP_COST_LOCAL), recBookingLand.getField(BookingLand.PP_COST), fldExchange, CalcBalanceHandler.MULTIPLY, false));
fieldListener.setRespondsToMode(DBConstants.READ_MOVE, true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="617">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandScreen</MethodClassName>
		<LogicSource>return new BookingLandScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="618">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandScreen</MethodClassName>
		<LogicSource>return new BookingLand(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="619">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="620">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="621">
		<LastChanged>2012-04-06T00:50:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLine</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(BookingLine.PRICE).addListener(new CalcLineFieldsHandler(null));
this.getField(BookingLine.QUANTITY).addListener(new CalcLineFieldsHandler(null));
this.getField(BookingLine.COMMISSION_RATE).addListener(new CalcLineFieldsHandler(null));
this.getField(BookingLine.PRICING_STATUS_ID).addListener(new InitFieldHandler(Integer.toString(PricingStatus.OKAY)));

Booking recBooking = (Booking)this.getBooking(false);
if (recBooking != null)
    this.addSubListeners(recBooking);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="622">
		<LastChanged>2012-04-13T16:01:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addDetailBehaviors</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLine</MethodClassName>
		<LogicSource><![CDATA[super;
if (recBooking != null)
{
    this.addListener(new SubCountHandler((BaseField)recBooking.getField(Booking.GROSS), BookingLine.GROSS, true, true));
    this.addListener(new SubCountHandler((BaseField)recBooking.getField(Booking.COMMISSION), BookingLine.COMMISSION, true, true));
    this.addListener(new SubCountHandler((BaseField)recBooking.getField(Booking.NET), BookingLine.NET, true, true));

    ((Record)recBooking).getField(Booking.NET).addListener(new SetDirtyOnChangeHandler((BaseField)recBooking.getField(Booking.BOOKING_STATUS_ID), true, true));  // This makes sure the booking will update which will trigger an A/R update
    ((Record)recBooking).addListener(new UpdateOnCloseHandler(null));

    this.addSubListeners((Booking)recBooking);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="624">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getBitmap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLine</MethodClassName>
		<LogicSource>return Booking.BUTTON_LOCATION + "Price";</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="625">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setDetailProductFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLine</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(BookingLine.SEQUENCE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderLine.SEQUENCE));
this.getField(BookingLine.DESCRIPTION).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderLine.DESCRIPTION));
this.getField(BookingLine.PRICE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderLine.PRICE));

Record recPaxCategory = ((ReferenceField)recTourHeaderDetail.getField(TourHeaderLine.PAX_CATEGORY_ID)).getReference();
if (recPaxCategory != null)
{
    int iPaxCat = (int)recPaxCategory.getField(PaxCategory.ROOM_TYPE).getValue();
    if (iPaxCat == PaxCategory.SINGLE_ID)
        this.getField(BookingLine.QUANTITY).moveFieldToThis(recBooking.getField(Booking.SINGLE_PAX));
    else if (iPaxCat == PaxCategory.DOUBLE_ID)
        this.getField(BookingLine.QUANTITY).moveFieldToThis(recBooking.getField(Booking.DOUBLE_PAX));
    else if (iPaxCat == PaxCategory.TRIPLE_ID)
        this.getField(BookingLine.QUANTITY).moveFieldToThis(recBooking.getField(Booking.TRIPLE_PAX));
    else if (iPaxCat == PaxCategory.QUAD_ID)
        this.getField(BookingLine.QUANTITY).moveFieldToThis(recBooking.getField(Booking.QUAD_PAX));
    else if (iPaxCat == PaxCategory.CHILD_ID)
        this.getField(BookingLine.QUANTITY).moveFieldToThis(recBooking.getField(Booking.CHILDREN));
    else if ((iPaxCat == 0) || (iPaxCat == PaxCategory.ALL_ID))
        this.getField(BookingLine.QUANTITY).moveFieldToThis(recBooking.getField(Booking.PAX));
}
this.getField(BookingLine.COMMISSIONABLE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderLine.COMMISSIONABLE));
if ((recTourHeaderDetail.getField(TourHeaderLine.COMMISSIONABLE).getState() == true) || (recTourHeaderDetail.getField(TourHeaderLine.COMMISSION_RATE).isNull()))
    this.getField(BookingLine.COMMISSION_RATE).moveFieldToThis(recBooking.getField(Booking.STD_COMMISSION));
else
    this.getField(BookingLine.COMMISSION_RATE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderLine.COMMISSION_RATE));
this.getField(BookingLine.PAY_AT).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderLine.PAY_AT));
if (this.getField(BookingLine.QUANTITY).getValue() == 0)
    return DBConstants.ERROR_RETURN;    // This is not an error, it just tells the caller not to write this record.
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="626">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BookingLine recBookingLine = (BookingLine)this.getRecord(BookingLine.BOOKING_LINE_FILE);
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
recBooking.addArDetail(null, recBookingLine, false);

recBookingLine.getField(BookingLine.PRICE).addListener(new CopyDataHandler(recBookingLine.getField(BookingLine.PRICING_STATUS_ID), new Integer(PricingStatus.MANUAL), null));
recBookingLine.addListener(new BookingLineStatusHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="627">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = super;

ToolScreen toolbar2 = new EmptyToolbar(this.getNextLocation(ScreenConstants.LAST_LOCATION, ScreenConstants.DONT_SET_ANCHOR), this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
BaseField converter = null;
ScreenComponent sField = null;

converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.GROSS);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.NET);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.PRICING_STATUS_ID);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);

converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.TOUR_PRICING_TYPE_ID);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.NON_TOUR_PRICING_TYPE_ID);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);

return toolbar;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="628">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getRecord(BookingLine.BOOKING_LINE_FILE) != null)
    return this.getRecord(BookingLine.BOOKING_LINE_FILE);
return new BookingLine(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="629">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="630">
		<LastChanged>2012-02-02T22:43:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineHistory</MethodClassName>
		<LogicSource><![CDATA[// Don't call inherited
this.addListener(new UniqueKeyHandler(this.getField(BookingLineHistory.HISTORY_DATE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="631">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLookupQuery</MethodClassName>
		<LogicSource><![CDATA[this.addTable(new Booking(recordOwner));
this.addTable(new Tour(recordOwner));
this.addTable(new BookingPax(recordOwner));
//this.setGridFile(bkBooking, Booking.BOOKING_DATE_KEY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="632">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLookupQuery</MethodClassName>
		<LogicSource><![CDATA[this.setSelected(false);
super;
this.getField(Booking.BOOKING_FILE, Booking.ID).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.CODE).setSelected(true);
this.getField(BookingPax.BOOKING_PAX_FILE, BookingPax.ID).setSelected(true);
this.getField(BookingPax.BOOKING_PAX_FILE, BookingPax.NAME_PREFIX).setSelected(true);
this.getField(BookingPax.BOOKING_PAX_FILE, BookingPax.FIRST_NAME).setSelected(true);
this.getField(BookingPax.BOOKING_PAX_FILE, BookingPax.MIDDLE_NAME).setSelected(true);
this.getField(BookingPax.BOOKING_PAX_FILE, BookingPax.SUR_NAME).setSelected(true);
this.getField(Tour.TOUR_FILE, Tour.DEPARTURE_DATE).setSelected(true);
this.getField(Tour.TOUR_FILE, Tour.DESCRIPTION).setSelected(true);
this.getField(Tour.TOUR_FILE, Tour.TOUR_STATUS_ID).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.GENERIC_NAME).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.BOOKING_DATE).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.MOD_DATE).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.EMPLOYEE_ID).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.EMPLOYEE_MOD_ID).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.BOOKING_STATUS_ID).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="633">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setupKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLookupQuery</MethodClassName>
		<LogicSource><![CDATA[KeyArea keyArea = null;
if (iKeyArea == DBConstants.MAIN_KEY_AREA)
{
	keyArea = this.makeIndex(DBConstants.UNIQUE, "PrimaryKey");
//x	keyArea.addKeyField(this.getField(Booking.BOOKING_FILE, Booking.ID), DBConstants.ASCENDING);
// The key must be on the bookingpax file so it will be unique (The booking file is displayed multiple times for each pax)!
	keyArea.addKeyField(this.getField(BookingPax.BOOKING_PAX_FILE, BookingPax.ID), DBConstants.ASCENDING);
}
return keyArea;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="634">
		<LastChanged>2012-02-01T12:52:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>setupRelationships</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLookupQuery</MethodClassName>
		<LogicSource><![CDATA[this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(Booking.BOOKING_FILE), this.getRecord(Tour.TOUR_FILE), Booking.TOUR_ID, Tour.ID);
this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(Booking.BOOKING_FILE), this.getRecord(BookingPax.BOOKING_PAX_FILE), Booking.ID, BookingPax.BOOKING_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="635">
		<LastChanged>2012-03-27T16:06:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addBookingBehaviors</MethodName>
		<LogicDescription>Add the behaviors that go with a screen that has access to the booking file.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>RecordOwner recordOwner</MethodInterface>
		<MethodClassName>BookingPax</MethodClassName>
		<LogicSource><![CDATA[Record recBookingPax = (Record)recordOwner.getRecord(BookingPax.BOOKING_PAX_FILE);
Record recBooking = (Record)recordOwner.getRecord(Booking.BOOKING_FILE);

recBookingPax.addListener(new SubFileFilter(recBooking, true));

recBookingPax.getField(BookingPax.PAX_CATEGORY_ID).addListener(new InitFieldHandler(recordOwner.getRecord(BookingControl.BOOKING_CONTROL_FILE).getField(BookingControl.PAX_CATEGORY_ID)));
recBookingPax.getField(BookingPax.PAX_CATEGORY_ID).addListener(new InitOnceFieldHandler(null));

if (recBooking.getEditMode() == DBConstants.EDIT_ADD)
    if (!recBooking.getField(Booking.PAX).isModified())
    if (recBooking.getField(Booking.PAX).getValue() != 0)
{   // These are going to be initialized anyway, so set them to 0 so change record is not tripped.
    boolean[] rgbEnabled = recBooking.getField(Booking.PAX).setEnableListeners(false);
    recBooking.getField(Booking.PAX).setValue(0, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    recBooking.getField(Booking.PAX).setModified(false);
    recBooking.getField(Booking.PAX).setEnableListeners(rgbEnabled);
    rgbEnabled = recBooking.getField(Booking.DOUBLE_PAX).setEnableListeners(false);
    recBooking.getField(Booking.DOUBLE_PAX).setValue(0, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    recBooking.getField(Booking.DOUBLE_PAX).setModified(false);
    recBooking.getField(Booking.DOUBLE_PAX).setEnableListeners(rgbEnabled);
    rgbEnabled = recBooking.getField(Booking.SINGLE_PAX).setEnableListeners(false);
    recBooking.getField(Booking.SINGLE_PAX).setValue(0, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    recBooking.getField(Booking.SINGLE_PAX).setModified(false);
    recBooking.getField(Booking.SINGLE_PAX).setEnableListeners(rgbEnabled);
}

recBookingPax.addListener(new PaxSelectHandler(recBooking, (Record)recordOwner.getRecord(PaxCategory.PAX_CATEGORY_FILE)));

recBookingPax.getField(BookingPax.SEQUENCE).addListener(new InitFieldHandler(recBooking.getField(Booking.PAX)));

if (recordOwner instanceof ScreenParent)
{
    Profile recProfile = (Profile)recordOwner.getRecord(Profile.PROFILE_FILE);
    Profile recProfileDetail = (Profile)((ReferenceField)this.getField(BookingPax.PROFILE_ID)).getReferenceRecord();
    FileListener selectListener = new PaxDetailSelectHandler((BookingPax)recordOwner.getRecord(BookingPax.BOOKING_PAX_FILE), recProfileDetail);
    recProfileDetail.addListener(selectListener);
    ((Record)recordOwner.getScreenRecord()).addListener(new FileRemoveBOnCloseHandler(selectListener));
    
    FileListener paxSelectListener = new PaPaxSelectHandler((BookingPax)recBookingPax, recProfile, recProfileDetail);
    recProfile.addListener(paxSelectListener);
    
    if (!(recordOwner instanceof GridScreenParent))
    {   // Screen
        FieldListener fieldListener = new CopyFieldHandler((BaseField)((ScreenParent)recordOwner).getScreenRecord().getField(BookingScreenRecord.LAST_LAST_NAME), null);
        fieldListener.setRespondsToMode(DBConstants.INIT_MOVE, false);
        recBookingPax.getField(BookingPax.SUR_NAME).addListener(fieldListener);
        
        fieldListener = new MoveOnChangeHandler(recBookingPax.getField(BookingPax.SUR_NAME), (BaseField)((ScreenParent)recordOwner).getScreenRecord().getField(BookingScreenRecord.LAST_LAST_NAME), false, false);
        fieldListener.setRespondsToMode(DBConstants.SCREEN_MOVE, false);
        fieldListener.setRespondsToMode(DBConstants.INIT_MOVE, true);
        fieldListener.setRespondsToMode(DBConstants.READ_MOVE, false);
        recBookingPax.getField(BookingPax.SUR_NAME).addListener(fieldListener);
    }
            
    if (recordOwner instanceof GridScreenParent)
    {
        FieldListener reSelect = new FieldReSelectHandler((GridScreenParent)recordOwner);
        recBooking.getField(Booking.ID).addListener(reSelect);
        this.addListener(new FileRemoveBOnCloseHandler(reSelect));
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="636">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addPaPax</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile, Record recProfileDetail</MethodInterface>
		<MethodClassName>BookingPax</MethodClassName>
		<LogicSource><![CDATA[if ((recProfile.getEditMode() != Constants.EDIT_IN_PROGRESS) && (recProfile.getEditMode() != Constants.EDIT_CURRENT))
    return;
BaseField fldProfileID = this.getField(BookingPax.PROFILE_ID);
boolean[] rgbEnabled = fldProfileID.setEnableListeners(false);
FileListener subFileBeh = new SubFileFilter(recProfile.getField(Profile.ID), Profile.MAIN_PROFILE_ID, null, null, null, null);
recProfileDetail.addListener(subFileBeh);
recProfileDetail.setKeyArea(Profile.MAIN_PROFILE_ID_KEY);
boolean bMainRecordAdded = false;
try   {
    recProfileDetail.close();
    while (recProfileDetail.hasNext())
    {
        recProfileDetail.next();
        if (recProfileDetail.getHandle(DBConstants.BOOKMARK_HANDLE).equals(recProfile.getHandle(DBConstants.BOOKMARK_HANDLE)))
            bMainRecordAdded = true;    // Good the main record was part of the detail
        this.addNew();
        this.movePaPaxDetail(recProfileDetail);
        this.add();
    }
    if (!bMainRecordAdded)
    {   // Main record was not part of the detail, so add it now.
        this.addNew();
        this.movePaPaxDetail(recProfile);
        this.add();
    }
    this.addNew();
} catch (DBException ex) {
    ex.printStackTrace();
} finally { // Set it back
    fldProfileID.setEnableListeners(rgbEnabled);
    recProfileDetail.removeListener(subFileBeh, true);
    recProfileDetail.setKeyArea(Profile.ID_KEY);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="639">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>movePaPaxDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile</MethodInterface>
		<MethodClassName>BookingPax</MethodClassName>
		<LogicSource><![CDATA[this.getField(BookingPax.PROFILE_ID).moveFieldToThis(recProfile.getField(Profile.ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(BookingPax.NAME_PREFIX).moveFieldToThis(recProfile.getField(Profile.NAME_PREFIX), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(BookingPax.FIRST_NAME).moveFieldToThis(recProfile.getField(Profile.NAME_FIRST), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(BookingPax.MIDDLE_NAME).moveFieldToThis(recProfile.getField(Profile.NAME_MIDDLE), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(BookingPax.SUR_NAME).moveFieldToThis(recProfile.getField(Profile.NAME_SUR), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(BookingPax.SMOKER).moveFieldToThis(recProfile.getField(Profile.SMOKER), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="640">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

BookingPax recBookingPax = (BookingPax)this.getRecord(BookingPax.BOOKING_PAX_FILE);
recBookingPax.addBookingBehaviors(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="642">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = super;

ToolScreen toolbar2 = new EmptyToolbar(this.getNextLocation(ScreenConstants.LAST_LOCATION, ScreenConstants.DONT_SET_ANCHOR), this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
BookingPax recBookingPax = (BookingPax)this.getRecord(BookingPax.BOOKING_PAX_FILE);
recBookingPax.addToolbarFields(toolbar2, this.getRecord(Booking.BOOKING_FILE));

return toolbar;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="643">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxGridScreen</MethodClassName>
		<LogicSource>return new BookingPax(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="644">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Profile(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="645">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="646">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxScreen</MethodClassName>
		<LogicSource><![CDATA[super;

BookingPax recBookingPax = (BookingPax)this.getRecord(BookingPax.BOOKING_PAX_FILE);
recBookingPax.addBookingBehaviors(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="648">
		<LastChanged>2012-01-31T10:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = super;

ToolScreen toolbar2 = new EmptyToolbar(this.getNextLocation(ScreenConstants.LAST_LOCATION, ScreenConstants.DONT_SET_ANCHOR), this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
BookingPax recBookingPax = (BookingPax)this.getRecord(BookingPax.BOOKING_PAX_FILE);
recBookingPax.addToolbarFields(toolbar2, this.getRecord(Booking.BOOKING_FILE));

return toolbar;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="649">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxScreen</MethodClassName>
		<LogicSource>return new BookingPax(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="650">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Profile(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="651">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="652">
		<LastChanged>2012-07-19T14:22:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
Booking recBooking = (Booking)this.getMainRecord();
Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
if (!ScreenConstants.HTML_SCREEN_TYPE.equalsIgnoreCase(this.getViewFactory().getViewSubpackage()))
    recTour.setupRecordListener(this, false, false);   // I need to listen for record changes
TourHeader recTourHdr = (TourHeader)this.getRecord(TourHeader.TOUR_HEADER_FILE);
ReferenceField fldTourID = (ReferenceField)recBooking.getField(Booking.TOUR_ID);
BookingControl recBookingControl = (BookingControl)this.getRecord(BookingControl.BOOKING_CONTROL_FILE);
ProfileControl recProfileControl = (ProfileControl)this.getRecord(ProfileControl.PROFILE_CONTROL_FILE);

recBooking.setOpenMode(recBooking.getOpenMode() | DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);
fldTourID.addListener(new ReadSecondaryHandler(recTour, Tour.ID_KEY, DBConstants.DONT_CLOSE_ON_FREE, true, true));  // Update record
MoveOnValidHandler tourChangeHandler = (MoveOnValidHandler)recTour.getListener(MoveOnValidHandler.class);
if (tourChangeHandler != null)
{   // Always
    recTour.removeListener(tourChangeHandler, true);
    recTour.addListener(new TourChangeHandler(recBooking));
}
recTour.addListener(new DisplayReadHandler(Tour.TOUR_HEADER_ID, recTourHdr, TourHeader.ID));        
recTour.getField(Tour.TOUR_HEADER_ID).addListener(new MainReadOnlyHandler(null));
recBooking.addControlDefaults(recBookingControl, recProfileControl);

this.getScreenRecord().getField(BookingScreenRecord.BK_SUB_SCREEN).setData(null);  // Initial value
FieldListener listener = new BookingScreenHandler(null, null, null);
this.getScreenRecord().getField(BookingScreenRecord.BK_SUB_SCREEN).addListener(listener);

int iCurrentScreen = BookingScreenHandler.MENU_SCREEN;
if (this.getProperty(BookingScreenHandler.SUB_SCREEN_PARAM) != null)
    iCurrentScreen = Integer.parseInt(this.getProperty(BookingScreenHandler.SUB_SCREEN_PARAM));  // Initial value
listener.setEnabledListener(false); // Don't switch screens now
this.getScreenRecord().getField(BookingScreenRecord.BK_SUB_SCREEN).setValue(iCurrentScreen);  // Initial value
listener.setEnabledListener(true);

recTour.getField(Tour.DEPARTURE_DATE).addListener(listener = new MoveOnChangeHandler(this.getScreenRecord().getField(BookingScreenRecord.LAST_DATE), null, false, true));
listener.setRespondsToMode(DBConstants.READ_MOVE, true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="653">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHeaderScreen</MethodClassName>
		<LogicSource>return new BookingScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="654">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[return null;	// No toolbar (not even the default toolbars]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="656">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHeaderScreen</MethodClassName>
		<LogicSource>return new Booking(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="657">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new BookingControl(this);
new ProfileControl(this);

Record recBooking = this.getMainRecord();
Record recTour = ((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReferenceRecord(this);
recTour.setOpenMode((recTour.getOpenMode() & ~DBConstants.OPEN_READ_ONLY) | DBConstants.OPEN_LOCK_ON_CHANGE_STRATEGY);
Record recTourHeader = ((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReferenceRecord(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="658">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHeaderScreen</MethodClassName>
		<LogicSource>// Don't add any screen fields (not even the defaults)</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="659">
		<LastChanged>2013-01-22T05:54:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingScreenHandler</MethodClassName>
		<LogicSource><![CDATA[super;
int count = 0;
while (parentScreen.popHistory(1, false) != null)
{
	count++;
}
count--;	// Want to move back to the first one
if (count > 0)
	parentScreen.popHistory(count, true);		// Dump all browser history
BaseScreen screen = null;
BaseField useAgency = null;
switch(screenNo)
{
case MENU_SCREEN: // Menu
    screen = new BookingMenuScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case SUMMARY_SCREEN:    // Summary screen
    screen = new BookingSummaryScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case AGENCY_SCREEN:   // Agency Maint
    screen = new BookingAgencyScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case PAX_SCREEN:    // Pax display
    if ( parentScreen.getRecord(Booking.BOOKING_FILE).getField(Booking.PAX).getValue() == 0)
        screen = new BookingPaxScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);
    else
        screen = new BookingPaxGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);
    break;
case TOUR_SCREEN: // Tour maint
    screen = new BookingTourScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case LINE_SCREEN: // Line maint
    screen = new BookingLineGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case AR_TRX_SCREEN:   // A/R display
    screen = new BookingArTrxGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case AIR_HEADER_SCREEN:   // Air maint
    screen = new BookingAirHeaderGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case AIR_SCREEN:    // Air maint
    screen = new BookingAirGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case HOTEL_SCREEN:  // Hotel maint
    screen = new BookingHotelGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case LAND_SCREEN: // Land maint
    screen = new BookingLandGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case TRANSPORTATION_SCREEN: // Transportation maint
    screen = new BookingTransportationGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case CAR_SCREEN:    // Car maint
    screen = new BookingCarGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case CRUISE_SCREEN:   // Cruise maint
    screen = new BookingCruiseGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case ITEM_SCREEN: // Item maint
    screen = new BookingItemGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case TOUR_DETAIL_SCREEN:    // Tour detail
    screen = new BookingTourDetailGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case OPTIONS_SCREEN: // Tour options selection
    screen = new BookingAnswerGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case CALENDAR_SCREEN: // Calendar maint
    screen = new BookingCalendar(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case FIT_SCREEN:    // FIT maint
    screen = new BookingDetailGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case VOUCHER_SCREEN: // Voucher maint
    screen = new TourApTrxGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
case ITIN_SCREEN: // Itinerary maint
    screen = new BookingItinerary(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | ScreenConstants.DONT_PUSH_TO_BROWSER, properties);break;
default:
    screen = null;
}
//?if (screen != null)
//?   screen.create(Point(0, 0), m_pParentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="660">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingStatusField</MethodClassName>
		<LogicSource>return new BookingStatus(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="661">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingStatusField</MethodClassName>
		<LogicSource>return this.setupPopupView(itsLocation, targetScreen, converter, iDisplayFieldDesc, false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="663">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BrocBundleButton</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, "", "Bundles", null, null, null</MethodReturns>
		<MethodInterface>ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Request pAmRequests</MethodInterface>
		<MethodClassName>BrocBundleButton</MethodClassName>
		<LogicSource>m_pAmRequests = pAmRequests;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="664">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>controlToField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrocBundleButton</MethodClassName>
		<LogicSource><![CDATA[super;
Bundle pAmBrocHist = new Bundle(null);
BasePanel parentScreen = Screen.makeWindow(null);
BundleList pBundleList = new BundleList(pAmBrocHist, null, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
pBundleList.setEditing(false);
m_pAmRequests.addDependentScreen(pBundleList);		// When this closes, closes dependent screen
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="665">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BrocHistButton</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, null, "Brochure history", null, null, null</MethodReturns>
		<MethodInterface>ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Request pAmRequests</MethodInterface>
		<MethodClassName>BrocHistButton</MethodClassName>
		<LogicSource>m_pAmRequests = pAmRequests;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="666">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>controlToField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrocHistButton</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
	return iErrorCode;
BasePanel parentScreen = Screen.makeWindow(null);

HistoryDisplay pAmBrocHist = new HistoryDisplay(null);
ScreenLocation itsLocation = null;
BrocHistList pBrocHistList = new BrocHistList(pAmBrocHist, itsLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_DESC, null);
pBrocHistList.setEditing(false);
m_pAmRequests.addDependentScreen(pBrocHistList);		// When this closes, closes dependent screen

//xFileBehavior pSubFileBeh = new SubFileFilter(m_pAmRequests.getField(Request.USE_AGENCY), RequestHistory.USE_AGENCY, m_pAmRequests.getField(Request.PROFILE_ID), RequestHistory.AGENCY_NO, null, -1);
//xpAmBrocHist.addListener(pSubFileBeh);

m_pAmRequests.getField(Request.PROFILE_CODE).addListener(new FieldReSelectHandler(pBrocHistList));	// Reselect on file change

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="667">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrocHistList</MethodClassName>
		<LogicSource>return null; // No toolbars</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="668">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrocHistList</MethodClassName>
		<LogicSource>return new HistoryDisplay(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="669">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrocHistList</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="670">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrochuresByBundleName</MethodClassName>
		<LogicSource><![CDATA[this.addTable(new Bundle(recordOwner));
this.addTable(new BundleDetail(recordOwner));
this.addTable(new Brochure(recordOwner));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="671">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrochuresByBundleName</MethodClassName>
		<LogicSource><![CDATA[BundleDetail pAmBrocDetail = (BundleDetail)this.getRecord(BundleDetail.BUNDLE_DETAIL_FILE);
Bundle pAmBrocBundle = (Bundle)this.getRecord(Bundle.BUNDLE_FILE);
this.setGridFile(pAmBrocBundle, Bundle.DESCRIPTION_KEY);

this.setSelected(false);	// de-select all
super;
this.getField(Bundle.BUNDLE_FILE, Bundle.ID).setSelected(true);
this.getField(Bundle.BUNDLE_FILE, Bundle.DESCRIPTION).setSelected(true);
this.getField(Brochure.BROCHURE_FILE, Brochure.DESCRIPTION).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="672">
		<LastChanged>2012-01-31T17:30:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>setupRelationships</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrochuresByBundleName</MethodClassName>
		<LogicSource><![CDATA[this.addRelationship(DBConstants.LEFT_INNER, this.getRecord(Bundle.BUNDLE_FILE), this.getRecord(BundleDetail.BUNDLE_DETAIL_FILE), Bundle.ID, BundleDetail.BUNDLE_ID);
this.addRelationship(DBConstants.LEFT_INNER, this.getRecord(BundleDetail.BUNDLE_DETAIL_FILE), this.getRecord(Brochure.BROCHURE_FILE), BundleDetail.BROCHURE_ID, Brochure.ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="673">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
((ReferenceField)this.getScreenRecord().getField(BrokerScreenRecord.VENDOR_ID)).setReference(this.getRecord(Vendor.VENDOR_FILE));
this.getScreenRecord().getField(BrokerScreenRecord.VENDOR_ID).addListener(new ReadSecondaryHandler(this.getRecord(Vendor.VENDOR_FILE)));
if (this.getScreenRecord().getField(BrokerScreenRecord.VENDOR_ID).isNull())
    this.getScreenRecord().getField(BrokerScreenRecord.VENDOR_ID).moveFieldToThis(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.BROKER_VENDOR_ID));
this.getScreenRecord().getField(BrokerScreenRecord.VENDOR_ID).addListener(new FieldReSelectHandler(this));

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.BROKER_PAYMENT_HEADER);
this.getMainRecord().getField(ApTrx.TRX_STATUS_ID).addListener(new InitFieldHandler(recTrxStatus.getField(TrxStatus.ID)));

// Make sure draft is fully selected for payment
this.getMainRecord().getField(ApTrx.INVOICE_LOCAL).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.AMOUNT_SELECTED), this.getMainRecord().getField(ApTrx.INVOICE_LOCAL)));

FilterApTrxHandler filter = new FilterApTrxHandler(null);
this.getMainRecord().addListener(filter);
filter.addTrxStatusID(ApTrx.BROKER_PAYMENT_HEADER);

// This code does the selection count to determine the default value.
Record recApTrx = this.getMainRecord();
Record recVendor2 = new Vendor(this);
this.removeRecord(recVendor2);
this.getMainRecord().addListener(new FreeOnFreeHandler(recVendor2));
Record recApTrx2 = new ApTrx(this);
this.removeRecord(recApTrx2);
this.getMainRecord().addListener(new FreeOnFreeHandler(recApTrx2));
ReadSecondaryHandler listener = new ReadSecondaryHandler(recVendor2);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.DRAFT_VENDOR_ID).addListener(listener);
recVendor2.addListener(new RecountOnValidHandler(recApTrx2));
recApTrx2.addListener(new SubFileFilter(recVendor2));
recApTrx2.addListener(new SubCountHandler(this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.INVOICE_AMOUNT), ApTrx.AMOUNT_SELECTED, false, true));

this.getRecord(ApTrx.AP_TRX_FILE).removeListener(this.getRecord(ApTrx.AP_TRX_FILE).getListener(NoDeleteModifyHandler.class.getName()), true);

Record recVendor = ((ReferenceField)this.getMainRecord().getField(ApTrx.DRAFT_VENDOR_ID)).getReferenceRecord(this);
if (recVendor != null)
{
    Record recCurrencys = ((ReferenceField)recVendor.getField(Vendor.CURRENCYS_ID)).getReferenceRecord(this);
    this.getMainRecord().getField(ApTrx.DRAFT_VENDOR_ID).addListener(new MoveOnChangeHandler(recApTrx.getField(ApTrx.DEPARTURE_EXCHANGE), recCurrencys.getField(Currencys.LAST_RATE)));
}
recApTrx.getField(ApTrx.DEPARTURE_EXCHANGE).addListener(new CalcBalanceHandler(recApTrx.getField(ApTrx.INVOICE_LOCAL), recApTrx.getField(ApTrx.DEPARTURE_EXCHANGE), recApTrx.getField(ApTrx.INVOICE_AMOUNT), CalcBalanceHandler.MULTIPLY, true));
recApTrx.getField(ApTrx.INVOICE_AMOUNT).addListener(new CalcBalanceHandler(recApTrx.getField(ApTrx.INVOICE_LOCAL), recApTrx.getField(ApTrx.DEPARTURE_EXCHANGE), recApTrx.getField(ApTrx.INVOICE_AMOUNT), CalcBalanceHandler.MULTIPLY, true));
//?recApTrx.getField(ApTrx.INVOICE_USD).addListener(new CalcBalanceHandler(recApTrx.getField(ApTrx.DEPARTURE_EXCHANGE), recApTrx.getField(ApTrx.INVOICE_LOCAL), recApTrx.getField(ApTrx.INVOICE_AMOUNT), CalcBalanceHandler.DIVIDE, true));

recApTrx.getField(ApTrx.ACCOUNT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.PREPAY_ACCOUNT_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="674">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BrokerDistGridScreen*2</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BrokerDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="675">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.FORM)) || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
	return (this.onForm(null, ApTrx.BROKER_DIST_SCREEN, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(MenuConstants.LOOKUP))
	return (this.onForm(null, ApTrx.BROKER_DIST_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="676">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistGridScreen</MethodClassName>
		<LogicSource>return this.getRecord(Vendor.VENDOR_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="677">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistGridScreen</MethodClassName>
		<LogicSource>return new BrokerHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="678">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistGridScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="679">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ApControl(this);
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="680">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="681">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="682">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;
((ReferenceField)this.getScreenRecord().getField(BrokerScreenRecord.VENDOR_ID)).setReference(this.getRecord(Vendor.VENDOR_FILE));
this.getScreenRecord().getField(BrokerScreenRecord.VENDOR_ID).addListener(new ReadSecondaryHandler(this.getRecord(Vendor.VENDOR_FILE)));
if (this.getScreenRecord().getField(BrokerScreenRecord.VENDOR_ID).isNull())
    this.getScreenRecord().getField(BrokerScreenRecord.VENDOR_ID).moveFieldToThis(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.BROKER_VENDOR_ID));
//xthis.getScreenRecord().getField(BrokerScreenRecord.VENDOR_ID).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));
TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.BROKER_PAYMENT_HEADER);
this.getMainRecord().getField(ApTrx.TRX_STATUS_ID).addListener(new InitFieldHandler(recTrxStatus.getField(TrxStatus.ID)));

// Make sure draft is fully selected for payment
this.getMainRecord().getField(ApTrx.INVOICE_LOCAL).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.AMOUNT_SELECTED), this.getMainRecord().getField(ApTrx.INVOICE_LOCAL)));

FilterApTrxHandler filter = new FilterApTrxHandler(null);
this.getMainRecord().addListener(filter);
filter.addTrxStatusID(ApTrx.BROKER_PAYMENT_HEADER);

// This code does the selection count to determine the default value.
Record recApTrx = this.getMainRecord();
Record recVendor2 = new Vendor(this);
this.removeRecord(recVendor2);
this.getMainRecord().addListener(new FreeOnFreeHandler(recVendor2));
Record recApTrx2 = new ApTrx(this);
this.removeRecord(recApTrx2);
this.getMainRecord().addListener(new FreeOnFreeHandler(recApTrx2));
ReadSecondaryHandler listener = new ReadSecondaryHandler(recVendor2);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.DRAFT_VENDOR_ID).addListener(listener);
recVendor2.addListener(new RecountOnValidHandler(recApTrx2));
recApTrx2.addListener(new SubFileFilter(recVendor2));
recApTrx2.addListener(new SubCountHandler(this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.INVOICE_AMOUNT), ApTrx.AMOUNT_SELECTED, false, true));

this.getRecord(ApTrx.AP_TRX_FILE).removeListener(this.getRecord(ApTrx.AP_TRX_FILE).getListener(NoDeleteModifyHandler.class.getName()), true);

Record recVendor = ((ReferenceField)this.getMainRecord().getField(ApTrx.DRAFT_VENDOR_ID)).getReferenceRecord(this);
if (recVendor != null)
{
    Record recCurrencys = ((ReferenceField)recVendor.getField(Vendor.CURRENCYS_ID)).getReferenceRecord(this);
    this.getMainRecord().getField(ApTrx.DRAFT_VENDOR_ID).addListener(new MoveOnChangeHandler(recApTrx.getField(ApTrx.DEPARTURE_EXCHANGE), recCurrencys.getField(Currencys.LAST_RATE)));
}
recApTrx.getField(ApTrx.DEPARTURE_EXCHANGE).addListener(new CalcBalanceHandler(recApTrx.getField(ApTrx.INVOICE_LOCAL), recApTrx.getField(ApTrx.DEPARTURE_EXCHANGE), recApTrx.getField(ApTrx.INVOICE_AMOUNT), CalcBalanceHandler.MULTIPLY, true));
recApTrx.getField(ApTrx.INVOICE_LOCAL).addListener(new CalcBalanceHandler(recApTrx.getField(ApTrx.DEPARTURE_EXCHANGE), recApTrx.getField(ApTrx.INVOICE_LOCAL), recApTrx.getField(ApTrx.INVOICE_AMOUNT), CalcBalanceHandler.DIVIDE, true));
//?recApTrx.getField(ApTrx.INVOICE_AMOUNT).addListener(new CalcBalanceHandler(recApTrx.getField(ApTrx.INVOICE_LOCAL), recApTrx.getField(ApTrx.DEPARTURE_EXCHANGE), recApTrx.getField(ApTrx.INVOICE_AMOUNT), CalcBalanceHandler.MULTIPLY, true));

recApTrx.getField(ApTrx.ACCOUNT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.PREPAY_ACCOUNT_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="683">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistScreen</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.FORM)) || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
	return (this.onForm(null, ApTrx.BROKER_DIST_SCREEN, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(MenuConstants.LOOKUP))
	return (this.onForm(null, ApTrx.BROKER_DIST_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="684">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistScreen</MethodClassName>
		<LogicSource>return this.getRecord(Vendor.VENDOR_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="685">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistScreen</MethodClassName>
		<LogicSource>return new BrokerHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="686">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="687">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Vendor(this);
new ApControl(this);
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="688">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="696">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BudgetCompField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
	case 1:
		tempString = "Budget";break;
	case 2:
		tempString = "Comparative";break;
	default:
		tempString = "";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="697">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BudgetCompField</MethodClassName>
		<LogicSource><![CDATA[String tempString = Constants.BLANK;
if (index == 1)
	tempString = "B";
else
 if (index == 2)
	tempString = "C";
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="698">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BudgetCompField</MethodClassName>
		<LogicSource><![CDATA[if (tempString.equalsIgnoreCase("B"))
	return 1;
if (tempString.equalsIgnoreCase("C"))
	return 2;
return 0;	// "B" or default]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="699">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BudgetCompField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="700">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleField</MethodClassName>
		<LogicSource>return new Bundle(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="701">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Bundle.DESCRIPTION, false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="702">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleList</MethodClassName>
		<LogicSource>return null; // No toolbars</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="703">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleList</MethodClassName>
		<LogicSource>return new Bundle(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="704">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleList</MethodClassName>
		<LogicSource>this.getRecord(Bundle.BUNDLE_FILE).getField(Bundle.DESCRIPTION).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), this, ScreenConstants.DEFAULT_DISPLAY);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="705">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CalcAcctBalHandler*1</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField fldTarget, BaseField fldStartDate, BaseField fldEndDate, boolean bInclusive</MethodInterface>
		<MethodClassName>CalcAcctBalHandler</MethodClassName>
		<LogicSource><![CDATA[m_fldTarget = fldTarget;
m_fldStartDate = fldStartDate;
m_fldEndDate = fldEndDate;
m_bInclusive = bInclusive;
m_fldGrandTotal = null;
m_recAcctDetail = null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="706">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcAcctBalHandler</MethodClassName>
		<LogicSource><![CDATA[m_fldTarget.setValue(0);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="707">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcAcctBalHandler</MethodClassName>
		<LogicSource><![CDATA[m_recAcctDetail = this.getAcctDetail();

m_fldTarget.initField(DBConstants.DISPLAY);
m_fldTarget.setValue(0);
m_recAcctDetail.close();
try	{
	while (m_recAcctDetail.hasNext())
	{		// Go through and count
		m_recAcctDetail.next();
	}
} catch (DBException ex)	{
	ex.printStackTrace();
}
if (m_fldGrandTotal != null)
    m_fldGrandTotal.setValue(m_fldGrandTotal.getValue() + m_fldTarget.getValue());
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="708">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcAcctBalHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recAcctDetail != null)
	m_recAcctDetail.free();
m_recAcctDetail = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="711">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CalcBookingDatesHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Record recTour, Record recTourHeader</MethodInterface>
		<MethodClassName>CalcBookingDatesHandler</MethodClassName>
		<LogicSource><![CDATA[m_recTour = recTour;
m_recTourHeader = recTourHeader;

super;

m_bReadMove = false;
m_bInitMove = false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="712">
		<LastChanged>2012-04-06T10:15:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcBookingDatesHandler</MethodClassName>
		<LogicSource><![CDATA[BookingModel recBooking = (BookingModel)this.getOwner().getRecord();
return recBooking.calcBookingDates(m_recTour, m_recTourHeader);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="713">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcBookingDatesHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getOwner() != null)
	m_recTourHeader.addListener(new FileRemoveBOnCloseHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="715">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>CalcEmpTaxesHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Record queryInfo, Record employee, Record prDedEarn, Record prTaxRates, Record empControl</MethodInterface>
		<MethodClassName>CalcEmpTaxesHandler</MethodClassName>
		<LogicSource><![CDATA[m_QueryInfo = queryInfo;
m_Employee = employee;
m_PrDedEarn = prDedEarn;
m_PrTaxRates = prTaxRates;
m_EmpControl = empControl;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="716">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcEmpTaxesHandler</MethodClassName>
		<LogicSource><![CDATA[super;
double checkNo = 1234;
((NumberField)this.getOwner().getField(TimeTrx.PR_CHECK_NUM)).setValue(checkNo);
checkNo++;
((TimeTrx)this.getOwner()).calcPay(m_QueryInfo, m_Employee, m_PrDedEarn, m_PrTaxRates, m_EmpControl);
//?	this.getOwner().UpdateQuery();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="717">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CalcHourlyHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>field</MethodReturns>
		<MethodInterface>BaseField field</MethodInterface>
		<MethodClassName>CalcHourlyHandler</MethodClassName>
		<LogicSource><![CDATA[super;

m_bInitMove = false;		// Only respond to screen
m_bReadMove = false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="718">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>computeValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcHourlyHandler</MethodClassName>
		<LogicSource><![CDATA[String tempString = this.getOwner().getRecord().getField(Employee.PAY_FREQUENCY).getString();
int multiplier = 0;
if (tempString.equalsIgnoreCase("D"))
	multiplier = 365;
if (tempString.equalsIgnoreCase("W"))
	multiplier = 52;
if (tempString.equalsIgnoreCase("B"))
	multiplier = 26;
if (tempString.equalsIgnoreCase("S"))
	multiplier = 24;
if (tempString.equalsIgnoreCase("M"))
	multiplier = 12;
if (tempString.equalsIgnoreCase("Q"))
	multiplier = 4;
if (tempString.equalsIgnoreCase("A"))
	multiplier = 1;
double hourly = dSrcValue * multiplier / 52 / 5 / 8;
return hourly;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="720">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcMcoHandler</MethodClassName>
		<LogicSource><![CDATA[double dGross = this.getOwner().getRecord().getField(Mco.GROSS).getValue();
double dCommAmt = this.getOwner().getRecord().getField(Mco.COMM_AMT).getValue();
double dSvcAmt = this.getOwner().getRecord().getField(Mco.SVC_AMT).getValue();
double dTaxAmt = this.getOwner().getRecord().getField(Mco.TAX_AMT).getValue();
double dNet = Math.floor((dGross - dCommAmt - dSvcAmt - dTaxAmt) * 100.00 + 0.5) / 100.00;
this.getOwner().getRecord().getField(Mco.NET).setValue(dNet);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="721">
		<LastChanged>2012-07-19T11:30:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CalcNewBal</MethodName>
		<LogicDescription/>
		<MethodReturns>null, null, null, null, null, mainFilesField, BankTrx.BANK_ACCT_ID, null, null, false, false, false</MethodReturns>
		<MethodInterface>BaseField mainFilesField, BaseField fldDate</MethodInterface>
		<MethodClassName>CalcNewBal</MethodClassName>
		<LogicSource>m_fldDate = fldDate;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="722">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>doEndKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcNewBal</MethodClassName>
		<LogicSource><![CDATA[this.getOwner().getField(BankTrx.TRX_DATE).moveFieldToThis(m_fldDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="723">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>doKeyOnly</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcNewBal</MethodClassName>
		<LogicSource>return true;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="724">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>CalcNewBalBeh</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField dateField, Record adChecking, CalcNewBal calcBalBeh</MethodInterface>
		<MethodClassName>CalcNewBalBeh</MethodClassName>
		<LogicSource><![CDATA[m_DateField = dateField;
m_AdChecking = adChecking;
m_CalcBalBeh = calcBalBeh;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="725">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcNewBalBeh</MethodClassName>
		<LogicSource><![CDATA[super;
if (m_DateField.getLength() == 0)
	this.getOwner().getField(BankAcct.BALANCE).initField(DBConstants.DISPLAY);
else
{
	double balance = 0;
	m_AdChecking.close();
	try	{
		while (m_AdChecking.hasNext())
		{
			m_AdChecking.next();
			balance += m_AdChecking.getField(BankTrx.AMOUNT).getValue();
		}
	} catch (DBException ex)	{
		ex.printStackTrace();
	}
	this.getOwner().getField(BankAcct.BALANCE).setValue(balance);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="726">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CalcOvertimeHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>field</MethodReturns>
		<MethodInterface>BaseField field</MethodInterface>
		<MethodClassName>CalcOvertimeHandler</MethodClassName>
		<LogicSource><![CDATA[super;

m_bInitMove = false;		// Only respond to screen
m_bReadMove = false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="727">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>computeValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcOvertimeHandler</MethodClassName>
		<LogicSource>return dSrcValue * 1.5;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="729">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CardField</MethodClassName>
		<LogicSource>return new Card(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="730">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CardField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), Card.ID_KEY, Card.DESCRIPTION, false, false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="731">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatch</MethodClassName>
		<LogicSource><![CDATA[super;
this.addListener(new EnableOnValidHandler(CashBatch.BATCH_CHECKS_ACTUAL, EnableOnValidHandler.DISABLE_ON_VALID, EnableOnValidHandler.DISABLE_ON_NEW));
this.addListener(new EnableOnValidHandler(CashBatch.BATCH_TOTAL_ACTUAL, EnableOnValidHandler.DISABLE_ON_VALID, EnableOnValidHandler.DISABLE_ON_NEW));

this.removeListener(this.getListener(SubFileIntegrityHandler.class.getName()), true);
this.addListener(new SubFileIntegrityHandler(CashBatchDetail.class.getName(), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="732">
		<LastChanged>2012-03-27T11:24:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatch</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(CashBatchDetail.CASH_BATCH_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.POST_MODE)
    screen = Record.makeNewScreen(CASH_BATCH_POST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(CASH_BATCH_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(CASH_BATCH_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="733">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getRecord(CashBatch.CASH_BATCH_FILE).getField(CashBatch.ID).addListener(new FieldReSelectHandler(this));
this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).addListener(new SubCountHandler(this.getRecord(CashBatch.CASH_BATCH_FILE).getField(CashBatch.BATCH_CHECKS_ACTUAL), false, true));
this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).addListener(new SubCountHandler(this.getRecord(CashBatch.CASH_BATCH_FILE).getField(CashBatch.BATCH_TOTAL_ACTUAL), CashBatchDetail.AMOUNT, false, true));

this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).getField(CashBatchDetail.BOOKING_ID).addListener(new BookingDefaultHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="734">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>CashBatchDetailGridScreen*2</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CashBatchDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="736">
		<LastChanged>2012-01-23T08:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailGridScreen</MethodClassName>
		<LogicSource>return new CashBatchHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="737">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailGridScreen</MethodClassName>
		<LogicSource>return new CashBatchDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="738">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailGridScreen</MethodClassName>
		<LogicSource>return new CashBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="739">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="740">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;
((ReferenceField)this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).getField(CashBatchDetail.CASH_BATCH_ID)).setReferenceRecord(this.getRecord(CashBatch.CASH_BATCH_FILE));
((ReferenceField)this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).getField(CashBatchDetail.CASH_BATCH_ID)).getReference();
this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).setKeyArea(CashBatchDetail.CASH_BATCH_ID_KEY);
this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).addListener(new SubFileFilter(this.getRecord(CashBatch.CASH_BATCH_FILE)));
this.getRecord(CashBatch.CASH_BATCH_FILE).addListener(new UpdateOnCloseHandler(null));
this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).addListener(new SubCountHandler(this.getRecord(CashBatch.CASH_BATCH_FILE).getField(CashBatch.BATCH_CHECKS_ACTUAL), false, true));
this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).addListener(new SubCountHandler(this.getRecord(CashBatch.CASH_BATCH_FILE).getField(CashBatch.BATCH_TOTAL_ACTUAL), CashBatchDetail.AMOUNT, false, true));

this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).getField(CashBatchDetail.BOOKING_ID).addListener(new BookingDefaultHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="741">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailScreen</MethodClassName>
		<LogicSource>return new CashBatchDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="742">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;

new CashBatch(this);

new ArControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="743">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="744">
		<LastChanged>2012-02-01T09:06:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().getField(CashBatch.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.AR_BANK_ACCT_ID)));

this.getMainRecord().setKeyArea(CashBatch.USER_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(CashBatchScreenRecord.USER_ID), CashBatch.USER_ID, null, null, null, null));
this.getScreenRecord().getField(CashBatchScreenRecord.USER_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="745">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.POST, MenuConstants.POST, null);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="746">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchGridScreen</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="747">
		<LastChanged>2012-01-31T10:43:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);

this.getScreenRecord().getField(CashBatchScreenRecord.USER_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="749">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchGridScreen</MethodClassName>
		<LogicSource>return new CashBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="750">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="751">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="752">
		<LastChanged>2012-07-19T16:47:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().getField(CashBatch.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.AR_BANK_ACCT_ID)));

this.getScreenRecord().getField(CashBatchScreenRecord.USER_ID).moveFieldToThis(this.getMainRecord().getField(CashBatch.USER_ID));
this.getMainRecord().setKeyArea(CashBatch.USER_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(CashBatchScreenRecord.USER_ID), CashBatch.USER_ID, null, null, null, null));

CashBatchDetail recCashBatchDetail = (CashBatchDetail)this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE);
this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).addListener(new SubFileFilter(this.getRecord(CashBatch.CASH_BATCH_FILE)));
this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).addListener(new SubCountHandler(this.getRecord(CashBatch.CASH_BATCH_FILE).getField(CashBatch.BATCH_CHECKS_ACTUAL), false, true));
this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).addListener(new SubCountHandler(this.getRecord(CashBatch.CASH_BATCH_FILE).getField(CashBatch.BATCH_TOTAL_ACTUAL), CashBatchDetail.AMOUNT, false, true));

CashBatchDist recCashBatchDist = (CashBatchDist)this.getRecord(CashBatchDist.CASH_BATCH_DIST_FILE);
recCashBatchDist.addListener(new SubFileFilter(this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE)));
recCashBatchDist.addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), CashBatchDist.AMOUNT, false, true));

BookingModel recBooking = (BookingModel)((ReferenceField)recCashBatchDist.getField(CashBatchDist.BOOKING_ID)).getReferenceRecord(this);
recCashBatchDist.getField(CashBatchDist.BOOKING_ID).addListener(new ReadSecondaryHandler((Record)recBooking, null, true, true, true));     // Update record
ArTrx recArTrx = (ArTrx)this.getRecord(ArTrx.AR_TRX_FILE);
recBooking.addArDetail(recArTrx, null, false);

recCashBatchDetail.close();
try   {   // Recount totals
    while (recCashBatchDetail.hasNext())
    {
        recCashBatchDetail.next();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="755">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource><![CDATA[super; 
if (this.getMainRecord().getTableNames(false).equalsIgnoreCase(CashBatchDetail.CASH_BATCH_DETAIL_FILE))
    this.addRecord(((ReferenceField)this.getMainRecord().getField(CashBatchDetail.CASH_BATCH_ID)).getReference(), true);
else
    new CashBatchDetail(this);
new CashBatchDist(this);

new ArControl(this);

new ArTrx(this);

new BankTrx(this);

new TransactionType(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="756">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="757">
		<LastChanged>2012-02-01T08:16:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().getField(CashBatch.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.AR_BANK_ACCT_ID)));

this.getScreenRecord().getField(CashBatchScreenRecord.USER_ID).moveFieldToThis(this.getMainRecord().getField(CashBatch.USER_ID));
this.getMainRecord().setKeyArea(CashBatch.USER_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(CashBatchScreenRecord.USER_ID), CashBatch.USER_ID, null, null, null, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="758">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchScreen</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="759">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="761">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchScreen</MethodClassName>
		<LogicSource>return new CashBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="762">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="763">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashPlanHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="764">
		<LastChanged>2012-02-01T10:21:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashPlanReport</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(Booking.BOOKING_DATE_KEY);
this.getMainRecord().addListener(new ValidBookingHandler(null));

Record recBooking = this.getRecord(Booking.BOOKING_FILE);
Record recArTrx = this.getRecord(ArTrx.AR_TRX_FILE);
Record recBookingLine = this.getRecord(BookingLine.BOOKING_LINE_FILE);

recArTrx.addListener(new SubFileFilter(recBooking));
recBooking.addListener(new RecountOnValidHandler(recArTrx));
recArTrx.addListener(new SubCountHandler(recBooking.getField(Booking.BALANCE), ArTrx.AMOUNT, true, true));

recBookingLine.addListener(new SubFileFilter(recBooking));
recBooking.addListener(new RecountOnValidHandler(recBookingLine));
recBookingLine.addListener(new SubCountHandler(recBooking.getField(Booking.GROSS), BookingLine.GROSS, true, true));
recBookingLine.addListener(new SubCountHandler(recBooking.getField(Booking.NET), BookingLine.NET, true, true));

recBooking.addListener(new CalcPlanTotals((ScreenRecord)this.getScreenRecord()));
recBooking.addListener(new CalcStartDateHandler(this.getScreenRecord().getField(CashPlanScreenRecord.DEPOSIT_PERIOD_DATE), recBooking.getField(Booking.DEPOSIT_DUE_DATE), this.getScreenRecord().getField(CashPlanScreenRecord.START_DATE), this.getScreenRecord().getField(CashPlanScreenRecord.PERIOD_TYPE), this.getScreenRecord().getField(CashPlanScreenRecord.PERIOD_LENGTH)));
recBooking.addListener(new CalcStartDateHandler(this.getScreenRecord().getField(CashPlanScreenRecord.FINAL_PERIOD_DATE), recBooking.getField(Booking.FINAL_PAYMENT_DUE_DATE), this.getScreenRecord().getField(CashPlanScreenRecord.START_DATE), this.getScreenRecord().getField(CashPlanScreenRecord.PERIOD_TYPE), this.getScreenRecord().getField(CashPlanScreenRecord.PERIOD_LENGTH)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="765">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashPlanReport</MethodClassName>
		<LogicSource>return new CashPlanScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="766">
		<LastChanged>2012-01-23T09:38:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashPlanReport</MethodClassName>
		<LogicSource>return new CashPlanToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="767">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashPlanReport</MethodClassName>
		<LogicSource>return new CashPlanHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="768">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashPlanReport</MethodClassName>
		<LogicSource>return new Booking(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="769">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashPlanReport</MethodClassName>
		<LogicSource><![CDATA[super;
new ArTrx(this);
new BookingLine(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="770">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashPlanReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="771">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashPlanToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="773">
		<LastChanged>2012-04-07T09:51:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ChangeTourHeaderHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>TourHeader recTourHeader, TourClass recTourClass, TourModel recTour, BookingModel recBooking, BaseField fldTourCode, BaseField fldDepDate, BaseField fldTourDesc</MethodInterface>
		<MethodClassName>ChangeTourHeaderHandler</MethodClassName>
		<LogicSource><![CDATA[m_recTourHeader = recTourHeader;
m_recTour = recTour;
m_recBooking = recBooking;
m_fldTourCode = fldTourCode;
m_fldDepDate = fldDepDate;
m_fldTourDesc = fldTourDesc;

super;

m_bReadMove = false; 	// Check on user only!
m_bInitMove = false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="774">
		<LastChanged>2012-04-07T11:29:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ChangeTourHeaderHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
if ((m_recTourHeader.getEditMode() != DBConstants.EDIT_CURRENT)
    && (m_recTourHeader.getEditMode() != DBConstants.EDIT_IN_PROGRESS))
        iErrorCode = ((TourHeader)m_recTourHeader).lookupTourHdr(m_fldTourCode, m_fldDepDate, m_fldTourDesc, bDisplayOption);
if ((iErrorCode == DBConstants.NORMAL_RETURN) & (m_fldDepDate.getLength() != 0))
{   // Set up a new tour or lookup the series tour!!!
    BookingAnswerModel recBookingAnswer = null;  // This causes addTourDetail to resolve the answers automatically
    BookingPaxModel recBookingPax = null;
    Date dateStart = ((DateTimeField)m_recTour.getField(TourModel.DEPARTURE_DATE)).getDateTime();  // Use tour departure date.
    
    if ((m_recBooking == null)
        || (m_recBooking.getField(BookingModel.TOUR_ID).getLength() == 0)
        || (m_recTour.getField(TourModel.TOUR_HEADER_ID).compareTo(m_recTourHeader.getField(TourHeader.ID)) != 0))
    {
        String strCode = DBConstants.BLANK;
        String strDesc = DBConstants.BLANK;
        if (m_recBooking != null)
        {
            boolean[] rgbEnabled = null;
            if (m_recBooking != null)
                rgbEnabled = ((Record)m_recBooking).getField(BookingModel.TOUR_ID).setEnableListeners(false);  // Since it is possible that Booking will refresh which would clear the tour record
            m_recBooking.setupDefaultDesc(m_recTourHeader, m_fldDepDate);
            if (rgbEnabled != null)
                ((Record)m_recBooking).getField(BookingModel.TOUR_ID).setEnableListeners(rgbEnabled);
            strCode = m_recBooking.getField(BookingModel.CODE).toString();
            strDesc = m_recBooking.getField(BookingModel.DESCRIPTION).toString();
        }
        iErrorCode = m_recTour.setupTourFromHeader(m_recTourHeader, m_fldDepDate, strCode, strDesc);
        if (iErrorCode != DBConstants.NORMAL_RETURN)
            return iErrorCode;
        if (m_recBooking == null)
            return iErrorCode;  // No need to do the booking updates
        ((Record)m_recBooking).getField(BookingModel.TOUR_ID).moveFieldToThis(((Record)m_recTour).getField(TourModel.ID));

        if (this.getOwner().getRecord().getTask() instanceof SyncPage)
        {
            SwingSyncPageWorker worker = new SwingSyncPageWorker(((SyncPage)this.getOwner().getRecord().getTask()), true)
            {
                public void done()
                { // 'Please wait...' is done displaying
                    String strCommand = "addTourDetail";
                    Map<String,Object> properties = new HashMap<String,Object>();
                    properties.put(TourHeader.TOUR_HEADER_FILE, m_recTourHeader.getCounterField().getData());
                    properties.put(m_recTour.getField(TourModel.DEPARTURE_DATE).getFieldName(), m_recTour.getField(TourModel.DEPARTURE_DATE).getData());
                    Object objReturn;
                    try {
                        objReturn = ((Record)m_recBooking).handleRemoteCommand(strCommand, properties);
                    } catch (RemoteException e) {
                        e.printStackTrace();
                        objReturn = Boolean.FALSE;
                    } catch (DBException e) {
                        e.printStackTrace();
                        objReturn = Boolean.FALSE;
                    }
                    
                    if (Boolean.FALSE.equals(objReturn))
                    {                           
                        BookingAnswerModel recBookingAnswer = null;  // This causes addTourDetail to resolve the answers automatically
                        BookingPaxModel recBookingPax = null;
                        Date dateStart = ((DateTimeField)m_recTour.getField(TourModel.DEPARTURE_DATE)).getDateTime();  // Use tour departure date.
                        ((BookingModel)m_recBooking).addTourDetail(m_recTour, m_recTourHeader, recBookingPax, recBookingAnswer, dateStart, m_recBooking.getField(BookingModel.ASK_FOR_ANSWER));
                    }
                }
            };
            worker.start();
        }
        else
            iErrorCode = ((BookingModel)m_recBooking).addTourDetail(m_recTour, m_recTourHeader, recBookingPax, recBookingAnswer, dateStart, m_recBooking.getField(BookingModel.ASK_FOR_ANSWER));
    }
    else
    {
        m_recTour.calcTourDates(m_recTourHeader);
        final Date dateOriginal = (Date)((FieldDataScratchHandler)((Record)m_recTour).getField(TourModel.DEPARTURE_DATE).getListener(FieldDataScratchHandler.class)).getOriginalData();
        if (this.getOwner().getRecord().getTask() instanceof SyncPage)
        {
            SwingSyncPageWorker worker = new SwingSyncPageWorker(((SyncPage)this.getOwner().getRecord().getTask()), true)
            {
                public void done()
                {
                    BookingAnswerModel recBookingAnswer = null;  // This causes addTourDetail to resolve the answers automatically
                    BookingPaxModel recBookingPax = null;
                    Date dateStart = ((DateTimeField)m_recTour.getField(TourModel.DEPARTURE_DATE)).getDateTime();  // Use tour departure date.
                    m_recBooking.changeTourDetail(m_recTour, recBookingPax, m_recTourHeader, dateOriginal, dateStart);
                }
            };
            worker.start();
        }
        else
            iErrorCode = m_recBooking.changeTourDetail(m_recTour, recBookingPax, m_recTourHeader, dateOriginal, dateStart);
    }
    if (iErrorCode == DBConstants.NORMAL_RETURN)
    {
        if (m_recBooking.getField(BookingModel.DESCRIPTION).isNull())    // Usually Series Tours since they don't set up booking desc.
            m_recBooking.setupDefaultDesc(m_recTourHeader, m_fldDepDate);
        ((BookingModel)m_recBooking).calcBookingDates(m_recTour, m_recTourHeader);
    }
}
else
{
    if (m_fldDepDate.getLength() == 0) 
        iErrorCode = DBConstants.NORMAL_RETURN;
    if (m_fldTourCode != null) if (m_fldTourCode.getLength() == 0) if (m_fldTourDesc == null)
        iErrorCode = DBConstants.NORMAL_RETURN;
    if (m_fldTourDesc != null) if (m_fldTourDesc.getLength() == 0) if (m_fldTourCode == null)
        iErrorCode = DBConstants.NORMAL_RETURN;
    if (m_fldTourCode != null) if (m_fldTourCode.getLength() == 0)
        if (m_fldTourDesc != null) if (m_fldTourDesc.getLength() == 0)
            iErrorCode = DBConstants.NORMAL_RETURN;
    if ((m_recBooking == null)
        || (m_recBooking.getField(BookingModel.TOUR_ID).getLength() != 0))
    {   // Clear out the current tour
        try   {
            m_recTour.getTable().addNew();
            m_recBooking.getField(BookingModel.TOUR_ID).initField(DBConstants.DISPLAY);
            m_recBooking.getField(BookingModel.FINAL_PAYMENT_DUE_DATE).initField(DBConstants.DISPLAY);
            m_recBooking.getField(BookingModel.DEPOSIT_DUE_DATE).initField(DBConstants.DISPLAY);
            m_recBooking.getField(BookingModel.BOOKING_STATUS_ID).initField(DBConstants.DISPLAY);
        } catch (DBException e)   {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="777">
		<LastChanged>2012-07-19T14:20:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CheckReconDateHandler</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>null, null, null, "&gt;", falseField, true, fldToCheck, fldToCompare</MethodReturns>
		<MethodInterface>BaseField fldToCheck, BaseField fldToCompare</MethodInterface>
		<MethodClassName>CheckReconDateHandler</MethodClassName>
		<LogicSource>BaseField falseField = new BooleanField(null, "Name", 1, "Name", new Boolean(false));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="778">
		<LastChanged>2020-03-02T18:33:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRemoteCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckReconDateHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bDontSkip;
if (strbFilter != null)   if (strbFilter.length() != 0)
    strbFilter.append(" AND ");
if (strbFilter != null)
    strbFilter.append("(");
boolean bDontSkip2 = this.fieldCompare(m_fldToCheck, m_fldToCompare, m_strSeekSign, strbFilter, bIncludeFileName, vParamList, doc);
if (strbFilter != null)
    strbFilter.append(" OR ");
boolean bDontSkip3 = this.fieldCompare(m_fldToCheck, (String)null, "=", strbFilter, bIncludeFileName, vParamList, doc);  // Is null
if (strbFilter != null)
    strbFilter.append(") ");
if (strbFilter != null)
    bDontSkip = true; // Don't need to compare, if I'm creating a filter to pass to SQL 
else
    bDontSkip = (bDontSkip2 | bDontSkip3);
if (bDontSkip)
    return super;    // Dont skip this record
else
    return false;   // Skip this one]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="779">
		<LastChanged>2012-01-31T18:52:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckRegister</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(BankAcctScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE).getField(AssetDrControl.BANK_ACCT_ID)));

this.getMainRecord().setKeyArea(BankTrx.TRX_DATE_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(BankAcctScreenRecord.BANK_ACCT_ID), BankTrx.BANK_ACCT_ID, null, null, null, null));
if (!this.isPrintReport())
{
    Period recPeriod = new Period(this);
    recPeriod.setPeriodDefaults(this.getScreenRecord(), BankAcctScreenRecord.START_DATE, BankAcctScreenRecord.END_DATE, null);
    recPeriod.free();
}
else
{        // Calc start balance
    this.getMainRecord().addListener(new CompareFileFilter(BankTrx.TRX_DATE, this.getScreenRecord().getField(BankAcctScreenRecord.START_DATE), "<", null, false));
    this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(BankAcctScreenRecord.START_BALANCE), BankTrx.AMOUNT, false, true));
    try {
        this.getMainRecord().close();
        while (this.getMainRecord().hasNext())
        {
            this.getMainRecord().next();
        }
    } catch (DBException ex)    {
        ex.printStackTrace();
    } finally   {
        this.getMainRecord().removeListener(this.getMainRecord().getListener(CompareFileFilter.class.getName()), true);
        this.getMainRecord().removeListener(this.getMainRecord().getListener(SubCountHandler.class.getName()), true);
    }
}

this.getMainRecord().addListener(new ExtractRangeFilter(BankTrx.TRX_DATE, this.getScreenRecord().getField(BankAcctScreenRecord.START_DATE), this.getScreenRecord().getField(BankAcctScreenRecord.END_DATE), ExtractRangeFilter.PAD_END_FIELD));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(BankAcctScreenRecord.COUNT), false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(BankAcctScreenRecord.BALANCE), BankTrx.AMOUNT, false, true));

this.getScreenRecord().getField(BankAcctScreenRecord.BALANCE).addListener(new CalcBalanceHandler(this.getScreenRecord().getField(BankAcctScreenRecord.END_BALANCE), this.getScreenRecord().getField(BankAcctScreenRecord.START_BALANCE), this.getScreenRecord().getField(BankAcctScreenRecord.BALANCE), CalcBalanceHandler.PLUS, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="780">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckRegister</MethodClassName>
		<LogicSource>return new BankAcctScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="781">
		<LastChanged>2012-01-23T09:38:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckRegister</MethodClassName>
		<LogicSource>return new CheckRegisterToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="782">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckRegister</MethodClassName>
		<LogicSource>return new CheckRegisterFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="783">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckRegister</MethodClassName>
		<LogicSource>return new CheckRegisterHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="784">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckRegister</MethodClassName>
		<LogicSource>return new BankTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="785">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckRegister</MethodClassName>
		<LogicSource><![CDATA[super;
new AssetDrControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="786">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckRegister</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="787">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckRegisterFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="788">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckRegisterHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="789">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckRegisterToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="790">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ChecksToPrintField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
	case 0:
		tempString = "All";break;
	case 1:
		tempString = "Manual Only";break;
	case 2:
		tempString = "Automated Only";break;
	default:
		tempString = "";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="791">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ChecksToPrintField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
String string = "AMU";	/* All/Manual/Automated */
if ((index >=0) && (index <= 2))
	tempString = string.substring(index, index + 1);
else
	tempString = "A";
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="792">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ChecksToPrintField</MethodClassName>
		<LogicSource><![CDATA[String string = "AMU";
for (int index = 0; index <= 1; index++)
{
	if (tempString.equalsIgnoreCase(string.substring(index, index+1)))
		return index;
}
return -1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="793">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>initField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ChecksToPrintField</MethodClassName>
		<LogicSource>return this.setString("A", bDisplayOption, DBConstants.INIT_MOVE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="794">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ChecksToPrintField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="795">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>CheckValidEmployee</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField empTypes</MethodInterface>
		<MethodClassName>CheckValidEmployee</MethodClassName>
		<LogicSource>//?m_EmpTypes = empTypes;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="796">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckValidEmployee</MethodClassName>
		<LogicSource><![CDATA[super;
/* HACK
String recordString = this.getOwner().getField(kPayFrequency).getString();
String compareString = m_EmpTypes.getString();
if (compareString.Find(recordString) == -1)
{
	String errorString = "Incorrect employee period";
	ErrorDlg box(null, errorString);
	box.DoModal();
}
if (this.getOwner().getField(kTerminationDate).getLength() != 0)
{
	String errorString = "Terminated employee";
	ErrorDlg box(null, errorString);
	box.DoModal();
}
*/]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="797">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CityField</MethodClassName>
		<LogicSource>return new City(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="798">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CityField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), City.CITY_CODE_KEY, City.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="799">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CityGridScreen</MethodClassName>
		<LogicSource>return new City(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="800">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CityGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="801">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CityScreen</MethodClassName>
		<LogicSource>return new City(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="819">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CMDIChildWnd</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="822">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CompanyInfoScreen</MethodClassName>
		<LogicSource>return new CompanyInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="823">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CompanyInfoScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="825">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContinentField</MethodClassName>
		<LogicSource>return new Continent(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="826">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription>Setup the default view</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContinentField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Continent.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="837">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CostStatusField</MethodClassName>
		<LogicSource>return new CostStatus(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="839">
		<LastChanged>2012-02-03T19:56:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CountMcoAmountHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null, null, null, fieldMain, ifsToCount, bRecountOnSelect, bVerifyOnEOF, false</MethodReturns>
		<MethodInterface>BaseField fieldMain, String ifsToCount, boolean bRecountOnSelect, boolean bVerifyOnEOF</MethodInterface>
		<MethodClassName>CountMcoAmountHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="840">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getFieldValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CountMcoAmountHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_iStartMcoClass == 0)
{
	if (m_recTrxStatus == null)
	{
		RecordOwner recordOwner = this.getOwner().findRecordOwner();
		m_recTrxStatus = new TrxStatus(recordOwner);
		if (recordOwner != null)
			recordOwner.removeRecord(m_recTrxStatus);
	}
	m_iStartMcoClass = (int)m_recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, Mco.MCO_FILE, Mco.BATCH);
	m_iEndMcoClass = m_iStartMcoClass; //(int)recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, "MCO Payment-Paid amt");
}
if ((this.getOwner().getField(ArTrx.TRX_STATUS_ID).getValue() >= m_iStartMcoClass)
	&& (this.getOwner().getField(ArTrx.TRX_STATUS_ID).getValue() <= m_iEndMcoClass))
		return super;
return 0;	// Not an MCO... Don't add]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="841">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CountryField</MethodClassName>
		<LogicSource>return new Country(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="842">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CountryField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.makeReferenceRecord();
Converter fldDisplayFieldDesc = record.getField(Country.NAME);
fldDisplayFieldDesc = new FieldLengthConverter(fldDisplayFieldDesc, 25);
return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, Country.CODE_KEY, fldDisplayFieldDesc, true, true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="843">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CountryGridScreen</MethodClassName>
		<LogicSource>return new Country(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="844">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CountryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="845">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CountryScreen</MethodClassName>
		<LogicSource>return new Country(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="846">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CrDrGridScreen</MethodClassName>
		<LogicSource>return new CrDrScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="847">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CrDrGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.FORM)) || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
{
    BasePanel parentScreen = this.getParentScreen();
    if (parentScreen != null)
    {
        parentScreen.popHistory(1, false);
        parentScreen.pushHistory(this.getScreenURL(), false);  // Push this screen onto history stack
    }
    return (this.onForm(null, ArTrx.CR_DR_SCREEN, true, iCommandOptions, null) != null);
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="848">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CrDrScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().getListener(UpdateArTrxAcctDetailHandler.class, true).setEnabledListener(false);    // Since I will be doing the updating
this.getMainRecord().addListener(new UpdateCrDrAcctDetailHandler(this.getRecord(Booking.BOOKING_FILE)));

try {
    this.getMainRecord().addNew();
} catch (DBException e) {
}
this.setEnabled(true);
this.getMainRecord().getField(ArTrx.TRX_STATUS_ID).setEnabled(false);
this.getMainRecord().getField(ArTrx.AMOUNT).addListener(new SetCrDrTypeHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="849">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CrDrScreen</MethodClassName>
		<LogicSource>return new CrDrScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="850">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CrDrScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="851">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditApproveGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
int iTrxStatusID = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, CreditCard.CREDIT_CARD_FILE, CreditCard.APPROVED);
String strTrxClass = Integer.toString(iTrxStatusID);

this.getMainRecord().getField(CreditCard.PAID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(CreditCard.DATE_APPROVED), this.getScreenRecord().getField(McoScreenRecord.TODAY)));
this.getMainRecord().getField(CreditCard.PAID).addListener(new CopyStringHandler(this.getMainRecord().getField(CreditCard.TRX_STATUS_ID), strTrxClass, null));
this.getMainRecord().getField(CreditCard.PAID).addListener(new InitOnChangeHandler(this.getScreenRecord().getField(McoScreenRecord.FLAG))); // Wierd, but since this is a screen field, it would be set the first time and never change again

this.getMainRecord().setKeyArea(CreditCard.TRX_STATUS_ID_KEY);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, CreditCard.CREDIT_CARD_FILE, CreditCard.SUBMITTED);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus));

this.getMainRecord().addListener(new SyncArTrxStatusHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="852">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCard</MethodClassName>
		<LogicSource><![CDATA[super;

this.getField(CreditCard.GROSS).addListener(new CalcBalanceHandler(this.getField(CreditCard.SVC_AMT), this.getField(CreditCard.GROSS), this.getField(CreditCard.SVC_PER), "*", false));
this.getField(CreditCard.SVC_PER).addListener(new CalcBalanceHandler(this.getField(CreditCard.SVC_AMT), this.getField(CreditCard.GROSS), this.getField(CreditCard.SVC_PER), "*", false));
this.getField(CreditCard.GROSS).addListener(new CalcBalanceHandler(this.getField(CreditCard.NET), this.getField(CreditCard.GROSS), this.getField(CreditCard.SVC_AMT), "-", false));
this.getField(CreditCard.SVC_AMT).addListener(new CalcBalanceHandler(this.getField(CreditCard.NET), this.getField(CreditCard.GROSS), this.getField(CreditCard.SVC_AMT), "-", false));
this.getField(CreditCard.NET).addListener(new MoveOnChangeHandler(this.getField(CreditCard.AMT_APPLY), this.getField(CreditCard.NET)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="853">
		<LastChanged>2012-03-28T08:33:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCard</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & BaseArPay.DISTRIBUTION_SCREEN) == BaseArPay.DISTRIBUTION_SCREEN)
    screen = Record.makeNewScreen(CREDIT_CARD_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.POST_MODE)
    screen = Record.makeNewScreen(CREDIT_CARD_POST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == CreditCard.ENTRY_SCREEN)
    screen = Record.makeNewScreen(CREDIT_CARD_ENTRY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == CreditCard.ENTRY_GRID_SCREEN)
    screen = Record.makeNewScreen(CREDIT_CARD_ENTRY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == CreditCard.COLL_POST)
    screen = Record.makeNewScreen(CREDIT_CARD_COLL_POST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == CreditCard.SUBMIT_SCREEN)
    screen = Record.makeNewScreen(CREDIT_SUBMIT_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == CreditCard.COLL_SCREEN)
    screen = Record.makeNewScreen(CREDIT_COLLECT_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == CreditCard.APPROVE_SCREEN)
    screen = Record.makeNewScreen(CREDIT_APPROVE_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(CREDIT_CARD_BATCH_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(CREDIT_CARD_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(CREDIT_CARD_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="854">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addTrxSpecificListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardCollPost</MethodClassName>
		<LogicSource><![CDATA[// Don't call inherrited
BaseField fldCardID = this.getScreenRecord().getField(McoScreenRecord.CARD_ID);
String strCardID = this.getProperty(fldCardID.getFieldName());
fldCardID.setString(strCardID);

this.getMainRecord().setKeyArea(CreditCard.TRX_STATUS_ID_KEY);

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, CreditCard.CREDIT_CARD_FILE, CreditCard.APPROVED);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus));

this.getMainRecord().addListener(new CompareFileFilter(CreditCard.CARD_ID, this.getScreenRecord().getField(McoScreenRecord.CARD_ID), FileListener.EQUALS, null, false));
this.getScreenRecord().getField(McoScreenRecord.NULL_DATE).setData(null); // Just need a temporary null field to compare
this.getMainRecord().addListener(new CompareFileFilter(CreditCard.DATE_PAID, this.getScreenRecord().getField(McoScreenRecord.NULL_DATE), FileListener.NOT_EQUAL, null, false));

Record recCreditCard = this.getMainRecord();
recCreditCard.addListener(new SubCountHandler(this.getScreenRecord().getField(McoScreenRecord.COUNT), false, true));
recCreditCard.addListener(new SubCountHandler(this.getScreenRecord().getField(McoScreenRecord.TOTAL_GROSS), CreditCard.GROSS, false, true));
recCreditCard.addListener(new SubCountHandler(this.getScreenRecord().getField(McoScreenRecord.TOTAL_NET), CreditCard.AMOUNT_PAID, false, true));

recCreditCard.close();
try   {   // Recount totals
    while (recCreditCard.hasNext())
    {
        recCreditCard.next();
        if (recCreditCard.getField(CreditCard.DATE_PAID).isNull())
            continue;
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="855">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardCollPost</MethodClassName>
		<LogicSource>return new McoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="857">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>onPost</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CreditCardCollPost</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="858">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardCollPost</MethodClassName>
		<LogicSource>return new CreditCard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="859">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardCollPost</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);

new TrxStatus(this);
new TransactionType(this);

new Card(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="860">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardCollPost</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="861">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardEntryGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(CreditCard.CARD_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.CARD_ID)));
this.getMainRecord().getField(CreditCard.SVC_PER).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.CREDIT_CARD_SVC_PER)));

((TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE)).getTrxStatusID(TransactionType.ACCTREC, CreditCard.CREDIT_CARD_FILE, CreditCard.BATCH);
this.getMainRecord().setKeyArea(CreditCard.TRX_STATUS_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getRecord(TrxStatus.TRX_STATUS_FILE)));

this.getMainRecord().getField(CreditCard.NET).setEnabled(false);

this.getMainRecord().addListener(new SubFileIntegrityHandler(CreditCardBatchDist.class.getName(), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="862">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardEntryGridScreen</MethodClassName>
		<LogicSource>return new CreditCard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="863">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardEntryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="864">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardGridScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call super
this.getMainRecord().setKeyArea(CreditCard.TRX_DATE_KEY);
// Add the filters behaviors
this.getMainRecord().addListener(new ExtractRangeFilter(CreditCard.BOOKING_ID, this.getScreenRecord().getField(McoScreenRecord.BOOKING_ID)));
this.getScreenRecord().getField(McoScreenRecord.BOOKING_ID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new ExtractRangeFilter(CreditCard.CARD_ID, this.getScreenRecord().getField(McoScreenRecord.CARD_FILTER_ID)));
this.getScreenRecord().getField(McoScreenRecord.CARD_FILTER_ID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new ExtractRangeFilter(CreditCard.CARD_NO, this.getScreenRecord().getField(McoScreenRecord.CARD_NO)));
this.getScreenRecord().getField(McoScreenRecord.CARD_NO).addListener(new FieldReSelectHandler(this));
this.setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="865">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardGridScreen</MethodClassName>
		<LogicSource>return new McoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="866">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen screen = super.addToolbars();

this.getScreenRecord().getField(McoScreenRecord.BOOKING_ID).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), screen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(McoScreenRecord.CARD_FILTER_ID).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.DONT_SET_ANCHOR), screen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(McoScreenRecord.CARD_NO).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.DONT_SET_ANCHOR), screen, ScreenConstants.DEFAULT_DISPLAY);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="868">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardGridScreen</MethodClassName>
		<LogicSource>return new CreditCard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="869">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="870">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call super
this.getMainRecord().setOpenMode(this.getMainRecord().getOpenMode() | DBConstants.OPEN_READ_ONLY);
this.getMainRecord().setKeyArea(CreditCard.TRX_DATE_KEY);
this.setEnabled(false);
//x Can't lookup by credit card no since it is encrypted
//xthis.getMainRecord().getField(CreditCard.CARD_NO).setEnabled(true);
//xthis.getMainRecord().getField(CreditCard.CARD_NO).addListener(new MainFieldHandler(CreditCard.CARD_NO_KEY));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="871">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardScreen</MethodClassName>
		<LogicSource>return new CreditCard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="872">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="873">
		<LastChanged>2012-07-19T14:19:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardPost</MethodClassName>
		<LogicSource><![CDATA[// Don't call super
Record recTrxStatusRef = ((ReferenceField)this.getMainRecord().getField(Trx.TRX_STATUS_ID)).getReferenceRecord(); // Make sure this TrxStatus is different from the one I use for a key.
this.removeRecord(recTrxStatusRef);

m_iTrxStatusEntered = ((TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE)).getTrxStatusID(TransactionType.ACCTREC, CreditCard.CREDIT_CARD_FILE, CreditCard.ENTERED);
((TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE)).getTrxStatusID(TransactionType.ACCTREC, CreditCard.CREDIT_CARD_FILE, CreditCard.BATCH);
this.getMainRecord().addListener(new SubFileFilter(this.getRecord(TrxStatus.TRX_STATUS_FILE)));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.COUNT), false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.TOTAL), CreditCard.AMT_APPLY, false, true));

CreditCardBatchDist recCreditCardBatchDist = (CreditCardBatchDist)this.getRecord(CreditCardBatchDist.CREDIT_CARD_BATCH_DIST_FILE);
recCreditCardBatchDist.addListener(new SubFileFilter(this.getRecord(CreditCard.CREDIT_CARD_FILE)));
recCreditCardBatchDist.addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), CreditCardBatchDist.AMOUNT, false, true));
        
CreditCard recCreditCard = (CreditCard)this.getRecord(CreditCard.CREDIT_CARD_FILE);

Booking recBooking = (Booking)((ReferenceField)recCreditCard.getField(CreditCard.BOOKING_ID)).getReferenceRecord(this);
recCreditCard.getField(CreditCard.BOOKING_ID).addListener(new ReadSecondaryHandler(recBooking, null, true, true, true));     // Update record
ArTrx recArTrx = (ArTrx)this.getRecord(ArTrx.AR_TRX_FILE);
recBooking.addArDetail(recArTrx, null, false);

recCreditCard.close();
try   {   // Recount totals
    while (recCreditCard.hasNext())
    {
        recCreditCard.next();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="875">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardPost</MethodClassName>
		<LogicSource>return new CreditCard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="876">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardEntryScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call super (because MCO stuff would be set up)
this.getMainRecord().getField(CreditCard.CARD_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.CARD_ID)));
this.getMainRecord().getField(CreditCard.SVC_PER).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.CREDIT_CARD_SVC_PER)));

((TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE)).getTrxStatusID(TransactionType.ACCTREC, CreditCard.CREDIT_CARD_FILE, CreditCard.BATCH);
this.getMainRecord().setKeyArea(CreditCard.TRX_STATUS_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getRecord(TrxStatus.TRX_STATUS_FILE)));

this.getMainRecord().getField(CreditCard.NET).setEnabled(false);

this.getMainRecord().addListener(new SubFileIntegrityHandler(CreditCardBatchDist.class.getName(), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="877">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardEntryScreen</MethodClassName>
		<LogicSource>return new CreditCard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="878">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardEntryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="879">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCollectGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);

this.getMainRecord().getField(CreditCard.PAID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(CreditCard.AMOUNT_PAID), this.getMainRecord().getField(CreditCard.NET)));
this.getMainRecord().getField(CreditCard.PAID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(CreditCard.DATE_PAID), this.getScreenRecord().getField(McoScreenRecord.TODAY)));

this.getMainRecord().setKeyArea(CreditCard.TRX_STATUS_ID_KEY);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, CreditCard.CREDIT_CARD_FILE, CreditCard.APPROVED);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus, true));
this.getMainRecord().getField(Mco.PAID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="880">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCollectGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="881">
		<LastChanged>2012-01-31T10:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCollectGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.POST))
{
    Map<String,Object> map = null;
    try   {
        if (this.getMainRecord().getEditMode() == Constants.EDIT_IN_PROGRESS)
            this.getMainRecord().set();
        this.getMainRecord().addNew();
        map = new Hashtable<String,Object>();
        BaseField fldCardID = this.getScreenRecord().getField(McoScreenRecord.CARD_ID);
        map.put(fldCardID.getFieldName(), fldCardID.toString());
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
    return (this.onForm(this.getMainRecord(), Mco.COLL_POST, true, iCommandOptions, map) != null);
}
else if ((strCommand.equalsIgnoreCase(MenuConstants.FORM)) || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
    return (this.onForm(this.getMainRecord(), CreditCard.COLL_SCREEN, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="882">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCollectScreen</MethodClassName>
		<LogicSource><![CDATA[super;

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);

this.getMainRecord().getField(Mco.PAID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(CreditCard.AMOUNT_PAID), this.getMainRecord().getField(CreditCard.NET)));
this.getMainRecord().getField(Mco.PAID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(CreditCard.DATE_PAID), this.getScreenRecord().getField(McoScreenRecord.TODAY)));

this.getMainRecord().setKeyArea(CreditCard.TRX_STATUS_ID_KEY);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, CreditCard.CREDIT_CARD_FILE, CreditCard.APPROVED);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus));

this.setEnabled(false);
this.getMainRecord().getField(CreditCard.DATE_PAID).setEnabled(true);
this.getMainRecord().getField(CreditCard.AMOUNT_PAID).setEnabled(true);
this.getMainRecord().getField(Mco.PAID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="886">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCollectScreen</MethodClassName>
		<LogicSource><![CDATA[super;

String strDesc = CreditCard.ITEM_PAID;
if (this.getTask() != null)
    strDesc = ((BaseApplication)this.getTask().getApplication()).getString(strDesc);
this.getMainRecord().getField(Mco.PAID).setFieldDesc(strDesc);
new SButtonBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getMainRecord().getField(Mco.PAID), ScreenConstants.DISPLAY_FIELD_DESC);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="887">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditMemoScreen</MethodClassName>
		<LogicSource><![CDATA[super;
TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.CREDIT_MEMO);
this.getMainRecord().getField(ApTrx.TRX_STATUS_ID).addListener(new InitFieldHandler(recTrxStatus.getField(TrxStatus.ID)));
this.getMainRecord().addListener(new UpdateCreditMemoHandler(null));
// Invoice balance = invoice amount and select for payment
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new CopyFieldHandler(ApTrx.INVOICE_BALANCE));
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new CopyFieldHandler(ApTrx.AMOUNT_SELECTED));
this.getMainRecord().getField(ApTrx.INVOICE_LOCAL).addListener(new CopyFieldHandler(ApTrx.INVOICE_BALANCE_LOCAL));

Record recVendor = ((ReferenceField)this.getMainRecord().getField(ApTrx.VENDOR_ID)).getReferenceRecord(this);
Record recCurrencys = ((ReferenceField)recVendor.getField(Vendor.CURRENCYS_ID)).getReferenceRecord(this);
this.getMainRecord().getField(ApTrx.VENDOR_ID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), recCurrencys.getField(Currencys.LAST_RATE)));
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), recCurrencys.getField(Currencys.LAST_RATE)));
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new CalcBalanceHandler(this.getMainRecord().getField(ApTrx.INVOICE_LOCAL), this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT), CalcBalanceHandler.MULTIPLY, true));
this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE).addListener(new CalcBalanceHandler(this.getMainRecord().getField(ApTrx.INVOICE_LOCAL), this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT), CalcBalanceHandler.MULTIPLY, true));

this.getScreenRecord().getField(DebitMemoScreenRecord.AP_ACCOUNT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.AP_ACCOUNT_ID)));
this.getScreenRecord().getField(DebitMemoScreenRecord.TOUR_ACCOUNT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.COST_ACCOUNT_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="888">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditMemoScreen</MethodClassName>
		<LogicSource>return new DebitMemoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="889">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditMemoScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="890">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditMemoScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxStatus(this);
new ApControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="891">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditMemoScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="892">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditSubmitGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
int iTrxStatusID = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, CreditCard.CREDIT_CARD_FILE, CreditCard.SUBMITTED);
String strTrxClass = Integer.toString(iTrxStatusID);

this.getMainRecord().getField(CreditCard.PAID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(CreditCard.DATE_SUBMITTED), this.getScreenRecord().getField(McoScreenRecord.TODAY)));
this.getMainRecord().getField(CreditCard.PAID).addListener(new CopyStringHandler(this.getMainRecord().getField(CreditCard.TRX_STATUS_ID), strTrxClass, null));
this.getMainRecord().getField(CreditCard.PAID).addListener(new InitOnChangeHandler(this.getScreenRecord().getField(McoScreenRecord.FLAG))); // Wierd, but since this is a screen field, it would be set the first time and never change again

this.getMainRecord().setKeyArea(CreditCard.TRX_STATUS_ID_KEY);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, CreditCard.CREDIT_CARD_FILE, CreditCard.ENTERED);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus));

this.getMainRecord().addListener(new SyncArTrxStatusHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="897">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditSubmitGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

String strDesc = CreditCard.SUBMITTED;
if (this.getTask() != null)
    strDesc = ((BaseApplication)this.getTask().getApplication()).getString(strDesc);

BaseField fldFlag = this.getMainRecord().getField(CreditCard.PAID);
fldFlag.setFieldDesc(strDesc);
new SButtonBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, fldFlag, ScreenConstants.DISPLAY_FIELD_DESC);
this.getRecord(CreditCard.CREDIT_CARD_FILE).getField(CreditCard.TRX_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="898">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="899">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="900">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqReport</MethodClassName>
		<LogicSource><![CDATA[super;

Record recApTrx = this.getRecord(ApTrx.AP_TRX_FILE);
Record recVendor = this.getRecord(Vendor.VENDOR_FILE);
Record recCurrencys = this.getRecord(Currencys.CURRENCYS_FILE);

recApTrx.getField(ApTrx.VENDOR_ID).addListener(new ReadSecondaryHandler(recVendor));
recVendor.getField(Vendor.CURRENCYS_ID).addListener(new ReadSecondaryHandler(recCurrencys));

recApTrx.addListener(new CalcStartDateHandler(this.getScreenRecord().getField(CurrencyReqScreenRecord.FROM_DATE), recApTrx.getField(ApTrx.START_SERVICE_DATE), this.getScreenRecord().getField(CurrencyReqScreenRecord.START_DATE), this.getScreenRecord().getField(CurrencyReqScreenRecord.PERIOD_TYPE), this.getScreenRecord().getField(CurrencyReqScreenRecord.PERIOD_LENGTH)));

this.getRecord(ApTrx.AP_TRX_FILE).addListener(new ApTrxFilter(ApTrx.TRX_STATUS_ID, (ScreenRecord)this.getScreenRecord()));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="901">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqReport</MethodClassName>
		<LogicSource>return new CurrencyReqScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="902">
		<LastChanged>2012-01-23T09:38:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqReport</MethodClassName>
		<LogicSource>return new CurrencyReqToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="903">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqReport</MethodClassName>
		<LogicSource>return new CurrencyReqFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="904">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqReport</MethodClassName>
		<LogicSource>return new CurrencyReqHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="905">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqReport</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="906">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqReport</MethodClassName>
		<LogicSource><![CDATA[super;
new Currencys(this);
new Vendor(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="907">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="908">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="909">
		<LastChanged>2012-02-02T19:17:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Currencys</MethodClassName>
		<LogicSource><![CDATA[DateUpdatedHandler update1 = new DateUpdatedHandler(Currencys.RATE_CHANGED_DATE);
this.getField(Currencys.LAST_RATE).addListener(update1);
ChangedByHandler name1 = new ChangedByHandler(Currencys.RATE_CHANGED_BY);
this.getField(Currencys.LAST_RATE).addListener(name1);
DateUpdatedHandler update2 = new DateUpdatedHandler(Currencys.COSTING_CHANGED_DATE);
this.getField(Currencys.COSTING_RATE).addListener(update2);
ChangedByHandler name2 = new ChangedByHandler(Currencys.COSTING_CHANGED_BY);
this.getField(Currencys.COSTING_RATE).addListener(name2);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="910">
		<LastChanged>2012-02-02T19:17:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>convertCostToUSD</MethodName>
		<LogicDescription>Convert to USD</LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>double dCost, boolean bCostingExchange</MethodInterface>
		<MethodClassName>Currencys</MethodClassName>
		<LogicSource><![CDATA[double dExchange;
if ((bCostingExchange) && (!this.getField(Currencys.COSTING_RATE).isNull()))
    dExchange = this.getField(Currencys.COSTING_RATE).getValue();
else
    dExchange = this.getField(Currencys.LAST_RATE).getValue();
dCost = Math.floor(dCost * dExchange * 100.00 + 0.5) / 100.00;
return dCost;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="912">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencysField</MethodClassName>
		<LogicSource>return new Currencys(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="913">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencysField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Currencys.CURRENCY_CODE_KEY, Currencys.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="914">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencysGridScreen</MethodClassName>
		<LogicSource>return new Currencys(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="915">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencysGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="916">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencysScreen</MethodClassName>
		<LogicSource><![CDATA[this.addMainKeyBehavior();
//+this.getMainRecord().getField(Currencys.LANGUAGE_ID).addListener(new InitFieldHandler(this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE).getField(AssetDrControl.LANGUAGE_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="917">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencysScreen</MethodClassName>
		<LogicSource>return new Currencys(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="918">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencysScreen</MethodClassName>
		<LogicSource><![CDATA[super;
//+new AssetDrControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="919">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencysScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="920">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getCurrentUserID</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>CurrentUserHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_CurrentUserID == -1)
{		// Lookup the current user (first time only)
	Employee employee = new Employee(null);
	int errorCode = employee.getCurrentUser();
	if (errorCode == DBConstants.NORMAL_RETURN)
		m_CurrentUserID = (int)employee.getField(Employee.ID).getValue();
	else
		m_CurrentUserID = 0;	// Not found in list
	employee.free();
	employee = null;
}
return m_CurrentUserID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="921">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CustSaleCustNo</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="922">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupCustQuery</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CustSaleCustNo</MethodClassName>
		<LogicSource>//*this.SubClassResponsibility();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="923">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[super;

BookingDetailSoftDeleteHandler listener = new BookingDetailSoftDeleteHandler(this.getField(BookingDetail.DELETED));
this.addListener(listener);
listener.filterThisRecord(false);   // Display deleted record (usually switchable in screens)

this.getField(BookingDetail.PRODUCT_TYPE).addListener(new ProductTypeHandler(null));
// Since Meals handler is such a resource hog, you should only add it manually todo(don)
this.getField(BookingDetail.MEAL_SUMMARY).addListener(new MealsHandler(null));
this.getField(BookingDetail.STATUS_SUMMARY).addListener(new StatusHandler(null));

this.getField(BookingDetail.AP_TRX_ID).addListener(new DisableOnFieldHandler(this.getField(BookingDetail.PRODUCT_ID), null, false));

this.addLookupListeners();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="924">
		<LastChanged>2012-04-06T16:44:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>58</Sequence>
		<MethodName>addDetailBehaviors</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[// NOTE: This next set of logic should really go somewhere else, but this date/city default logic is easy here.
Record screenRecord = null;
if ((((Record)recBooking).getRecordOwner() != null)
    && (((Record)recBooking).getRecordOwner().getScreenRecord() instanceof BookingScreenRecord))
{
    screenRecord = (Record)((Record)recBooking).getRecordOwner().getScreenRecord();
    Record recProduct = ((ReferenceField)this.getField(BookingDetail.PRODUCT_ID)).getReferenceRecord(this.getRecordOwner());
    // Note that I add these listeners in reverse since they always do the other listeners before they do themselves.
    if (recProduct != null)
    {
        if (recProduct instanceof TransportProduct)
            this.addListener(new MoveOnEventHandler(screenRecord.getField(BookingScreenRecord.LAST_CITY_ID), ((TransportProduct)recProduct).getField(TransportProduct.TO_CITY_ID), null, false, false, false, true, true, null, true));
        this.addListener(new MoveOnEventHandler(screenRecord.getField(BookingScreenRecord.LAST_CITY_ID), recProduct.getField(Product.CITY_ID), null, false, false, false, true, true, null, false));
    }
    // If the end date is non-null, use it!
    this.addListener(new MoveOnEventHandler(screenRecord.getField(BookingScreenRecord.LAST_DATE), this.getField(BookingDetail.DETAIL_DATE), null, false, false, false, true, true, null, false));
    this.addListener(new MoveOnEventHandler(screenRecord.getField(BookingScreenRecord.LAST_DATE), this.getField(BookingDetail.DETAIL_END_DATE), null, false, false, false, true, true, null, true));
    
    FieldListener listener = this.getField(BookingDetail.DETAIL_DATE).getListener(InitOnceFieldHandler.class.getName());
    if (listener != null)
        this.getField(BookingDetail.DETAIL_DATE).removeListener(listener, true);
    this.getField(BookingDetail.DETAIL_DATE).addListener(new InitFieldHandler(screenRecord.getField(BookingScreenRecord.LAST_DATE), false));
}
// Note these next listener are just a backup if the screenRecord date is null or not available. (First departure, then today)
this.getField(BookingDetail.DETAIL_DATE).addListener(new InitFieldHandler(new Date()));
this.getField(BookingDetail.DETAIL_DATE).addListener(new InitFieldHandler((BaseField)recTour.getField(Tour.DEPARTURE_DATE), false));

// Make sure header is up-to-date for possible server record changes.
this.addListener(new WriteOnUpdateHandler((Record)recBooking, true));
super.addDetailBehaviors(recBooking, recTour); 

this.setOpenMode(this.getOpenMode() | DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="930">
		<LastChanged>2012-04-11T15:41:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>setupEndDate</MethodName>
		<LogicDescription/>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[long lLengthTime = 0;
ProductModel recProduct = this.getProduct();
if (recProduct != null)
    lLengthTime = recProduct.getLengthTime();
Date dateStart = this.getStartDate();
Date dateEnd = null;
if (dateStart != null)
    dateEnd = new Date(dateStart.getTime() + lLengthTime);
return dateEnd;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="931">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getEndIcon</MethodName>
		<LogicDescription>Get the ending icon for this in a calendar</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>return null;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="933">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>93</Sequence>
		<MethodName>getMealDesc</MethodName>
		<LogicDescription>Get the meals on this day. If bDetailedDesc is false, a very short (1-3 char) desc is returned.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Date dateTarget, boolean bDetailedDesc, Record recMealPlan</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>return Constants.BLANK;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="934">
		<LastChanged>2012-04-06T00:37:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getNoPax</MethodName>
		<LogicDescription>Get Pax using this service</LogicDescription>
		<MethodReturns>short</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[if (this.getField(BookingDetail.BOOKING_PAX_ID).getValue() != 0)
	return 1;	// Pax mod
else
{
	BookingModel recBooking = this.getBooking(true);
	if (recBooking == null)
		return 1;
	return (short)recBooking.getField(Booking.PAX).getValue();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="935">
		<LastChanged>2012-04-11T02:19:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>810</Sequence>
		<MethodName>getPaxInRoom</MethodName>
		<LogicDescription>How many of this type of passenger (ie., single, double, etc.) are in this type of room?</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>int iRoomType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[if (this.getField(BookingDetail.BOOKING_PAX_ID).getValue() != 0)
    return 1; // Pax mod **FIX THIS**
else
{
    Booking booking = (Booking)this.getBooking(true);
    if ((iRoomType >= PaxCategory.SINGLE_ID)
        && (iRoomType <= PaxCategory.CHILD_ID))
    {
        int iFieldSeq = booking.getFieldSeq(Booking.SINGLE_PAX) + iRoomType - PaxCategory.SINGLE_ID;
        return (int)booking.getField(iFieldSeq).getValue();
    }
    else
        return booking.getCountPax();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="938">
		<LastChanged>2012-04-01T00:06:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>83</Sequence>
		<MethodName>getProductDesc</MethodName>
		<LogicDescription><![CDATA[Get the description of the product for this line item.
Usually, you just get the description of the current product.
For manual lines, the manual description is returned.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[return this.getField(BookingDetail.DESCRIPTION).toString();
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="939">
		<LastChanged>2012-04-01T00:06:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>68</Sequence>
		<MethodName>getStartDate</MethodName>
		<LogicDescription><![CDATA[Get the start date and time for this product.
Return null if there is no date and time.]]></LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>return ((DateTimeField)this.getField(BookingDetail.DETAIL_DATE)).getDateTime();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="940">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getStartIcon</MethodName>
		<LogicDescription><![CDATA[Get the starting icon for this product.
(Default to the standard icon)]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>return this.getBitmap();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="942">
		<LastChanged>2012-04-12T06:39:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>98</Sequence>
		<MethodName>initBookingDetailFields</MethodName>
		<LogicDescription><![CDATA[When a new record is set up and you have the booking and tour
records, init the detail fields.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
this.getField(BookingDetail.TOUR_ID).moveFieldToThis((BaseField)recTour.getField(Tour.ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="946">
		<LastChanged>2012-04-11T15:42:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>setDetailProductFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (recTourHeaderDetail != null)
    this.getField(BookingDetail.PRODUCT_ID).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderDetail.PRODUCT_ID));
ProductModel recProduct = this.getProduct();
if (recProduct != null)
    if ((recProduct.getEditMode() == DBConstants.EDIT_NONE) || (recProduct.getEditMode() == DBConstants.EDIT_ADD))
        recProduct = null;

boolean[] rgbModifiedBefore = this.getModified();
if (recProduct != null)
    this.moveProductFields(recProduct);
boolean[] rgbModifiedAfterProduct = this.getModified();

this.setModified(rgbModifiedBefore);
this.moveTourHeaderFields(recTourHeaderDetail, recTour);

boolean[] rgbModifiedAfterTourHeader = this.getModified();
for (int i = 0; i < rgbModifiedAfterTourHeader.length; i++)
{   // If it was modified anywhere, set modified flag.
    rgbModifiedAfterTourHeader[i] = rgbModifiedBefore[i] | rgbModifiedAfterProduct[i] | rgbModifiedAfterTourHeader[i];
}
this.setModified(rgbModifiedAfterTourHeader);

Date dateStart = ((DateTimeField)this.getField(BookingDetail.MODULE_START_DATE)).getDateTime();
Date date = this.setupStartDate(recTourHeaderDetail, recBooking, recTour, fldPaxID, fldQaID, fldModID, dateStart);
((DateTimeField)this.getField(BookingDetail.DETAIL_DATE)).setDateTime(date, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
date = this.setupEndDate();
((DateTimeField)this.getField(BookingDetail.DETAIL_END_DATE)).setDateTime(date, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
String strDesc = this.setupProductDesc();
this.getField(BookingDetail.DESCRIPTION).setString(strDesc);
this.setupGMTDates();

this.getField(BookingDetail.TOUR_ID).moveFieldToThis(recTour.getField(Tour.ID));   // Could be fake tour or dual series

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="947">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>setupDetailKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[Date date = this.setupStartDate(recTourHeaderDetail, recBooking, recTour, fldPaxID, fldQaID, fldModID, dateStart);
((DateTimeField)this.getField(BookingDetail.DETAIL_DATE)).setDateTime(date, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(BookingDetail.PRODUCT_TYPE_ID).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderDetail.PRODUCT_TYPE_ID));
int iErrorCode = super.setupDetailKey(recTourHeaderDetail, recBooking, recTour, fldPaxID, fldQaID, fldModID, dateStart);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="949">
		<LastChanged>2012-04-06T00:36:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setDetailProductInfo</MethodName>
		<LogicDescription><![CDATA[Set-up the current product info.
If properties are supplied, look in the properties for new values.
Else, if the target values are not already set, use the default values
supplied in the tour and booking records.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[if (((recTourHeaderDetail == null)
    && (this.getField(BookingDetail.PRODUCT_ID).getLength() == 0))
    || ((recTourHeaderDetail == null)
    && (this.getField(BookingDetail.DETAIL_DATE).getLength() == 0)))
{
    this.getField(BookingDetail.INFO_STATUS_ID).setValue(CostStatus.DATA_REQUIRED);
    String strError = "Data required in the {0} field";
    strError = this.getTask().getApplication().getResources(ThinResourceConstants.ERROR_RESOURCE, true).getString(strError);
    strError = MessageFormat.format(strError, this.getField(BookingDetail.INFO_STATUS_ID).getFieldDesc());
    this.setErrorMessage(BookingDetail.INFO_STATUS_ID, strError);
    // Even though there is an error, continue setting the other properties (hey behaviors are disabled)
}
if (recBooking == null)
    recBooking = (Booking)this.getBooking(true);
if (recTour == null)
{
    if (this.getField(BookingDetail.TOUR_ID).isNull())
        recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
    else
        recTour = (Tour)((ReferenceField)this.getField(BookingDetail.TOUR_ID)).getReference();
}

boolean[] rgbEnabled = this.setEnableListeners(false);
Object[] rgobjEnabled = this.setEnableFieldListeners(false);

// Save the current state so I know what was changed afterwards
int iFieldsTypes = BaseBuffer.ALL_FIELDS;
BaseBuffer buffer = new VectorBuffer(null, iFieldsTypes);
buffer.fieldsToBuffer(this, iFieldsTypes);
boolean[] rgbModified = this.getModified();

this.initBookingDetailFields(recBooking, recTour, true);    // This will init any fields that aren't already set up.
if (this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).isNull())
{
    int iDefaultInfoTransport = ((ReferenceField)this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID)).getIDFromCode(MessageTransport.DEFAULT);
    this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).setValue(iDefaultInfoTransport, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
}

if (this.getField(BookingDetail.PRODUCT_ID).isJustModified())
{   // Note: No need to enable behaviors, since if info status changes, the other status' behaviors will be called also. 
    this.getField(BookingDetail.INFO_STATUS_ID).setValue(InfoStatus.NOT_VALID);
    this.getField(BookingDetail.INFO_REQUEST_KEY).initField(DBConstants.DISPLAY);    // Zero this out
    this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID).initField(DBConstants.DISPLAY);
    this.getField(BookingDetail.COST_STATUS_ID).setValue(InfoStatus.NOT_VALID);
    this.getField(BookingDetail.COST_REQUEST_KEY).initField(DBConstants.DISPLAY);    // Zero this out
    this.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID).initField(DBConstants.DISPLAY);
    this.getField(BookingDetail.INVENTORY_STATUS_ID).setValue(InfoStatus.NOT_VALID);
    this.getField(BookingDetail.INVENTORY_REQUEST_KEY).initField(DBConstants.DISPLAY);    // Zero this out
    this.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID).initField(DBConstants.DISPLAY);
    this.getField(BookingDetail.PRODUCT_STATUS_ID).setValue(InfoStatus.NOT_VALID);
    this.getField(BookingDetail.PRODUCT_REQUEST_KEY).initField(DBConstants.DISPLAY);    // Zero this out
}

int iErrorCode = super.setDetailProductInfo(properties, recTourHeaderDetail, recBooking, recTour, fldPaxID, fldQaID, fldModID);

this.setEnableListeners(rgbEnabled);
this.setEnableFieldListeners(rgobjEnabled);

this.checkAndHandleFieldChanges(buffer, rgbModified, false);   // Call listeners of any changed fields

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="958">
		<LastChanged>2012-04-06T16:38:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addDetailBehaviors</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BookingModel recBooking, TourModel recTour</MethodInterface>
		<MethodClassName>BookingSub</MethodClassName>
		<LogicSource><![CDATA[FileListener subFileBeh = new SubFileFilter((Record)recBooking, true);
this.addListener(subFileBeh);
this.setKeyArea(BookingSub.BOOKING_ID_KEY);
RecordOwner screen = this.getRecordOwner();
if (screen != null) if (screen instanceof GridScreenParent)
{
    FieldListener reSelect = new FieldReSelectHandler((GridScreenParent)screen);
    ((BaseField)recBooking.getField(Booking.ID)).addListener(reSelect);
}
this.addListener(new InitBookingDetailHandler((Booking)recBooking, (Tour)recTour));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="960">
		<LastChanged>2012-04-02T22:29:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>getBooking</MethodName>
		<LogicDescription><![CDATA[Get the main (Booking) record for this detail record.
Note: This will only return the main record if it already exists.]]></LogicDescription>
		<MethodReturns>BookingModel</MethodReturns>
		<MethodInterface>boolean bCreateAndReadCurrent</MethodInterface>
		<MethodClassName>BookingSub</MethodClassName>
		<LogicSource><![CDATA[ReferenceField fldBookingID = (ReferenceField)this.getField(BookingSub.BOOKING_ID);
if (bCreateAndReadCurrent)
    return (Booking)fldBookingID.getReference();
else
    return (Booking)fldBookingID.getReferenceRecord(null, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="961">
		<LastChanged>2012-04-12T06:51:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>95</Sequence>
		<MethodName>initBookingDetailFields</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BookingModel recBooking, TourModel recTour, boolean bOnlyIfTargetIsNull</MethodInterface>
		<MethodClassName>BookingSub</MethodClassName>
		<LogicSource><![CDATA[if ((!bOnlyIfTargetIsNull) || (this.getField(BookingSub.BOOKING_ID).isNull()))
    this.getField(BookingSub.BOOKING_ID).moveFieldToThis((BaseField)recBooking.getField(Booking.ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingSub.MODULE_ID).isNull()))
    this.getField(BookingSub.MODULE_ID).moveFieldToThis((BaseField)recTour.getField(Tour.TOUR_HEADER_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="963">
		<LastChanged>2012-01-31T21:04:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupAllDetail</MethodName>
		<LogicDescription><![CDATA[Add the detail line items from this tour detail.
(ie., read through this tour detail and add the items to the current booking detail)]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>TourSub recTourHeaderDetail, Booking recBooking, Tour recTour, BaseField fldPaxID, BaseField fldQaID, BaseField fldModID, Date dateStart</MethodInterface>
		<MethodClassName>BookingSub</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
int iOldKeyOrder = recTourHeaderDetail.getDefaultOrder();
recTourHeaderDetail.setKeyArea(TourHeaderDetail.TOUR_HEADER_OPTION_ID_KEY);
SubFileFilter subFileBehavior = new SubFileFilter(fldQaID, TourHeaderDetail.TOUR_HEADER_OPTION_ID, null, null, null, null);
recTourHeaderDetail.addListener(subFileBehavior);
try   {
    Object[] rgbFieldsEnabled = this.setEnableFieldListeners(false);
    this.addNew();  // This is required to clear InitOnce listeners (I must clear ALL the fields)
    this.setEnableFieldListeners(rgbFieldsEnabled);
    this.addNew();  // This is required to do InitOnce listeners
    recTourHeaderDetail.close();
    while (recTourHeaderDetail.hasNext())
    {
        TourSub recTourHeaderDetail2 = (TourSub)recTourHeaderDetail.next();
        iErrorCode = this.setupDetail(recTourHeaderDetail2, recBooking, recTour, fldPaxID, fldQaID, fldModID, dateStart);
        if (iErrorCode != DBConstants.NORMAL_RETURN)
            continue;   // Error just means this record doesn't need to be written here
        Record recBookingDetail = this.getTable().getCurrentTable().getRecord();
        if (recBookingDetail.getEditMode() == DBConstants.EDIT_ADD)
            recBookingDetail.add();
        else if (recBookingDetail.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
            recBookingDetail.set(); // It is possible that setdetail wrote the record
    }
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    recTourHeaderDetail.removeListener(subFileBehavior, true);
    recTourHeaderDetail.setKeyArea(iOldKeyOrder);
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="964">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDetail</MethodName>
		<LogicDescription><![CDATA[Here is a single tour detail item.
Add it to the current booking line item detail.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>TourSub recTourHeaderDetail, Booking recBooking, Tour recTour, BaseField fldPaxID, BaseField fldQaID, BaseField fldModID, Date dateStart</MethodInterface>
		<MethodClassName>BookingSub</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
int iOldOpenMode = this.getOpenMode();
this.setOpenMode(iOldOpenMode & ~DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);
boolean bListenerEnabledState = true;
try   {
    if (recBooking.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class) != null)
        bListenerEnabledState = recBooking.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class).setEnabledListener(false); // Don't want to sense a broken tour detail (would cause the pricingtype to change)
    if (ModifyCodeField.ADD.equals(recTourHeaderDetail.getField(TourHeaderDetail.MODIFY_CODE).getString()))
    {
        this.setupDetailKey(recTourHeaderDetail, recBooking, recTour, fldPaxID, fldQaID, fldModID, dateStart);    // This will set the record type
        this.addNew();
        this.setOpenMode(iOldOpenMode);
        BookingSub recBookingDetail = (BookingSub)this.getTable().getCurrentTable().getRecord();
        recBookingDetail.initBookingDetailFields(recBooking, recTour, false);
        recBookingDetail.setupDetailKey(recTourHeaderDetail, recBooking, recTour, fldPaxID, fldQaID, fldModID, dateStart);
        iErrorCode = recBookingDetail.setDetailProductInfo(null, recTourHeaderDetail, recBooking, recTour, fldPaxID, fldQaID, fldModID);
    }
    else // if ((recTourHeaderDetail.getField(TourDetail.MODIFY_CODE) == ModifyCodeField.REPLACE) || (recTourDetail.getField(TourDetail.MODIFY_CODE) == ModifyCodeField.DELETE))
    {
        this.setKeyArea(BookingSub.DETAIL_ACCESS_KEY);
        this.setupDetailKey(recTourHeaderDetail, recBooking, recTour, fldPaxID, fldQaID, fldModID, dateStart);
        this.getField(BookingSub.TOUR_HEADER_DETAIL_ID).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderDetail.MODIFY_ID));
        boolean bSuccess = this.seek(DBConstants.EQUALS);
        if (bSuccess)
        {
            BookingSub recBookingDetail = (BookingSub)this.getTable().getCurrentTable().getRecord();
            if (ModifyCodeField.REPLACE.equals(recTourHeaderDetail.getField(TourHeaderDetail.MODIFY_CODE).getString()))
            {
                recBookingDetail.edit();
                iErrorCode = recBookingDetail.setDetailProductInfo(null, recTourHeaderDetail, recBooking, recTour, fldPaxID, fldQaID, fldModID);
            }
            else // if (recTourHeaderDetail.getField(TourDetail.MODIFY_CODE) == ModifyCodeField.DELETE))
            {
                recBookingDetail.remove();
            }
        }
        else
        {
            if (ModifyCodeField.REPLACE.equals(recTourHeaderDetail.getField(TourHeaderDetail.MODIFY_CODE).getString()))
            {   // Modify item not found, add.
                this.setupDetailKey(recTourHeaderDetail, recBooking, recTour, fldPaxID, fldQaID, fldModID, dateStart);    // This will set the record type
                this.addNew();
                this.setOpenMode(iOldOpenMode);
                BookingSub recBookingDetail = (BookingSub)this.getTable().getCurrentTable().getRecord();
                recBookingDetail.initBookingDetailFields(recBooking, recTour, false);
                recBookingDetail.setupDetailKey(recTourHeaderDetail, recBooking, recTour, fldPaxID, fldQaID, fldModID, dateStart);
                iErrorCode = recBookingDetail.setDetailProductInfo(null, recTourHeaderDetail, recBooking, recTour, fldPaxID, fldQaID, fldModID);
            }
            else
                this.setEditMode(DBConstants.EDIT_NONE);    // Make sure this (blank) record is not written
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
    return ex.getErrorCode();
} finally {
    this.setOpenMode(iOldOpenMode);
    if (recBooking.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class) != null)
        recBooking.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class).setEnabledListener(bListenerEnabledState); // Don't want to sense a broken tour detail (would cause the pricingtype to change)
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="965">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setDetailProductFields</MethodName>
		<LogicDescription>For this tour detail, move all the detail field to the current booking line item detail.</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>TourSub recTourHeaderDetail, Booking recBooking, Tour recTour, BaseField fldPaxID, BaseField fldQaID, BaseField fldModID</MethodInterface>
		<MethodClassName>BookingSub</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
if (fldModID != null)
    this.getField(BookingSub.MODULE_ID).moveFieldToThis(fldModID);
if (fldQaID != null)
    this.getField(BookingSub.TOUR_HEADER_OPTION_ID).moveFieldToThis(fldQaID);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="966">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupDetailKey</MethodName>
		<LogicDescription>Setup the detail key, given this tour detail record.</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>TourSub recTourHeaderDetail, Booking recBooking, Tour recTour, BaseField fldPaxID, BaseField fldQaID, BaseField fldModID, Date dateStart</MethodInterface>
		<MethodClassName>BookingSub</MethodClassName>
		<LogicSource><![CDATA[this.getField(BookingSub.BOOKING_ID).moveFieldToThis(recBooking.getField(Booking.ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
this.getField(BookingSub.BOOKING_PAX_ID).setValue(0, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if (fldPaxID != null) if (fldPaxID.getValue() != 0)
    this.getField(BookingSub.BOOKING_PAX_ID).moveFieldToThis(fldPaxID, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if (fldModID != null)
    this.getField(BookingSub.MODULE_ID).moveFieldToThis(fldModID, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
else
    this.getField(BookingSub.MODULE_ID).setValue(0, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if (recTourHeaderDetail == null)
    this.getField(BookingSub.TOUR_HEADER_DETAIL_ID).initField(DBConstants.DISPLAY);
else
    this.getField(BookingSub.TOUR_HEADER_DETAIL_ID).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderDetail.ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
((DateTimeField)this.getField(BookingSub.MODULE_START_DATE)).setDateTime(dateStart, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="967">
		<LastChanged>2012-03-27T21:01:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DaysOfWeekField</MethodClassName>
		<LogicSource><![CDATA[ScreenComponent screenField = null;
// Now get the first box on the calendar
Converter.initGlobals();
Calendar calendar = Converter.gCalendar;
Date dateTarget = new Date();   // Pick a date, any date
int iFirstDayOfWeek = calendar.getFirstDayOfWeek();
calendar.setTime(dateTarget);
int iTargetDayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
int iOffset = -Math.abs(iTargetDayOfWeek - iFirstDayOfWeek);
calendar.add(Calendar.DATE, iOffset);   // This date is the first of the week

calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.MINUTE, 0);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);

properties = new HashMap<String,Object>();
properties.put(ScreenModel.DISPLAY_STRING, DBConstants.BLANK);
createScreenComponent(ScreenModel.STATIC_STRING, itsLocation, targetScreen, null, 0, properties);
String strDisplay = converter.getFieldDesc();
if ((strDisplay != null) && (strDisplay.length() > 0))
{
    ScreenLoc descLocation = targetScreen.getNextLocation(ScreenConstants.FIELD_DESC, ScreenConstants.DONT_SET_ANCHOR);
    properties.put(ScreenModel.DISPLAY_STRING, strDisplay);
    createScreenComponent(ScreenModel.STATIC_STRING, descLocation, targetScreen, null, 0, properties);
}

for (short i = 0; i <= 6; i++)    // 0 = First Day -> 6 = Last Day of Week
{
    Converter dayConverter = (Converter)converter;
    String strWeek = this.getDateString(calendar.getTime(), DateFormat.DAY_OF_WEEK_FIELD);
    if (strWeek.length() > 0)
        dayConverter = new FieldDescConverter(dayConverter, strWeek.substring(0, 1));
    int sBitPosition = this.getBitDayOfWeek(calendar);
    dayConverter = new BitConverter(dayConverter, sBitPosition, false, true);
    itsLocation = targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST_CHECKBOX, ScreenConstants.DONT_SET_ANCHOR);
    screenField = dayConverter.setupDefaultView(itsLocation, targetScreen, iDisplayFieldDesc);

    calendar.add(Calendar.DATE, 1);
}
return screenField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="968">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);

BookingDetail record = (BookingDetail)this.getMainRecord();
record.setKeyArea(BookingDetail.BOOKING_ID_KEY);
record.addDetailBehaviors(recBooking, recTour);

this.setAppending(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="970">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailGridScreen</MethodClassName>
		<LogicSource>return new BookingDetailScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="971">
		<LastChanged>2012-01-23T08:57:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailGridScreen</MethodClassName>
		<LogicSource>return null; //+return new BookingCostingScreen(null, null, null, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="972">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailGridScreen</MethodClassName>
		<LogicSource>return new BookingDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="973">
		<LastChanged>2012-01-31T10:43:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record mergeTable = this.getMainRecord();
this.addColumn(new MultipleTableFieldConverter(mergeTable, BookingDetail.STATUS_SUMMARY));

this.addColumn(new MultipleTableFieldConverter(mergeTable, BookingDetail.DETAIL_DATE));
this.addColumn(new ProductDescConverter(mergeTable));

this.addColumn(new MultipleTableFieldConverter(mergeTable, BookingDetail.TOTAL_COST_LOCAL));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="974">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DebitMemoScreen</MethodClassName>
		<LogicSource><![CDATA[super;
TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.DEBIT_MEMO);
this.getMainRecord().getField(ApTrx.TRX_STATUS_ID).addListener(new InitFieldHandler(recTrxStatus.getField(TrxStatus.ID)));

this.getMainRecord().addListener(new UpdateDebitMemoHandler(null));
// Invoice balance = invoice amount and select for payment
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new CopyFieldHandler(ApTrx.INVOICE_BALANCE));
this.getMainRecord().getField(ApTrx.INVOICE_LOCAL).addListener(new CopyFieldHandler(ApTrx.INVOICE_BALANCE_LOCAL));

Record recVendor = ((ReferenceField)this.getMainRecord().getField(ApTrx.VENDOR_ID)).getReferenceRecord(this);
Record recCurrencys = ((ReferenceField)recVendor.getField(Vendor.CURRENCYS_ID)).getReferenceRecord(this);
this.getMainRecord().getField(ApTrx.VENDOR_ID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), recCurrencys.getField(Currencys.LAST_RATE)));
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), recCurrencys.getField(Currencys.LAST_RATE)));
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new CalcBalanceHandler(this.getMainRecord().getField(ApTrx.INVOICE_LOCAL), this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT), CalcBalanceHandler.MULTIPLY, true));
this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE).addListener(new CalcBalanceHandler(this.getMainRecord().getField(ApTrx.INVOICE_LOCAL), this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT), CalcBalanceHandler.MULTIPLY, true));
//xthis.getMainRecord().getField(ApTrx.INVOICE_LOCAL).addListener(new CalcBalanceHandler(this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), this.getMainRecord().getField(ApTrx.INVOICE_USD), this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT), CalcBalanceHandler.DIVIDE, true));

this.getScreenRecord().getField(DebitMemoScreenRecord.PP_ACCOUNT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.NON_TOUR_PREPAY_ACCOUNT_ID)));
this.getScreenRecord().getField(DebitMemoScreenRecord.TOUR_ACCOUNT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.COST_ACCOUNT_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="975">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DebitMemoScreen</MethodClassName>
		<LogicSource>return new DebitMemoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="976">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DebitMemoScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="977">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DebitMemoScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxStatus(this);
new ApControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="978">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DebitMemoScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="979">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DeductionField</MethodClassName>
		<LogicSource>return new Deduction(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="980">
		<LastChanged>2012-01-31T10:43:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DeductionField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Deduction.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="981">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DeductionScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="982">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DeductionScreen</MethodClassName>
		<LogicSource>return new Deduction(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="983">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DeductionScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="984">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepartmentScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="985">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepartmentScreen</MethodClassName>
		<LogicSource>return new Department(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="986">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepartmentScreen</MethodClassName>
		<LogicSource><![CDATA[super;
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="987">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepartmentScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="990">
		<LastChanged>2012-02-01T19:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepEstScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call super.
this.addMainKeyBehavior();
TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);

EnableScreenHandler behavior = new EnableScreenHandler(ApTrx.TRX_STATUS_ID);
this.getMainRecord().addListener(behavior);
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.DEPARTURE_EST_MANUAL);
behavior.addComparison(recTrxStatus.getField(TrxStatus.ID).getData());
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.DEP_ESTIMATE);
behavior.addComparison(recTrxStatus.getField(TrxStatus.ID).getData());

recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.DEPARTURE_EST_MANUAL);
this.getMainRecord().getField(ApTrx.TRX_STATUS_ID).addListener(new InitFieldHandler(recTrxStatus.getField(TrxStatus.ID)));
this.getMainRecord().getField(ApTrx.TRX_STATUS_ID).setEnabled(false);

this.getMainRecord().addListener(new EnableOnValidHandler(ApTrx.VENDOR_ID, false, true));    // Don't allow changes here
this.getMainRecord().addListener(new EnableOnValidHandler(ApTrx.TOUR_ID, false, true));    // Don't allow changes here        

this.getMainRecord().getField(ApTrx.TOUR_ID).addListener(new InitOnceFieldHandler(null));
this.getMainRecord().addListener(new UpdateDepEstHandler(null));

this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.TRX_STATUS_ID), recTrxStatus.getField(TransactionType.ID)));
this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.TRX_STATUS_ID), recTrxStatus.getField(TransactionType.ID)));
this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.TRX_STATUS_ID), recTrxStatus.getField(TransactionType.ID)));

Record recVendor = ((ReferenceField)this.getMainRecord().getField(ApTrx.VENDOR_ID)).getReferenceRecord(this);
Record recCurrencys = ((ReferenceField)recVendor.getField(Vendor.CURRENCYS_ID)).getReferenceRecord(this);
this.getMainRecord().getField(ApTrx.VENDOR_ID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), recCurrencys.getField(Currencys.LAST_RATE)));
this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), recCurrencys.getField(Currencys.LAST_RATE)));
this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE).addListener(new CalcBalanceHandler(this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL), this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE), CalcBalanceHandler.MULTIPLY, true));
this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE).addListener(new CalcBalanceHandler(this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL), this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE), CalcBalanceHandler.MULTIPLY, true));
this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL).addListener(new CalcBalanceHandler(this.getMainRecord().getField(ApTrx.DEPARTURE_EXCHANGE), this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL), this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE), CalcBalanceHandler.DIVIDE, true));

Record recTour = ((ReferenceField)this.getMainRecord().getField(ApTrx.TOUR_ID)).getReferenceRecord(this);
this.getMainRecord().getField(ApTrx.TOUR_ID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.START_SERVICE_DATE), recTour.getField(Tour.DEPARTURE_DATE)));
this.getMainRecord().getField(ApTrx.START_SERVICE_DATE).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.END_SERVICE_DATE), this.getMainRecord().getField(ApTrx.START_SERVICE_DATE)));

this.getMainRecord().addListener(new ValidateFieldHandler(ApTrx.TOUR_ID, null, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="991">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepEstScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="992">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepEstScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="993">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepEstScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="994">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DeprTypeField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
	case 1:
		tempString = "Straight-Line";break;
	case 2:
		tempString = "ACRS";break;
	case 3:
		tempString = "Double-Declining";break;
	case 0:
	default:
		tempString = "";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="995">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DeprTypeField</MethodClassName>
		<LogicSource><![CDATA[String tempString = "";
if (index == 1)
	tempString = "S";
else if (index == 2)
	tempString = "A";
else if (index == 3)
	tempString = "D";
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="996">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DeprTypeField</MethodClassName>
		<LogicSource><![CDATA[if (tempString.equalsIgnoreCase("S"))
	return 1;
if (tempString.equalsIgnoreCase("A"))
	return 2;
if (tempString.equalsIgnoreCase("D"))
	return 3;
return 0;	// None]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="997">
		<LastChanged>2012-01-31T10:43:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getDefaultScreenKeyArea</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SCF</MethodClassName>
		<LogicSource>return SCF.SCF_TO_KEY;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="999">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DeprTypeField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1000">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DedEarnTypeField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
case 0:
	tempString = "Deductions";break;
case 1:
	tempString = "Earnings";break;
case 2:
	tempString = "Non-tax Earn";break;
case 3:
	tempString = "Non-tax Sick";break;
case 4:
	tempString = "Taxable Sick";break;
case 5:
	tempString = "Vacation";break;
case 6:
	tempString = "Non-tax Ded.";break;
case 7:
	tempString = "Red of tax earn";break;
default:
	tempString = "";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1001">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DedEarnTypeField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
String codes = "DENISVTR";
if ((index >= 0) && (index <= 7))
	tempString = codes.substring(index, index+1);
else
	tempString = codes.substring(0, 1);
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1002">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DedEarnTypeField</MethodClassName>
		<LogicSource><![CDATA[String codes = "DENISVTR";
short index;
if (tempString.length() != 1)
	return 0;
for (index = 0; index<codes.length(); index++)
{
	if (tempString.charAt(0) == codes.charAt(index))
		return index;
}
return -1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1003">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DedEarnTypeField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1004">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DisplayTypeField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
	{
		case DisplayTypeField.BOOKING_DISPLAY:
			tempString = "Bookings";break;
		case DisplayTypeField.TOUR_HEADER_DISPLAY:
			tempString = "Tour Templates";break;
		case DisplayTypeField.TOUR_DISPLAY:
			tempString = "Tour Departures";break;
		default:
			tempString = "";break;
	}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1005">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>initField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DisplayTypeField</MethodClassName>
		<LogicSource>return this.setString("0", bDisplayOption, DBConstants.INIT_MOVE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1006">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DisplayTypeField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1026">
		<LastChanged>2012-01-18T17:02:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DrCrField</MethodClassName>
		<LogicSource><![CDATA[if (converter instanceof DrCrConverter)
    return super;   // Keep from looping through here
FieldConverter converter2 = new DrCrConverter((Converter)converter, true);
converter2.setupDefaultView(itsLocation, targetScreen, iDisplayFieldDesc);
converter2 = new DrCrConverter((Converter)converter, false);
return converter2.setupDefaultView(itsLocation, targetScreen, iDisplayFieldDesc);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1027">
		<LastChanged>2012-02-03T15:08:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Employee</MethodClassName>
		<LogicSource><![CDATA[super;
CopyLastHandler copyLast = new CopyLastHandler(Employee.NAME_SORT);	// This should be somewhere else!
this.getField(Employee.NAME).addListener(copyLast);
	
CopyFieldHandler copyFirst = new CopyFieldHandler(Employee.FIRST_NAME);
this.getField(Employee.NAME).addListener(copyFirst);
FieldToUpperHandler upper = new FieldToUpperHandler(null);
this.getField(Employee.FIRST_NAME).addListener(upper);
CopyFieldHandler copyState = new CopyFieldHandler(Employee.STATE_TAX_CODE);
this.getField(Employee.STATE_OR_REGION).addListener(copyState);
FileListener disableKey = new EnableOnValidHandler(Employee.ID, EnableOnValidHandler.DISABLE_ON_VALID, EnableOnValidHandler.ENABLE_ON_NEW);
this.addListener(disableKey);
FieldListener calcOvertime = new CalcOvertimeHandler(this.getField(Employee.OVERTIME_RATE));
this.getField(Employee.HOURLY_RATE).addListener(calcOvertime);
FieldListener calcHourly = new CalcHourlyHandler(this.getField(Employee.HOURLY_RATE));
this.getField(Employee.SALARY).addListener(calcHourly);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1028">
		<LastChanged>2012-02-03T15:05:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getCurrentUser</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>Employee</MethodClassName>
		<LogicSource><![CDATA[this.setKeyArea(Employee.ID_KEY);
this.getField(Employee.ID).setString(((MainApplication)this.getRecordOwner().getTask().getApplication()).getUserID());	// Set to current User Name	
this.getField(Employee.TERMINATION_DATE).setString("");
int errorCode = DBConstants.ERROR_RETURN;
try	{
	boolean bSuccess = this.seek(null);
	if (!bSuccess)
		return DBConstants.ERROR_RETURN;
} catch (DBException ex)	{
	ex.printStackTrace();
}
return errorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1030">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeField</MethodClassName>
		<LogicSource>return new EmployeeLookup(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1031">
		<LastChanged>2012-01-31T10:43:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, null, iDisplayFieldDesc, this.makeReferenceRecord(), Employee.FIRST_NAME_KEY, Employee.FIRST_NAME, false, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1032">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1033">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeLookup</MethodClassName>
		<LogicSource><![CDATA[Employee pEmployee = new Employee(recordOwner);
this.addTable(pEmployee);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1034">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeLookup</MethodClassName>
		<LogicSource><![CDATA[this.setSelected(false);
super;
this.getField(Employee.EMPLOYEE_FILE, Employee.ID).setSelected(true);
this.getField(Employee.EMPLOYEE_FILE, Employee.FIRST_NAME).setSelected(true);
this.getField(Employee.EMPLOYEE_FILE, Employee.NAME_SORT).setSelected(true);
this.getField(Employee.EMPLOYEE_FILE, Employee.NAME).setSelected(true);
this.getField(Employee.EMPLOYEE_FILE, Employee.TITLE).setSelected(true);
this.getField(Employee.EMPLOYEE_FILE, Employee.ID).setSelected(true);
this.getField(Employee.EMPLOYEE_FILE, Employee.TERMINATION_DATE).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1035">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeQuery</MethodClassName>
		<LogicSource><![CDATA[Employee employee = new Employee(recordOwner);
this.addTable(employee);
Deduction prDedEarn = new Deduction(recordOwner);
this.addTable(prDedEarn);
//?employee.setGridFile(employee, DBConstants.MAIN_KEY_AREA);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1036">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeQuery</MethodClassName>
		<LogicSource><![CDATA[this.setSelected(false);
super;
this.getField(Employee.ID).setSelected(true);
this.getField(Employee.NAME_SORT).setSelected(true);
this.getField(Employee.NAME).setSelected(true);
this.getField(Employee.HIRE_DATE).setSelected(true);
this.getField(Employee.DATE_CHANGED).setSelected(true);
this.getField(Employee.POSTAL_CODE_SORT).setSelected(true);
this.getField(Employee.FIRST_NAME).setSelected(true);
this.getField(Employee.DEDUCTION_ID1).setSelected(true);
this.getField(Deduction.DEDUCTION_FILE, Deduction.DESCRIPTION).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1037">
		<LastChanged>2012-01-31T20:52:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>setupRelationships</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeQuery</MethodClassName>
		<LogicSource>this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(Employee.EMPLOYEE_FILE), this.getRecord(Deduction.DEDUCTION_FILE), Employee.DEDUCTION_ID1, Deduction.ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1038">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1039">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeScreen</MethodClassName>
		<LogicSource>return new EmployeeScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1040">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeScreen</MethodClassName>
		<LogicSource>return new Employee(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1041">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1042">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeStatus</MethodClassName>
		<LogicSource><![CDATA[this.setSelected(false);
super;
this.getField(Employee.ID).setSelected(true);
this.getField(Employee.NAME_SORT).setSelected(true);
this.getField(Employee.NAME).setSelected(true);
this.getField(Employee.HIRE_DATE).setSelected(true);
this.getField(Employee.DATE_CHANGED).setSelected(true);
this.getField(Employee.POSTAL_CODE_SORT).setSelected(true);
this.getField(Employee.FIRST_NAME).setSelected(true);
this.getField(Employee.DEDUCTION_ID1).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1043">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmpMaintScreenBeh</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
switch(screenNo)
{
case 1:
	screen = new MEmpAddress(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_DESC, properties);break;
case 2:
	screen = new MEmpTaxes(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_DESC, properties);break;
case 3:
	screen = new MEmpSalary(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_DESC, properties);break;
case 4:
	screen = new MEmpDedEarn(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_DESC, properties);break;
case 5:
	screen = new MEmpTaxDis(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_DESC, properties);break;
default:
	screen = null;
}
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1044">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getFieldDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FedRadioConverter</MethodClassName>
		<LogicSource>return "Federal Taxes";</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1079">
		<LastChanged>2012-06-15T20:09:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmt</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == FinStmt.FIN_STMT_DETAIL_GRID_SCREEN)
    screen = Record.makeNewScreen(FinStmtDetail.FIN_STMT_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(FIN_STMT_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(FIN_STMT_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1080">
		<LastChanged>2012-01-31T10:43:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>renumber</MethodName>
		<LogicDescription>Renumber this statement by tens</LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>Record recFinStmt</MethodInterface>
		<MethodClassName>FinStmtDetail</MethodClassName>
		<LogicSource><![CDATA[int iNextSeq = 10;
HashSet hsBookmarks = new HashSet();
this.close();
FileListener subFilter = new SubFileFilter(recFinStmt);
this.addListener(subFilter);
try {
    while (this.hasNext())
    {
        this.next();
        Object bookmark = this.getHandle(DBConstants.BOOKMARK_HANDLE);
        if (hsBookmarks.contains(bookmark))
            continue;       // Already renumbered this one.
        hsBookmarks.add(bookmark);
        this.edit();
        this.getField(FinStmtDetail.SEQUENCE).setValue(iNextSeq);
        iNextSeq = iNextSeq + 10;
        this.set();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
} finally   {
    this.removeListener(subFilter, true);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1081">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>validate</MethodName>
		<LogicDescription>Make sure all the Chart of Accounts are contained in these statements</LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>Record recFinStmtHeader</MethodInterface>
		<MethodClassName>FinStmtDetail</MethodClassName>
		<LogicSource><![CDATA[HashSet hsBookmarks = new HashSet();

FinStmt recFinStmt = new FinStmt(this.findRecordOwner());
recFinStmt.addListener(new SubFileFilter(recFinStmtHeader));

FileListener subFilter = new SubFileFilter(recFinStmt);
this.addListener(subFilter);

Account recAccount = new Account(this.findRecordOwner());
recAccount.setKeyArea(Account.ACCOUNT_NO_KEY);

Object bookmarkIS = null;       // Default income statemet statement
int iMaxDefaultSequence = 0;
Object bookmarkBS = null;       // Default balance sheet statement
int iMaxBSSequence = 0;
Object bookmarkDefault = null;  // Default statement
int iMaxISSequence = 0;

try {
    // First, go through all the statements and get the accounts in use
    while (recFinStmt.hasNext())
    {
        recFinStmt.next();
        if (bookmarkDefault == null)
            bookmarkDefault = recFinStmt.getHandle(DBConstants.BOOKMARK_HANDLE);
        if (bookmarkIS == null)
            if (StatementTypeField.INCOME_STATEMENT.equalsIgnoreCase(recFinStmt.getField(FinStmt.STATEMENT_TYPE).toString()))
                bookmarkIS = recFinStmt.getHandle(DBConstants.BOOKMARK_HANDLE);
        if (bookmarkBS == null)
            if (StatementTypeField.BALANCE_SHEET.equalsIgnoreCase(recFinStmt.getField(FinStmt.STATEMENT_TYPE).toString()))
                bookmarkBS = recFinStmt.getHandle(DBConstants.BOOKMARK_HANDLE);
        int iMaxSequence = 0;
        this.close();
        while (this.hasNext())
        {
            this.next();
            if ((this.getField(FinStmtDetail.ACCOUNT_ID).isNull())
                || (this.getField(FinStmtDetail.ACCOUNT_ID).getValue() == 0))
                    continue;   // No account, skip it.
            Record recAccountSecond = ((ReferenceField)this.getField(FinStmtDetail.ACCOUNT_ID)).getReference();
            Object bookmark = null;
            if (recAccountSecond != null)
                bookmark = recAccountSecond.getHandle(DBConstants.BOOKMARK_HANDLE);
            if ((recAccountSecond == null)
                || (hsBookmarks.contains(bookmark)))
            {       // This account doesn't exist or is a duplicate entry, delete the entry
                this.edit();
                this.remove();
                continue;
            }
            hsBookmarks.add(bookmark);      // This account is included in a statement
            iMaxSequence = (int)this.getField(FinStmtDetail.SEQUENCE).getValue();
        }
        if (bookmarkDefault == recFinStmt.getHandle(DBConstants.BOOKMARK_HANDLE))
            iMaxDefaultSequence = iMaxSequence;
        if (bookmarkIS == recFinStmt.getHandle(DBConstants.BOOKMARK_HANDLE))
            iMaxISSequence = iMaxSequence;
        if (bookmarkBS == recFinStmt.getHandle(DBConstants.BOOKMARK_HANDLE))
            iMaxBSSequence = iMaxSequence;
    }

    if (bookmarkDefault == null)
        return;     // Must have at least one statment
    if (bookmarkIS == null)
    {
        bookmarkIS = bookmarkDefault;
        iMaxISSequence = iMaxDefaultSequence;
    }
    if (bookmarkBS == null)
    {
        bookmarkBS = bookmarkDefault;
        iMaxBSSequence = iMaxDefaultSequence;
    }

    this.removeListener(subFilter, true);   // If I don't do this, The FIN_STMT_ID field will be auto-set.
    subFilter = null;
    // Now run through the accounts and make sure they are all in the statements... if not, add them.
    while (recAccount.hasNext())
    {
        recAccount.next();

        Object bookmark = recAccount.getHandle(DBConstants.BOOKMARK_HANDLE);
        if (hsBookmarks.contains(bookmark))
            continue;   // Good, already in a statement
        // Add this to the appropriate statement
        this.addNew();

        if (recAccount.getField(Account.CLOSE_YEAR_END).getState() == true)
        {
            this.getField(FinStmtDetail.FIN_STMT_ID).setData(bookmarkIS);
            iMaxISSequence = iMaxISSequence + 10;
            this.getField(FinStmtDetail.SEQUENCE).setValue(iMaxISSequence);
        }
        else
        {
            this.getField(FinStmtDetail.FIN_STMT_ID).setData(bookmarkBS);
            iMaxBSSequence = iMaxBSSequence + 10;
            this.getField(FinStmtDetail.SEQUENCE).setValue(iMaxBSSequence);
        }
        if (bookmarkIS == bookmarkBS)
            iMaxISSequence = iMaxBSSequence = Math.max(iMaxISSequence, iMaxBSSequence);
        this.getField(FinStmtDetail.ACCOUNT_ID).moveFieldToThis(recAccount.getField(Account.ID));
        this.getField(FinStmtDetail.TYPICAL_BALANCE).moveFieldToThis(recAccount.getField(Account.TYPICAL_BALANCE));

        this.add();
    }

} catch (DBException ex)    {
    ex.printStackTrace();
} finally   {
    if (subFilter != null)
        this.removeListener(subFilter, true);
    recFinStmt.free();  // This will also remove the listener.
    recAccount.free();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1082">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtDetailGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1083">
		<LastChanged>2012-01-31T10:43:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, FinStmtDetail.RENUMBER, "Go", FinStmtDetail.RENUMBER, null);
this.getHeaderRecord().getField(FinStmt.STATEMENT_DESC).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DONT_DISPLAY_DESC);
this.getHeaderRecord().getField(FinStmt.STATEMENT_DESC).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1084">
		<LastChanged>2012-01-31T10:43:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(FinStmtDetail.RENUMBER))
{
    FinStmtDetail recFinStmtDetail = new FinStmtDetail(this);
    recFinStmtDetail.renumber(this.getRecord(FinStmt.FIN_STMT_FILE));
    recFinStmtDetail.free();
    recFinStmtDetail = null;
    this.reSelectRecords();
    return true;
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1085">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>FinStmtDetailGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recFinStmt, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>FinStmtDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1087">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtDetailGridScreen</MethodClassName>
		<LogicSource>return new FinStmtDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1088">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtDetailGridScreen</MethodClassName>
		<LogicSource>return new FinStmt(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1089">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1090">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtDetailScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1091">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtDetailScreen</MethodClassName>
		<LogicSource>return new FinStmtDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1092">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtDetailScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1093">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1094">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1095">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1096">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1097">
		<LastChanged>2012-01-31T10:43:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, FinStmtDetail.VALIDATE, "Go", FinStmtDetail.VALIDATE, null);
this.getHeaderRecord().getField(FinStmtHeader.DESCRIPTION).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DONT_DISPLAY_DESC);
this.getHeaderRecord().getField(FinStmtHeader.DESCRIPTION).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1098">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, FinStmt.FIN_STMT_DETAIL_GRID_SCREEN, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(FinStmtDetail.VALIDATE))
{
	FinStmtDetail recFinStmtDetail = new FinStmtDetail(this);
	recFinStmtDetail.validate(this.getHeaderRecord());
	this.reSelectRecords();
	recFinStmtDetail.free();
	recFinStmtDetail = null;
	return true;
}
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1099">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>FinStmtGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recFinStmtHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>FinStmtGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1101">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtGridScreen</MethodClassName>
		<LogicSource>return new FinStmt(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1102">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtGridScreen</MethodClassName>
		<LogicSource>return new FinStmtHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1103">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1104">
		<LastChanged>2012-03-26T09:50:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtHeader</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == FinStmtHeader.FIN_STMT_GRID_SCREEN)
    screen = Record.makeNewScreen(FinStmt.FIN_STMT_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(FIN_STMT_HEADER_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(FIN_STMT_HEADER_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1105">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtHeaderField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1106">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtHeaderGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1107">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtHeaderGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1108">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtHeaderGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, FinStmtHeader.FIN_STMT_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1109">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtHeaderGridScreen</MethodClassName>
		<LogicSource>return new FinStmtHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1110">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtHeaderScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1111">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, FinStmtHeader.FIN_STMT_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1112">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtHeaderScreen</MethodClassName>
		<LogicSource>return new FinStmtHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1128">
		<LastChanged>2012-01-31T14:21:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtReportScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(FinStmt.FIN_STMT_HEADER_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(FinStmtReportScreenRecord.FIN_STMT_HEADER_ID), FinStmt.FIN_STMT_HEADER_ID, null, null, null, null));

this.getRecord(FinStmtDetail.FIN_STMT_DETAIL_FILE).addListener(new SubFileFilter(this.getMainRecord()));

this.getRecord(FinStmtDetail.FIN_STMT_DETAIL_FILE).addListener(new DisplayReadHandler(FinStmtDetail.ACCOUNT_ID, this.getRecord(Account.ACCOUNT_FILE), Account.ID));

CalcAcctBalHandler calcListener = null;
this.getRecord(Account.ACCOUNT_FILE).addListener(calcListener = new CalcAcctBalHandler(this.getScreenRecord().getField(FinStmtReportScreenRecord.START_BALANCE), null, this.getScreenRecord().getField(FinStmtReportScreenRecord.START_DATE), false));
// Start and end entry date filters
calcListener.getAcctDetail().addListener(new CompareFileFilter(calcListener.getAcctDetail().getField(AcctDetail.TRX_ENTRY), this.getScreenRecord().getField(FinStmtReportScreenRecord.START_ENTRY), FileFilter.GREATER_THAN_EQUAL));
calcListener.getAcctDetail().addListener(new CompareFileFilter(calcListener.getAcctDetail().getField(AcctDetail.TRX_ENTRY), this.getScreenRecord().getField(FinStmtReportScreenRecord.END_ENTRY), FileFilter.LESS_THAN_EQUAL));
// Closing Entry Filter
calcListener.getAcctDetail().addListener(new ExcludeClosingFilter(this.getScreenRecord().getField(FinStmtReportScreenRecord.EXCLUDE_CLOSING)));

this.getRecord(Account.ACCOUNT_FILE).addListener(calcListener = new CalcAcctBalHandler(this.getScreenRecord().getField(FinStmtReportScreenRecord.BALANCE_CHANGE), this.getScreenRecord().getField(FinStmtReportScreenRecord.START_DATE), this.getScreenRecord().getField(FinStmtReportScreenRecord.END_DATE), true));
// Start and end entry date filters
calcListener.getAcctDetail().addListener(new CompareFileFilter(calcListener.getAcctDetail().getField(AcctDetail.TRX_ENTRY), this.getScreenRecord().getField(FinStmtReportScreenRecord.START_ENTRY), FileFilter.GREATER_THAN_EQUAL));
calcListener.getAcctDetail().addListener(new CompareFileFilter(calcListener.getAcctDetail().getField(AcctDetail.TRX_ENTRY), this.getScreenRecord().getField(FinStmtReportScreenRecord.END_ENTRY), FileFilter.LESS_THAN_EQUAL));
// Closing Entry Filter
calcListener.getAcctDetail().addListener(new ExcludeClosingFilter(this.getScreenRecord().getField(FinStmtReportScreenRecord.EXCLUDE_CLOSING)));

this.getRecord(FinStmtDetail.FIN_STMT_DETAIL_FILE).addListener(new AddFinStmtDetailTotals(null));        

this.setProperty(LIMIT_PARAM, LIMIT_UNLIMITED);   // Unlimited detail records]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1129">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtReportScreen</MethodClassName>
		<LogicSource>return new FinStmtReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1130">
		<LastChanged>2012-01-23T09:38:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtReportScreen</MethodClassName>
		<LogicSource>return new FinStmtToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1132">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtReportScreen</MethodClassName>
		<LogicSource>return new FinStmt(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1133">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtReportScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Account(this);
new FinStmtDetail(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1134">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtReportScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1135">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(FinStmt.FIN_STMT_HEADER_ID).addListener(new ReadSecondaryHandler(this.getRecord(FinStmtHeader.FIN_STMT_HEADER_FILE)));
this.getHeaderRecord().getField(FinStmtHeader.DESCRIPTION).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1136">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1137">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, FinStmt.FIN_STMT_DETAIL_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1138">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtScreen</MethodClassName>
		<LogicSource>return new FinStmt(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1139">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new FinStmtHeader(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1140">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1141">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1142">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(Air.AIRLINE_ID), this.getScreenRecord().getField(AirScreenRecord.AIRLINE_ID), DBConstants.EQUALS));
this.getMainRecord().addListener(new CompareFileFilter(Product.CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.CITY_ID), DBConstants.EQUALS, null, true));

this.getScreenRecord().getField(AirScreenRecord.AIRLINE_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1143">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirGridScreen</MethodClassName>
		<LogicSource>return new AirScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1144">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(AirScreenRecord.AIRLINE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.CITY_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.REMOTE_QUERY_ENABLED).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1145">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirGridScreen</MethodClassName>
		<LogicSource>return new Air(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1146">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1147">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirScreen</MethodClassName>
		<LogicSource>return new Air(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1148">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>FQEmployee</MethodName>
		<LogicDescription/>
		<MethodReturns>field</MethodReturns>
		<MethodInterface>BaseField field</MethodInterface>
		<MethodClassName>FQEmployee</MethodClassName>
		<LogicSource>this.open();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1149">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>FQPrTaxRates</MethodName>
		<LogicDescription/>
		<MethodReturns>field</MethodReturns>
		<MethodInterface>BaseField field</MethodInterface>
		<MethodClassName>FQPrTaxRates</MethodClassName>
		<LogicSource>this.open();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1150">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenderField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
	case 0:
		tempString = "";break;
	case 1:
		tempString = "Male";break;
	case 2:
		tempString = "Female";break;
	default:
		tempString = "";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1151">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenderField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
String string = " MF";
if ((index >=0) && (index <= 2))
	tempString = string.substring(index, index + 1);
else
	tempString = " ";
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1152">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenderField</MethodClassName>
		<LogicSource><![CDATA[String string = " MF";
for (int index = 0; index <= 2; index++)
{
	if (tempString.equalsIgnoreCase(string.substring(index, index+1)))
		return index;
}
return 0;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1153">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenderField</MethodClassName>
		<LogicSource><![CDATA[super;
m_iMaxLength = 1;	// BaseField length]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1154">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenderField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1155">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentDetail</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1156">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1157">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1158">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentSelect</MethodClassName>
		<LogicSource><![CDATA[super;
Record recApControl = this.getRecord(ApControl.AP_CONTROL_FILE);
this.getScreenRecord().getField(GenPaymentScreenRecord.PAYMENT_CODE_ID).addListener(new InitFieldHandler(recApControl.getField(ApControl.PAYMENT_CODE_ID)));
BaseField fldBankAcctID = this.getScreenRecord().getField(GenPaymentScreenRecord.BANK_ACCT_ID);
if (this.getProperty(fldBankAcctID.getFieldName()) != null)
    fldBankAcctID.setString(this.getProperty(fldBankAcctID.getFieldName()), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
else
    fldBankAcctID.addListener(new InitFieldHandler(recApControl.getField(ApControl.AP_BANK_ACCT_ID)));

Record recVendor = this.getMainRecord();
recVendor.setKeyArea(Vendor.NAME_SORT_KEY);
recVendor.addListener(new CompareFileFilter(recVendor.getField(Vendor.PAYMENT_CODE_ID), this.getScreenRecord().getField(GenPaymentScreenRecord.PAYMENT_CODE_ID), "="));
recVendor.addListener(new CompareFileFilter(recVendor.getField(Vendor.CURRENCYS_ID), (((ReferenceField)((ReferenceField)this.getScreenRecord().getField(GenPaymentScreenRecord.BANK_ACCT_ID)).getReference().getField(BankAcct.CURRENCY_ID))), "="));

Record recApTrx = this.getRecord(ApTrx.AP_TRX_FILE);
recApTrx.addListener(new SubFileFilter(recVendor));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1159">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentSelect</MethodClassName>
		<LogicSource>return new GenPaymentScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1160">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentSelect</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.SELECT, MenuConstants.SELECT, MenuConstants.SELECT, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1161">
		<LastChanged>2012-01-23T09:38:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentSelect</MethodClassName>
		<LogicSource>return new GenPaymentToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1162">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentSelect</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.SELECT))
	return this.genSelect();
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1163">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>genSelect</MethodName>
		<LogicDescription>Generalized Selection logic</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>GenPaymentSelect</MethodClassName>
		<LogicSource><![CDATA[Record recVendor = this.getMainRecord();
Record recApTrx = this.getRecord(ApTrx.AP_TRX_FILE);
Record recPaymentRequest = this.getRecord(PaymentRequest.PAYMENT_REQUEST_FILE);
TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
int iPaymentTrxStatus = recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.PAYMENT);
try   {
    recVendor.close();
    while (recVendor.hasNext())
    {
        recVendor.next();
        double dTotal = 0;
        recApTrx.close();
        while (recApTrx.hasNext())
        {
            recApTrx.next();
            double dBalance = recApTrx.getField(ApTrx.INVOICE_BALANCE).getValue();
            double dAmountSelected = recApTrx.getField(ApTrx.AMOUNT_SELECTED).getValue();
            if (this.getScreenRecord().getField(GenPaymentScreenRecord.USE_CURRENT_SELECTION).getState() == false)
                if (dBalance != dAmountSelected)
            {
                recApTrx.edit();
                recApTrx.getField(ApTrx.AMOUNT_SELECTED).setValue(dBalance);
                recApTrx.set();
                dAmountSelected = dBalance;
            }
            dTotal += dAmountSelected;
        }
        recPaymentRequest.setKeyArea(PaymentRequest.BANK_ACCT_ID_KEY);
        recPaymentRequest.getField(PaymentRequest.BANK_ACCT_ID).moveFieldToThis(this.getScreenRecord().getField(GenPaymentScreenRecord.BANK_ACCT_ID));
        recPaymentRequest.getField(PaymentRequest.VENDOR_ID).moveFieldToThis(recVendor.getField(Vendor.ID));
        if (recPaymentRequest.seek("="))
            recPaymentRequest.remove();
        if (dTotal != 0)
        {
            recPaymentRequest.addNew();
            recPaymentRequest.getField(PaymentRequest.BANK_ACCT_ID).moveFieldToThis(this.getScreenRecord().getField(GenPaymentScreenRecord.BANK_ACCT_ID));
            recPaymentRequest.getField(PaymentRequest.VENDOR_ID).moveFieldToThis(recVendor.getField(Vendor.ID));
            recPaymentRequest.getField(PaymentRequest.AMOUNT).setValue(dTotal);
            recPaymentRequest.getField(PaymentRequest.TRX_STATUS_ID).setValue(iPaymentTrxStatus);
            recPaymentRequest.getField(PaymentRequest.COMMENTS).moveFieldToThis(recTrxStatus.getField(TrxStatus.STATUS_DESC));
            recPaymentRequest.add();
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1164">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentSelect</MethodClassName>
		<LogicSource>return new GenPaymentDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1165">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentSelect</MethodClassName>
		<LogicSource>return new GenPaymentFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1166">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentSelect</MethodClassName>
		<LogicSource>return new GenPaymentHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1167">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentSelect</MethodClassName>
		<LogicSource>return new Vendor(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1168">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentSelect</MethodClassName>
		<LogicSource><![CDATA[super;
new ApControl(this);
new ApTrx(this);
new TrxStatus(this);
new PaymentRequest(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1169">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentSelect</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1170">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1178">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getDragCursor</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Point point</MethodInterface>
		<MethodClassName>GridWindow</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1179">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HistoryDisplay</MethodClassName>
		<LogicSource><![CDATA[this.addTable(new RequestHistoryDetail(recordOwner));
this.addTable(new Brochure(recordOwner));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1180">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HistoryDisplay</MethodClassName>
		<LogicSource><![CDATA[RequestHistoryDetail pAmReqHistory = (RequestHistoryDetail)this.getRecord(RequestHistoryDetail.REQUEST_HISTORY_DETAIL_FILE);
this.setGridFile(pAmReqHistory, RequestHistoryDetail.PROFILE_ID_KEY);

this.setSelected(false);	// de-select all
super;
//xthis.getField(RequestHistoryDetail.REQUEST_HISTORY_DETAIL_FILE, RequestHistoryDetail.USE_AGENCY).setSelected(true);
this.getField(RequestHistoryDetail.REQUEST_HISTORY_DETAIL_FILE, RequestHistoryDetail.PROFILE_ID).setSelected(true);
this.getField(RequestHistoryDetail.REQUEST_HISTORY_DETAIL_FILE, RequestHistoryDetail.MAILED_ON).setSelected(true);
this.getField(RequestHistoryDetail.REQUEST_HISTORY_DETAIL_FILE, RequestHistoryDetail.BROCHURE_QTY).setSelected(true);
this.getField(Brochure.BROCHURE_FILE, Brochure.DESCRIPTION).setSelected(true);
this.getField(RequestHistoryDetail.REQUEST_HISTORY_DETAIL_FILE, RequestHistoryDetail.BROCHURE_ID).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1181">
		<LastChanged>2012-01-31T17:28:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupRelationships</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HistoryDisplay</MethodClassName>
		<LogicSource>this.addRelationship(DBConstants.LEFT_INNER, this.getRecord(RequestHistoryDetail.REQUEST_HISTORY_DETAIL_FILE), this.getRecord(Brochure.BROCHURE_FILE), RequestHistoryDetail.BROCHURE_ID, Brochure.ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1183">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getHotelCost</MethodName>
		<LogicDescription>Calc the hotel cost given parameters</LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>Date dateTarget, int iRateType, int iRateClass, short sNights, int iRoomType, boolean bGetPrice</MethodInterface>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource><![CDATA[double dCost = 0;
if (dateTarget == null)
    return 0;
int iHotelID = (int)this.getField(Hotel.ID).getValue();
while (sNights > 0)
{
    HotelPricing recProductCostLookup = ((HotelPricing)this.getProductPricing()).getHotelCost(iHotelID, dateTarget, iRateType, iRateClass, iRoomType);
    if (recProductCostLookup != null)
    {
        if (!bGetPrice)
            dCost += recProductCostLookup.getCost(HotelPricing.ROOM_COST, this.getProductTerms());
        else
            dCost += recProductCostLookup.getField(HotelPricing.ROOM_PRICE).getValue();
    }
    else
        return 0;   // No cost for this day = error
    dateTarget = new Date(dateTarget.getTime() + DBConstants.KMS_IN_A_DAY);
    sNights--;
}
return dCost;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1184">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getMealCost</MethodName>
		<LogicDescription>Get the cost for meals</LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>Date dateTarget, int iMealPlanID, boolean bGetPrice</MethodInterface>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource><![CDATA[double dCost = 0;
if (m_recHotelMealPricing == null)
{
    m_recHotelMealPricing = new HotelMealPricing(this.findRecordOwner());
    if (m_recHotelMealPricing.getRecordOwner() != null)
        m_recHotelMealPricing.getRecordOwner().removeRecord(m_recHotelMealPricing);
}
int iHotelID = (int)this.getField(Hotel.ID).getValue();
HotelMealPricing recProductCostLookup = ((HotelMealPricing)m_recHotelMealPricing).getMealCost(iHotelID, dateTarget, iMealPlanID);
if (recProductCostLookup != null)
{
    if (!bGetPrice)
        dCost += recProductCostLookup.getCost(HotelMealPricing.COST, this.getProductTerms());
    else
        dCost += recProductCostLookup.getField(HotelMealPricing.PRICE).getValue();
}
return dCost;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1185">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getMealDesc</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Date dateTarget, int iRateType, int iRateClass, boolean bDetailedDesc, MealPlan recMealPlan, ProductPricing recProductCost</MethodInterface>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource><![CDATA[String strMealDesc = DBConstants.BLANK;
int iHotelID = (int)this.getField(Hotel.ID).getValue();
if (recProductCost == null)
    recProductCost = this.getProductPricing();
recProductCost = ((HotelPricing)recProductCost).getHotelCost(iHotelID, dateTarget, iRateType, iRateClass, PaxCategory.DOUBLE_ID);
if (recProductCost != null)
{
    MealPlan recMealPlanNew = null;
    if (recMealPlan == null)
        recMealPlan = recMealPlanNew = new MealPlan(this.findRecordOwner());
    strMealDesc += recMealPlan.getMealDesc(recProductCost.getField(HotelPricing.MEAL_PLAN_ID), bDetailedDesc);
    if (recMealPlanNew != null)
        recMealPlanNew.free();
}
return strMealDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1186">
		<LastChanged>2012-07-05T14:28:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & Hotel.PRICING_GRID_SCREEN) == Hotel.PRICING_GRID_SCREEN)
    screen = Record.makeNewScreen(HotelPricing.HOTEL_PRICING_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Hotel.INVENTORY_GRID_SCREEN) == Hotel.INVENTORY_GRID_SCREEN)
    screen = Record.makeNewScreen(HotelInventoryModel.HOTEL_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Hotel.INVENTORY_SCREEN) == Hotel.INVENTORY_SCREEN)
    screen = Record.makeNewScreen(HotelInventoryModel.HOTEL_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Hotel.MEAL_PRICING_GRID_SCREEN) == Hotel.MEAL_PRICING_GRID_SCREEN)
    screen = Record.makeNewScreen(HotelMealPricing.HOTEL_MEAL_PRICING_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Hotel.RANGE_ADJUST_SCREEN) == Hotel.RANGE_ADJUST_SCREEN)
    screen = Record.makeNewScreen(HotelInventoryModel.HOTEL_INVENTORY_RANGE_ADJUST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(HOTEL_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.SCREEN_TYPE_MASK) == ScreenConstants.DISPLAY_MODE)
    screen = Record.makeNewScreen(HOTEL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1188">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelClassField</MethodClassName>
		<LogicSource>return new HotelClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1189">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelClassField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), HotelClass.DESCRIPTION_KEY, HotelClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1190">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelClassGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1191">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelClassSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), HotelClass.DESCRIPTION_KEY, HotelClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1192">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelClassScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(HotelClass.HOTEL_CLASS_FILE).setKeyArea(HotelClass.DESCRIPTION_KEY);
this.addMainKeyBehavior();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1193">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelClassScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1194">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>controlToField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelDetBox</MethodClassName>
		<LogicSource><![CDATA[Hotel query = (Hotel)this.getParentScreen().getRecord(Hotel.HOTEL_FILE);
//+CQBkHotelDet screen2 = new CQBkHotelDet(null, query);
//+screen2.makeWindow();
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1195">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelField</MethodClassName>
		<LogicSource>return new Hotel(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1201">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, BookingConstants.BUTTON_LOCATION + Hotel.MEAL_DETAIL, Hotel.MEAL_DETAIL, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Hotel.MEAL_DETAIL));
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1203">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(Hotel.MEAL_DETAIL))
	return (this.onForm(null, Hotel.MEAL_PRICING_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1204">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelGridScreen</MethodClassName>
		<LogicSource>return new Hotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1205">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1206">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new CompareFileFilter(Inventory.RATE_ID, this.getScreenRecord().getField(HotelScreenRecord.RATE_ID), "=", null, true));
this.getMainRecord().addListener(new CompareFileFilter(Inventory.CLASS_ID, this.getScreenRecord().getField(HotelScreenRecord.CLASS_ID), "=", null, true));

this.getScreenRecord().getField(HotelScreenRecord.RATE_ID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(HotelScreenRecord.CLASS_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1207">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryGridScreen</MethodClassName>
		<LogicSource>return new HotelScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1208">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen screen = super;

this.getScreenRecord().getField(HotelScreenRecord.RATE_ID).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), screen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(HotelScreenRecord.CLASS_ID).setupDefaultView(screen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), screen, ScreenConstants.DEFAULT_DISPLAY);

return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1210">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>HotelInventoryGridScreen*2</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recHotel, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>HotelInventoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1211">
		<LastChanged>2012-01-23T08:57:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryGridScreen</MethodClassName>
		<LogicSource>return new HotelHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1213">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryGridScreen</MethodClassName>
		<LogicSource>return new Hotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1214">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1215">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelList</MethodClassName>
		<LogicSource><![CDATA[this.addTable(new Hotel(recordOwner));
this.addTable(new City(recordOwner));
this.addTable(new Vendor(recordOwner));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1216">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelList</MethodClassName>
		<LogicSource><![CDATA[this.setSelected(false);
super;
this.getField(Hotel.HOTEL_FILE, Hotel.ID).setSelected(true);
this.getField(Hotel.HOTEL_FILE, Hotel.DESCRIPTION).setSelected(true);
this.getField(Hotel.HOTEL_FILE, Hotel.CODE).setSelected(true);
this.getField(Hotel.HOTEL_FILE, Hotel.VENDOR_ID).setSelected(true);
this.getField(Hotel.HOTEL_FILE, Hotel.CITY_ID).setSelected(true);
this.getField(City.CITY_FILE, City.DESCRIPTION).setSelected(true);
this.getField(City.CITY_FILE, City.COUNTRY_ID).setSelected(true);
this.getField(Vendor.VENDOR_FILE, Vendor.VENDOR_NAME).setSelected(true);
this.getField(Hotel.HOTEL_FILE, Hotel.DESC_SORT).setSelected(true);
this.getField(Vendor.VENDOR_FILE, Vendor.NAME_SORT).setSelected(true);
this.getField(City.CITY_FILE, City.TICKET_CITY_DESC).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1217">
		<LastChanged>2012-02-01T09:14:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupRelationships</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelList</MethodClassName>
		<LogicSource><![CDATA[this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(Hotel.HOTEL_FILE), this.getRecord(City.CITY_FILE), Hotel.CITY_ID, City.ID);
this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(Hotel.HOTEL_FILE), this.getRecord(Vendor.VENDOR_FILE), Hotel.VENDOR_ID, Vendor.ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1219">
		<LastChanged>2012-02-02T19:50:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getMealCost</MethodName>
		<LogicDescription>Lookup the meal cost</LogicDescription>
		<MethodReturns>HotelMealPricing</MethodReturns>
		<MethodInterface>int iHotelID, Date targetDate, int iMealPlanID</MethodInterface>
		<MethodClassName>HotelMealPricing</MethodClassName>
		<LogicSource><![CDATA[if (targetDate == null)
    return null;
Converter.initGlobals();
Calendar calendar = Converter.gCalendar;
calendar.setTime(targetDate);
calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.MINUTE, 0);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);
Date dateStart = calendar.getTime();
calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.HOUR_OF_DAY, 23);
calendar.set(Calendar.MINUTE, 59);
calendar.set(Calendar.SECOND, 59);
calendar.set(Calendar.MILLISECOND, 999);
Date dateEnd = calendar.getTime();
if ((this.getEditMode() == Constants.EDIT_IN_PROGRESS) || (this.getEditMode() == Constants.EDIT_CURRENT))
{
    if (this.getField(HotelMealPricing.HOTEL_ID).getValue() == iHotelID)
    if (this.getField(HotelMealPricing.MEAL_PLAN_ID).getValue() == iMealPlanID)
    if (this.getField(HotelMealPricing.START_DATE).getValue() <= dateEnd.getTime()) // Start <= thisDate
    if (this.getField(HotelMealPricing.END_DATE).getValue() >= dateStart.getTime())   // End >= thisDate
        return this;        // Valid price
}
this.getField(HotelMealPricing.HOTEL_ID).setValue(iHotelID);
this.getField(HotelMealPricing.MEAL_PLAN_ID).setValue(iMealPlanID);
((DateTimeField)this.getField(HotelMealPricing.END_DATE)).setDateTime(dateStart, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
FileListener listener = null;
try   {
    this.close();
    this.setKeyArea(HotelMealPricing.HOTEL_ID_KEY);
    this.addListener(listener = new SubCurrentFilter(true, false));
    while (this.hasNext())
    {   // Loop until found or not
        this.next();
        if (this.getField(HotelMealPricing.HOTEL_ID).getValue() != iHotelID)
            break;
        if (this.getField(HotelMealPricing.MEAL_PLAN_ID).getValue() != iMealPlanID)
            break;
        if (this.getField(HotelMealPricing.START_DATE).getValue() > dateEnd.getTime()) // Start > thisDate
            break;
        if (this.getField(HotelMealPricing.END_DATE).getValue() >= dateStart.getTime())   // End >= thisDate
            return this;        // Valid price
    }
} catch (DBException e)   {
    System.out.println(e.getMessage());
    e.printStackTrace();
} finally {
    if (listener != null)
        this.removeListener(listener, true);
}
return null;    // Rate not found if loop finished]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1220">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
// Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(HotelScreenRecord.PRODUCT_ID)).syncReference(this.getHeaderRecord());
// Sub file stuff
FileListener subFileBehavior = new SubFileFilter(this.getRecord(Hotel.HOTEL_FILE));
this.getRecord(HotelMealPricing.HOTEL_MEAL_PRICING_FILE).addListener(subFileBehavior);
this.getRecord(Hotel.HOTEL_FILE).getField(Hotel.ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1222">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>HotelMealPricingGridScreen*2</MethodName>
		<LogicDescription>Constructor when passing header record</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recHotel, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>HotelMealPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1223">
		<LastChanged>2012-01-23T08:57:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingGridScreen</MethodClassName>
		<LogicSource>return new HotelHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1224">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingGridScreen</MethodClassName>
		<LogicSource>return new HotelMealPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1225">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingGridScreen</MethodClassName>
		<LogicSource>return new Hotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1226">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1227">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingScreen</MethodClassName>
		<LogicSource><![CDATA[super;
// Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(HotelScreenRecord.PRODUCT_ID)).syncReference(this.getHeaderRecord());
// Sub file stuff
FileListener subFileBehavior = new SubFileFilter(this.getRecord(Hotel.HOTEL_FILE));
this.getRecord(HotelMealPricing.HOTEL_MEAL_PRICING_FILE).addListener(subFileBehavior);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1228">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingScreen</MethodClassName>
		<LogicSource>return this.getRecord(Hotel.HOTEL_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1229">
		<LastChanged>2012-01-23T08:57:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingScreen</MethodClassName>
		<LogicSource>return new HotelHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1230">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>onForm</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingScreen</MethodClassName>
		<LogicSource><![CDATA[if ((iDocMode == ScreenConstants.DISPLAY_MODE) || (iDocMode == ScreenConstants.SELECT_MODE))
	if (recordMain == null)
{
	recordMain = this.getRecord(Hotel.HOTEL_FILE);
	iDocMode = Hotel.MEAL_PRICING_GRID_SCREEN;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1231">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingScreen</MethodClassName>
		<LogicSource>return new HotelMealPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1232">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Hotel(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1233">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1238">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getHotelCost</MethodName>
		<LogicDescription/>
		<MethodReturns>HotelPricing</MethodReturns>
		<MethodInterface>int iHotelID, Date dateTarget, int iRateTypeID, int iRateClassID, int iPaxCategoryID</MethodInterface>
		<MethodClassName>HotelPricing</MethodClassName>
		<LogicSource><![CDATA[if (dateTarget == null)
    return null;
Converter.initGlobals();
Calendar calendar = Converter.gCalendar;
calendar.setTime(dateTarget);
calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.MINUTE, 0);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);
Date dateStart = calendar.getTime();
calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.HOUR_OF_DAY, 23);
calendar.set(Calendar.MINUTE, 59);
calendar.set(Calendar.SECOND, 59);
calendar.set(Calendar.MILLISECOND, 999);
Date dateEnd = calendar.getTime();
if ((this.getEditMode() == Constants.EDIT_IN_PROGRESS) || (this.getEditMode() == Constants.EDIT_CURRENT))
{
    if (this.getField(ProductPricing.PRODUCT_ID).getValue() == iHotelID)
    if (this.getField(ProductPricing.PAX_CATEGORY_ID).getValue() == iPaxCategoryID)
    if (this.getField(ProductPricing.RATE_ID).getValue() == iRateTypeID)
    if (this.getField(ProductPricing.CLASS_ID).getValue() == iRateClassID)
    if (this.getField(ProductPricing.START_DATE).getValue() <= dateEnd.getTime()) // Start <= thisDate
    if (this.getField(ProductPricing.END_DATE).getValue() >= dateStart.getTime())   // End >= thisDate
        return this;        // Valid price
}
this.getField(ProductPricing.PRODUCT_ID).setValue(iHotelID);
this.getField(ProductPricing.PAX_CATEGORY_ID).setValue(iPaxCategoryID);
this.getField(ProductPricing.RATE_ID).setValue(iRateTypeID);
this.getField(ProductPricing.CLASS_ID).setValue(iRateClassID);
((DateTimeField)this.getField(ProductPricing.END_DATE)).setDate(dateStart, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
FileListener listener = null;
try   {
    this.close();
    this.setKeyArea(HotelPricing.PRODUCT_ID_KEY);
    this.addListener(listener = new SubCurrentFilter(true, false));
    while (this.hasNext())
    {   // Loop until found or not
        this.next();
        if (this.getField(ProductPricing.PRODUCT_ID).getValue() != iHotelID)
            break;
        if (this.getField(ProductPricing.PAX_CATEGORY_ID).getValue() != iPaxCategoryID)
            break;
        if (this.getField(ProductPricing.RATE_ID).getValue() != iRateTypeID)
            break;
        if (this.getField(ProductPricing.CLASS_ID).getValue() != iRateClassID)
            break;
        if (this.getField(ProductPricing.START_DATE).getValue() > dateEnd.getTime())    // Start > thisDate
            break;
        if (this.getField(ProductPricing.END_DATE).getValue() >= dateStart.getTime())   // End >= thisDate
        {
            if ((this.getField(HotelPricing.USE_RATE_ID).getLength() == 0) &&
                (this.getField(HotelPricing.USE_CLASS_ID).getLength() == 0))
                    return this;        // Valid price
        // Read the "Use rate" rate
            iRateTypeID = (int)this.getField(HotelPricing.USE_RATE_ID).getValue();
            iRateClassID = (int)this.getField(HotelPricing.USE_CLASS_ID).getValue();
            double dMarkupLine = this.getField(HotelPricing.PRODUCT_TERMS_ID).getValue();
            double dHotelCost = this.getField(HotelPricing.ROOM_COST).getValue();
            String strMeals = this.getField(HotelPricing.MEAL_PLAN_ID).getString();

            if (listener != null)
                this.removeListener(listener, true);
            if (this.getHotelCost(iHotelID, dateTarget, iRateTypeID, iRateClassID, iPaxCategoryID) == null)
                return null;    // Not found

            if (this.getField(HotelPricing.PRODUCT_TERMS_ID).isNull())
                this.getField(HotelPricing.PRODUCT_TERMS_ID).setValue(dMarkupLine);
            if (this.getField(HotelPricing.ROOM_COST).isNull())
                this.getField(HotelPricing.ROOM_COST).setValue(dHotelCost);
            if (this.getField(HotelPricing.MEAL_PLAN_ID).isNull())
                this.getField(HotelPricing.MEAL_PLAN_ID).setString(strMeals);
            return this;        // Valid price
        }
    }
} catch (DBException ex)   {
    ex.printStackTrace();
} finally {
    if (listener != null)
        this.removeListener(listener, true);
}
return null;    // Rate not found if loop finished]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1239">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new CompareFileFilter(HotelPricing.RATE_ID, this.getScreenRecord().getField(HotelScreenRecord.RATE_ID), "=", null, true));
this.getMainRecord().addListener(new CompareFileFilter(HotelPricing.CLASS_ID, this.getScreenRecord().getField(HotelScreenRecord.CLASS_ID), "=", null, true));

this.getScreenRecord().getField(HotelScreenRecord.RATE_ID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(HotelScreenRecord.CLASS_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1240">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingGridScreen</MethodClassName>
		<LogicSource>return new HotelScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1241">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen screen = super;
this.getScreenRecord().getField(HotelScreenRecord.RATE_ID).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), screen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(HotelScreenRecord.CLASS_ID).setupDefaultView(screen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), screen, ScreenConstants.DEFAULT_DISPLAY);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1243">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>HotelPricingGridScreen*2</MethodName>
		<LogicDescription>Constructor when passing header record</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recHotel, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>HotelPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1244">
		<LastChanged>2012-01-23T08:57:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingGridScreen</MethodClassName>
		<LogicSource>return new HotelHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1245">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingGridScreen</MethodClassName>
		<LogicSource>return new HotelPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1246">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingGridScreen</MethodClassName>
		<LogicSource>return new Hotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1247">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1248">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelHeaderScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1249">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelHeaderScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1250">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1251">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingScreen</MethodClassName>
		<LogicSource>return this.getRecord(Hotel.HOTEL_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1252">
		<LastChanged>2012-01-23T08:57:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingScreen</MethodClassName>
		<LogicSource>return new HotelHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1253">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>onForm</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingScreen</MethodClassName>
		<LogicSource><![CDATA[if ((iDocMode == ScreenConstants.DISPLAY_MODE) || (iDocMode == ScreenConstants.SELECT_MODE))

	if (recordMain == null)
{

	recordMain = this.getRecord(Hotel.HOTEL_FILE);
	iDocMode = Hotel.PRICING_GRID_SCREEN;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1254">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingScreen</MethodClassName>
		<LogicSource>return new HotelPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1255">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Hotel(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1256">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1257">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateField</MethodClassName>
		<LogicSource>return new HotelRate(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1258">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), HotelRate.DESCRIPTION_KEY, HotelRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1259">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateGridScreen</MethodClassName>
		<LogicSource>this.getMainRecord().setKeyArea(HotelRate.DESCRIPTION_KEY);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1260">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1261">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), HotelRate.DESCRIPTION_KEY, HotelRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1264">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(HotelRate.HOTEL_RATE_FILE).setKeyArea(HotelRate.DESCRIPTION_KEY);
this.addMainKeyBehavior();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1266">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1267">
		<LastChanged>2012-01-31T10:43:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
Hotel bkHotel = (Hotel)this.getMainRecord();
Vendor apVendor = (Vendor)this.getRecord(Vendor.VENDOR_FILE);
ReadSecondaryHandler secondaryStuff = new ReadSecondaryHandler(apVendor, Vendor.ID_KEY);
bkHotel.getField(Hotel.VENDOR_ID).addListener(secondaryStuff);
ReadSecondaryHandler currSecond = new ReadSecondaryHandler(this.getRecord(Currencys.CURRENCYS_FILE), Currencys.CURRENCY_CODE_KEY);
apVendor.getField(Vendor.CURRENCYS_ID).addListener(currSecond);

BaseField checkMark = bkHotel.getField(Hotel.SAME_AS_VENDOR);
secondaryStuff.addFieldSeqPair(Hotel.DESCRIPTION, Vendor.VENDOR_NAME, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK, checkMark, null);
secondaryStuff.addFieldSeqPair(Hotel.ADDRESS_LINE_1, Vendor.ADDRESS_LINE_1, DBConstants.MOVE_TO_DEPENDENT,DBConstants.DONT_MOVE_DEPENDENT_BACK, checkMark, null);
secondaryStuff.addFieldSeqPair(Hotel.ADDRESS_LINE_2, Vendor.ADDRESS_LINE_2, DBConstants.MOVE_TO_DEPENDENT,DBConstants.DONT_MOVE_DEPENDENT_BACK, checkMark, null);
secondaryStuff.addFieldSeqPair(Hotel.CITY_OR_TOWN, Vendor.CITY_OR_TOWN, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK, checkMark, null);
secondaryStuff.addFieldSeqPair(Hotel.STATE_OR_REGION, Vendor.STATE_OR_REGION, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK, checkMark, null);
secondaryStuff.addFieldSeqPair(Hotel.POSTAL_CODE, Vendor.POSTAL_CODE, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK, checkMark, null);
secondaryStuff.addFieldSeqPair(Hotel.COUNTRY, Vendor.COUNTRY, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK, checkMark, null);
secondaryStuff.addFieldSeqPair(Hotel.TEL, Vendor.TEL, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK, checkMark, null);
secondaryStuff.addFieldSeqPair(Hotel.FAX, Vendor.FAX, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK, checkMark, null);
secondaryStuff.addFieldSeqPair(Hotel.EMAIL, Vendor.EMAIL, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK, checkMark, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1268">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Hotel.MEAL_DETAIL), BookingConstants.BUTTON_LOCATION + Hotel.MEAL_DETAIL, Hotel.MEAL_DETAIL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1269">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(Hotel.MEAL_DETAIL))
	return (this.onForm(null, Hotel.MEAL_PRICING_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1270">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelScreen</MethodClassName>
		<LogicSource>return new Hotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1271">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Vendor(this);
new Currencys(this);
// new BkCountry(this);
// new BkCity(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1272">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1279">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InitBookingDetailHandler</MethodClassName>
		<LogicSource><![CDATA[((BookingSub)this.getOwner()).initBookingDetailFields(m_recBooking, m_recTour, false);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1280">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>InitBookingDetailHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Booking recBooking, Tour recTour</MethodInterface>
		<MethodClassName>InitBookingDetailHandler</MethodClassName>
		<LogicSource><![CDATA[m_recBooking = recBooking;
m_recTour = recTour;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1281">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doSetData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InitUserIDHandler</MethodClassName>
		<LogicSource><![CDATA[int userID = this.getCurrentUserID();		// Only move the userID!!!
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1282">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>InitUserIDHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>field</MethodReturns>
		<MethodInterface>BaseField field</MethodInterface>
		<MethodClassName>InitUserIDHandler</MethodClassName>
		<LogicSource><![CDATA[super;

m_bScreenMove = false;
m_bInitMove = true;		// Only respond to init
m_bReadMove = false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1283">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryStatusField</MethodClassName>
		<LogicSource>return new InventoryStatus(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1285">
		<LastChanged>2012-01-31T10:43:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InvoiceAcctHandler</MethodClassName>
		<LogicSource><![CDATA[Record recApTrx = this.getOwner().getRecord();
RecordOwner screen = recApTrx.getRecordOwner();
BaseField fldApAccountID = ((Record)screen.getScreenRecord()).getField(InvoiceScreenRecord.AP_ACCOUNT_ID);
BaseField fldCostAccountID = ((Record)screen.getScreenRecord()).getField(InvoiceScreenRecord.COST_ACCOUNT_ID);
TrxStatus recTrxStatus = (TrxStatus)screen.getRecord(TrxStatus.TRX_STATUS_FILE);
Record recApControl = (Record)screen.getRecord(ApControl.AP_CONTROL_FILE);
FileListener invoiceBehavior = ((Record)screen.getRecord(ApTrx.AP_TRX_FILE)).getListener(UpdateInvoiceHandler.class.getName());
FileListener invoiceNonTourBehavior = ((Record)screen.getRecord(ApTrx.AP_TRX_FILE)).getListener(UpdateNonTourInvoiceHandler.class.getName());
BaseField fldTourID = recApTrx.getField(ApTrx.TOUR_ID);
if (fldTourID.isNull())
{ // No tour, set defaults
    fldApAccountID.moveFieldToThis(recApControl.getField(ApControl.NON_TOUR_AP_ACCOUNT_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    Record recVendor = ((ReferenceField)recApTrx.getField(ApTrx.VENDOR_ID)).getReference();
    if ((recVendor != null) && (!recVendor.getField(Vendor.DEFAULT_ACCOUNT_ID).isNull()))
        fldCostAccountID.moveFieldToThis(recVendor.getField(Vendor.DEFAULT_ACCOUNT_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    else
        fldCostAccountID.moveFieldToThis(recApControl.getField(ApControl.COST_ACCOUNT_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);

    if (recApTrx.getField(ApTrx.INVOICE_AMOUNT).getValue() >= 0)
        recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.INVOICE_NON_TOUR);
    else
        recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.CREDIT_INVOICE_NON_TOUR);

    fldApAccountID.setEnabled(true);
    fldCostAccountID.setEnabled(true);
    if ((invoiceBehavior.isEnabled()) && (!invoiceNonTourBehavior.isEnabled()))
    {
        invoiceBehavior.setEnabledListener(false);
        invoiceNonTourBehavior.setEnabledListener(true);
    }
}
else
{ // Tour set, Don't allow account changes
    fldApAccountID.setString(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    fldCostAccountID.setString(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);

    if (recApTrx.getField(ApTrx.INVOICE_AMOUNT).getValue() >= 0)
        recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.INVOICE);
    else
        recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.CREDIT_INVOICE);

    fldApAccountID.setEnabled(false);
    fldCostAccountID.setEnabled(false);
    if ((invoiceNonTourBehavior.isEnabled()) && (!invoiceBehavior.isEnabled()))
    {
        invoiceBehavior.setEnabledListener(true);
        invoiceNonTourBehavior.setEnabledListener(false);
    }
}
if (iMoveMode != DBConstants.READ_MOVE)
{
    recApTrx.getField(ApTrx.TRX_STATUS_ID).initField(bDisplayOption);
    recApTrx.getField(ApTrx.TRX_STATUS_ID).setModified(false);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1289">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InvoiceScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.addMainKeyBehavior();
TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);

EnableScreenHandler behavior = new EnableScreenHandler(ApTrx.TRX_STATUS_ID);
this.getMainRecord().addListener(behavior);
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.DEPARTURE_EST_MANUAL);
behavior.addComparison(recTrxStatus.getField(TrxStatus.ID).getData());
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.DEP_ESTIMATE);
behavior.addComparison(recTrxStatus.getField(TrxStatus.ID).getData());
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.INVOICE_NON_TOUR);
behavior.addComparison(recTrxStatus.getField(TrxStatus.ID).getData());
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.CREDIT_INVOICE);
behavior.addComparison(recTrxStatus.getField(TrxStatus.ID).getData());
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.INVOICE);
behavior.addComparison(recTrxStatus.getField(TrxStatus.ID).getData());

this.getMainRecord().getField(ApTrx.TRX_STATUS_ID).addListener(new InitFieldHandler(recTrxStatus.getField(TrxStatus.ID)));

// If Invoice date, Invoice number, or amount changes, make sure this is an Invoice
this.getMainRecord().getField(ApTrx.INVOICE_NO).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.TRX_STATUS_ID), recTrxStatus.getField(TrxStatus.ID)));
this.getMainRecord().getField(ApTrx.INVOICE_DATE).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.TRX_STATUS_ID), recTrxStatus.getField(TrxStatus.ID)));
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.TRX_STATUS_ID), recTrxStatus.getField(TrxStatus.ID)));

// Invoice balance = invoice amount and select for payment
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.INVOICE_BALANCE), this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT)));
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.AMOUNT_SELECTED), this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT)));

this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new CalcBalanceHandler(this.getMainRecord().getField(ApTrx.INVOICE_LOCAL), this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT), this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.LAST_RATE), CalcBalanceHandler.MULTIPLY, false));
this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.LAST_RATE).addListener(new CalcBalanceHandler(this.getMainRecord().getField(ApTrx.INVOICE_LOCAL), this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT), this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.LAST_RATE), CalcBalanceHandler.MULTIPLY, false));
FieldListener listener = null;
this.getMainRecord().getField(ApTrx.INVOICE_LOCAL).addListener(listener = new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.INVOICE_BALANCE_LOCAL), this.getMainRecord().getField(ApTrx.INVOICE_LOCAL)));
listener.setRespondsToMode(DBConstants.READ_MOVE, true);
listener.setRespondsToMode(DBConstants.INIT_MOVE, true);
// Init these to the last value
this.getMainRecord().getField(ApTrx.VENDOR_ID).addListener(new InitFieldHandler(this.getScreenRecord().getField(InvoiceScreenRecord.LAST_VENDOR_ID)));
this.getMainRecord().getField(ApTrx.INVOICE_NO).addListener(new InitFieldHandler(this.getScreenRecord().getField(InvoiceScreenRecord.LAST_INVOICE_NO)));
this.getMainRecord().getField(ApTrx.INVOICE_DATE).addListener(new InitFieldHandler(this.getScreenRecord().getField(InvoiceScreenRecord.LAST_INVOICE_DATE)));
// If vendor change, set new last vendor, clear all last.
this.getMainRecord().getField(ApTrx.VENDOR_ID).addListener(listener = new MoveOnChangeHandler(this.getScreenRecord().getField(InvoiceScreenRecord.LAST_VENDOR_ID), this.getMainRecord().getField(ApTrx.VENDOR_ID)));
listener.setRespondsToMode(DBConstants.READ_MOVE, true);
listener.setRespondsToMode(DBConstants.INIT_MOVE, true);
this.getMainRecord().getField(ApTrx.VENDOR_ID).addListener(listener = new InitOnChangeHandler(this.getScreenRecord().getField(InvoiceScreenRecord.LAST_INVOICE_NO)));
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getMainRecord().getField(ApTrx.VENDOR_ID).addListener(listener = new InitOnChangeHandler(this.getScreenRecord().getField(InvoiceScreenRecord.LAST_INVOICE_DATE)));
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
// Set last invoice and date if change by user
this.getMainRecord().getField(ApTrx.INVOICE_NO).addListener(listener = new MoveOnChangeHandler(this.getScreenRecord().getField(InvoiceScreenRecord.LAST_INVOICE_NO), this.getMainRecord().getField(ApTrx.INVOICE_NO)));
listener.setRespondsToMode(DBConstants.READ_MOVE, true);
listener.setRespondsToMode(DBConstants.INIT_MOVE, true);
this.getMainRecord().getField(ApTrx.INVOICE_DATE).addListener(listener = new MoveOnChangeHandler(this.getScreenRecord().getField(InvoiceScreenRecord.LAST_INVOICE_DATE), this.getMainRecord().getField(ApTrx.INVOICE_DATE), false, false, true));  // Not if null
listener.setRespondsToMode(DBConstants.READ_MOVE, true);
listener.setRespondsToMode(DBConstants.INIT_MOVE, true);
// If user changes vendor no, clear invoice no and date.
this.getMainRecord().getField(ApTrx.VENDOR_ID).addListener(listener = new InitOnChangeHandler(this.getMainRecord().getField(ApTrx.INVOICE_NO)));
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getMainRecord().getField(ApTrx.VENDOR_ID).addListener(listener = new InitOnChangeHandler(this.getMainRecord().getField(ApTrx.INVOICE_DATE)));
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);

// If invoice number or amount changes, and the date hasn't been set yet, set it.
this.getMainRecord().getField(ApTrx.INVOICE_NO).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.INVOICE_DATE), this.getScreenRecord().getField(InvoiceScreenRecord.LAST_INVOICE_DATE), false, true));    // Only if date is null now.
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.INVOICE_DATE), this.getScreenRecord().getField(InvoiceScreenRecord.LAST_INVOICE_DATE), false, true));

// If read dep est and vendor is same as last, set invoice no, date and amount in record
this.getMainRecord().addListener(new UpdateInvoiceVendorHandler((ScreenRecord)this.getScreenRecord()));
// If entering Invoice number and amount is null, move dep est amount to Invoice amount
this.getMainRecord().getField(ApTrx.INVOICE_NO).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT), this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE), false, true));

Record recTour = ((ReferenceField)this.getMainRecord().getField(ApTrx.TOUR_ID)).getReferenceRecord(this);
this.getMainRecord().getField(ApTrx.TOUR_ID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.START_SERVICE_DATE), recTour.getField(Tour.DEPARTURE_DATE)));
this.getMainRecord().getField(ApTrx.START_SERVICE_DATE).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.END_SERVICE_DATE), this.getMainRecord().getField(ApTrx.START_SERVICE_DATE)));

this.getMainRecord().getField(ApTrx.TOUR_ID).addListener(new InvoiceAcctHandler(null));
this.getMainRecord().getField(ApTrx.VENDOR_ID).addListener(new InvoiceAcctHandler(null));
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new InvoiceAcctHandler(null));

// Make sure this is a valid Invoice
this.getMainRecord().addListener(new ValidateInvoiceHandler(null));
// Update the G/L on Update or Write
UpdateInvoiceHandler updateInvoiceHandler = new UpdateInvoiceHandler(null);
updateInvoiceHandler.setEnabledListener(false);
this.getMainRecord().addListener(updateInvoiceHandler);
UpdateNonTourInvoiceHandler invoiceNonTourBehavior = new UpdateNonTourInvoiceHandler(null);
this.getMainRecord().addListener(invoiceNonTourBehavior);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1290">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InvoiceScreen</MethodClassName>
		<LogicSource>return new InvoiceScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1291">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InvoiceScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1292">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InvoiceScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxStatus(this);
new ApControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1293">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InvoiceScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1294">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrochureField</MethodClassName>
		<LogicSource>return new Brochure(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1295">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrochureField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Brochure.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1304">
		<LastChanged>2012-02-02T22:47:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,100</Sequence>
		<MethodName>getLengthTime</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Land</MethodClassName>
		<LogicSource><![CDATA[double dDays = this.getField(Land.DAYS).getValue();
if (dDays != 0)
    return (long)(dDays * DBConstants.KMS_IN_A_DAY);
double dHours = this.getField(Land.HOURS).getValue();
return (long)(dHours * 60 * 60 * 1000); // Milliseconds]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1305">
		<LastChanged>2012-04-07T12:32:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Land</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & Product.PRICING_GRID_SCREEN) == Product.PRICING_GRID_SCREEN)
    screen = Record.makeNewScreen(LandPricing.LAND_PRICING_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_GRID_SCREEN) == Product.INVENTORY_GRID_SCREEN)
    screen = Record.makeNewScreen(LandInventoryModel.LAND_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_SCREEN) == Product.INVENTORY_SCREEN)
    screen = Record.makeNewScreen(LandInventoryModel.LAND_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.RANGE_ADJUST_SCREEN) == Product.RANGE_ADJUST_SCREEN)
    screen = Record.makeNewScreen(LandInventoryModel.LAND_INVENTORY_RANGE_ADJUST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(LAND_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    screen = Record.makeNewScreen(LAND_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1306">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>controlToField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandDetBox</MethodClassName>
		<LogicSource><![CDATA[Land query = (Land)this.getParentScreen().getRecord(Land.LAND_FILE);
//?CQBkLandDet screen2 = new CQBkLandDet(null, query);
//?screen2.makeWindow();
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1307">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>LandDetBox</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandDetBox</MethodClassName>
		<LogicSource><![CDATA[//?m_ButtonUp = "";
//?m_ButtonDown = "";
//?m_ButtonText = "Land Rates";
//?m_DisplayDesc = (displayFieldDesc != ScreenConstants.DONT_DISPLAY_FIELD_DESC);
//?this.Create(itsLocation, parentScreen, fieldConverter, displayFieldDesc);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1310">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandGridScreen</MethodClassName>
		<LogicSource>return new Land(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1311">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1313">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryGridScreen</MethodClassName>
		<LogicSource>return new LandScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1314">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen screen = super;

BaseField fldLandRateCode = this.getScreenRecord().getField(LandScreenRecord.LAND_CLASS_ID);
new SRadioButton(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), screen, fldLandRateCode, ScreenConstants.DISPLAY_FIELD_DESC, "P", "Private Car/MC");
new SRadioButton(screen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), screen, fldLandRateCode, ScreenConstants.DISPLAY_FIELD_DESC, "S", "Seat in Coach");

return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1316">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>LandInventoryGridScreen*2</MethodName>
		<LogicDescription>Constructor passing in Main file</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recLand, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>LandInventoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1317">
		<LastChanged>2012-01-23T08:57:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryGridScreen</MethodClassName>
		<LogicSource>return new LandHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1319">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryGridScreen</MethodClassName>
		<LogicSource>return new Land(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1321">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandList</MethodClassName>
		<LogicSource><![CDATA[this.addTable(new Land(recordOwner));
this.addTable(new City(recordOwner));
this.addTable(new Vendor(recordOwner));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1322">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandList</MethodClassName>
		<LogicSource><![CDATA[this.setSelected(false);
super;
this.getField(Land.LAND_FILE, Land.ID).setSelected(true);
this.getField(Land.LAND_FILE, Land.DESCRIPTION).setSelected(true);
this.getField(Land.LAND_FILE, Land.CODE).setSelected(true);
this.getField(Land.LAND_FILE, Land.VENDOR_ID).setSelected(true);
this.getField(Land.LAND_FILE, Land.CITY_ID).setSelected(true);
this.getField(City.CITY_FILE, City.DESCRIPTION).setSelected(true);
this.getField(City.CITY_FILE, City.COUNTRY_ID).setSelected(true);
this.getField(Vendor.VENDOR_FILE, Vendor.VENDOR_NAME).setSelected(true);
this.getField(Land.LAND_FILE, Land.DESC_SORT).setSelected(true);
this.getField(Vendor.VENDOR_FILE, Vendor.NAME_SORT).setSelected(true);
this.getField(City.CITY_FILE, City.TICKET_CITY_DESC).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1323">
		<LastChanged>2012-01-31T21:11:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupRelationships</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandList</MethodClassName>
		<LogicSource><![CDATA[this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(Land.LAND_FILE), this.getRecord(City.CITY_FILE), Land.CITY_ID, City.ID);
this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(Land.LAND_FILE), this.getRecord(Vendor.VENDOR_FILE), Land.VENDOR_ID, Vendor.ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1330">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().getField(LandPricing.RATE_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.LAND_RATE_ID)));
this.getMainRecord().getField(LandPricing.CLASS_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.LAND_CLASS_ID)));
this.getMainRecord().getField(LandPricing.LAND_VARIES_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.VARIES_ON)));
this.getMainRecord().getField(LandPricing.PRODUCT_TERMS_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.PRODUCT_TERMS_ID)));

this.getMainRecord().addListener(new CompareFileFilter(LandPricing.CLASS_ID, this.getScreenRecord().getField(LandScreenRecord.LAND_CLASS_ID), "=", null, true));
this.getScreenRecord().getField(LandScreenRecord.LAND_CLASS_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1331">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingGridScreen</MethodClassName>
		<LogicSource>return new LandScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1332">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingGridScreen</MethodClassName>
		<LogicSource><![CDATA[ReferenceField fldLandClass = (ReferenceField)this.getScreenRecord().getField(LandScreenRecord.LAND_CLASS_ID);
int iSic = fldLandClass.getIDFromCode(LandClass.SEAT_IN_COACH_CODE);
if (iSic != 0)
{
	String strSic = fldLandClass.getReferenceRecord().getField(LandClass.DESCRIPTION).toString();
	int iPmc = fldLandClass.getIDFromCode(LandClass.PRIVATE_VEHICLE_CODE);
	if (iPmc != 0)
	{
		String strPmc = fldLandClass.getReferenceRecord().getField(LandClass.DESCRIPTION).toString();
		new SRadioButton(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, fldLandClass, ScreenConstants.DISPLAY_FIELD_DESC, Integer.toString(iSic), strSic);
		new SRadioButton(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, fldLandClass, ScreenConstants.DISPLAY_FIELD_DESC, Integer.toString(iPmc), strPmc);
	}
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1334">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>LandPricingGridScreen*2</MethodName>
		<LogicDescription>Constructor with header passed in</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>LandPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1335">
		<LastChanged>2012-01-23T08:57:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingGridScreen</MethodClassName>
		<LogicSource>return new LandHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1336">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingGridScreen</MethodClassName>
		<LogicSource>return new LandPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1337">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingGridScreen</MethodClassName>
		<LogicSource>return new Land(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1338">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1339">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandHeaderScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1340">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandHeaderScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1341">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>LandScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandScreenRecord</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1342">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(LandPricing.RATE_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.LAND_RATE_ID)));
this.getMainRecord().getField(LandPricing.CLASS_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.LAND_CLASS_ID)));
this.getMainRecord().getField(LandPricing.LAND_VARIES_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.VARIES_ON)));
this.getMainRecord().getField(LandPricing.PRODUCT_TERMS_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.PRODUCT_TERMS_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1343">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingScreen</MethodClassName>
		<LogicSource>return this.getRecord(Land.LAND_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1344">
		<LastChanged>2012-01-23T08:57:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingScreen</MethodClassName>
		<LogicSource>return new LandHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1345">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>onForm</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingScreen</MethodClassName>
		<LogicSource><![CDATA[if ((iDocMode == ScreenConstants.DISPLAY_MODE) || (iDocMode == ScreenConstants.SELECT_MODE))
	if (recordMain == null)
{
	recordMain = this.getRecord(Land.LAND_FILE);
	iDocMode = Land.PRICING_GRID_SCREEN;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1346">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingScreen</MethodClassName>
		<LogicSource>return new LandPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1347">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Land(this);
new ProductControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1348">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1349">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
Record recVendor = ((ReferenceField)this.getMainRecord().getField(Product.VENDOR_ID)).getReferenceRecord(this);
recVendor.getField(Vendor.CURRENCYS_ID).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1350">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandScreen</MethodClassName>
		<LogicSource>return new Land(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1351">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Vendor(this);
new Currencys(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1352">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1357">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandVariesField</MethodClassName>
		<LogicSource>return new LandVaries(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1358">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandVariesField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), LandVaries.DESCRIPTION_KEY, LandVaries.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1359">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandVariesGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1360">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandVariesScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1361">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LanguageField</MethodClassName>
		<LogicSource>return new Language(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1362">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LanguageField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Language.CODE_KEY, Language.DESCRIPTION, false); </LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1391">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LookupInventoryHandler</MethodClassName>
		<LogicSource><![CDATA[int iOldKeyArea = m_recInventory.getDefaultOrder();
try	{
	m_recInventory.setKeyArea(Inventory.INV_DATE_KEY);
	m_recInventory.addNew();
	if ((m_fldID.isNull()) || (m_fldDate.isNull()))
		return;
	m_recInventory.getField(Inventory.PRODUCT_TYPE_ID).setValue(m_iProductType);
	m_recInventory.getField(Inventory.PRODUCT_ID).moveFieldToThis(m_fldID);
	m_recInventory.getField(Inventory.INV_DATE).moveFieldToThis(m_fldDate);
	if (m_fldRateID != null)
		m_recInventory.getField(Inventory.RATE_ID).moveFieldToThis(m_fldRateID);
	if (m_fldClassID != null)
		m_recInventory.getField(Inventory.CLASS_ID).moveFieldToThis(m_fldClassID);
	if (!m_recInventory.seek(DBConstants.EQUALS))
		m_recInventory.addNew();
} catch (DBException ex)	{
	ex.printStackTrace();
} finally {
	m_recInventory.setKeyArea(iOldKeyArea);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1392">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>LookupInventoryHandler</MethodName>
		<LogicDescription>Lookup Inventory</LogicDescription>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Inventory recInventory, int iProductType, BaseField fldID, BaseField fldDate, BaseField fldRateID, BaseField fldClassID</MethodInterface>
		<MethodClassName>LookupInventoryHandler</MethodClassName>
		<LogicSource><![CDATA[m_recInventory = recInventory;
m_iProductType = iProductType;
m_fldID = fldID;
m_fldDate = fldDate;
m_fldRateID = fldRateID;
m_fldClassID = fldClassID;

recInventory.addListener(new FileRemoveBOnCloseHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1398">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MaritalStatusField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = MaritalStatusField.SINGLE;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1400">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Mco</MethodClassName>
		<LogicSource><![CDATA[super;

this.getField(Mco.GROSS).addListener(new CalcBalanceHandler(this.getField(Mco.COMM_AMT), this.getField(Mco.GROSS), this.getField(Mco.COMM_PER), "*", false));
this.getField(Mco.COMM_PER).addListener(new CalcBalanceHandler(this.getField(Mco.COMM_AMT), this.getField(Mco.GROSS), this.getField(Mco.COMM_PER), "*", false));
this.getField(Mco.GROSS).addListener(new CalcBalanceHandler(this.getField(Mco.SVC_AMT), this.getField(Mco.GROSS), this.getField(Mco.SVC_PER), "*", false));
this.getField(Mco.SVC_PER).addListener(new CalcBalanceHandler(this.getField(Mco.SVC_AMT), this.getField(Mco.GROSS), this.getField(Mco.SVC_PER), "*", false));
this.getField(Mco.GROSS).addListener(new CalcBalanceHandler(this.getField(Mco.TAX_AMT), this.getField(Mco.GROSS), this.getField(Mco.TAX_PER), "*", false));
this.getField(Mco.TAX_PER).addListener(new CalcBalanceHandler(this.getField(Mco.TAX_AMT), this.getField(Mco.GROSS), this.getField(Mco.TAX_PER), "*", false));
this.getField(Mco.GROSS).addListener(new CalcMcoHandler(null));
this.getField(Mco.COMM_AMT).addListener(new CalcMcoHandler(null));
this.getField(Mco.SVC_AMT).addListener(new CalcMcoHandler(null));
this.getField(Mco.TAX_AMT).addListener(new CalcMcoHandler(null));
this.getField(Mco.NET).addListener(new MoveOnChangeHandler(this.getField(Mco.AMT_APPLY), this.getField(Mco.NET)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1401">
		<LastChanged>2012-03-27T11:33:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Mco</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & BaseArPay.DISTRIBUTION_SCREEN) == BaseArPay.DISTRIBUTION_SCREEN)
    screen = Record.makeNewScreen(MCO_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.POST_MODE)
    screen = Record.makeNewScreen(MCO_POST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == Mco.ENTRY_SCREEN)
    screen = Record.makeNewScreen(MCO_ENTRY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == Mco.ENTRY_GRID_SCREEN)
    screen = Record.makeNewScreen(MCO_ENTRY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == Mco.COLL_POST)
    screen = Record.makeNewScreen(MCO_COLL_POST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == Mco.COLL_SCREEN)
    screen = Record.makeNewScreen(MCO_COLL_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(MCO_BATCH_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(MCO_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(MCO_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1402">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollCalcNetBeh</MethodClassName>
		<LogicSource><![CDATA[super;
double dNet = 0;
Record recMco = this.getOwner();
double dGross = recMco.getField(Mco.GROSS).getValue();
double dCommission = recMco.getField(Mco.COMM_AMT).getValue();
double dTaxes = recMco.getField(Mco.TAX_AMT).getValue();
double dServiceChargePer = recMco.getField(Mco.CARRIER_SVC_PER).getValue();
double dServiceCharge = (Math.floor(dGross * dServiceChargePer * 100 + 0.5)) / 100;
dNet = dGross - dCommission - dTaxes - dServiceCharge;
recMco.getRecordOwner().getScreenRecord().getField(McoScreenRecord.SERVICE_CHARGE).setValue(dServiceCharge);
recMco.getRecordOwner().getScreenRecord().getField(McoScreenRecord.NET).setValue(dNet);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1403">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.AIRLINE_ID)));

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, Mco.MCO_FILE, Mco.SUBMITTED);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus, true));

this.getMainRecord().addListener(new McoCollCalcNetBeh(null));

this.getMainRecord().getField(Mco.PAID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(Mco.AMOUNT_PAID), this.getScreenRecord().getField(McoScreenRecord.NET)));
FieldListener fieldBehavior = new MoveOnChangeHandler(this.getMainRecord().getField(Mco.DATE_PAID), this.getScreenRecord().getField(McoScreenRecord.TODAY), false, true);
fieldBehavior.setRespondsToMode(DBConstants.INIT_MOVE, false);
fieldBehavior.setRespondsToMode(DBConstants.READ_MOVE, false);
this.getMainRecord().getField(Mco.AMOUNT_PAID).addListener(fieldBehavior);

this.getMainRecord().addListener(new CompareFileFilter(Mco.AIRLINE_ID, this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID), "=", null, false));
this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID).addListener(new FieldReSelectHandler(this));

this.setAppending(false);
this.setEnabled(false);
this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID).setEnabled(true);
this.getMainRecord().getField(Mco.DATE_PAID).setEnabled(true);
this.getMainRecord().getField(Mco.AMOUNT_PAID).setEnabled(true);
this.getMainRecord().getField(Mco.PAID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1404">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollGridScreen</MethodClassName>
		<LogicSource>return new McoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1405">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);

this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1406">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.POST))
{
    Map<String,Object> map = null;
    try   {
        if (this.getMainRecord().getEditMode() == Constants.EDIT_IN_PROGRESS)
            this.getMainRecord().set();
        this.getMainRecord().addNew();
        map = new Hashtable<String,Object>();
        BaseField fldAirlineID = this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID);
        map.put(fldAirlineID.getFieldName(), fldAirlineID.toString());
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
    return (this.onForm(this.getMainRecord(), Mco.COLL_POST, true, iCommandOptions, map) != null);
}
else if ((strCommand.equalsIgnoreCase(MenuConstants.FORM)) || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
    return (this.onForm(this.getMainRecord(), Mco.COLL_SCREEN, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1407">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollGridScreen</MethodClassName>
		<LogicSource>return new Mco(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1408">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1409">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1410">
		<LastChanged>2012-01-31T10:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addTrxSpecificListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollPost</MethodClassName>
		<LogicSource><![CDATA[super;

BaseField fldAirlineID = this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID);
String strAirlineID = this.getProperty(fldAirlineID.getFieldName());
fldAirlineID.setString(strAirlineID);

this.getMainRecord().setKeyArea(Mco.TRX_STATUS_ID_KEY);

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, Mco.MCO_FILE, Mco.SUBMITTED);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus));

this.getMainRecord().addListener(new McoCollCalcNetBeh(null));

this.getMainRecord().addListener(new CompareFileFilter(Mco.AIRLINE_ID, this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID), FileListener.EQUALS, null, false));
this.getScreenRecord().getField(McoScreenRecord.NULL_DATE).setData(null); // Just need a temporary null field to compare
this.getMainRecord().addListener(new CompareFileFilter(Mco.DATE_PAID, this.getScreenRecord().getField(McoScreenRecord.NULL_DATE), FileListener.NOT_EQUAL, null, false));

Record recMco = this.getMainRecord();
recMco.addListener(new SubCountHandler(this.getScreenRecord().getField(McoScreenRecord.COUNT), false, true));
recMco.addListener(new SubCountHandler(this.getScreenRecord().getField(McoScreenRecord.TOTAL_GROSS), Mco.GROSS, false, true));
recMco.addListener(new SubCountHandler(this.getScreenRecord().getField(McoScreenRecord.TOTAL_NET), Mco.AMOUNT_PAID, false, true));

recMco.close();
try   {   // Recount totals
    while (recMco.hasNext())
    {
        recMco.next();
        if (recMco.getField(Mco.DATE_PAID).isNull())
            continue;
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1411">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollPost</MethodClassName>
		<LogicSource>return new McoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1413">
		<LastChanged>2012-02-01T08:06:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>onPost</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>McoCollPost</MethodClassName>
		<LogicSource><![CDATA[// Step 1 - make sure batch is valid
BaseArPay recBaseArTrx = (BaseArPay)this.getBaseTrx();
TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
TransactionType recTransactionType = (TransactionType)this.getRecord(TransactionType.TRANSACTION_TYPE_FILE);

// Step 2 - Post it to the G/L
try   {
    Object bookmark = recTrxStatus.getHandle(DBConstants.DATA_SOURCE_HANDLE);
    int iEnteredTrxClass = this.getNewTrxClass();
    recTrxStatus.setHandle(bookmark, DBConstants.DATA_SOURCE_HANDLE);
    recBaseArTrx.addListener(new SyncArTrxStatusHandler(null));   // Make sure A/R matches this
    recBaseArTrx.close();
    while (recBaseArTrx.hasNext())
    {
        recBaseArTrx.next();
        if (recBaseArTrx.getField(BaseArPay.DATE_PAID).isNull())
            continue;

        recBaseArTrx.startDistTrx();
        // Step 2a - Create and write the Mco transaction.
        bookmark = recBaseArTrx.getHandle(DBConstants.DATA_SOURCE_HANDLE);
        recBaseArTrx.edit();
        recBaseArTrx.getField(BaseArPay.TRX_STATUS_ID).setValue(iEnteredTrxClass);
        recBaseArTrx.getField(BaseArPay.PAYMENT_ENTERED).setValue(DateTimeField.todaysDate());
        recBaseArTrx.set();
        recBaseArTrx.setHandle(bookmark, DBConstants.DATA_SOURCE_HANDLE);
        // Step 2 - Post it to the G/L
        BaseField fldAccountID = this.getTrxAccountID(recBaseArTrx);
        double dTrxAmount = recBaseArTrx.getField(BaseArPay.AMT_APPLY).getValue();
        recBaseArTrx.onPostTrxDist(fldAccountID, -dTrxAmount, PostingType.TRX_POST);
        // Step 2c - Post the distribution side of the transaction.
        fldAccountID = this.getDistAccountID(recBaseArTrx);
        double dPaid = recBaseArTrx.getField(BaseArPay.AMOUNT_PAID).getValue();
        recBaseArTrx.onPostTrxDist(fldAccountID, dPaid, PostingType.DIST_POST);

        // Step 2d - Post the variance transaction.
        fldAccountID = this.getVarAccountID(recBaseArTrx);
        dTrxAmount = dTrxAmount - dPaid;
        if (dTrxAmount != 0)
            recBaseArTrx.onPostTrxDist(fldAccountID, dTrxAmount, PostingType.OPTIONAL_POST);
        recBaseArTrx.endDistTrx();

        recBaseArTrx.close();
    } // End of loop
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
} finally {
    recBaseArTrx.removeListener(recBaseArTrx.getListener(SyncArTrxStatusHandler.class), true);   // Make sure A/R matches this
}
// Step 3 - Delete the batch (if not recurring)
recBaseArTrx.close();
this.getScreenRecord().getField(McoScreenRecord.COUNT).initField(DBConstants.DISPLAY);
this.getScreenRecord().getField(McoScreenRecord.TOTAL_GROSS).initField(DBConstants.DISPLAY);
this.getScreenRecord().getField(McoScreenRecord.TOTAL_NET).initField(DBConstants.DISPLAY);
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1414">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollPost</MethodClassName>
		<LogicSource>return new Mco(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1415">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollPost</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);

new TrxStatus(this);
new TransactionType(this);

new Airline(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1416">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollPost</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1417">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.AIRLINE_ID)));

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, Mco.MCO_FILE, Mco.SUBMITTED);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus));

this.getMainRecord().addListener(new McoCollCalcNetBeh(null));

this.getMainRecord().addListener(new CompareFileFilter(Mco.AIRLINE_ID, this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID), "=", null, false));

this.getMainRecord().getField(Mco.PAID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(Mco.AMOUNT_PAID), this.getScreenRecord().getField(McoScreenRecord.NET)));
FieldListener fieldBehavior = new MoveOnChangeHandler(this.getMainRecord().getField(Mco.DATE_PAID), this.getScreenRecord().getField(McoScreenRecord.TODAY), false, true);
fieldBehavior.setRespondsToMode(DBConstants.INIT_MOVE, false);
fieldBehavior.setRespondsToMode(DBConstants.READ_MOVE, false);
this.getMainRecord().getField(Mco.AMOUNT_PAID).addListener(fieldBehavior);

this.setEnabled(false);
this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID).setEnabled(true);
this.getMainRecord().getField(Mco.DATE_PAID).setEnabled(true);
this.getMainRecord().getField(Mco.AMOUNT_PAID).setEnabled(true);
this.getMainRecord().getField(Mco.PAID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1418">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollScreen</MethodClassName>
		<LogicSource>return new McoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1419">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollScreen</MethodClassName>
		<LogicSource>return new Mco(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1420">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1421">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1422">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
((TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE)).getTrxStatusID(TransactionType.ACCTREC, Mco.MCO_FILE, Mco.BATCH);
this.getMainRecord().setKeyArea(Mco.TRX_STATUS_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getRecord(TrxStatus.TRX_STATUS_FILE)));

this.getMainRecord().getField(Mco.COMM_PER).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.MCO_COMM_PER)));
this.getMainRecord().getField(Mco.TAX_PER).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.MCO_TAX_PER)));
this.getMainRecord().getField(Mco.SVC_PER).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.MCO_SVC_PER)));
this.getMainRecord().getField(Mco.AIRLINE_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.AIRLINE_ID)));

this.getMainRecord().getField(Mco.NET).setEnabled(false);

this.getMainRecord().addListener(new SubFileIntegrityHandler(McoBatchDist.class.getName(), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1423">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryGridScreen</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1424">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>75</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strDesc = "Distribution";
if (this.getTask() != null)
    strDesc = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(strDesc);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strDesc, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1426">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryGridScreen</MethodClassName>
		<LogicSource>return new Mco(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1427">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1428">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1429">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(Mco.MCO_NO_KEY);
// Add the filters behaviors
this.getMainRecord().addListener(new ExtractRangeFilter(Mco.BOOKING_ID, this.getScreenRecord().getField(CashBatchScreenRecord.BOOKING_ID)));
this.getScreenRecord().getField(CashBatchScreenRecord.BOOKING_ID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new ExtractRangeFilter(Mco.AIRLINE_ID, this.getScreenRecord().getField(CashBatchScreenRecord.AIRLINE_ID)));
this.getScreenRecord().getField(CashBatchScreenRecord.AIRLINE_ID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new ExtractRangeFilter(Mco.MCO_NO, this.getScreenRecord().getField(CashBatchScreenRecord.MCO_NO)));
this.getScreenRecord().getField(CashBatchScreenRecord.MCO_NO).addListener(new FieldReSelectHandler(this));
this.setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1430">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoGridScreen</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1431">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen screen = super;

this.getScreenRecord().getField(CashBatchScreenRecord.BOOKING_ID).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), screen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(CashBatchScreenRecord.AIRLINE_ID).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.DONT_SET_ANCHOR), screen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(CashBatchScreenRecord.MCO_NO).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.DONT_SET_ANCHOR), screen, ScreenConstants.DEFAULT_DISPLAY);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1433">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoGridScreen</MethodClassName>
		<LogicSource>return new Mco(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1434">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1435">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setOpenMode(this.getMainRecord().getOpenMode() | DBConstants.OPEN_READ_ONLY);
this.getMainRecord().setKeyArea(Mco.MCO_NO_KEY);
this.setEnabled(false);
this.getMainRecord().getField(Mco.MCO_NO).setEnabled(true);
this.getMainRecord().getField(Mco.MCO_NO).addListener(new MainFieldHandler(Mco.MCO_NO_KEY));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1436">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoScreen</MethodClassName>
		<LogicSource>return new Mco(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1437">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1438">
		<LastChanged>2012-07-19T14:19:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource><![CDATA[super;
m_iTrxStatusEntered = ((TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE)).getTrxStatusID(TransactionType.ACCTREC, Mco.MCO_FILE, Mco.ENTERED);
((TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE)).getTrxStatusID(TransactionType.ACCTREC, Mco.MCO_FILE, Mco.BATCH);
this.getMainRecord().addListener(new SubFileFilter(this.getRecord(TrxStatus.TRX_STATUS_FILE)));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.COUNT), false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.TOTAL), Mco.AMT_APPLY, false, true));

McoBatchDist recMcoBatchDist = (McoBatchDist)this.getRecord(McoBatchDist.MCO_BATCH_DIST_FILE);
recMcoBatchDist.addListener(new SubFileFilter(this.getRecord(Mco.MCO_FILE)));
recMcoBatchDist.addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), McoBatchDist.AMOUNT, false, true));

Mco recMco = (Mco)this.getRecord(Mco.MCO_FILE);

Booking recBooking = (Booking)((ReferenceField)recMco.getField(Mco.BOOKING_ID)).getReferenceRecord(this);
recMco.getField(Mco.BOOKING_ID).addListener(new ReadSecondaryHandler(recBooking, null, true, true, true));     // Update record
ArTrx recArTrx = (ArTrx)this.getRecord(ArTrx.AR_TRX_FILE);
recBooking.addArDetail(recArTrx, null, false);

recMco.close();
try   {   // Recount totals
    while (recMco.hasNext())
    {
        recMco.next();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1439">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1442">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource>return new Mco(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1443">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource><![CDATA[super;

new McoBatchDist(this);

new ArTrx(this);
new ArControl(this);

new TrxStatus(this);
new TransactionType(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1444">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1445">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(Mco.COMM_PER).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.MCO_COMM_PER)));
this.getMainRecord().getField(Mco.TAX_PER).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.MCO_TAX_PER)));
this.getMainRecord().getField(Mco.SVC_PER).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.MCO_SVC_PER)));
this.getMainRecord().getField(Mco.AIRLINE_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.AIRLINE_ID)));

((TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE)).getTrxStatusID(TransactionType.ACCTREC, Mco.MCO_FILE, Mco.BATCH);
this.getMainRecord().setKeyArea(Mco.TRX_STATUS_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getRecord(TrxStatus.TRX_STATUS_FILE)));

this.getMainRecord().getField(Mco.NET).setEnabled(false);

this.getMainRecord().addListener(new SubFileIntegrityHandler(McoBatchDist.class.getName(), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1446">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryScreen</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1447">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryScreen</MethodClassName>
		<LogicSource>return new Mco(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1448">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1449">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1450">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription>Calculate the MCO net amount</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitCalcNetBeh</MethodClassName>
		<LogicSource><![CDATA[super;
double dNet = 0;
Record recMco = this.getOwner();
double dGross = recMco.getField(Mco.GROSS).getValue();
double dCommission = recMco.getField(Mco.COMM_AMT).getValue();
double dTaxes = recMco.getField(Mco.TAX_AMT).getValue();
double dServiceChargePer = recMco.getRecordOwner().getScreenRecord().getField(McoScreenRecord.SERVICE_CHARGE).getValue();
double dServiceCharge = (Math.floor(dGross * dServiceChargePer * 100.00 + 0.5)) / 100.00;
dNet = dGross - dCommission - dTaxes - dServiceCharge;
recMco.getRecordOwner().getScreenRecord().getField(McoScreenRecord.NET).setValue(dNet);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1451">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1452">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1453">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitReport</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.AIRLINE_ID)));
this.getScreenRecord().getField(McoScreenRecord.SERVICE_CHARGE).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.MCO_SVC_PER)));

this.getMainRecord().setKeyArea(Mco.TRX_STATUS_ID_KEY);

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, Mco.MCO_FILE, Mco.ENTERED);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(McoScreenRecord.TOTAL_GROSS), Mco.GROSS, false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(McoScreenRecord.TOTAL_NET), Mco.NET, false, true));
this.getMainRecord().addListener(new McoSubmitCalcNetBeh(null));

this.getMainRecord().addListener(new CompareFileFilter(Mco.AIRLINE_ID, this.getScreenRecord().getField(McoScreenRecord.AIRLINE_ID), "=", null, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1454">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitReport</MethodClassName>
		<LogicSource>return new McoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1455">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitReport</MethodClassName>
		<LogicSource>return new McoSubmitToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1456">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitReport</MethodClassName>
		<LogicSource><![CDATA[if (McoSubmitToolbar.UPDATE_COMMAND.equalsIgnoreCase(strCommand))
	return this.onMcoSubmit();
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1457">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitReport</MethodClassName>
		<LogicSource>return new McoSubmitFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1458">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitReport</MethodClassName>
		<LogicSource>return new McoSubmitHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1459">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>onMcoSubmit</MethodName>
		<LogicDescription>Update the Mco Status to "Submitted"</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>McoSubmitReport</MethodClassName>
		<LogicSource><![CDATA[try	{
	TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
	Object bookmark = recTrxStatus.getHandle(DBConstants.DATA_SOURCE_HANDLE);
	int iTrxClassID = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, Mco.MCO_FILE, Mco.SUBMITTED);
	recTrxStatus.setHandle(bookmark, DBConstants.DATA_SOURCE_HANDLE);
	double dToday = DateTimeField.todaysDate();
	Record recMco = this.getMainRecord();

	// Make sure the A/R trx's status is in sync
	if (this.getMainRecord().getListener(SyncArTrxStatusHandler.class.getName()) == null)
		this.getMainRecord().addListener(new SyncArTrxStatusHandler(null));
            
	recMco.close();
	while (recMco.hasNext())
	{
		recMco.next();
		recMco.edit();
		recMco.getField(Mco.TRX_STATUS_ID).setValue(iTrxClassID);
		recMco.getField(Mco.CARRIER_SVC_PER).moveFieldToThis(this.getScreenRecord().getField(McoScreenRecord.SERVICE_CHARGE));
		recMco.getField(Mco.DATE_SUBMITTED).setValue(dToday);
		recMco.set();
	}
} catch (DBException ex)	{
	ex.printStackTrace();
	return false;
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1460">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitReport</MethodClassName>
		<LogicSource>return new Mco(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1461">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitReport</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1462">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1463">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoSubmitToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1464">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>mealOnThisDay</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>short day</MethodInterface>
		<MethodClassName>MealDays</MethodClassName>
		<LogicSource><![CDATA[int mealDays = (int)this.getValue();
if (mealDays == 0)
	return true;
mealDays = mealDays >> day;		// Shift the other days out
if (((mealDays >> 1) << 1) == mealDays)
	return true;	// bit set = meal on this day
if (mealDays == 0)
	return true;	// No meals after this = meal on this day
return false;		// bit = 0, meals after this = meal on this day]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1465">
		<LastChanged>2012-03-27T21:48:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MealDays</MethodClassName>
		<LogicSource><![CDATA[properties = new HashMap<String,Object>();
properties.put(ScreenModel.DISPLAY_STRING, DBConstants.BLANK);
ScreenComponent screenField = createScreenComponent(ScreenModel.STATIC_STRING, targetScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), targetScreen, null, 0, properties);
String strDisplay = converter.getFieldDesc();
if ((strDisplay != null) && (strDisplay.length() > 0))
{
    ScreenLoc descLocation = targetScreen.getNextLocation(ScreenConstants.FIELD_DESC, ScreenConstants.DONT_SET_ANCHOR);
    properties.put(ScreenModel.DISPLAY_STRING, strDisplay);
    createScreenComponent(ScreenModel.STATIC_STRING, descLocation, targetScreen, null, 0, properties);
}

for (short sBitPosition = 0; sBitPosition < 5; sBitPosition++)
{
    Converter dayConverter = new FieldDescConverter((Converter)converter, "+" + Short.toString(sBitPosition));
    dayConverter = new BitConverter(dayConverter, sBitPosition, false, true);
    ScreenLoc location = targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST_CHECKBOX, ScreenConstants.DONT_SET_ANCHOR);
    screenField = dayConverter.setupDefaultView(location, targetScreen, ScreenConstants.DISPLAY_FIELD_DESC);
}
return screenField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1466">
		<LastChanged>2012-02-02T22:44:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getMealDesc</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>BaseField fldMealPlanID, boolean bDetailedDesc</MethodInterface>
		<MethodClassName>MealPlan</MethodClassName>
		<LogicSource><![CDATA[String strMealDesc = Constants.BLANK;
if ((fldMealPlanID == null) || (fldMealPlanID.getLength() == 0))
	return strMealDesc;
this.getField(MealPlan.ID).moveFieldToThis(fldMealPlanID, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
try	{
	boolean bSuccess = this.seek("=");
	if (bSuccess)
	{
		String thisMealString = Constants.BLANK;
		if (bDetailedDesc)
			strMealDesc = this.getField(MealPlan.DESCRIPTION).getString();
		else
			strMealDesc = this.getField(MealPlan.CODE).getString();
		if (strMealDesc.length() == 0)
		{
			if (this.getField(MealPlan.BREAKFAST).getState())
			{
				if (bDetailedDesc)
					strMealDesc += "Breakfast";
				else
					strMealDesc += "B";
			}
			if (this.getField(MealPlan.LUNCH).getState())
			{
				if (bDetailedDesc)
					strMealDesc += "Lunch";
				else
					strMealDesc += "L";
			}
			if (this.getField(MealPlan.DINNER).getState())
			{
				if (bDetailedDesc)
					strMealDesc += "Dinner";
				else
					strMealDesc += "D";
			}
		}
	}
} catch (DBException e)	{
	System.out.println(e.getMessage());
	e.printStackTrace();
}
return strMealDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1467">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MealPlanField</MethodClassName>
		<LogicSource>return new MealPlan(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1468">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MealPlanField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), MealPlan.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1469">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MealPlanGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1470">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MealPlanScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1471">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MEmpAddress</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1472">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MEmpDedEarn</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1473">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MEmpSalary</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1474">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MEmpTaxDis</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1475">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MEmpTaxes</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1476">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenuList</MethodClassName>
		<LogicSource><![CDATA[Record pScreenQuery = this.getScreenRecord();
Record pMainQuery = this.getMainRecord();
pMainQuery.setKeyArea(kMenuSubMenuIDKey);
pMainQuery.addListener(new SubFileFilter(pScreenQuery.getField(kCurrentMenu), MENU_SUB_MENU_ID));
if (m_strInitialMenu.IsEmpty())
	m_strInitialMenu = "Menu";
pScreenQuery.getField(kCurrentMenu) = m_strInitialMenu;

pScreenQuery.getField(kMenuTitle).addListener(new ChangeTitleOnChangeHandler(true));
pScreenQuery.getField(kMenuTitle) = m_strInitialMenu;

pScreenQuery.getField(kMenuHistory) = m_strInitialMenu + "~Menu";	// Name/Type
pScreenQuery.getField(kMenuFormat).addListener(new RegisterValueHandler(null));
int nCommandID = (int)pScreenQuery.getField(kMenuFormat).getValue();
if (nCommandID != ID_LYNX_ICON)
	this.OnCommand(nCommandID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1477">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenuList</MethodClassName>
		<LogicSource>return new MenuVariables(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1478">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>changeScreen</MethodName>
		<LogicDescription>Change to a new menu screen</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strType, String strName, String strDesc, boolean bMakeNewWindow</MethodInterface>
		<MethodClassName>MenuList</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = false;
if (strType == "Program")
{
	bMakeNewWindow = true;	// *TEMP* Not tested
	bSuccess = this.ShowProgram(strName, bMakeNewWindow);
}
if (strType == "File")
	bSuccess = this.ShowFile(strName, bMakeNewWindow);
if (strType == "Menu")
	bSuccess = this.ShowMenu(strName, bMakeNewWindow);
if (bSuccess) if (strType != "Program")
{
	Record pScreenQuery = this.getScreenRecord();
	StringFieldHelper cHelper(pScreenQuery.getField(kMenuTitle), "\\", "-");
	cHelper.AddRecord(strDesc);	// Add menu name
	StringFieldHelper cHelperHist(pScreenQuery.getField(kMenuHistory), "\\", "~");
	cHelperHist.AddRecord(strName, strType);
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1479">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenuList</MethodClassName>
		<LogicSource><![CDATA[return super;
/* HACK
if (nCommandID != ID_LYNX_UP)
{
	CSListCtrl.OnCommand(nCommandID);
	if ((nCommandID == ID_LYNX_ICON) ||
		(nCommandID == ID_LYNX_SMALLICON) ||
		(nCommandID == ID_LYNX_LIST) ||
		(nCommandID == ID_LYNX_REPORT))
			this.getScreenRecord().getField(kMenuFormat).setValue(nCommandID);
}
else
{	// Handle the "Up Menu" command
	String strDesc, strKey, strName;
	Record pTable = this.getGridRecord();
	Record pScreenQuery = this.getScreenRecord();
	if (!pTable)
		return;
	StringFieldHelper cHelper(pScreenQuery.getField(kMenuTitle), "\\", "-");
	strKey.Empty();
	if (cHelper.Find(strKey) == 0)
		return;		// Already at the top
	strDesc = cHelper.FindRecord(strKey);	// Get last key/desc
	cHelper.DeleteRecord(strKey);
	strKey.Empty();
	strDesc = cHelper.FindRecord(strKey);	// Get last key/desc
	cHelper.DeleteRecord(strKey);
	strDesc = strKey;

	StringFieldHelper cHelperHist(pScreenQuery.getField(kMenuHistory), "\\", "~");
	strName.Empty();
	cHelperHist.DeleteRecord(strName);
	strName.Empty();
	strKey = cHelperHist.FindRecord(strName);	// Get last type/desc
	cHelperHist.DeleteRecord(strName);
	if (strKey == "File")
	{
		StringFieldHelper cFilterHelper(pScreenQuery.getField(kMenuFilter), ",", "=");
		String strFile = strName;
		cFilterHelper.DeleteRecord(strFile);
	}
	this.ChangeScreen(strKey, strName, strDesc);
}
*/]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1480">
		<LastChanged>2011-08-06T00:00:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doRecordSelected</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenuList</MethodClassName>
		<LogicSource><![CDATA[String strType, strName, strDesc, strKey;
Record pScreenQuery = this.getScreenRecord();
Record pQueryCore = this.getGridRecord();
// Now, find out if this is a folder or an item
Record pBaseTable = this.getGridRecord().GetBaseRecord();
String strBaseTableName = pBaseTable.GetTableNames(false);
if (strBaseTableName == kszMenuTableFile)
{
	strType = pBaseTable.getField(kType);
	strName = pBaseTable.getField(kProgram);
	strDesc = pBaseTable.getField(kDescription);
	this.ChangeScreen(strType, strName, strDesc);
}
else
{	// Another file is current, Get the record and go to the main menu
	pQueryCore = this.getGridRecord();
	//ASSERT(pQueryCore != null);
	strName = pQueryCore.GetTableNames(false);
	strKey = pBaseTable.getField(DBConstants.MAIN_FIELD).getString();
	strDesc = pBaseTable.getField(DBConstants.MAIN_FIELD+1).getString();
	strType = "Menu";

	StringFieldHelper cFilterHelper(pScreenQuery.getField(kMenuFilter), ",", "=");
	cFilterHelper.AddRecord(strName, strKey);
	this.ChangeScreen(strType, strName, strDesc);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1481">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>MenuList</MethodName>
		<LogicDescription>Initialize MenuList Class</LogicDescription>
		<MethodReturns>pMainQuery</MethodReturns>
		<MethodInterface>Record pMainQuery, char szInitialMenu</MethodInterface>
		<MethodClassName>MenuList</MethodClassName>
		<LogicSource><![CDATA[m_Style = WS_TABSTOP | LVS_ICON;
if (szInitialMenu != null)
	m_strInitialMenu = szInitialMenu;
else
	m_strInitialMenu.Empty();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1482">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenuList</MethodClassName>
		<LogicSource>return new Menus(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1483">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenuList</MethodClassName>
		<LogicSource>this.addColumn(this.getMainRecord().getField(kDescription));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1484">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>showFile</MethodName>
		<LogicDescription>Change to display this file</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strName, boolean bMakeNewWindow</MethodInterface>
		<MethodClassName>MenuList</MethodClassName>
		<LogicSource><![CDATA[Record pQueryCore = this.getGridRecord();
Record pQueryNew = null;
Record pScreenQuery = this.getScreenRecord();
StringFieldHelper cFilterHelper(pScreenQuery.getField(kMenuFilter), ",", "=");
String strFile;
if (strName == "Airline")
	pQueryNew = new Airline(this);
if (strName == "Brochure")
	pQueryNew = new Item(this);
if (strName == "Country")
{
	pQueryNew = new Country(this);
	strFile = "Region";
	if (cFilterHelper.Find(strFile) != -1)
	{
		String strTarget = cFilterHelper.FindRecord(strFile);
		pQueryNew.addListener(new CompareFileFilter(kSalesRegionID, strTarget));
	}
}
if (strName == "City")
{
	pQueryNew = new City(this);
	strFile = "Country";
	if (cFilterHelper.Find(strFile) != -1)
	{
		String strTarget = cFilterHelper.FindRecord(strFile);
		pQueryNew.addListener(new CompareFileFilter(kCountryCode, strTarget));
	}
}
if (strName == "Product Category")
	pQueryNew = new ProductCategory(this);
if (strName == "Region")
	pQueryNew = new Region(this);
if (strName == "Tour Type Record")
	pQueryNew = new TourType(this);
if (strName == "Product Type Record")
	pQueryNew = new ProductType(this);
if (pQueryNew == null)
{
	pQueryNew = ((LynxApp)AfxGetApp()).MakeNewFile(strName);
	if (pQueryNew)
		this.addRecord(pQueryNew);
}
if (pQueryNew == null)
	return false;	// No new file
if (pQueryCore)
	delete pQueryCore;
this.addColumn(this.getMainRecord().getField(DBConstants.MAIN_FIELD+1));
pScreenQuery.getField(kCurrentMenu) = strName;
this.SelectRecords();
return true;		// Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1485">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>showMenu</MethodName>
		<LogicDescription>Display this sub-menu</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strName, boolean bMakeNewWindow</MethodInterface>
		<MethodClassName>MenuList</MethodClassName>
		<LogicSource><![CDATA[Record pScreenQuery = this.getScreenRecord();
Record pQueryCore = this.getGridRecord();

if (bMakeNewWindow)
{
	BaseScreen pScreen = null;
	char szStartMenu = strName.getBuffer(strName.getLength());
	pScreen = new MenuList(null, szStartMenu);
	((LynxApp)AfxGetApp()).makeNewWindow(pScreen);
	return false;	// Don't move down in the menu
}

if (pQueryCore) if (pQueryCore.GetTableNames(false) != "Menu")
{
	delete pQueryCore;	// Close up the current table
	Menus pMenuTable = new Menus(this);	// and re-open the menu
	pMenuTable.setKeyArea(kMenuSubMenuIDKey);
	pMenuTable.addListener(new SubFileFilter(pScreenQuery.getField(kCurrentMenu), MENU_SUB_MENU_ID));
	this.addColumn(this.getMainRecord().getField(DBConstants.MAIN_FIELD+1));
}
pScreenQuery.getField(kCurrentMenu) = strName;
this.SelectRecords();
return true;		// Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1486">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>showProgram</MethodName>
		<LogicDescription>Run this program (Change to shared code)</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strName, boolean bMakeNewWindow</MethodInterface>
		<MethodClassName>MenuList</MethodClassName>
		<LogicSource><![CDATA[BaseScreen pScreen = null;
Record pScreenQuery = this.getScreenRecord();
String strFilter = pScreenQuery.getField(kMenuFilter);
char szFilter = null;
if (!strFilter.IsEmpty())
	szFilter = strFilter.getBuffer(strFilter.getLength());
if (strName == "Booking Display")
	pScreen = new CDQuery(null, QUERY_BK_DISPLAY_CUR, szFilter);
if (strName == "Tour Header Display")
	pScreen = new CDQuery(null, QUERY_TOUR_HDR_DISPLAY, szFilter);
if (strName == "Tour Display")
	pScreen = new CDQuery(null, QUERY_TOUR_DISPLAY, szFilter);
if (strName == "Booking Entry")
	pScreen = new CMBkBooking(null);
if (strName == "Product Tree")
	pScreen = new CDProductTree(null);
if (strName == "DProductList")
	pScreen = new CDProductList(null, szFilter);
if (pScreen == null)
	pScreen = ((LynxApp)AfxGetApp()).MakeNewScreen(strName);
if (pScreen == null)
	return false;
if (bMakeNewWindow)
{
	((LynxApp)AfxGetApp()).makeNewWindow(pScreen);
	return false;	// Don't re-display this menu
}
else
{
	BaseScreen currentSubScreen = this.GetParentScreen();	// Sub-screen of this field's screen
	LynxView view = (LynxView)currentSubScreen.GetTheControl();
	LynxChildWnd mdiChild = (LynxChildWnd)view.GetParentFrame();
	mdiChild.SwitchSubScreen(pScreen, currentSubScreen);
	return true;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1491">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ModifyCodeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = ModifyCodeField.ADD;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1498">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1499">
		<LastChanged>2012-02-01T15:21:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().setKeyArea(TicketTrx.VENDOR_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(OverrideScreenRecord.VENDOR_ID), TicketTrx.VENDOR_ID, null, null, null, null, true));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.START_SERVICE_DATE), this.getScreenRecord().getField(OverrideScreenRecord.START_DEPARTURE), ">="));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.START_SERVICE_DATE), this.getScreenRecord().getField(OverrideScreenRecord.END_DEPARTURE), "<="));

this.getScreenRecord().getField(OverrideScreenRecord.VENDOR_ID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(OverrideScreenRecord.START_DEPARTURE).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(OverrideScreenRecord.END_DEPARTURE).addListener(new FieldReSelectHandler(this));

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
int iOverrideStatus = recTrxStatus.getTrxStatusID(TransactionType.AIR, TicketTrx.TICKET_TRX_FILE, TicketTrx.OVER_RIDE_PAID);  // Remember, TrxStatus may be used by UpdateOverrideAcctDetailHandler
this.getMainRecord().getField(TicketTrx.OVERRIDE_PAID).addListener(new CopyDataHandler(this.getMainRecord().getField(TicketTrx.TRX_STATUS_ID), Integer.toString(iOverrideStatus), null));

this.getMainRecord().addListener(new DateChangedHandler(TicketTrx.OVERRIDE_PAID_DATE));
this.getMainRecord().addListener(new UpdateOverrideAcctDetailHandler(null));

this.setEnabled(false);
this.getMainRecord().getField(TicketTrx.OVERRIDE_PAID).setEnabled(true);
this.setAppending(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1500">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideGridScreen</MethodClassName>
		<LogicSource>return new OverrideScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1501">
		<LastChanged>2012-02-01T08:08:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideGridScreen</MethodClassName>
		<LogicSource><![CDATA[this.getScreenRecord().getField(OverrideScreenRecord.VENDOR_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(OverrideScreenRecord.START_DEPARTURE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(OverrideScreenRecord.END_DEPARTURE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1502">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.FORM)) || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
	return (this.onForm(null, TicketTrx.OVERRIDE_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1503">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideGridScreen</MethodClassName>
		<LogicSource>return new TicketTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1504">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ApControl(this);
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1505">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1506">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1507">
		<LastChanged>2012-02-01T15:23:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideReport</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(TicketTrx.VENDOR_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(OverrideScreenRecord.VENDOR_ID), TicketTrx.VENDOR_ID, null, null, null, null));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.START_SERVICE_DATE), this.getScreenRecord().getField(OverrideScreenRecord.START_DEPARTURE), ">="));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.START_SERVICE_DATE), this.getScreenRecord().getField(OverrideScreenRecord.END_DEPARTURE), "<="));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.OVERRIDE_PAID_DATE), this.getScreenRecord().getField(OverrideScreenRecord.OVERRIDE_PAID_DATE), DBConstants.EQUALS, null, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1508">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideReport</MethodClassName>
		<LogicSource>return new OverrideScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1509">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideReport</MethodClassName>
		<LogicSource>return new OverrideToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1510">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideReport</MethodClassName>
		<LogicSource>return new OverrideFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1511">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideReport</MethodClassName>
		<LogicSource>return new OverrideHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1512">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideReport</MethodClassName>
		<LogicSource>return new TicketTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1513">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideReport</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1514">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1515">
		<LastChanged>2012-02-01T04:29:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEnabled(false);
this.getMainRecord().getField(TicketTrx.OVERRIDE_PAID).setEnabled(true);

this.getMainRecord().setKeyArea(TicketTrx.VENDOR_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(OverrideScreenRecord.VENDOR_ID), TicketTrx.VENDOR_ID, null, null, null, null));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.START_SERVICE_DATE), this.getScreenRecord().getField(OverrideScreenRecord.START_DEPARTURE), ">="));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.START_SERVICE_DATE), this.getScreenRecord().getField(OverrideScreenRecord.END_DEPARTURE), "<="));

this.getMainRecord().addListener(new DateChangedHandler(TicketTrx.OVERRIDE_PAID_DATE));
this.getMainRecord().addListener(new UpdateOverrideAcctDetailHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1516">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideScreen</MethodClassName>
		<LogicSource>return new OverrideScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1517">
		<LastChanged>2012-02-01T04:27:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideScreen</MethodClassName>
		<LogicSource><![CDATA[this.getScreenRecord().getField(OverrideScreenRecord.AIRLINE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(OverrideScreenRecord.START_DEPARTURE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(OverrideScreenRecord.END_DEPARTURE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1518">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, TicketTrx.OVERRIDE_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1519">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideScreen</MethodClassName>
		<LogicSource>return new TicketTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1520">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ApControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1521">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1522">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverrideToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1523">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaxDetailSelectHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
	return iErrorCode;
if (iChangeType == DBConstants.SELECT_TYPE)
	m_recBookingPax.movePaPaxDetail(m_recProfile);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1524">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PaxDetailSelectHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BookingPax recBookingPax, Profile recProfile</MethodInterface>
		<MethodClassName>PaxDetailSelectHandler</MethodClassName>
		<LogicSource><![CDATA[m_recBookingPax = recBookingPax;
m_recProfile = recProfile;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1525">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaPaxSelectHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super.doRecordChange(field, iChangeType, bDisplayOption);
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
if (iChangeType == DBConstants.SELECT_TYPE)
{
    Object bookmarkCurrent = m_recProfile.getField(Profile.ID).getData();
    Object bookmarkMain = bookmarkCurrent;
    if (m_recProfile.getField(Profile.MAIN_PROFILE_ID).getValue() != 0)
        if (!m_recProfile.getField(Profile.MAIN_PROFILE_ID).equals(m_recProfile.getField(Profile.ID)))
    {   // If this belongs to a detail profile, then read the main profile!
        bookmarkMain = m_recProfile.getField(Profile.MAIN_PROFILE_ID).getData();
        try {
            if (m_recProfile.setHandle(bookmarkMain, DBConstants.BOOKMARK_HANDLE) == null)
            {       // If the main does not exist, make one up.
                m_recProfile.addNew();
                m_recProfile.getField(Profile.ID).setData(bookmarkCurrent);
            }
        } catch (DBException ex) {
            ex.printStackTrace();
        }
    }
    m_recBookingPax.addPaPax(m_recProfile, m_recProfileDetail);
    RecordOwner screen = m_recBookingPax.getRecordOwner();
    if (screen instanceof GridScreen)
       ((GridScreen)screen).reSelectRecords();      // Redisplay
    Booking recBooking = (Booking)((ReferenceField)m_recBookingPax.getField(BookingPax.BOOKING_ID)).getReferenceRecord();
    if (recBooking != null)
        if (recBooking.getEditMode() != DBConstants.EDIT_NONE)
            if (recBooking.getField(Booking.PROFILE_ID).isNull())
    {   // Set the agency screen to the main profile.
        Profile recProfile = new Profile(this.getOwner().findRecordOwner());
        try {
            recBooking.addSecondProfile(recProfile);    // Agency Secondary logic
            recProfile.setHandle(bookmarkMain, DBConstants.BOOKMARK_HANDLE);
        } catch (DBException ex) {
            ex.printStackTrace();
        } finally {
            recProfile.free();  // This also releases all the listeners.
        }
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1526">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PaPaxSelectHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BookingPax recBookingPax, Record recProfile, Record recProfileDetail</MethodInterface>
		<MethodClassName>PaPaxSelectHandler</MethodClassName>
		<LogicSource><![CDATA[m_recBookingPax = recBookingPax;
m_recProfile = recProfile;
m_recProfileDetail = recProfileDetail;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1527">
		<LastChanged>2020-03-02T19:59:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doLocalCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recPastDue.getField(PastDueScreenRecord.CHECK_DEP).getState() == true)
{	// Check for deposit past due
	if (this.getOwner().getField(Booking.DEPOSIT_DUE_DATE).compareTo(m_recPastDue.getField(PastDueScreenRecord.AS_OF_DATE)) < 0)
	{	// Deposit date in range
		// count it!
		double dNet = this.getOwner().getField(Booking.NET).getValue();
		double dBalance = this.getOwner().getField(Booking.BALANCE).getValue();
		double dAmountPaid = dNet - dBalance;

		double dDepositAmt = this.getOwner().getField(Booking.DEPOSIT).getValue();
		if (m_recPastDue.getField(PastDueScreenRecord.MCO_PER).getValue() > 0)
		{
			if (dAmountPaid < dDepositAmt)
				if (m_recPastDue.getField(PastDueScreenRecord.MCO_AMOUNT_PAID).getValue() < (dDepositAmt * (1.0 - m_recPastDue.getField(PastDueScreenRecord.MCO_PER).getValue())))
					return super.doLocalCriteria(strbFilter, bIncludeFileName, vParamList, doc);		// Deposit not paid, print record
		}
		else
			if (dAmountPaid < dDepositAmt)
				return super.doLocalCriteria(strbFilter, bIncludeFileName, vParamList, doc);		// Deposit not paid, print record
	}
}
if (m_recPastDue.getField(PastDueScreenRecord.CHECK_FINAL).getState() == true)
{	// Check for final pay past due
	if (this.getOwner().getField(Booking.FINAL_PAYMENT_DUE_DATE).compareTo(m_recPastDue.getField(PastDueScreenRecord.AS_OF_DATE)) < 0)
	{	// Deposit date in range
		double dBalance = this.getOwner().getField(Booking.BALANCE).getValue();
		if (dBalance > 0)
			return super.doLocalCriteria(strbFilter, bIncludeFileName, vParamList, doc); // Not fully paid, print it
	}
}
return false;		// Skip this record]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1528">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PastDueHandler</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Record recPastDue</MethodInterface>
		<MethodClassName>PastDueHandler</MethodClassName>
		<LogicSource>m_recPastDue = recPastDue;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1529">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1530">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1531">
		<LastChanged>2012-02-01T08:24:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueReport</MethodClassName>
		<LogicSource><![CDATA[super;

this.getScreenRecord().getField(PastDueScreenRecord.MCO_PER).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.MCO_COMM_PER)));

this.getMainRecord().setKeyArea(Booking.BOOKING_DATE_KEY);
SubFileFilter listener = new SubFileFilter(this.getScreenRecord().getField(PastDueScreenRecord.AS_OF_DATE), Booking.BOOKING_DATE, null, null, null, null);
listener.setInitialKey(false);		// Search all bookings up to this booking date
this.getMainRecord().addListener(listener);
this.getMainRecord().addListener(new PastDueHandler(this.getScreenRecord()));

this.getMainRecord().getField(Booking.TOUR_ID).addListener(new ReadSecondaryHandler(this.getRecord(Tour.TOUR_FILE)));
this.getRecord(Tour.TOUR_FILE).getField(Tour.TOUR_HEADER_ID).addListener(new ReadSecondaryHandler(this.getRecord(TourHeader.TOUR_HEADER_FILE)));

Record recArTrx = this.getRecord(ArTrx.AR_TRX_FILE);
Record recBooking = this.getRecord(Booking.BOOKING_FILE);
Record recBookingLine = this.getRecord(BookingLine.BOOKING_LINE_FILE);

recArTrx.addListener(new SubFileFilter(recBooking));
recBooking.addListener(new RecountOnValidHandler(recArTrx));
recArTrx.addListener(new SubCountHandler(recBooking.getField(Booking.BALANCE), ArTrx.AMOUNT, true, true));
recArTrx.addListener(new CountMcoAmountHandler(this.getScreenRecord().getField(PastDueScreenRecord.MCO_AMOUNT_PAID), ArTrx.AMOUNT, true, true));

recBookingLine.addListener(new SubFileFilter(recBooking));
recBooking.addListener(new RecountOnValidHandler(recBookingLine));
recBookingLine.addListener(new SubCountHandler(recBooking.getField(Booking.GROSS), BookingLine.GROSS, true, true));
recBookingLine.addListener(new SubCountHandler(recBooking.getField(Booking.NET), BookingLine.NET, true, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1532">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueReport</MethodClassName>
		<LogicSource>return new PastDueScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1533">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueReport</MethodClassName>
		<LogicSource>return new PastDueToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1534">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueReport</MethodClassName>
		<LogicSource>return new PastDueFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1535">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueReport</MethodClassName>
		<LogicSource>return new PastDueHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1536">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueReport</MethodClassName>
		<LogicSource>return new Booking(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1537">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueReport</MethodClassName>
		<LogicSource><![CDATA[super;
new Tour(this);
new TourHeader(this);
new ArTrx(this);
new BookingLine(this);
new ArControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1538">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1539">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1540">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaxCategoryField</MethodClassName>
		<LogicSource>return new PaxCategory(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1541">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaxCategoryField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), PaxCategory.DESCRIPTION, false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1552">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaxSelectHandler</MethodClassName>
		<LogicSource><![CDATA[super;
m_sOldPaxType = 0;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1553">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaxSelectHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;      // Initialize the record
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
Record booking = m_fldMain.getRecord();
boolean[] rgbEnabled = null;
int iProxyChangeType = iChangeType;
if (iChangeType == DBConstants.MOVE_NEXT_TYPE)
{
    rgbEnabled = m_fldMain.setEnableListeners(false);
    if (m_bRecountOnSelect) if (m_bVerifyOnEOF)
        iProxyChangeType = DBConstants.AFTER_ADD_TYPE;
}
if (m_sOldPaxType != 0) if ((iProxyChangeType == DBConstants.AFTER_DELETE_TYPE) || (iProxyChangeType == DBConstants.AFTER_UPDATE_TYPE))
{
    double dPaxTypeCount = ((NumberField)booking.getField((int)(booking.getFieldSeq(Booking.SINGLE_PAX) + m_sOldPaxType-1))).getValue();
    dPaxTypeCount--;
    iErrorCode = this.setFieldCount(booking.getFieldSeq(Booking.SINGLE_PAX) + m_sOldPaxType - 1, dPaxTypeCount, true);
}
if ((iProxyChangeType == DBConstants.AFTER_ADD_TYPE) || (iProxyChangeType == DBConstants.AFTER_UPDATE_TYPE))
{
    if (this.getOwner().getField(BookingPax.PAX_CATEGORY_ID).compareTo(m_recPaxCategory.getField(PaxCategory.ID)) != 0)
    {
        m_recPaxCategory.getField(PaxCategory.ID).moveFieldToThis(this.getOwner().getField(BookingPax.PAX_CATEGORY_ID));
        try   {
            int iOldOrder = m_recPaxCategory.getDefaultOrder();
            m_recPaxCategory.setKeyArea(PaxCategory.ID_KEY);
            m_recPaxCategory.seek(DBConstants.EQUALS);
            m_recPaxCategory.setKeyArea(iOldOrder);
        } catch (DBException ex)   {
            ex.printStackTrace();
        }
    }
    short sNewPaxType = (short)((NumberField)m_recPaxCategory.getField(PaxCategory.ROOM_TYPE)).getValue();   // This is a valid pax
    if (sNewPaxType != 0) 
    {
        double dPaxTypeCount = ((NumberField)booking.getField(booking.getFieldSeq(Booking.SINGLE_PAX) + sNewPaxType - 1)).getValue();
        dPaxTypeCount++;
        iErrorCode = this.setFieldCount(booking.getFieldSeq(Booking.SINGLE_PAX) + sNewPaxType - 1, dPaxTypeCount, true);
    }
}
if ((iChangeType == DBConstants.AFTER_DELETE_TYPE) || (iChangeType == DBConstants.AFTER_ADD_TYPE) || (iChangeType == DBConstants.AFTER_UPDATE_TYPE))
{
    Booking recBooking = (Booking)((ReferenceField)((BookingPax)this.getOwner()).getField(BookingPax.BOOKING_ID)).getReference();
    Tour recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
    BookingLine recBookingLine = new BookingLine(recBooking.findRecordOwner());
    recBookingLine.addDetailBehaviors(recBooking, recTour);
    iErrorCode = recBookingLine.deleteAllDetail(recBooking, null, null, null);
    iErrorCode = recBooking.addBookingDetailPricing(recTour, recBookingLine, null, null, true); // Recost all, fix all prices
    recBookingLine.free();
}
if (iChangeType ==  DBConstants.AFTER_REQUERY_TYPE)
{
    if ((m_bRecountOnSelect) || (m_bResetOnBreak))
    {   // Special case - reset count event though the record is current
        iErrorCode = this.resetCount(); // Set in main file's field
    }
}
if (rgbEnabled != null)
    m_fldMain.setEnableListeners(rgbEnabled);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1554">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaxSelectHandler</MethodClassName>
		<LogicSource><![CDATA[super;        // Initialize the record
if (this.getOwner().getField(BookingPax.PAX_CATEGORY_ID).compareTo(m_recPaxCategory.getField(PaxCategory.ID)) != 0)
{
    m_recPaxCategory.getField(PaxCategory.ID).moveFieldToThis(this.getOwner().getField(BookingPax.PAX_CATEGORY_ID));
    try   {
        int iOldOrder = m_recPaxCategory.getDefaultOrder();
        m_recPaxCategory.setKeyArea(PaxCategory.ID_KEY);
        m_recPaxCategory.seek(DBConstants.EQUALS);
        m_recPaxCategory.setKeyArea(iOldOrder);
    } catch (DBException ex)   {
        ex.printStackTrace();
    }
}
m_sOldPaxType = (short)m_recPaxCategory.getField(PaxCategory.ROOM_TYPE).getValue();        // This is a valid pax]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1555">
		<LastChanged>2012-02-03T19:54:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PaxSelectHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null, record, Booking.PAX, null, null, true, true, false</MethodReturns>
		<MethodInterface>Record record, Record recPaxCategory</MethodInterface>
		<MethodClassName>PaxSelectHandler</MethodClassName>
		<LogicSource>m_recPaxCategory = recPaxCategory;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1559">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PayAtField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = PayAtField.FINAL_PAY_DATE;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1561">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentCodeField</MethodClassName>
		<LogicSource>return new PaymentCode(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1562">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentCodeField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1563">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentCycleField</MethodClassName>
		<LogicSource>return new PaymentCycle(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1564">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentCycleField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1565">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SCF</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(SCF.SCF_FROM).addListener(new ScfToHandler(null));
this.getField(SCF.SCF_FROM).addListener(new ScfFromHandler(null));
this.getField(SCF.SCF_TO).addListener(new ScfToHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1566">
		<LastChanged>2012-03-27T12:37:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequest</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == PaymentRequest.PRINT_CHECK_SCREEN)
    screen = Record.makeNewScreen(PRINT_CHECK_JOURNAL_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == PaymentRequest.CHECK_POST)
    screen = Record.makeNewScreen(PRINT_CHECK_POST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(PAYMENT_REQUEST_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(PAYMENT_REQUEST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1568">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
((ReferenceField)this.getScreenRecord().getField(PaymentRequestScreenRecord.BANK_ACCT_ID)).makeReferenceRecord(this);  // Make sure this record is referenced
this.getScreenRecord().getField(PaymentRequestScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.AP_BANK_ACCT_ID)));

this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));
this.getScreenRecord().getField(PaymentRequestScreenRecord.BANK_ACCT_ID).addListener(new FieldReSelectHandler(this));
FieldListener listener = new ReadSecondaryHandler(this.getHeaderRecord());
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getScreenRecord().getField(PaymentRequestScreenRecord.BANK_ACCT_ID).addListener(listener);

((ReferenceField)this.getMainRecord().getField(PaymentRequest.VENDOR_ID)).makeReferenceRecord(this);  // Make sure this record is referenced

// This code does the selection count to determine the default value.
Record recVendor = new Vendor(this);
listener = new ReadSecondaryHandler(recVendor);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getMainRecord().getField(PaymentRequest.VENDOR_ID).addListener(listener);

this.getMainRecord().getField(PaymentRequest.VENDOR_ID).addListener(new CheckVendorCurrency(Vendor.CURRENCYS_ID, this.getHeaderRecord().getField(BankAcct.CURRENCY_ID)));

recVendor.addListener(new RecountOnValidHandler(this.getRecord(ApTrx.AP_TRX_FILE)));
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubFileFilter(recVendor));
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubCountHandler(this.getRecord(PaymentRequest.PAYMENT_REQUEST_FILE).getField(PaymentRequest.AMOUNT), ApTrx.AMOUNT_SELECTED, false, true));

this.getRecord(PaymentRequest.PAYMENT_REQUEST_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(PaymentRequestScreenRecord.REQUEST_TOTAL), PaymentRequest.AMOUNT, false, true));

this.getScreenRecord().getField(PaymentRequestScreenRecord.MANUAL_CHECKS).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(PaymentRequest.CHECK_NO), BooleanField.YES, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1569">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestGridScreen</MethodClassName>
		<LogicSource>return new PaymentRequestScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1570">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString("Print checks"), MenuConstants.PRINT, MenuConstants.PRINT, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString("Generalized selection"), MenuConstants.SELECT, MenuConstants.SELECT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1571">
		<LastChanged>2012-01-31T10:43:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseField fldBankAcctID = this.getScreenRecord().getField(PaymentRequestScreenRecord.BANK_ACCT_ID);
if (strCommand.equalsIgnoreCase(MenuConstants.PRINT))
{
    strCommand = Utility.addURLParam(null, DBParams.SCREEN, PrintCheckJournal.class.getName());
    strCommand = Utility.addURLParam(strCommand, fldBankAcctID.getFieldName(), fldBankAcctID.getData().toString());
}
else if (strCommand.equalsIgnoreCase(MenuConstants.SELECT))
{
    strCommand = Utility.addURLParam(null, DBParams.SCREEN, GenPaymentSelect.class.getName());
    strCommand = Utility.addURLParam(strCommand, fldBankAcctID.getFieldName(), fldBankAcctID.toString());
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1572">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestGridScreen</MethodClassName>
		<LogicSource>return new BankAcct(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1573">
		<LastChanged>2012-01-23T08:57:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestGridScreen</MethodClassName>
		<LogicSource>return new PaymentRequestHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1574">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestGridScreen</MethodClassName>
		<LogicSource>return new PaymentRequest(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1575">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ApControl(this);
new ApTrx(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1576">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1577">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1578">
		<LastChanged>2012-01-31T10:43:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestScreen</MethodClassName>
		<LogicSource><![CDATA[super;
((ReferenceField)this.getScreenRecord().getField(PaymentRequestScreenRecord.BANK_ACCT_ID)).makeReferenceRecord(this);  // Make sure this record is referenced
this.getScreenRecord().getField(PaymentRequestScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.AP_BANK_ACCT_ID)));

this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));
FieldListener listener = new ReadSecondaryHandler(this.getHeaderRecord());
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getScreenRecord().getField(PaymentRequestScreenRecord.BANK_ACCT_ID).addListener(listener);

((ReferenceField)this.getMainRecord().getField(PaymentRequest.VENDOR_ID)).makeReferenceRecord(this);  // Make sure this record is referenced

// This code does the selection count to determine the default value.
Record recVendor = new Vendor(this);
listener = new ReadSecondaryHandler(recVendor);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getMainRecord().getField(PaymentRequest.VENDOR_ID).addListener(listener);

this.getMainRecord().getField(PaymentRequest.VENDOR_ID).addListener(new CheckVendorCurrency(Vendor.CURRENCYS_ID, this.getHeaderRecord().getField(BankAcct.CURRENCY_ID)));

recVendor.addListener(new RecountOnValidHandler(this.getRecord(ApTrx.AP_TRX_FILE)));
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubFileFilter(recVendor));
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubCountHandler(this.getRecord(PaymentRequest.PAYMENT_REQUEST_FILE).getField(PaymentRequest.AMOUNT), ApTrx.AMOUNT_SELECTED, false, true));

this.getRecord(PaymentRequest.PAYMENT_REQUEST_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(PaymentRequestScreenRecord.REQUEST_TOTAL), PaymentRequest.AMOUNT, false, true));

this.getScreenRecord().getField(PaymentRequestScreenRecord.MANUAL_CHECKS).setState(true);	// Allow manual check entry
this.getScreenRecord().getField(PaymentRequestScreenRecord.MANUAL_CHECKS).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(PaymentRequest.CHECK_NO), BooleanField.NO, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1579">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestScreen</MethodClassName>
		<LogicSource>return new PaymentRequestScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1580">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString("Print checks"), MenuConstants.PRINT, MenuConstants.PRINT, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString("Generalized selection"), MenuConstants.SELECT, MenuConstants.SELECT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1581">
		<LastChanged>2012-01-31T10:43:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestScreen</MethodClassName>
		<LogicSource><![CDATA[BaseField fldBankAcctID = this.getScreenRecord().getField(PaymentRequestScreenRecord.BANK_ACCT_ID);
if (strCommand.equalsIgnoreCase(MenuConstants.PRINT))
{
    strCommand = Utility.addURLParam(null, DBParams.SCREEN, PrintCheckJournal.class.getName());
    strCommand = Utility.addURLParam(strCommand, fldBankAcctID.getFieldName(), fldBankAcctID.getData().toString());
}
else if (strCommand.equalsIgnoreCase(MenuConstants.SELECT))
{
    strCommand = Utility.addURLParam(null, DBParams.SCREEN, GenPaymentSelect.class.getName());
    strCommand = Utility.addURLParam(strCommand, fldBankAcctID.getFieldName(), fldBankAcctID.toString());
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1582">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestScreen</MethodClassName>
		<LogicSource>return new BankAcct(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1583">
		<LastChanged>2012-01-23T08:57:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestScreen</MethodClassName>
		<LogicSource>return new PaymentRequestHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1584">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestScreen</MethodClassName>
		<LogicSource>return new PaymentRequest(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1585">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ApControl(this);
new ApTrx(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1586">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1587">
		<LastChanged>2012-01-31T10:43:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getPeriodEndDate</MethodName>
		<LogicDescription>nding date for this target date</LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>Date targetDate</MethodInterface>
		<MethodClassName>Period</MethodClassName>
		<LogicSource><![CDATA[Date entryDate = null;
if (targetDate != null)
{
    if (targetDate.equals(m_lastEndTargetDate))
        return m_lastEndDate;
}
else
{
    if (m_lastEndTargetDate == null) if (m_lastEndDate != null)
        return m_lastEndDate;
}   
m_lastEndTargetDate = targetDate;

if ((targetDate == null) || (targetDate.getTime() == 0))
    targetDate = new Date();

//      criteria = "[EndPeriod] >= #" & targetDate & "# And [PeriodClosed] = 0"
try   {
    this.close();
// Move this field as a virtual field
    DateField fldDate = new DateField(null, "EndPeriod", DBConstants.DEFAULT_FIELD_LENGTH, "Period end", null);
    fldDate.setDateTime(targetDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
    FileListener behavior1 = new CompareFileFilter(Period.END_PERIOD, fldDate, ">=", null, false);
    FileListener behavior2 = new CompareFileFilter(Period.PERIOD_CLOSED, (String)null, "=", null, true);
    this.addListener(behavior1);
    this.addListener(behavior2);
    if (this.hasNext())
    {
        this.next();
        entryDate = ((DateField)this.getField(Period.END_PERIOD)).getDateTime();
    }
    else
    {   // Past last date, use last day of current month.
        entryDate = targetDate;
        Calendar calendar = DateTimeField.m_calendar;
        calendar.setTime(entryDate);
        int iMonth = calendar.get(Calendar.MONTH);
        if (iMonth == Calendar.DECEMBER)
        {
            calendar.set(Calendar.MONTH, Calendar.JANUARY);
            calendar.add(Calendar.YEAR, +1);
        }
        else
            calendar.add(Calendar.MONTH, +1);
        calendar.set(Calendar.DATE, 1);
        calendar.add(Calendar.DATE, -1);
        fldDate.setCalendar(calendar, DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
        entryDate = fldDate.getDateTime();
    }
    this.removeListener(behavior1, true);
    this.removeListener(behavior2, true);
    fldDate.free();
} catch (DBException ex)    {
    entryDate = targetDate;
}

m_lastEndDate = entryDate;

return entryDate;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1588">
		<LastChanged>2012-01-31T10:43:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getPeriodStartDate</MethodName>
		<LogicDescription>Get one day after the previous period (starting date of this period)</LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>Date targetDate</MethodInterface>
		<MethodClassName>Period</MethodClassName>
		<LogicSource><![CDATA[Date entryDate = null;
if (targetDate != null)
{
    if (targetDate.equals(m_lastStartTargetDate))
        return m_lastStartDate;
}
else
{
    if (m_lastStartTargetDate == null) if (m_lastStartDate != null)
        return m_lastStartDate;
}   
m_lastStartTargetDate = targetDate;

Date endDate = this.getPeriodEndDate(targetDate);
if ((targetDate == null) || (targetDate.getTime() == 0))
    targetDate = new Date();
//  criteria = "[EndPeriod] < #" & endDate & "#"
try   {
    // Make sure your get the largest one.
    this.getKeyArea(Period.END_PERIOD_KEY).getKeyField(DBConstants.MAIN_KEY_FIELD).setKeyOrder(DBConstants.DESCENDING);
    boolean bSuccess = this.seek("<");
    if (!bSuccess)
        entryDate = targetDate;
    else
    {
        Calendar calendar = ((DateTimeField)this.getField(Period.END_PERIOD)).getCalendar();
        calendar.add(Calendar.DATE, 1);
        entryDate = calendar.getTime();
    }
} catch (DBException ex)    {
    entryDate = targetDate;
} finally {
    this.getKeyArea(Period.END_PERIOD_KEY).getKeyField(DBConstants.MAIN_KEY_FIELD).setKeyOrder(DBConstants.ASCENDING);
}

m_lastStartDate = entryDate;

return entryDate;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1591">
		<LastChanged>2012-01-31T10:43:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentAcctHandler</MethodClassName>
		<LogicSource><![CDATA[RecordOwner screen = this.getOwner().getRecord().getRecordOwner();
Record recApControl = (Record)screen.getRecord(ApControl.AP_CONTROL_FILE);
BaseField fldApAccountID = this.getOwner().getRecord().getField(ApTrx.ACCOUNT_ID);
if (this.getOwner().isNull())
{	// No tour, set defaults
	fldApAccountID.moveFieldToThis(recApControl.getField(ApControl.NON_TOUR_PREPAY_ACCOUNT_ID));
}
else
{	// Tour set, use tour P/P account
	fldApAccountID.moveFieldToThis(recApControl.getField(ApControl.PREPAY_ACCOUNT_ID));
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1592">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1593">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1594">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffReport</MethodClassName>
		<LogicSource><![CDATA[super;

Record recApTrx = this.getMainRecord();
recApTrx.addListener(new ApTrxBaseFilter(ApTrx.TRX_STATUS_ID)
{
    public boolean checkTrxStatus(TrxStatus recTrxStatus)
    {
        if ((recTrxStatus.getField(TrxStatus.STATUS_CODE).toString().indexOf(ApTrx.PREPAYMENT_REQUEST) != -1)
            || (recTrxStatus.getField(TrxStatus.STATUS_CODE).toString().indexOf(ApTrx.BROKER_PAYMENT_HEADER) != -1)
            || (recTrxStatus.getField(TrxStatus.STATUS_CODE).toString().indexOf(ApTrx.DEBIT_MEMO) != -1))
                return true;    // Include this
        return false; // Don't include this.
    }
});

Record recCurrencys = ((ReferenceField)this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.CURRENCYS_ID)).getReferenceRecord(null);
this.getRecord(Currencys.CURRENCYS_FILE).addListener(new CompareFileFilter(Currencys.ID, recCurrencys.getField(Currencys.ID), "=", null, true));

Record recPaymentHistory = this.getRecord(PaymentHistory.PAYMENT_HISTORY_FILE);
recPaymentHistory.setKeyArea(PaymentHistory.LINKED_TRX_ID_KEY);
TrxDesc recTrxDesc = (TrxDesc)this.getRecord(TrxDesc.TRX_DESC_FILE);
recTrxDesc.getTrxDesc(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE);
recPaymentHistory.addListener(new SubFileFilter(recApTrx.getField(Trx.ID), LinkTrx.LINKED_TRX_ID, recTrxDesc.getField(TrxDesc.ID), LinkTrx.LINKED_TRX_DESC_ID, null, null, true));
recPaymentHistory.addListener(new CompareFileFilter(PaymentHistory.TRX_DATE, this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.CUTOFF_DATE), "<=", null, true));

this.getMainRecord().setOpenMode(this.getMainRecord().getOpenMode() | DBConstants.OPEN_READ_ONLY);

SubCountHandler listener = null;
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.VENDOR_TOTAL), ApTrx.INVOICE_AMOUNT, true, true, true));
listener.setBreakField(this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.VENDOR_TOTAL_USD), ApTrx.INVOICE_LOCAL, true, true, true));
listener.setBreakField(this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.VENDOR_BALANCE_TOTAL), ApTrx.INVOICE_BALANCE, true, true, true));
listener.setBreakField(this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.VENDOR_BALANCE_TOTAL_USD), ApTrx.INVOICE_BALANCE_LOCAL, true, true, true));
listener.setBreakField(this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID));

this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.CURR_TOTAL), ApTrx.INVOICE_AMOUNT, true, true, true));
listener.setBreakField(this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.CURR_TOTAL_USD), ApTrx.INVOICE_LOCAL, true, true, true));
listener.setBreakField(this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.CURR_BALANCE_TOTAL), ApTrx.INVOICE_BALANCE, true, true, true));
listener.setBreakField(this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID));
this.getMainRecord().addListener(listener = new SubCountHandler(this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.CURR_BALANCE_TOTAL_USD), ApTrx.INVOICE_BALANCE_LOCAL, true, true, true));
listener.setBreakField(this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.TOTAL_USD), ApTrx.INVOICE_LOCAL, true, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.BALANCE_TOTAL_USD), ApTrx.INVOICE_BALANCE_LOCAL, true, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1595">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffReport</MethodClassName>
		<LogicSource>return new PrepaymentCutoffScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1596">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffReport</MethodClassName>
		<LogicSource>return new PrepaymentCutoffToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1597">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffReport</MethodClassName>
		<LogicSource>return new PrepaymentCutoffFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1598">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffReport</MethodClassName>
		<LogicSource>return new PrepaymentCutoffHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1600">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffReport</MethodClassName>
		<LogicSource><![CDATA[super;
new PaymentHistory(this);
new TrxDesc(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1601">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1602">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1603">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);

EnableScreenHandler behavior = new EnableScreenHandler(ApTrx.TRX_STATUS_ID);
this.getMainRecord().addListener(behavior);
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.PREPAYMENT);
behavior.addComparison(recTrxStatus.getField(TrxStatus.ID).getData());
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.DEBIT_MEMO);
behavior.addComparison(recTrxStatus.getField(TrxStatus.ID).getData());
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.BROKER_PAYMENT);
behavior.addComparison(recTrxStatus.getField(TrxStatus.ID).getData());

m_recSelectApTrx = ((Vendor)this.getRecord(Vendor.VENDOR_FILE)).addSelectBehaviors();
FilterApTrxHandler filter = new FilterApTrxHandler(null);
m_recSelectApTrx.addListener(filter);
filter.addTrxStatusID(ApTrx.INVOICE);
filter.addTrxStatusID(ApTrx.INVOICE_NON_TOUR);
filter.addTrxStatusID(ApTrx.CREDIT_MEMO);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1604">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentDistScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
String strDistribute = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(PrepaymentDistScreen.DISTRIBUTE);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strDistribute, MenuConstants.POST, PrepaymentDistScreen.DISTRIBUTE, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1605">
		<LastChanged>2012-01-31T10:43:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>distribute</MethodName>
		<LogicDescription>Distribute this prepayment to the selected amounts for this vendor.</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>PrepaymentDistScreen</MethodClassName>
		<LogicSource><![CDATA[ApTrx recApTrx = (ApTrx)this.getMainRecord();
PaymentHistory recPaymentHistory = (PaymentHistory)this.getRecord(PaymentHistory.PAYMENT_HISTORY_FILE);
return recPaymentHistory.distribute(this, recApTrx, m_recSelectApTrx);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1606">
		<LastChanged>2013-01-22T05:45:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentDistScreen</MethodClassName>
		<LogicSource><![CDATA[if (MenuConstants.LOOKUP.equalsIgnoreCase(strCommand))
{
    iCommandOptions = ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER;
    boolean bReadCurrentRecord = false;
    int iDocMode = ApTrx.VENDOR_AP_SCREEN | ScreenConstants.SELECT_MODE;
    Map<String,Object> properties = new Hashtable<String,Object>();
    properties.put(ApTrxClassField.DISPLAY_TYPE_PARAM, Integer.toString(ApTrxClassField.PREPAYMENTS));
    if (!this.getMainRecord().getField(ApTrx.VENDOR_ID).isNull())
        properties.put(DBParams.HEADER_OBJECT_ID, this.getMainRecord().getField(ApTrx.VENDOR_ID).toString());

    return (this.onForm(null, iDocMode, bReadCurrentRecord, iCommandOptions, properties) != null);
}
else if (strCommand.equalsIgnoreCase(PrepaymentDistScreen.DISTRIBUTE))
    return this.distribute();
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1607">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentDistScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1608">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxStatus(this);
new TransactionType(this);

new PaymentHistory(this);
new AcctDetail(this);
new AcctDetailDist(this);
new Period(this);
new ApControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1609">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentDistScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1610">
		<LastChanged>2012-02-01T19:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();

EnableScreenHandler behavior = new EnableScreenHandler(ApTrx.TRX_STATUS_ID);
this.getMainRecord().addListener(behavior);
TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.PREPAYMENT_REQUEST);
this.getMainRecord().getField(ApTrx.TRX_STATUS_ID).addListener(new InitFieldHandler(recTrxStatus.getField(TrxStatus.ID)));
behavior.addComparison(recTrxStatus.getField(TrxStatus.ID).getData());

Record recTour = ((ReferenceField)this.getMainRecord().getField(ApTrx.TOUR_ID)).getReferenceRecord(this);
this.getMainRecord().getField(ApTrx.TOUR_ID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.START_SERVICE_DATE), recTour.getField(Tour.DEPARTURE_DATE)));
this.getMainRecord().getField(ApTrx.TOUR_ID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.DESCRIPTION), recTour.getField(Tour.DESCRIPTION))
{
    public int fieldChanged(boolean bDisplayOption, int iMoveMode)
    {
        int iErrorCode = super.fieldChanged(bDisplayOption, iMoveMode);
        if (iErrorCode == DBConstants.NORMAL_RETURN)
        {
            BaseApplication application = (BaseApplication)getTask().getApplication();
            String strPrepaymentFor = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString("Prepayment for");
            String strValue = strPrepaymentFor + ' ' + m_fldDest.toString();
            m_fldDest.setString(strValue, bDisplayOption, iMoveMode);
        }
        return iErrorCode;
    }
});
// Make sure prepayment is fully selected for payment
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new ForceSignHandler(+1));
this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ApTrx.AMOUNT_SELECTED), this.getMainRecord().getField(ApTrx.INVOICE_AMOUNT)));

// Remember on prepayments, the USD amounts are caclulated based on the exchange of the funding source (the bank trx).

// Default prepayment account to Account in control file
this.getMainRecord().getField(ApTrx.TOUR_ID).addListener(new PrepaymentAcctHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1611">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1612">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxStatus(this);

new ApControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1613">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1614">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepayTypeField</MethodClassName>
		<LogicSource>return new PrepayType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1615">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepayTypeField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1616">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckDetail</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1617">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1618">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1619">
		<LastChanged>2012-02-01T03:19:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckJournal</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getProperty(this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).getFieldName()) != null)
    this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getProperty(this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).getFieldName())));
else
    this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.AP_BANK_ACCT_ID)));
Record recBankAcct = ((ReferenceField)this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID)).getReference();  // Make sure this record is referenced

FieldListener listener = new ReadSecondaryHandler(recBankAcct);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).addListener(listener);

this.getMainRecord().addListener(new SubFileFilter(recBankAcct));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.REPORT_COUNT), false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.REPORT_TOTAL), PaymentRequest.AMOUNT, false, true));

Record recApTrx = this.getRecord(ApTrx.AP_TRX_FILE);
recApTrx.setKeyArea(ApTrx.VENDOR_ID_KEY);
recApTrx.addListener(new SubFileFilter(this.getMainRecord().getField(PaymentRequest.VENDOR_ID), ApTrx.VENDOR_ID, null, null, null, null));

recBankAcct.addListener(new MoveOnValidHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.NEXT_CHECK_NO), recBankAcct.getField(BankAcct.NEXT_CHECK)));
this.getScreenRecord().getField(PrintCheckScreenRecord.NEXT_CHECK_NO).setSFieldToProperty();
this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_DATE).setSFieldToProperty();
this.getScreenRecord().getField(PrintCheckScreenRecord.CHECKS_TO_PRINT).setSFieldToProperty();

this.getMainRecord().addListener(new BumpCheckNoHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_NO), this.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1620">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckJournal</MethodClassName>
		<LogicSource>return new PrintCheckScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1621">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckJournal</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(CANNED_CHECKS), MenuConstants.PRINT, CANNED_CHECKS, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(XML_CHECKS), MenuConstants.PRINT, XML_CHECKS, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1622">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckJournal</MethodClassName>
		<LogicSource>return new PrintCheckToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1623">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckJournal</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.POST))
    || (strCommand.equalsIgnoreCase(PrintCheckJournal.CANNED_CHECKS))
    || (strCommand.equalsIgnoreCase(PrintCheckJournal.XML_CHECKS)))
{
    String strScreen = PrintCheckPost.class.getName();
    if (strCommand.equalsIgnoreCase(PrintCheckJournal.CANNED_CHECKS))
        strScreen = PrintCheckCanned.class.getName();
    if (strCommand.equalsIgnoreCase(PrintCheckJournal.XML_CHECKS))
        strScreen = PrintCheckXML.class.getName();

    strCommand = this.getScreenURL();
    strCommand = this.addScreenParams(this, strCommand);
    this.getParentScreen().popHistory(1, false);
    this.getParentScreen().pushHistory(strCommand, false);

    strCommand = Utility.addURLParam(null, DBParams.SCREEN, strScreen);
    strCommand = this.addScreenParams(this, strCommand);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1624">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckJournal</MethodClassName>
		<LogicSource>return new PrintCheckDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1625">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckJournal</MethodClassName>
		<LogicSource>return new PrintCheckFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1626">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckJournal</MethodClassName>
		<LogicSource>return new PrintCheckHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1627">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckJournal</MethodClassName>
		<LogicSource>return new PaymentRequest(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1628">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckJournal</MethodClassName>
		<LogicSource><![CDATA[super;
new ApControl(this);
new ApTrx(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1629">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckJournal</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1630">
		<LastChanged>2012-02-01T08:23:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getProperty(this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).getFieldName()) != null)
    this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getProperty(this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).getFieldName())));
else
    this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.AP_BANK_ACCT_ID)));
Record recBankAcct = ((ReferenceField)this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID)).getReference();  // Make sure this record is referenced

FieldListener listener = new ReadSecondaryHandler(recBankAcct);
this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).addListener(listener);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);

this.getMainRecord().addListener(new SubFileFilter(recBankAcct));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.REPORT_COUNT), false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.REPORT_TOTAL), PaymentRequest.AMOUNT, false, true));

Record recApTrx = this.getRecord(ApTrx.AP_TRX_FILE);
recApTrx.setKeyArea(ApTrx.VENDOR_ID_KEY);
recApTrx.addListener(new SubFileFilter(this.getMainRecord().getField(PaymentRequest.VENDOR_ID), ApTrx.VENDOR_ID, null, null, null, null));

recBankAcct.addListener(new MoveOnValidHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.NEXT_CHECK_NO), recBankAcct.getField(BankAcct.NEXT_CHECK)));
this.getScreenRecord().getField(PrintCheckScreenRecord.NEXT_CHECK_NO).setSFieldToProperty();
this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_DATE).setSFieldToProperty();
this.getScreenRecord().getField(PrintCheckScreenRecord.CHECKS_TO_PRINT).setSFieldToProperty();

this.getMainRecord().addListener(new BumpCheckNoHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_NO), this.getScreenRecord().getField(PrintCheckScreenRecord.NEXT_CHECK_NO)));

Record recVendor = ((ReferenceField)this.getMainRecord().getField(PaymentRequest.VENDOR_ID)).getReferenceRecord(this);
this.getMainRecord().getField(PaymentRequest.VENDOR_ID).addListener(new ReadSecondaryHandler(recVendor));
recVendor.addListener(new MoveOnValidHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.PAYEE), recVendor.getField(Vendor.VENDOR_NAME)));
this.getMainRecord().addListener(new MoveOnValidHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_AMOUNT), this.getMainRecord().getField(PaymentRequest.AMOUNT)));

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
m_iPrepaymentTrxStatusID = recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.PREPAYMENT);   // Prepayment
m_iPaymentTrxStatusID = recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, PaymentHistory.PAYMENT_HISTORY_FILE, PaymentHistory.PAYMENT);

Record recPaymentHistory = this.getRecord(PaymentHistory.PAYMENT_HISTORY_FILE);
recPaymentHistory.addListener(new SubFileFilter(recApTrx));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1631">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource>return new PrintCheckScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1634">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource>return new PaymentRequest(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1635">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource><![CDATA[super;
new ApTrx(this);
new PaymentHistory(this);
new BankTrx(this);

new TrxStatus(this);
new TrxGroup(this);

new ApControl(this);

new AcctDetail(this);
new AcctDetailDist(this);
new Period(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1636">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1637">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1638">
		<LastChanged>2012-02-02T22:36:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[super;
BaseField productDesc = this.getField(Product.DESCRIPTION);
BaseField productSort = this.getField(Product.DESC_SORT);
CopyFieldHandler copyField = new CopyFieldHandler(Product.DESC_SORT);
productDesc.addListener(copyField);
FieldToUpperHandler toUpper = new FieldToUpperHandler(null);
productSort.addListener(toUpper);
CheckForTheHandler checkThe = new CheckForTheHandler(null);
productSort.addListener(checkThe);
this.getField(Product.PRODUCT_TYPE).addListener(new GetProductDescHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1640">
		<LastChanged>2012-04-11T15:40:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getLengthTime</MethodName>
		<LogicDescription><![CDATA[Get the est. time of this product.
@return The duration of this product (in seconds)]]></LogicDescription>
		<MethodReturns>long</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[return 0;	// Override]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="1641">
		<LastChanged>2012-02-02T22:36:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getStartDate</MethodName>
		<LogicDescription><![CDATA[Given this date, return the best Starting date and time. If none,
just return the date that was passed in.]]></LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>Date date</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[Date dateEtd = ((TimeField)this.getField(Product.ETD)).getDateTime();
if (dateEtd == null)
	return date;
Calendar calendar = Converter.gCalendar;
calendar.setTime(dateEtd);
int iHour = calendar.get(Calendar.HOUR_OF_DAY);
int iMinute = calendar.get(Calendar.MINUTE);
int iSecond = calendar.get(Calendar.SECOND);
int iMillisecond = calendar.get(Calendar.MILLISECOND);

calendar.setTime(date);
calendar.set(Calendar.HOUR_OF_DAY, iHour);
calendar.set(Calendar.MINUTE, iMinute);
calendar.set(Calendar.SECOND, iSecond);
calendar.set(Calendar.MILLISECOND, iMillisecond);
date = calendar.getTime();
return date;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1643">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductCategoryField</MethodClassName>
		<LogicSource>return new ProductCategory(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1644">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductCategoryField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), ProductCategory.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1645">
		<LastChanged>2012-02-01T04:39:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getCost</MethodName>
		<LogicDescription>Retrieve this cost field and adjust it using this record's terms.</LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>String iFieldSeq, ProductTerms recProductTerms</MethodInterface>
		<MethodClassName>ProductPricing</MethodClassName>
		<LogicSource><![CDATA[if (iFieldSeq == null)
    iFieldSeq = ProductPricing.COST;
double dCost = this.getField(iFieldSeq).getValue();
if (this.getField(ProductPricing.PRODUCT_TERMS_ID).getLength() != 0)
{ // Get the markup/down
    ProductTerms recNewProductTerms = null;
    if (recProductTerms == null)
        recNewProductTerms = recProductTerms = new ProductTerms(this.findRecordOwner());
    dCost = recProductTerms.calcNetCost(dCost, this.getField(ProductPricing.PRODUCT_TERMS_ID));
    if (recNewProductTerms != null)
        recNewProductTerms.free();
}
return dCost;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1646">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getMaxLength</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductDescConverter</MethodClassName>
		<LogicSource>return 40;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1647">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductDescConverter</MethodClassName>
		<LogicSource><![CDATA[String string = Constants.BLANK;
BookingDetail productDetail = null;
if (m_MergeRecord.getTable().getCurrentTable() != null)
	productDetail = (BookingDetail)m_MergeRecord.getTable().getCurrentTable().getRecord();
if (productDetail != null)
	string = productDetail.getProductDesc();
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1648">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProductDescConverter</MethodName>
		<LogicDescription>Return the Product description (from product.getProductDesc)</LogicDescription>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Record mergeRecord</MethodInterface>
		<MethodClassName>ProductDescConverter</MethodClassName>
		<LogicSource>m_MergeRecord = mergeRecord;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1649">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(false);
this.getMainRecord().setKeyArea(Product.DESC_SORT_KEY);

// Redisplay if any of these change
this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(ProductScreenRecord.CITY_ID).addListener(new FieldReSelectHandler(this));

this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(ProductScreenRecord.REMOTE_QUERY_ENABLED).addListener(new FieldReSelectHandler(this));

this.addRateMessageListeners((Product)this.getMainRecord(), (ProductScreenRecord)this.getScreenRecord());

this.setThisProperty(ProductScreenRecord.DETAIL_DATE);
this.setThisProperty(ProductScreenRecord.CLASS_ID);
this.setThisProperty(ProductScreenRecord.RATE_ID);
this.setThisProperty(ProductScreenRecord.PAX);
this.setThisProperty(ProductScreenRecord.CITY_ID);

((BaseStatusField)this.getMainRecord().getField(Product.DISPLAY_COST_STATUS_ID)).getIconField(null).addListener(new CostStatusUpdateHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1650">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductGridScreen</MethodClassName>
		<LogicSource>return new ProductScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1652">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductList</MethodClassName>
		<LogicSource><![CDATA[HotelList pBkHotelList = new HotelList(recordOwner);
this.addTable(pBkHotelList);
LandList pBkLandList = new LandList(recordOwner);
this.addTable(pBkLandList);
TourList pBkTourList = new TourList(recordOwner);
this.addTable(pBkTourList);
// Add Trans, etc. here
this.setKeyArea(Product.DESC_SORT_KEY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1653">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductList</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1660">
		<LastChanged>2012-04-07T08:23:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMerge</MethodClassName>
		<LogicSource><![CDATA[Product pProduct = new Product(recordOwner);

//x   Record pQueryCore = (Record)this.getRecord(kLandFile);
// Move this to AddFields?!?
BaseField pField = new StringField(pProduct, "Type", 20, null, null);
pField.setVirtual(true);
pField = new StringField(pProduct, "Product", 20, null, null);
pField.setVirtual(true);

this.addTable(pProduct);

City pTkAirport = new City(recordOwner);                      
this.addTable(pTkAirport);

Country pTkCountry = new Country(recordOwner);                      
this.addTable(pTkCountry);

Vendor pApVendor = new Vendor(recordOwner);
this.addTable(pApVendor);
// The following files are not included in the query, but they are returned in the GetBaseRecord query
Land pBkLand = new Land(recordOwner);
this.addTable(pBkLand);

Hotel pBkHotel = new Hotel(recordOwner);
this.addTable(pBkHotel);

Record tourHdr = Record.makeRecordFromClassName(TourHeaderModel.THICK_CLASS, recordOwner);
this.addTable(tourHdr);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1661">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getBaseRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMerge</MethodClassName>
		<LogicSource><![CDATA[String strProduct;
Record pQueryTable = null;
BaseField pField = this.getField("Product");
if (pField != null)
{
	strProduct = pField.getString();
	if (strProduct.equalsIgnoreCase("Tour"))
		strProduct = "TourHeader";
	pQueryTable = (Record)this.getRecord(strProduct);
	if (pQueryTable != null)
	{		// Make sure I can read the current record from the right file
		pQueryTable.getField(Product.ID).moveFieldToThis(this.getField(Product.ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
	}
}
return pQueryTable;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1662">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>isQueryRecord</MethodName>
		<LogicDescription>This causes the SQL statements to include only the field name and not record.field</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMerge</MethodClassName>
		<LogicSource>return false;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1663">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMerge</MethodClassName>
		<LogicSource><![CDATA[Product pProduct = (Product)this.getRecord(Product.PRODUCT_FILE);
this.setSelected(false);
super;

pProduct.getField(Product.ID).setSelected(true);
pProduct.getField(Product.DESCRIPTION).setSelected(true);
pProduct.getField(Product.CITY_ID).setSelected(true);
this.getField(City.CITY_FILE, City.TICKET_CITY_DESC).setSelected(true);
this.getField(City.CITY_FILE, City.COUNTRY_ID).setSelected(true);

this.getField(Country.COUNTRY_FILE, Country.DESCRIPTION).setSelected(true);

pProduct.getField("Type").setSelected(true);

pProduct.getField(Vendor.ID).setSelected(true);
this.getField(Vendor.VENDOR_FILE, Vendor.VENDOR_NAME).setSelected(true);

pProduct.getField(Product.OPERATORS_CODE).setSelected(true);
pProduct.getField(Product.CODE).setSelected(true);

pProduct.getField("Product").setSelected(true);

pProduct.getField(Product.DESC_SORT).setSelected(true);
this.getField(Vendor.VENDOR_FILE, Vendor.NAME_SORT).setSelected(true);
this.getField(City.CITY_FILE, City.DESCRIPTION).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1664">
		<LastChanged>2012-02-01T15:29:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>140</Sequence>
		<MethodName>setupRelationships</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMerge</MethodClassName>
		<LogicSource><![CDATA[this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(Product.PRODUCT_FILE), this.getRecord(City.CITY_FILE), Product.CITY_ID, City.ID);
this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(City.CITY_FILE), this.getRecord(Country.COUNTRY_FILE), City.COUNTRY_ID, Country.ID);
this.addRelationship(DBConstants.LEFT_OUTER,  this.getRecord(Product.PRODUCT_FILE), this.getRecord(Vendor.VENDOR_FILE), Product.VENDOR_ID, Vendor.ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1667">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductStatusField</MethodClassName>
		<LogicSource>return new ProductStatus(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1669">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>calcNetCost</MethodName>
		<LogicDescription>Read this markup line and calc new cost</LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>double dOrigCost, BaseField fldMarkupCode</MethodInterface>
		<MethodClassName>ProductTerms</MethodClassName>
		<LogicSource><![CDATA[double dNewCost = dOrigCost;
if (fldMarkupCode != null) if (this.getField(ProductTerms.ID).compareTo(fldMarkupCode) != 0)
{
	this.getField(ProductTerms.ID).moveFieldToThis(fldMarkupCode, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
	boolean bSuccess = false;
	try	{
		bSuccess = this.seek("=");
	} catch (DBException e)	{
		bSuccess = false;
	}
	if (!bSuccess)
		return dOrigCost;
}
double dTax = this.getField(ProductTerms.TAX_RATE).getValue();
double dSvcChg = this.getField(ProductTerms.SERVICE_CHARGE_RATE).getValue();
double dComm = this.getField(ProductTerms.COMMISSION_RATE).getValue();
dNewCost = Math.floor(dOrigCost * (1.00 + dTax + dSvcChg - dComm) * 100.00 + 0.5) / 100.00;
return dNewCost;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1670">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTermsField</MethodClassName>
		<LogicSource>return new ProductTerms(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1671">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTermsField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), ProductTerms.DESCRIPTION_KEY, ProductTerms.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1672">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTermsGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1673">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTermsScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1681">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductTypeID</MethodName>
		<LogicDescription>Get the product type of this product class</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Product product</MethodInterface>
		<MethodClassName>ProductType</MethodClassName>
		<LogicSource><![CDATA[this.close();
String string = product.getTableNames(false);
if (string.equals("TourHeader"))
    string = "Tour";
return this.getProductTypeIDFromName(string);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1682">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductScreenRecord</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(ProductScreenRecord.DESCRIPTION).addListener(new FieldToUpperHandler(null));
this.getField(ProductScreenRecord.DESCRIPTION).addListener(new CheckForTheHandler(null));
this.addListener(new DateChangedHandler(ProductScreenRecord.LAST_CHANGED));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1683">
		<LastChanged>2012-02-03T15:08:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Profile</MethodClassName>
		<LogicSource><![CDATA[super;
this.addListener(new SetUserIDHandler(Profile.ENTERED_ID, true));

this.getField(Company.CONTACT).removeListener(this.getField(Company.CONTACT).getListener(CopyLastHandler.class.getName()), true);
this.getField(Company.NAME).removeListener(this.getField(Company.NAME).getListener(CopyFieldHandler.class.getName()), true);

Converter converter = this.getField(Company.NAME);
Converter cnvDependent = this.getField(Profile.NAME_SUR);
Converter converterAlt = new AltFieldConverter(converter, cnvDependent);
this.addListener(new RemoveConverterOnCloseHandler(converterAlt));

boolean bClearIfThisNull = false;
boolean bOnlyIfDestNull = false;
this.getField(Profile.NAME).addListener(new MoveOnChangeHandler(this.getField(Profile.NAME_SORT), converterAlt, bClearIfThisNull, bOnlyIfDestNull));    // Only if dest is null (ie., company name is null)
this.getField(Profile.NAME_SUR).addListener(new MoveOnChangeHandler(this.getField(Profile.NAME_SORT), converterAlt));    // Only if dest is null (ie., company name is null)]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1685">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileClassField</MethodClassName>
		<LogicSource>return new ProfileClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1686">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileClassField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), ProfileClass.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1688">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileField</MethodClassName>
		<LogicSource>return new Profile(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1690">
		<LastChanged>2012-03-27T01:46:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileField</MethodClassName>
		<LogicSource><![CDATA[Profile recProfile = (Profile)this.makeReferenceRecord();
Converter paConverter = new FirstMLastConverter(recProfile, Profile.NAME_PREFIX, Profile.NAME_FIRST, Profile.NAME_MIDDLE, Profile.NAME_SUR, Profile.NAME_SUFFIX, Profile.NAME_TITLE);
Converter altConverter = new AltFieldConverter(recProfile.getField(Profile.NAME), paConverter);
altConverter = new FieldLengthConverter(altConverter, 25);
altConverter = new FieldDescConverter((Converter)altConverter, (Converter)converter);
ScreenComponent sField = altConverter.setupDefaultView(itsLocation, targetScreen, altConverter, iDisplayFieldDesc, properties);
sField.setEnabled(false);
return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, recProfile, -1, -2, true, true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1691">
		<LastChanged>2012-01-31T15:49:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setDisplayInitialQuery(false);
Profile recProfile = (Profile)this.getMainRecord();
Record recScreenQuery = this.getScreenRecord();
((NumberField)recScreenQuery.getField(ProfileScreenRecord.PROFILE_KEY)).setValue(0, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
recScreenQuery.getField(ProfileScreenRecord.PROFILE_KEY).addListener(new RegisterValueHandler(null));
this.setEditing(false);
SortOrderHandler keyBehavior = new SortOrderHandler(this);
keyBehavior.setGridTable(Profile.NAME_SORT_KEY, recProfile, 0);
keyBehavior.setGridTable(Profile.NAME_SUR_KEY, recProfile, 1);
keyBehavior.setGridTable(null, recProfile, 2);
keyBehavior.setGridTable(Profile.POSTAL_CODE_SORT_KEY, recProfile, 3);
keyBehavior.setGridTable(null, recProfile, 4);
keyBehavior.setGridTable(null, recProfile, 5);
keyBehavior.setGridTable(null, recProfile, 6);
recScreenQuery.getField(ProfileScreenRecord.PROFILE_KEY).addListener(keyBehavior);

recProfile.addListener(new ExtractRangeFilter(Profile.POSTAL_CODE_SORT, recScreenQuery.getField(ProfileScreenRecord.POSTAL_CODE_SORT)));
recProfile.addListener(new ExtractRangeFilter(Profile.NAME_SUR, recScreenQuery.getField(ProfileScreenRecord.LAST_NAME_SORT)));
recProfile.addListener(new ExtractRangeFilter(Profile.NAME_SORT, recScreenQuery.getField(ProfileScreenRecord.NAME_SORT)));
recProfile.addListener(new CompareFileFilter(Profile.PROFILE_TYPE_ID, recScreenQuery.getField(ProfileScreenRecord.PROFILE_TYPE_ID), "=", null, true));

recScreenQuery.getField(ProfileScreenRecord.NAME_SORT).addListener(new FieldReSelectHandler(this));
recScreenQuery.getField(ProfileScreenRecord.LAST_NAME_SORT).addListener(new FieldReSelectHandler(this));
recScreenQuery.getField(ProfileScreenRecord.POSTAL_CODE_SORT).addListener(new FieldReSelectHandler(this));
recScreenQuery.getField(ProfileScreenRecord.PROFILE_TYPE_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1692">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileGridScreen</MethodClassName>
		<LogicSource>return new ProfileScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1694">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileGridScreen</MethodClassName>
		<LogicSource>return new Profile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1695">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1696">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
Profile recProfile = (Profile)this.getRecord(Profile.PROFILE_FILE);
ProfileControl recProfileControl = (ProfileControl)this.getRecord(ProfileControl.PROFILE_CONTROL_FILE);
try	{
	recProfileControl.open();		// Read the control file
	recProfile.getField(Profile.PROFILE_STATUS_ID).addListener(new InitFieldHandler(recProfileControl.getField(ProfileControl.DEFAULT_PROFILE_STATUS_ID)));
	recProfile.getField(Profile.PROFILE_CLASS_ID).addListener(new InitFieldHandler(recProfileControl.getField(ProfileControl.DEFAULT_PROFILE_CLASS_ID)));
	recProfile.getField(Profile.PROFILE_TYPE_ID).addListener(new InitFieldHandler(recProfileControl.getField(ProfileControl.DEFAULT_PROFILE_TYPE_ID)));
	recProfile.getField(Profile.COUNTRY_ID).addListener(new InitFieldHandler(recProfileControl.getField(ProfileControl.COUNTRY_ID)));
	recProfile.getField(Profile.PRIMARY_LANGUAGE_ID).addListener(new InitFieldHandler(recProfileControl.getField(ProfileControl.LANGUAGE_ID)));
	recProfile.getField(Profile.CURRENCYS_ID).addListener(new InitFieldHandler(recProfileControl.getField(ProfileControl.CURRENCYS_ID)));
} catch (DBException ex)	{
    ex.printStackTrace();
}
Record recCountry = ((ReferenceField)recProfile.getField(Profile.COUNTRY_ID)).getReferenceRecord();
recProfile.getField(Profile.COUNTRY_ID).addListener(new MoveOnChangeHandler(recProfile.getField(Profile.COUNTRY), recCountry.getField(Country.NAME)));
recProfile.getField(Profile.COUNTRY_ID).addListener(new MoveOnChangeHandler(recProfile.getField(Profile.PRIMARY_LANGUAGE_ID), recCountry.getField(Country.LANGUAGE_ID)));
recProfile.getField(Profile.COUNTRY_ID).addListener(new MoveOnChangeHandler(recProfile.getField(Profile.CURRENCYS_ID), recCountry.getField(Country.CURRENCYS_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1697">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileScreen</MethodClassName>
		<LogicSource>return new Profile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1698">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription>Open the Other Files</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ProfileControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1699">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1701">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileScreenRecord</MethodClassName>
		<LogicSource><![CDATA[super;
FieldToUpperHandler upper = new FieldToUpperHandler(null);
this.getField(ProfileScreenRecord.NAME_SORT).addListener(upper);
CheckForTheHandler the = new CheckForTheHandler(null);
this.getField(ProfileScreenRecord.NAME_SORT).addListener(the);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1702">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileStatusField</MethodClassName>
		<LogicSource>return new ProfileStatus(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1703">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileStatusField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), ProfileStatus.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1704">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileTypeField</MethodClassName>
		<LogicSource>return new ProfileType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1705">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileTypeField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1706">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfitCenterField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1715">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PayTypeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = PayTypeField.HOURLY;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1717">
		<LastChanged>2012-01-31T20:55:01</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrPrtCheck</MethodClassName>
		<LogicSource><![CDATA[super;
FileListener readSecond = new DisplayReadHandler(TimeTrx.TIME_EMP_NO, this.getRecord(Employee.EMPLOYEE_FILE), Employee.ID);
this.getRecord(TimeTrx.TIME_TRX_FILE).addListener(readSecond);
QueryRecord queryInfo = null;
CalcEmpTaxesHandler calcTaxes = new CalcEmpTaxesHandler(queryInfo, this.getRecord(Employee.EMPLOYEE_FILE), this.getRecord(Deduction.DEDUCTION_FILE), this.getRecord(TaxRate.TAX_RATE_FILE), this.getRecord(EmployeeControl.EMPLOYEE_CONTROL_FILE));
this.getRecord(TimeTrx.TIME_TRX_FILE).addListener(calcTaxes);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1718">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrPrtCheck</MethodClassName>
		<LogicSource>return new TimeTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1719">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrPrtCheck</MethodClassName>
		<LogicSource><![CDATA[super;
new Employee(this);
new EmployeeControl(this);
new Deduction(this);
new TaxRate(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1720">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrPrtCheck</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1721">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>QEmployee</MethodClassName>
		<LogicSource>return new EmployeeScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1722">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>QEmployee</MethodClassName>
		<LogicSource><![CDATA[Record query = this.getScreenRecord();
Employee mainFile = (Employee)this.getRecord(Employee.EMPLOYEE_FILE);
//?ShortField empKey = (ShortField)query.getField(Employee.EMP_KEY_NO);
//?Converter converter;
//?converter = new KeyRadioConverter(empKey, mainFile.getTable(), Employee.LAST_NAME_KEY);
//?new SRadioButton(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, converter);
//?converter = new KeyRadioConverter(empKey, mainFile.getTable(), Employee.FIRST_NAME_KEY);
//?new SRadioButton(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, converter);
//?converter = new KeyRadioConverter(empKey, mainFile.getTable(), Employee.ID_KEY);
//?new SRadioButton(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, converter);

BaseField activeFlag = query.getField(EmployeeScreenRecord.ACTIVE_EMP);
activeFlag.setState(true, DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);	// Initial state
ScreenLocation next = this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT);
//?activeFlag.setupDefaultView(this.getNextLocation(ScreenConstants.TOP_NEXT, ScreenConstants.ANCHOR_DEFAULT), this);
//?GridScreen gridScreen = new CDEmployee(null);
//?gridScreen.Create(Point(0, next.y), this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);
//?FieldListener fieldBehavior = new FieldReSelectHandler(gridScreen);
//?activeFlag.addListener(fieldBehavior);
//?FileListener skipBehavior = new SkipBlankBehavior(Employee.TERMINATION_DATE, true, activeFlag);
//?mainFile.addListener(skipBehavior);	// Skip terminated employees when set

//?FieldListener keyBehavior = new QueryKeyHandler(gridScreen);
//?empKey.addListener(keyBehavior);
//?empKey.setValue(Employee.LAST_NAME_KEY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1725">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doRecordSelected</MethodName>
		<LogicDescription>User selected record (dbl clk), doAction</LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>QueryWindow</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1746">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckJournal</MethodClassName>
		<LogicSource><![CDATA[super;

this.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.REFUND_BANK_ACCT_ID)));

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.REFUND_PAY);
this.getMainRecord().setKeyArea(ArTrx.TRX_STATUS_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus.getField(TrxStatus.ID), ArTrx.TRX_STATUS_ID, null, null, null, null));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(RefundScreenRecord.REPORT_COUNT), false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(RefundScreenRecord.REPORT_TOTAL), ArTrx.AMOUNT, false, true));

Record recBooking = this.getRecord(Booking.BOOKING_FILE);
Record recBookingLine = this.getRecord(BookingLine.BOOKING_LINE_FILE);
recBookingLine.addListener(new SubFileFilter(recBooking));
recBooking.addListener(new RecountOnValidHandler(recBookingLine));
recBookingLine.addListener(new SubCountHandler(recBooking.getField(Booking.GROSS), BookingLine.GROSS, true, true));
recBookingLine.addListener(new SubCountHandler(recBooking.getField(Booking.NET), BookingLine.NET, true, true));

Record recBankAcct = ((ReferenceField)this.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID)).getReferenceRecord();
recBankAcct.addListener(new MoveOnValidHandler(this.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO), recBankAcct.getField(BankAcct.NEXT_CHECK)));

this.getMainRecord().addListener(new BumpCheckNoHandler(this.getScreenRecord().getField(RefundScreenRecord.CHECK_NO), this.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO)));

this.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID).addListener(new ReadSecondaryHandler(recBankAcct));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1747">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckJournal</MethodClassName>
		<LogicSource>return new RefundScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1748">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckJournal</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(CANNED_CHECKS), MenuConstants.PRINT, CANNED_CHECKS, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(XML_CHECKS), MenuConstants.PRINT, XML_CHECKS, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1749">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckJournal</MethodClassName>
		<LogicSource>return new RefundCheckToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1750">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckJournal</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.POST))
    || (strCommand.equalsIgnoreCase(CANNED_CHECKS))
    || (strCommand.equalsIgnoreCase(XML_CHECKS)))
{
    Object objBankID = this.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID).getData();
    Object objCheckNo = this.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO).getData();
    Object objCheckDate = this.getScreenRecord().getField(RefundScreenRecord.CHECK_DATE).getData();
    Record record = this.getMainRecord();
    BasePanel parentScreen = this.getParentScreen();

    int iScreen = ArTrx.REFUND_CHECK_POST;
    if (strCommand.equalsIgnoreCase(CANNED_CHECKS))
        iScreen = ArTrx.REFUND_CHECK_CANNED_PRINT;
    if (strCommand.equalsIgnoreCase(XML_CHECKS))
        iScreen = ArTrx.REFUND_CHECK_XML_PRINT;
    boolean bSuccess = (this.onForm(record, iScreen, true, iCommandOptions, null) != null);

    if (bSuccess)
    {
        for (int i = 0; i < parentScreen.getSFieldCount(); i++)
        {
            BasePanel screen = (BasePanel)parentScreen.getSField(i);
            if (screen instanceof BaseScreen)
                if (screen.getScreenRecord() instanceof RefundScreenRecord)
            {
                screen.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID).setData(objBankID);
                screen.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO).setData(objCheckNo);
                screen.getScreenRecord().getField(RefundScreenRecord.CHECK_DATE).setData(objCheckDate);
            }
        }
    }

    return bSuccess;
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1751">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckJournal</MethodClassName>
		<LogicSource>return new RefundCheckFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1752">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckJournal</MethodClassName>
		<LogicSource>return new RefundCheckHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1753">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckJournal</MethodClassName>
		<LogicSource>return new ArTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1754">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckJournal</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);
new TrxStatus(this);
new BookingLine(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1755">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckJournal</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1756">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPost</MethodClassName>
		<LogicSource><![CDATA[super;

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.REFUND_PAY);
this.getMainRecord().setKeyArea(ArTrx.TRX_STATUS_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus.getField(TrxStatus.ID), ArTrx.TRX_STATUS_ID, null, null, null, null));
this.getMainRecord().addListener(new BumpCheckNoHandler(this.getScreenRecord().getField(RefundScreenRecord.CHECK_NO), this.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO)));
this.getMainRecord().addListener(new UpdateRefundPaidAcctDetailHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1757">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPost</MethodClassName>
		<LogicSource>return new RefundScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1758">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPost</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.POST))
	return this.onPost();
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1759">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>onPost</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>RefundCheckPost</MethodClassName>
		<LogicSource><![CDATA[try	{
	TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
	Object bookmark = recTrxStatus.getHandle(DBConstants.DATA_SOURCE_HANDLE);
	int iTrxPaidClassID = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.REFUND_PAID);
	recTrxStatus.setHandle(bookmark, DBConstants.DATA_SOURCE_HANDLE);
	Record recArTrx = this.getMainRecord();
	recArTrx.close();
	while (recArTrx.hasNext())
	{
		recArTrx.next();
		recArTrx.edit();
		recArTrx.getField(ArTrx.TRX_STATUS_ID).setValue(iTrxPaidClassID);
		recArTrx.set();
	}
} catch (DBException ex)	{
	ex.printStackTrace();
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1760">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPost</MethodClassName>
		<LogicSource>return new ArTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1761">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPost</MethodClassName>
		<LogicSource><![CDATA[super;
new BankTrx(this);
new BankAcct(this);

new TrxStatus(this);

new ArControl(this);
new Booking(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1762">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPost</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1763">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1764">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundGridScreen</MethodClassName>
		<LogicSource>return new CrDrScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1765">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.FORM)) || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
{
    BasePanel parentScreen = this.getParentScreen();
    if (parentScreen != null)
    {
        parentScreen.popHistory(1, false);
        parentScreen.pushHistory(this.getScreenURL(), false);  // Push this screen onto history stack
    }
    return (this.onForm(null, ArTrx.REFUND_SCREEN, true, iCommandOptions, null) != null);
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1766">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundPendGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(ArTrx.TRX_STATUS_ID_KEY);
TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
int iSubmitted = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.REFUND_SUBMITTED);
int iHeld = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.REFUND_HELD);
int iPay = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.REFUND_PAY);
this.getScreenRecord().getField(RefundScreenRecord.START_TRX_STATUS_ID).setValue(Math.min(iSubmitted, Math.min(iHeld, iPay)));
this.getScreenRecord().getField(RefundScreenRecord.END_TRX_STATUS_ID).setValue(Math.max(iSubmitted, Math.max(iHeld, iPay)));

this.getMainRecord().addListener(new ExtractRangeFilter(ArTrx.TRX_STATUS_ID, this.getScreenRecord().getField(RefundScreenRecord.START_TRX_STATUS_ID), this.getScreenRecord().getField(RefundScreenRecord.END_TRX_STATUS_ID), ExtractRangeFilter.PAD_END_FIELD));
this.getMainRecord().addListener(new CompareRefundHandler(this.getMainRecord().getField(ArTrx.TRX_STATUS_ID), iSubmitted, iHeld, iPay));

Record recBooking = ((ReferenceField)this.getMainRecord().getField(ArTrx.BOOKING_ID)).getReferenceRecord();
if (recBooking.getRecordOwner() == null)
    this.addRecord(recBooking, false);
this.setEnabled(false);
this.getMainRecord().getField(ArTrx.TRX_STATUS_ID).setEnabled(true);
this.getMainRecord().getField(ArTrx.COMMENTS).setEnabled(true);
this.setAppending(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1767">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundPendGridScreen</MethodClassName>
		<LogicSource>return new RefundScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1768">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundPendGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.FORM)) || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
	return (this.onForm(null, ArTrx.REFUND_PEND_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1769">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundPendGridScreen</MethodClassName>
		<LogicSource>return new ArTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1770">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundPendGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1771">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundPendGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1772">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundPendScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(ArTrx.TRX_STATUS_ID_KEY);
Record recBooking = ((ReferenceField)this.getMainRecord().getField(ArTrx.BOOKING_ID)).getReferenceRecord();
if (recBooking.getRecordOwner() == null)
    this.addRecord(recBooking, false);
this.setEnabled(false);
this.getMainRecord().getField(ArTrx.TRX_STATUS_ID).setEnabled(true);
this.getMainRecord().getField(ArTrx.COMMENTS).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1773">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundPendScreen</MethodClassName>
		<LogicSource>return new RefundScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1774">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundPendScreen</MethodClassName>
		<LogicSource>return new ArTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1775">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundPendScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1776">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundPendScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1777">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().getListener(UpdateArTrxAcctDetailHandler.class, true).setEnabledListener(false);    // Since I will be doing the updating
this.getMainRecord().addListener(new UpdateRefundAcctDetailHandler(this.getRecord(Booking.BOOKING_FILE)));

try {
    this.getMainRecord().addNew();
} catch (DBException e) {
}
this.setEnabled(true);
TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.REFUND_SUBMITTED);
this.getMainRecord().getField(ArTrx.TRX_STATUS_ID).addListener(new InitFieldHandler(recTrxStatus.getField(TrxStatus.ID)));
this.getMainRecord().getField(ArTrx.TRX_STATUS_ID).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1778">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxStatus(this);
new ArControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1779">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegionField</MethodClassName>
		<LogicSource>return new Region(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1780">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegionField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Region.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1781">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription>Process the command</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestCannedButton</MethodClassName>
		<LogicSource><![CDATA[Record record = null;
if (m_fldAgencyOrPax != null) if (m_fldAgencyOrPax.getString().equalsIgnoreCase("P"))
{
	record = m_record;
	m_record = m_PaPax;
}
boolean bFlag = super;
if (record != null)
	m_record = record;
return bFlag;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1782">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>RequestCannedButton</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, null, null, strDesc, strDesc, null, amAgcy, null</MethodReturns>
		<MethodInterface>ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, String strDesc, int iDisplayFieldDesc, Record amAgcy, Record paPax, BaseField fldAgencyOrPax</MethodInterface>
		<MethodClassName>RequestCannedButton</MethodClassName>
		<LogicSource><![CDATA[m_fldAgencyOrPax = fldAgencyOrPax;
m_PaPax = paPax;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1784">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestInputDisplay</MethodClassName>
		<LogicSource>new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.DELETE, MenuConstants.DELETE, null); // Delete button only</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1785">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestInputDisplay</MethodClassName>
		<LogicSource>return null; // No Toolbars</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1786">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestInputDisplay</MethodClassName>
		<LogicSource>return new RequestInput(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1787">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestInputDisplay</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1788">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1789">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestGridScreen</MethodClassName>
		<LogicSource>return new Request(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1790">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1792">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestScreen</MethodClassName>
		<LogicSource>return new Request(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1793">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new RequestControl(this);
new Profile(this);

new RequestDetail(this);
new BundleDetail(this);
new Brochure(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1794">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>setupBrocDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Request recRequest, RequestDetail recRequestDetail, BundleDetail recBundleDetail, Brochure recItem, RequestInput recRequestInput</MethodInterface>
		<MethodClassName>RequestScreen</MethodClassName>
		<LogicSource>recRequestInput.addBundle(recRequest.getField(Request.BUNDLE_ID), recBundleDetail, null, recRequest.getField(Request.BUNDLE_QTY));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1795">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription>Setup the fields</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1796">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RoomConverter</MethodClassName>
		<LogicSource><![CDATA[String string = Constants.BLANK;
if (this.getNextConverter().getLength() != 0)
{
	double doubleValue = ((NumberField)this.getNextConverter()).getValue();
	if (doubleValue != 0)
		doubleValue = (doubleValue + m_PaxInRoom - 1) / m_PaxInRoom;
	string = Short.toString((short)doubleValue);
}
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1797">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>RoomConverter</MethodName>
		<LogicDescription/>
		<MethodReturns>field</MethodReturns>
		<MethodInterface>BaseField field, short paxInRoom</MethodInterface>
		<MethodClassName>RoomConverter</MethodClassName>
		<LogicSource>m_PaxInRoom = paxInRoom;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1798">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SalespersonField</MethodClassName>
		<LogicSource>return new Salesperson(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1799">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SalespersonField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Salesperson.SALESPERSON_NAME, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1800">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SalesRegionField</MethodClassName>
		<LogicSource>return new SalesRegion(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1801">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SalesRegionField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), SalesRegion.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1802">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getTreeField</MethodName>
		<LogicDescription>Get the converter for this index</LogicDescription>
		<MethodReturns>Converter</MethodReturns>
		<MethodInterface>int iSelectIndex</MethodInterface>
		<MethodClassName>SBaseCtrl</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1827">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SeatChoiceField</MethodClassName>
		<LogicSource>return new SeatChoice(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1828">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SeatChoiceField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1831">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SendViaField</MethodClassName>
		<LogicSource>return new SendVia(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1832">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription>Setup a popup for this field</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SendViaField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1835">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetAgencyCommHandler</MethodClassName>
		<LogicSource><![CDATA[super;
m_pBookingComm.initField(bDisplayOption);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1836">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetAgencyCommHandler</MethodClassName>
		<LogicSource><![CDATA[super;
m_pBookingComm.moveFieldToThis(m_pAmAffil.getField(Affiliation.AGENT_COMM), bDisplayOption, DBConstants.SCREEN_MOVE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1837">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SetAgencyCommHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField pBookingComm</MethodInterface>
		<MethodClassName>SetAgencyCommHandler</MethodClassName>
		<LogicSource>m_pBookingComm = pBookingComm;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1838">
		<LastChanged>2012-02-01T04:32:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetAgencyCommHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (owner != null)
{
	m_pBookingComm.addListener(new FieldRemoveBOnCloseHandler(this));
	m_pAmAffil = new Affiliation(null);	// Make sure close in screen change
	FileListener pSecondary = new DisplayReadHandler(Profile.AFFILIATION_ID, m_pAmAffil, Affiliation.ID);
	Record pAmAgcy = this.getOwner();
	pAmAgcy.addListener(pSecondary);
}
else
{
	if (m_pAmAffil != null)
	{
		m_pAmAffil.free();
		m_pAmAffil = null;
	}
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1839">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetBrocDetailHandler</MethodClassName>
		<LogicSource><![CDATA[m_mMAmRequests.setupBrocDetail(m_rAmRequests, m_rAmReqDetail, m_rAmBrocDetail, m_rAmBrochure, m_rAmReqInput);

return super.fieldChanged(bDisplayOption, iMoveMode);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1840">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SetBrocDetailHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null, gridScreen, null</MethodReturns>
		<MethodInterface>RequestScreen mAmRequests, GridScreen gridScreen, Request rAmRequests, RequestDetail rAmReqDetail, BundleDetail rAmBrocDetail, Brochure recBrochure, RequestInput rAmReqInput</MethodInterface>
		<MethodClassName>SetBrocDetailHandler</MethodClassName>
		<LogicSource><![CDATA[m_rAmRequests = rAmRequests;
m_rAmReqDetail = rAmReqDetail;
m_rAmBrocDetail = rAmBrocDetail;
m_rAmBrochure = recBrochure;
m_rAmReqInput = rAmReqInput;
m_mMAmRequests = mAmRequests;
super;
// Only if the use changes the qty or bundle
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1841">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetCrDrTypeHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recTrxStatus == null)
{
	RecordOwner recordOwner = this.getOwner().getRecord().findRecordOwner();
	m_recTrxStatus = new TrxStatus(recordOwner);
                      if (recordOwner != null)
                          recordOwner.removeRecord(m_recTrxStatus);
}
if (this.getOwner().getValue() < 0)
	m_recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.CREDIT_MEMO);
else
	m_recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.DEBIT_MEMO);
this.getOwner().getRecord().getField(ArTrx.TRX_STATUS_ID).moveFieldToThis(m_recTrxStatus.getField(TrxStatus.ID));
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1842">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetCrDrTypeHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recTrxStatus != null)
	m_recTrxStatus.free();
m_recTrxStatus = null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1846">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetupBrocDetailHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_UPDATE_TYPE)
	|| (iChangeType == DBConstants.AFTER_ADD_TYPE))
{
	try	{
		m_rAmReqDetail.close();
		while (m_rAmReqDetail.next() != null)
		{
			m_rAmReqDetail.remove();
		}
		m_rAmReqInput.close();
		while (m_rAmReqInput.next() != null)
		{
			if (m_rAmReqInput.getField(RequestInput.BROCHURE_QTY).getValue() > 0)
			{
				m_rAmReqDetail.addNew();
				((ReferenceField)m_rAmReqDetail.getField(RequestDetail.REQUEST_ID)).setReference(m_rAmRequests, DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
				m_rAmReqDetail.getField(RequestDetail.BROCHURE_ID).moveFieldToThis(m_rAmReqInput.getField(RequestInput.BROCHURE_ID), DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
				m_rAmReqDetail.getField(RequestDetail.BROCHURE_QTY).moveFieldToThis(m_rAmReqInput.getField(RequestInput.BROCHURE_QTY), DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
				m_rAmReqDetail.add();
			}
		}
	} catch (DBException e)	{
		System.out.println(e.getMessage());
		e.printStackTrace();
	}
}

return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1847">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetupBrocDetailHandler</MethodClassName>
		<LogicSource><![CDATA[m_rAmReqInput.close();
try	{
	while (m_rAmReqInput.next() != null)
	{
		m_rAmReqInput.remove();
	}
	m_rAmReqDetail.close();
	while (m_rAmReqDetail.next() != null)
	{
		m_rAmReqInput.addNew();
		m_rAmReqInput.getField(RequestInput.BROCHURE_ID).moveFieldToThis(m_rAmReqDetail.getField(RequestDetail.BROCHURE_ID), DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
		m_rAmReqInput.getField(RequestInput.BROCHURE_QTY).moveFieldToThis(m_rAmReqDetail.getField(RequestDetail.BROCHURE_QTY), DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
		m_rAmReqInput.add();
	}
} catch (DBException ex)	{
	ex.printStackTrace();
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1848">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SetupBrocDetailHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Request recRequests, RequestDetail recReqDetail, BundleDetail recBrocDetail, Brochure recBrochure, RequestInput recReqInput</MethodInterface>
		<MethodClassName>SetupBrocDetailHandler</MethodClassName>
		<LogicSource><![CDATA[m_rAmRequests = recRequests;
m_rAmReqDetail = recReqDetail;
m_rAmBrocDetail = recBrocDetail;
m_rAmBrochure = recBrochure;
m_rAmReqInput = recReqInput;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1854">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SmokerField</MethodClassName>
		<LogicSource><![CDATA[//SCheckBox button = new SCheckBox(itsLocation, targetScreen, this, iDisplayFieldDesc);
//button.SetStyle(BS_3STATE | WS_TABSTOP | BS_LEFTTEXT);
//button.Create(itsLocation, targetScreen, this, displayDesc);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1859">
		<LastChanged>2012-01-31T11:52:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceCrossRef</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(AcctDetail.SOURCE_KEY);

SubFileFilter listener = new SubFileFilter(this.getScreenRecord().getField(GenledScreenRecord.START_SOURCE), AcctDetail.SOURCE, null, null, null, null);
listener.setEndKey(false);
this.getMainRecord().addListener(listener);
listener = new SubFileFilter(this.getScreenRecord().getField(GenledScreenRecord.END_SOURCE), AcctDetail.SOURCE, null, null, null, null);
listener.setInitialKey(false);
this.getMainRecord().addListener(listener);

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(GenledScreenRecord.REPORT_COUNT), false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(GenledScreenRecord.REPORT_TOTAL), AcctDetail.AMOUNT_LOCAL, false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(GenledScreenRecord.SUB_TOTAL), AcctDetail.AMOUNT_LOCAL, false, true, true));

this.getRecord(AcctDetail.ACCT_DETAIL_FILE).addListener(new ExtractRangeFilter(AcctDetail.TRX_DATE, this.getScreenRecord().getField(GenledScreenRecord.START_DATE), this.getScreenRecord().getField(GenledScreenRecord.END_DATE), ExtractRangeFilter.PAD_END_FIELD));
this.getRecord(AcctDetail.ACCT_DETAIL_FILE).addListener(new ExtractRangeFilter(AcctDetail.TRX_ENTRY, this.getScreenRecord().getField(GenledScreenRecord.START_ENTRY), this.getScreenRecord().getField(GenledScreenRecord.END_ENTRY), ExtractRangeFilter.PAD_END_FIELD));        

this.setProperty(LIMIT_PARAM, LIMIT_UNLIMITED);   // Unlimited detail records]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1860">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceCrossRef</MethodClassName>
		<LogicSource>return new GenledScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1861">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceCrossRef</MethodClassName>
		<LogicSource>return new SourceCrossRefToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1862">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceCrossRef</MethodClassName>
		<LogicSource>return new SourceCrossRefFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1863">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceCrossRef</MethodClassName>
		<LogicSource>return new SourceCrossRefHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1864">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceCrossRef</MethodClassName>
		<LogicSource>return new AcctDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1865">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceCrossRef</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1866">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceCrossRefFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1867">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceCrossRefHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1868">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceCrossRefToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1873">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SpecialFormatField</MethodClassName>
		<LogicSource><![CDATA[converter = new FieldLengthConverter((Converter)converter, 25);
if (m_recSpecialFormat == null)
{
     m_recSpecialFormat = new SpecialFormat(this.getRecord().findRecordOwner());
     if (m_recSpecialFormat.getRecordOwner() != null)
        m_recSpecialFormat.getRecordOwner().removeRecord(m_recSpecialFormat);
}
FieldConverter convert = new QueryConverter((Converter)converter, m_recSpecialFormat, SpecialFormat.NAME, true);
return createScreenComponent(ScreenModel.COMBO_BOX, itsLocation, targetScreen, convert, iDisplayFieldDesc, properties);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1876">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StateField</MethodClassName>
		<LogicSource>return new State(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1877">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StateField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), State.STATE_POSTAL_CODE_KEY, State.NAME, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1878">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StateGridScreen</MethodClassName>
		<LogicSource>return new State(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1879">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StateGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1880">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatementFormatField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
	case 0:
		tempString = "Columnar";break;
	case 1:
		tempString = "Ratios";break;
	default:
		tempString = "";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1881">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatementFormatField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
if (index == 1)
	tempString = RATIO;
else
	tempString = COLUMNAR;
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1882">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatementFormatField</MethodClassName>
		<LogicSource><![CDATA[if (tempString.equalsIgnoreCase(RATIO))
	return 1;
return 0;	// "C" or default]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1883">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatementFormatField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1884">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatementNumberField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
	case 0:
		tempString = "To-Date Balance";break;
	case 1:
		tempString = "Net Change";break;
	default:
		tempString = "";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1885">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatementNumberField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
if (index == 1)
	tempString = NET_CHANGE;
else
	tempString = BALANCE;
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1886">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatementNumberField</MethodClassName>
		<LogicSource><![CDATA[if (tempString.equalsIgnoreCase(NET_CHANGE))
	return 1;
return 0;	// "T" or default]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1887">
		<LastChanged>2012-01-18T17:03:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatementNumberField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1888">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatementTypeField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
	case 0:
		tempString = "";break;
	case 1:
		tempString = "Balance Sheet";break;
	case 2:
		tempString = "Income Statement";break;
	default:
		tempString = "";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1889">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatementTypeField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
if (index == 1)
	tempString = BALANCE_SHEET;
else
 if (index == 2)
	tempString = INCOME_STATEMENT;
else
	tempString = "";
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1890">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatementTypeField</MethodClassName>
		<LogicSource><![CDATA[if (tempString.equalsIgnoreCase(BALANCE_SHEET))
	return 1;
if (tempString.equalsIgnoreCase(INCOME_STATEMENT))
	return 2;
return 0;	// null or default]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1891">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatementTypeField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1892">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getFieldDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StateRadioConverter</MethodClassName>
		<LogicSource>return "State Taxes";</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1893">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StateScreen</MethodClassName>
		<LogicSource>return new State(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1902">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>BaseScreen screen</MethodInterface>
		<MethodClassName>Table</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1903">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>Table</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseScreen screen</MethodInterface>
		<MethodClassName>Table</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1904">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TaxRateGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1905">
		<LastChanged>2012-07-19T14:26:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TaxRateScreen</MethodClassName>
		<LogicSource><![CDATA[FieldListener listener = new MainFieldHandler(null);
this.getMainRecord().getField(TaxRate.CUT_OFF_AMOUNT).addListener(listener);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1906">
		<LastChanged>2012-01-31T10:43:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TaxRateScreen</MethodClassName>
		<LogicSource><![CDATA[Record query = this.getMainRecord();
new SStaticText(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, query.getField(TaxRate.TAX_CODE), ScreenConstants.DEFAULT_DISPLAY);
Converter converter = new IndexConverter(query.getField(TaxRate.MARITAL_STATUS));
new SStaticText(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, converter, ScreenConstants.DEFAULT_DISPLAY);
query.getField(TaxRate.CUT_OFF_AMOUNT).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
query.getField(TaxRate.TAX_RATE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1907">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Footing</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1908">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Heading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1909">
		<LastChanged>2012-02-02T22:49:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Report</MethodClassName>
		<LogicSource><![CDATA[super;

// First, set up the default fields
((DateTimeField)this.getScreenRecord().getField(ApReportScreenRecord.START_DATE)).setDate(new Date(), false, DBConstants.INIT_MOVE);
Calendar cal = ((DateTimeField)this.getScreenRecord().getField(ApReportScreenRecord.START_DATE)).getCalendar();
cal.add(Calendar.MONTH, -6);
cal.set(Calendar.DAY_OF_YEAR, 1);
((DateTimeField)this.getScreenRecord().getField(ApReportScreenRecord.START_DATE)).setCalendar(cal, true, DBConstants.INIT_MOVE);
cal.add(Calendar.YEAR, 1);
cal.add(Calendar.DAY_OF_YEAR, -1);
((DateTimeField)this.getScreenRecord().getField(ApReportScreenRecord.END_DATE)).setCalendar(cal, true, DBConstants.INIT_MOVE);

this.getScreenRecord().getField(ApReportScreenRecord.EXCLUDE_AMOUNT).addListener(new RegisterValueHandler(null));
this.getScreenRecord().getField(ApReportScreenRecord.TEMPLATE).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.TEN_99_TEMPLATE)));

this.getMainRecord().addListener(new CompareFileFilter(Vendor.SEND_1099, this.getScreenRecord().getField(ApReportScreenRecord.TRUE_FIELD), "=", null, false));
// Now add the logic to total the payment to this vendor
this.getMainRecord().setOpenMode(this.getMainRecord().getOpenMode() | DBConstants.OPEN_READ_ONLY);
TrxDesc recTrxDesc = (TrxDesc)this.getRecord(TrxDesc.TRX_DESC_FILE);
recTrxDesc.getTrxDesc(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE);
Record recBankTrx = this.getRecord(BankTrx.BANK_TRX_FILE);
recBankTrx.setKeyArea(BankTrx.PAYEE_ID_KEY);
recBankTrx.addListener(new SubFileFilter(this.getMainRecord().getField(Vendor.ID), BankTrx.PAYEE_ID, recTrxDesc.getField(TrxDesc.ID), BankTrx.PAYEE_TRX_DESC_ID, null, null));
recBankTrx.addListener(new SubCountHandler(this.getMainRecord().getField(Vendor.VENDOR_BALANCE), BankTrx.AMOUNT, true, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1910">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Report</MethodClassName>
		<LogicSource>return new ApReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1911">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Report</MethodClassName>
		<LogicSource>return new Ten99Toolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1912">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Report</MethodClassName>
		<LogicSource>return new Ten99Footing(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1913">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Report</MethodClassName>
		<LogicSource>return new Ten99Heading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1914">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Report</MethodClassName>
		<LogicSource>return new Vendor(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1915">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Report</MethodClassName>
		<LogicSource><![CDATA[super;
new BankTrx(this);
new PaymentHistory(this);
new ApControl(this);
new TrxDesc(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1916">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Report</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1917">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Toolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1918">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1919">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1920">
		<LastChanged>2012-02-01T15:15:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketReport</MethodClassName>
		<LogicSource><![CDATA[super;

//xthis.getMainRecord().setKeyArea(TicketTrx.START_SERVICE_DATE_KEY);
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.AIRLINE_ID), this.getScreenRecord().getField(TicketScreenRecord.AIRLINE_1ID), FileListener.EQUALS));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.AIRLINE_ID), this.getScreenRecord().getField(TicketScreenRecord.AIRLINE_2ID), FileListener.EQUALS));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.AIRLINE_ID), this.getScreenRecord().getField(TicketScreenRecord.AIRLINE_3ID), FileListener.EQUALS));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.AIRLINE_ID), this.getScreenRecord().getField(TicketScreenRecord.AIRLINE_4ID), FileListener.EQUALS));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.START_SERVICE_DATE), this.getScreenRecord().getField(TicketScreenRecord.START_DEPARTURE), FileListener.GREATER_THAN_EQUAL));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.START_SERVICE_DATE), this.getScreenRecord().getField(TicketScreenRecord.END_DEPARTURE), FileListener.LESS_THAN_EQUAL));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.ISSUE_DATE), this.getScreenRecord().getField(TicketScreenRecord.START_ISSUE), FileListener.GREATER_THAN_EQUAL));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.ISSUE_DATE), this.getScreenRecord().getField(TicketScreenRecord.END_ISSUE), FileListener.LESS_THAN_EQUAL));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.TICKET_NUMBER), this.getScreenRecord().getField(TicketScreenRecord.START_TICKET), FileListener.GREATER_THAN_EQUAL));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.TICKET_NUMBER), this.getScreenRecord().getField(TicketScreenRecord.END_TICKET), FileListener.LESS_THAN_EQUAL));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(TicketTrx.VOID_DATE), (BaseField)null, FileListener.NOT_EQUAL, this.getScreenRecord().getField(TicketScreenRecord.INCLUDE_VOID), true));

SortOrderHandler keyBehavior = new SortOrderHandler(this.getMainRecord());
this.getScreenRecord().getField(TicketScreenRecord.REPORT_ORDER).setValue(0); // No necessary
//xkeyBehavior.setGridTable(TicketTrx.START_SERVICE_DATE_KEY, this.getMainRecord(), 0);
//xkeyBehavior.setGridTable(TicketTrx.ISSUE_DATE_KEY, this.getMainRecord(), 1);
//xkeyBehavior.setGridTable(TicketTrx.TICKET_NUMBER_KEY, this.getMainRecord(), 2);
this.getScreenRecord().getField(TicketScreenRecord.REPORT_ORDER).addListener(keyBehavior);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1921">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketReport</MethodClassName>
		<LogicSource>return new TicketScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1922">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketReport</MethodClassName>
		<LogicSource>return new TicketToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1923">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketReport</MethodClassName>
		<LogicSource>return new TicketFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1924">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketReport</MethodClassName>
		<LogicSource>return new TicketHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1925">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketReport</MethodClassName>
		<LogicSource>return new TicketTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1926">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketReport</MethodClassName>
		<LogicSource><![CDATA[super;
new BookingAirHeader(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1927">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1928">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketReportOrderField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
	case 0:
		tempString = "Departure";break;
	case 1:
		tempString = "Issue";break;
	case 2:
		tempString = "Ticket no";break;
	default:
		tempString = "";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1929">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketReportOrderField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1930">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1931">
		<LastChanged>2012-03-27T12:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketTrx</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == TicketTrx.ARC_REPORT_POST)
    screen = Record.makeNewScreen(ARC_REPORT_POST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == TicketTrx.OVERRIDE_SCREEN)
    screen = Record.makeNewScreen(OVERRIDE_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (iDocMode == TicketTrx.OVERRIDE_GRID_SCREEN)
    screen = Record.makeNewScreen(OVERRIDE_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(TICKET_TRX_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(TICKET_TRX_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1932">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketTrxGridScreen</MethodClassName>
		<LogicSource>return new TicketTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1933">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1934">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketTrxScreen</MethodClassName>
		<LogicSource>return new TicketTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1935">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>calcPay</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record queryInfo, Record employee, Record prDedEarn, Record prTaxRates, Record empControl</MethodInterface>
		<MethodClassName>TimeTrx</MethodClassName>
		<LogicSource><![CDATA[	double regularPay = 0;
/* HACK
	if ((this.getField(kPaySalary).getState())  (employee.getField(kPayType) == "S"))
	   regularPay = employee.getField(kSalary).getValue();
	else
		regularPay = employee.getField(kHourlyRate).getValue()  this.getField(kRegularHrs).getValue();
	this.getField(kRegularPay).setValue(regularPay);
	double overtimePay = employee.getField(kOvertimeRate).getValue()  this.getField(kOvertimeHrs).getValue();
	this.getField(kOvertimePay).setValue(overtimePay);
	double special1Pay = employee.getField(kSpecial1Rate).getValue()  this.getField(kSp1Hours).getValue();
	this.getField(kSpecial1Pay).setValue(special1Pay);
	double special2Pay = employee.getField(kSpecial2Rate).getValue()  this.getField(kSp2Hours).getValue();
	this.getField(kSpecial2Pay).setValue(special2Pay);
	this.getField(kGrossPay).setValue(regularPay + overtimePay + special1Pay + special2Pay);

// Calculate earnings
//?	String freqCodes = queryInfo.getField(kFreqCodes).getString();
	String freqCodes = "S";
	this.getField(kNonTaxPay).setValue(0);
	String deCodes = "ENISV";
	for (int index = 0; ; index++)
	{
		this.SetupDE(index, deCodes, freqCodes, employee, prDedEarn);
		if (this.getField(kDedEarnAmt) == "")
			break;
		if ((prDedEarn.getField(kType) == "N") || (prDedEarn.getField(kType) == "I") || (prDedEarn.getField(kType) == "T"))
			this.getField(kNonTaxPay).setValue(this.getField(kNonTaxPay).getValue() + this.getField(kDedEarnAmt).getValue());
		else
			this.getField(kGrossPay).setValue(this.getField(kGrossPay).getValue() + this.getField(kDedEarnAmt).getValue());
	}
	this.getField(kSsGrossPay) = this.getField(kGrossPay);
	this.getField(kStateGrossPay) = this.getField(kGrossPay);
// Calculate deductions
	this.getField(kOtherDed).setValue(0);
	deCodes = "DTR";
	for (index = 0; ; index++)
	{
		this.SetupDE(index, deCodes, freqCodes, employee, prDedEarn);
		if (this.getField(kDedEarnAmt) == "")
			break;
		if (prDedEarn.getField(kType) == "D")
			this.getField(kOtherDed).setValue(this.getField(kOtherDed).getValue() + this.getField(kDedEarnAmt).getValue());
		if (prDedEarn.getField(kType) == "T")
		{
			this.getField(kGrossPay).setValue(this.getField(kGrossPay).getValue() - this.getField(kDedEarnAmt).getValue());
			this.getField(kSsGrossPay).setValue(this.getField(kSsGrossPay).getValue() - this.getField(kDedEarnAmt).getValue());
			this.getField(kStateGrossPay).setValue(this.getField(kStateGrossPay).getValue() - this.getField(kDedEarnAmt).getValue());
		}
		if (prDedEarn.getField(kType) == "R")
		{
			this.getField(kGrossPay).setValue(this.getField(kGrossPay).getValue() - this.getField(kDedEarnAmt).getValue());
			this.getField(kStateGrossPay).setValue(this.getField(kStateGrossPay).getValue() - this.getField(kDedEarnAmt).getValue());
		}
	}
// Calculate taxes
	float multiplier = 52.14;
	if (employee.getField(kPayFrequency).getLength())
	switch (employee.getField(kPayFrequency).getString().GetAt(0))
	{
	case 'B':
		multiplier = 26.07;break;
	case 'S':
		multiplier = 24;break;
	case 'M':
		multiplier = 12;break;
	case 'Q':
		multiplier = 4;break;
	case 'A':
		multiplier = 1;break;
	case 'W':
	default:
		multiplier = 52.14;break;
	}

	double tax = 0;
	String taxCode = "FE"; 	// Federal Taxes
	double fedPay = this.getField(kGrossPay).getValue();
	fedPay = fedPay  multiplier - employee.getField(kFedExemption).getValue()  empControl.getField(kFedAllow).getValue();
	if (!employee.getField(kFedExempt).getState())
		tax = this.GetTax(taxCode, employee.getField(kMaritalStatus).getString(), fedPay, prTaxRates);
	tax = tax / multiplier;
	double addDeduct = employee.getField(kAddDeduct).getValue();
	if (addDeduct)
	{
		if (addDeduct < 1.00)
			tax = tax + fedPay  addDeduct;
		else
			tax = tax + addDeduct;
	}
	this.getField(kFedTaxes).setValue(tax);

	tax = 0;
	taxCode = employee.getField(kState).getString();
	double statePay = this.getField(kStateGrossPay).getValue();
	statePay = statePay	 multiplier - employee.getField(kStateExemption).getValue()  empControl.getField(kStateAllow).getValue();
	if (!employee.getField(kStateExempt).getState())
		tax = this.GetTax(taxCode, employee.getField(kMaritalStatus).getString(), statePay, prTaxRates);
	tax = tax / multiplier;
	addDeduct = employee.getField(kAddState).getValue();
	if (addDeduct)
	{
		if (addDeduct < 1.00)
			tax = tax + statePay  addDeduct;
		else
			tax = tax + addDeduct;
	}
	this.getField(kStateTaxes).setValue(tax);

	tax = 0;
	taxCode = employee.getField(kLocalCode).getString();
	double localPay = this.getField(kGrossPay).getValue();
	localPay = localPay	 multiplier - employee.getField(kLocalExemption).getValue()  empControl.getField(kLocalAllow).getValue();
	if (!employee.getField(kLocalExempt).getState())
		tax = this.GetTax(taxCode, employee.getField(kMaritalStatus).getString(), localPay, prTaxRates);
	tax = tax / multiplier;
	addDeduct = employee.getField(kAddLocal).getValue();
	if (addDeduct)
	{
		if (addDeduct < 1.00)
			tax = tax + localPay  addDeduct;
		else
			tax = tax + addDeduct;
	}
	this.getField(kLocalTaxes).setValue(tax);

	double ficaTaxes = this.getField(kSsGrossPay).getValue()  empControl.getField(kFICAEmployee).getValue() / 100;
	if (employee.getField(kFicaExempt).getState())
		ficaTaxes = 0;
	if (ficaTaxes + employee.getField(kYtdEmpFica).getValue() > empControl.getField(kMaxFICA).getValue())
		ficaTaxes = max(0, empControl.getField(kMaxFICA).getValue()	- employee.getField(kYtdEmpFica).getValue());
	this.getField(kFicaTaxes).setValue(ficaTaxes);

	double sdiTaxes = this.getField(kGrossPay).getValue()  empControl.getField(kSdiPer).getValue() / 100;
	if (employee.getField(kSdiExempt).getState())
		sdiTaxes = 0;
	if (sdiTaxes + employee.getField(kYtdSdiWh).getValue() > empControl.getField(kSdiMax).getValue())
		sdiTaxes = max(0, empControl.getField(kSdiMax).getValue() - employee.getField(kYtdSdiWh).getValue());
	this.getField(kSdiTaxes).setValue(sdiTaxes);

	this.getField(kNetPay).setValue(this.getField(kGrossPay).getValue()
			 + this.getField(kNonTaxPay).getValue()
			 - this.getField(kFedTaxes).getValue()
			 - this.getField(kStateTaxes).getValue()
			 - this.getField(kLocalTaxes).getValue()
			 - this.getField(kFicaTaxes).getValue()
			 - this.getField(kSdiTaxes).getValue()
			 - this.getField(kOtherDed).getValue());
this.getField(kPayGross).setValue(this.getField(kGrossPay).getValue() + this.getField(kNonTaxPay).getValue());
this.getField(kPayTaxes).setValue(this.getField(kFedTaxes).getValue()
	+ this.getField(kStateTaxes).getValue()
	+ this.getField(kLocalTaxes).getValue()
	+ this.getField(kFicaTaxes).getValue()
	+ this.getField(kSdiTaxes).getValue());
*/]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1936">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getDeCode</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String deCode, Record prDedEarn</MethodInterface>
		<MethodClassName>TimeTrx</MethodClassName>
		<LogicSource><![CDATA[/* HACK
	if (deCode.IsEmpty())
	{
		this.getField(kDedEarnDesc) = "";
		return;
	}
	prDedEarn.CancelRecord();
	prDedEarn.getField(kDeductionID) = deCode;
	int errorCode = prDedEarn.ReadRecord(kReadOnlyMode);
	if (errorCode == DBConstants.NORMAL_RETURN)
	{
		this.getField(kDedEarnDesc) = prDedEarn.getField(kDeShort);
		if (this.getField(kDedEarnDesc) == "")
			this.getField(kDedEarnDesc) = prDedEarn.getField(kDeductionID);
	}
*/]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1937">
		<LastChanged>2012-01-31T10:43:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getTax</MethodName>
		<LogicDescription/>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>String taxCode, String maritalCode, double salaryAmount, Record prTaxRates</MethodInterface>
		<MethodClassName>TimeTrx</MethodClassName>
		<LogicSource><![CDATA[	double annualTax = 0;
/* HACK
	if (taxCode.IsEmpty())
		return 0;
	StringSubFileFilter temp = new StringSubFileFilter(taxCode, maritalCode, TAX_CODE, MARITAL_STATUS);
	prTaxRates.addListener(temp);
	prTaxRates.SelectRecords(kReadOnlyMode);
	double lastCutOff = 0, lastTaxRate = 0, cutOffAmount = 0, taxRate = 0;
	while (salaryAmount > cutOffAmount)
	{
		lastCutOff = cutOffAmount;
		lastTaxRate = taxRate;
		int errorCode = prTaxRates.NextRecord();
		cutOffAmount = prTaxRates.getField(kCutOffAmount).getValue();
		if (errorCode)
			cutOffAmount = salaryAmount;
		taxRate = prTaxRates.getField(kTaxRate).getValue();
		annualTax += (min(salaryAmount, cutOffAmount) - lastCutOff)  lastTaxRate / 100;
	}
	prTaxRates.removeListener(temp);
*/
	return annualTax;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1938">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDE</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int index, String deTypes, String freqCodes, Record employee, Record prDedEarn</MethodInterface>
		<MethodClassName>TimeTrx</MethodClassName>
		<LogicSource><![CDATA[/* HACK
	String deCode = "";
	String freqCode = "";
	String deType = "";
	this.getField(kDedEarnAmt) = "";
	this.getField(kDedEarnHours) = "";
	this.getField(kDedEarnDesc) = "";
	this.getField(kDedEarnYtd) = "";
	int dedNo = 1, indexTarget = 0;
	while ((indexTarget <= index)  (dedNo <= 8))
	{
		freqCode = freqCodes;	// Starts out true
		switch(dedNo)
		{
		case 1:
			deCode = this.getField(kTimeDe1).getString();
			this.getField(kDedEarnHours) =  this.getField(kTimeHrs1);
			this.getField(kDedEarnAmt) = this.getField(kTimeAmt1);
			break;
		case 2:
			deCode = this.getField(kTimeDe2).getString();
			this.getField(kDedEarnHours) =  this.getField(kTimeHrs2);
			this.getField(kDedEarnAmt) = this.getField(kTimeAmt2);
			break;
		case 3:
			deCode = this.getField(kTimeDe3).getString();
			this.getField(kDedEarnHours) =  this.getField(kTimeHrs3);
			this.getField(kDedEarnAmt) = this.getField(kTimeAmt3);
			break;
		case 4:
			deCode = this.getField(kTimeDe4).getString();
			this.getField(kDedEarnHours) =  this.getField(kTimeHrs4);
			this.getField(kDedEarnAmt) = this.getField(kTimeAmt4);
			break;
		case 5:
			deCode = employee.getField(kDeductionID1).getString();
			freqCode =	employee.getField(kFrequency1).getString();
			this.getField(kDedEarnAmt) = employee.getField(kAmount1);
			break;
		case 6:
			deCode = employee.getField(kDeductionID2).getString();
			freqCode =	employee.getField(kFrequency2).getString();
			this.getField(kDedEarnAmt) = employee.getField(kAmount2);
			break;
		case 7:
			deCode = employee.getField(kDeductionID3).getString();
			freqCode =	employee.getField(kFrequency3).getString();
			this.getField(kDedEarnAmt) = employee.getField(kAmount3);
			break;
		case 8:
			deCode = employee.getField(kDeductionID4).getString();
			freqCode =	employee.getField(kFrequency4).getString();
			this.getField(kDedEarnAmt) = employee.getField(kAmount4);
			break;
		default:
			deCode = "";
		}
		dedNo++;
		if (deCode.IsEmpty())
			continue;
		if (!freqCode.IsEmpty()) if (freqCodes.Find(freqCode.GetAt(0)) == -1)
			continue;
		this.GetDeCode(deCode, prDedEarn);
		deType = prDedEarn.getField(kType).getString();
		if (!deType.IsEmpty()) if (deTypes.Find(deType.GetAt(0)) == -1)
			continue;
		indexTarget++;
		if (this.getField(kDedEarnDesc) == "")
			this.getField(kDedEarnAmt) = "";
		else
		{
			if (this.getField(kDedEarnAmt).getValue() < 1.00)
				this.getField(kDedEarnAmt).setValue(this.getField(kDedEarnAmt).getValue()  this.getField(kGrossPay).getValue());
		}
	}
*/]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1939">
		<LastChanged>2012-01-31T20:54:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TimeTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
FileListener readSecond = new DisplayReadHandler(TimeTrx.TIME_EMP_NO, this.getRecord(Employee.EMPLOYEE_FILE), Employee.ID);
this.getRecord(TimeTrx.TIME_TRX_FILE).addListener(readSecond);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1940">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TimeTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Employee(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1941">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TimeTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1942">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TimeTrxHeader</MethodClassName>
		<LogicSource><![CDATA[Record prTimeTrx = this.getRecord(TimeTrx.TIME_TRX_FILE);
FieldListener readKeyed = new MainFieldHandler();
prTimeTrx.getField(TimeTrx.TIME_EMP_NO).addListener(readKeyed);
Record employee = this.getRecord(Employee.EMPLOYEE_FILE);
FileListener subFile = new SubFileFilter(this.getScreenRecord().getField(TimeTrxScreenRecord.PAY_ENDING_DATE), TimeTrx.PAY_ENDING, null, null, null, null);
prTimeTrx.addListener(subFile);
FieldListener secondary = new ReadSecondaryHandler(employee, Employee.ID);
//+prTimeTrx.getField(PrTimeTrx.TIME_EMP_NO).addListener(secondary);
//+FileListener checkField = new ContainsFieldFileBehavior(Employee.PAY_FREQUENCY, this.getScreenRecord().getField(HFPrTimeTrx.EMP_TO_PAY));
//+employee.addListener(checkField);
//+FileListener checkTerminated = new SkipBlankBehavior(Employee.TERMINATION_DATE, true);	// Skip only if NOT null
//+employee.addListener(checkTerminated);	// Skip terminated empployees
//+FieldListener fieldBeh = new DisableOnFieldHandler(prTimeTrx.getField(PrTimeTrx.PAY_SALARY), "H");
//+employee.getField(Employee.PAY_TYPE).addListener(fieldBeh);
//+FileListener disableKey = new DisableOnValid(PrTimeTrx.TIME_EMP_NO);
//+prTimeTrx.addListener(disableKey);
FileListener checkValid = new CheckValidEmployee(this.getScreenRecord().getField(TimeTrxScreenRecord.EMP_TO_PAY));
employee.addListener(checkValid);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1943">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TimeTrxHeader</MethodClassName>
		<LogicSource>return new TimeTrxScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1944">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TimeTrxHeader</MethodClassName>
		<LogicSource>return new TimeTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1945">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TimeTrxHeader</MethodClassName>
		<LogicSource><![CDATA[super;
new Employee(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1946">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>selectFirstField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TimeTrxHeader</MethodClassName>
		<LogicSource><![CDATA[/*POSITION pos = m_SFieldList.GetHeadPosition();
while (pos)
{		// Sub-Screen's field should get the focus
	ScreenField sField = (ScreenField)m_SFieldList.GetNext(pos);
	if (sField.getMainRecord() != null)
	{
		((Screen)sField).SelectFirstField();
		return;
	}
}*/]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1947">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TimeTrxHeader</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1949">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TimeTrxScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1950">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TitleField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
	case 1:
		tempString = "Mr";break;
	case 2:
		tempString = "Ms";break;
	case 3:
		tempString = "Mrs";break;
	case 4:
		tempString = "Miss";break;
	case 5:
		tempString = "Dr";break;
	case 0:
	default:
		tempString = "";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1951">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TitleField</MethodClassName>
		<LogicSource><![CDATA[short index = 0;
if (tempString.equalsIgnoreCase("Mr"))
	index = 1;
if (tempString.equalsIgnoreCase("Ms"))
	index = 2;
if (tempString.equalsIgnoreCase("Mrs"))
	index = 3;
if (tempString.equalsIgnoreCase("Miss"))
	index = 4;
if (tempString.equalsIgnoreCase("Dr"))
	index = 5;
return index;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1952">
		<LastChanged>2012-01-18T16:26:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TitleField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1953">
		<LastChanged>2012-01-31T10:43:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addActionListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Tour</MethodClassName>
		<LogicSource><![CDATA[this.getField(Tour.DEPARTURE_DATE).addListener(new FieldDataScratchHandler(null));

this.getField(Tour.ORDER_COMP_DATE).addListener(new CalcActionDateHandler(null));
this.getField(Tour.FINALIZE_DATE).addListener(new CalcActionDateHandler(null));
this.getField(Tour.CLOSED_DATE).addListener(new CalcActionDateHandler(null));
this.getField(Tour.FINAL_DOC_DATE).addListener(new CalcActionDateHandler(null));
this.getField(Tour.TICKET_DATE).addListener(new CalcActionDateHandler(null));
this.getField(Tour.SP_1_DATE).addListener(new CalcActionDateHandler(null));
this.getField(Tour.SP_2_DATE).addListener(new CalcActionDateHandler(null));
this.getField(Tour.DEPARTURE_DATE).addListener(new CalcActionDateHandler(null));

this.getField(Tour.ORDER_COMPONENTS).addListener(new CalcActionDateHandler(null));
this.getField(Tour.FINALIZED).addListener(new CalcActionDateHandler(null));
this.getField(Tour.CLOSED).addListener(new CalcActionDateHandler(null));
this.getField(Tour.FINAL_DOCS).addListener(new CalcActionDateHandler(null));
this.getField(Tour.TICKETS).addListener(new CalcActionDateHandler(null));
this.getField(Tour.SP_1).addListener(new CalcActionDateHandler(null));
this.getField(Tour.SP_2).addListener(new CalcActionDateHandler(null));
this.getField(Tour.DEPARTED).addListener(new CalcActionDateHandler(null));

this.getField(Tour.TOUR_STATUS_ID).addListener(new TourStatusEventHandler(null));

this.getField(Tour.ORDER_COMPONENTS).addListener(new TourEventHandler(TourEvent.ORDER_COMPONENTS));
this.getField(Tour.FINALIZED).addListener(new TourEventHandler(TourEvent.FINALIZATION));
this.getField(Tour.CLOSED).addListener(new TourEventHandler(TourEvent.TOUR_CLOSED));
this.getField(Tour.FINAL_DOCS).addListener(new TourEventHandler(TourEvent.FINAL_DOCS));
this.getField(Tour.TICKETS).addListener(new TourEventHandler(TourEvent.TICKETING));
this.getField(Tour.SP_1).addListener(new TourEventHandler(TourEvent.SPECIAL_1));
this.getField(Tour.SP_2).addListener(new TourEventHandler(TourEvent.SPECIAL_2));
this.getField(Tour.DEPARTED).addListener(new TourEventHandler(TourEvent.DEPARTURE));

this.getField(Tour.CANCELLED).addListener(new TourEventHandler(TourEvent.TOUR_CANCELLED));

this.getField(Tour.SERV_CONF).addListener(new TourEventHandler(TourEvent.SERVICES_CONFIRMED));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1954">
		<LastChanged>2012-01-31T10:43:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Tour</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new NoDeleteModifyHandler(true, false));

this.getField(Tour.FINALIZED).addListener(new FinalizeHandler(null));
this.getField(Tour.ORDER_COMPONENTS).addListener(new TourOrderHandler(null));
this.getField(Tour.CANCELLED).addListener(new TourOrderHandler(null));

this.getField(Tour.TOUR_STATUS_SUMMARY).addListener(new UpdateTourStatusSummaryHandler(null));
((TourStatusField)this.getField(Tour.TOUR_STATUS_ID)).getIconField(null).addListener(new TourStatusUpdateHandler(null));

this.addActionListeners();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1955">
		<LastChanged>2012-04-07T12:06:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>calcTourDates</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Rec recTourHeader</MethodInterface>
		<MethodClassName>Tour</MethodClassName>
		<LogicSource><![CDATA[if (recTourHeader == null)
    recTourHeader = ((ReferenceField)this.getField(Tour.TOUR_HEADER_ID)).getReference();
Record recTourClass = ((ReferenceField)recTourHeader.getField(TourHeader.TOUR_CLASS_ID)).getReference();
Calendar calDepartureDate = ((DateTimeField)this.getField(Tour.DEPARTURE_DATE)).getCalendar();

Calendar calTargetDate = (Calendar)calDepartureDate.clone();
calTargetDate.add(Calendar.DATE, -(int)recTourClass.getField(TourClass.TICKET_DAYS).getValue());
((DateTimeField)this.getField(Tour.TICKET_DATE)).setCalendar(calTargetDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);

calTargetDate = (Calendar)calDepartureDate.clone();
calTargetDate.add(Calendar.DATE, -(int)recTourClass.getField(TourClass.SP_1_DAYS).getValue());
((DateTimeField)this.getField(Tour.SP_1_DATE)).setCalendar(calTargetDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);

calTargetDate = (Calendar)calDepartureDate.clone();
calTargetDate.add(Calendar.DATE, -(int)recTourClass.getField(TourClass.SP_2_DAYS).getValue());
((DateTimeField)this.getField(Tour.SP_2_DATE)).setCalendar(calTargetDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);

calTargetDate = (Calendar)calDepartureDate.clone();
calTargetDate.add(Calendar.DATE, -(int)recTourClass.getField(TourClass.FINAL_DOC_DAYS).getValue());
((DateTimeField)this.getField(Tour.FINAL_DOC_DATE)).setCalendar(calTargetDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);

calTargetDate = (Calendar)calDepartureDate.clone();
calTargetDate.add(Calendar.DATE, -(int)recTourClass.getField(TourClass.ORDER_COMP_DAYS).getValue());
((DateTimeField)this.getField(Tour.ORDER_COMP_DATE)).setCalendar(calTargetDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);

calTargetDate = (Calendar)calDepartureDate.clone();
calTargetDate.add(Calendar.DATE, -(int)recTourClass.getField(TourClass.FINALIZE_DAYS).getValue());
((DateTimeField)this.getField(Tour.FINALIZE_DATE)).setCalendar(calTargetDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);

calTargetDate = (Calendar)calDepartureDate.clone();
calTargetDate.add(Calendar.DATE, -(int)recTourClass.getField(TourClass.CLOSED_DAYS).getValue());
((DateTimeField)this.getField(Tour.CLOSED_DATE)).setCalendar(calTargetDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);

this.getField(Tour.CLOSED).setState(false);
this.getField(Tour.FINALIZED).setState(false);
this.getField(Tour.ORDER_COMPONENTS).setState(false);
this.getField(Tour.FINAL_DOCS).setState(false);
this.getField(Tour.TICKETS).setState(false);
this.getField(Tour.SP_1).setState(false);
this.getField(Tour.SP_2).setState(false);
this.getField(Tour.SERV_CONF).setState(false);
this.getField(Tour.DEPARTED).setState(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="1957">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>lookupTour</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Record recTourHeader, BaseField fldDepartureDate</MethodInterface>
		<MethodClassName>Tour</MethodClassName>
		<LogicSource><![CDATA[FileListener subBehavior = null;
BaseField fldTemp = null;
boolean[] rgbRecordListeners = null;
Object[] rgobjEnabledFields = null;
int iOldOrder = this.getDefaultOrder();
try {
    // There are probably a million listeners on this record, so disable them first.
    rgbRecordListeners = this.setEnableListeners(false);
    rgobjEnabledFields = this.setEnableFieldListeners(false);

    if (fldDepartureDate == null)
        fldDepartureDate = this.getField(Tour.DEPARTURE_DATE);
    if (fldDepartureDate.getRecord() == this)
    {
        fldTemp = new DateField(null, DBConstants.BLANK, DBConstants.DEFAULT_FIELD_LENGTH, DBConstants.BLANK, null);
        fldTemp.moveFieldToThis(fldDepartureDate, DBConstants.DONT_DISPLAY, DBConstants.INIT_MOVE);
        fldDepartureDate = fldTemp;
    }

    this.addNew();
    this.setKeyArea(Tour.TOUR_HEADER_ID_KEY);
    subBehavior = new SubFileFilter(recTourHeader.getField(TourHeader.ID), Tour.TOUR_HEADER_ID, fldDepartureDate, Tour.DEPARTURE_DATE, null, null);
    this.addListener(subBehavior);

    this.close();
    if (this.hasNext())
    {
        this.next();
        // Restore the state before I started
        this.removeListener(subBehavior, true);
        subBehavior = null;
        if (rgbRecordListeners != null)
            this.setEnableListeners(rgbRecordListeners);
        rgbRecordListeners = null;
        if (rgobjEnabledFields != null)
            this.setEnableFieldListeners(rgobjEnabledFields);
        rgobjEnabledFields = null;

        this.setKeyArea(Tour.ID_KEY);   // Re-read and do all listeners.
        this.seek(DBConstants.EQUALS);
        this.edit();
        this.calcTourDates(recTourHeader); // If change, resched all
    }
    else
    {
        if (this.getTask() != null)
            return this.getTask().setLastError("A Series tour does not exist for this departure date");
        else
            return DBConstants.ERROR_RETURN;
    }
} catch (DBException ex)   {
    ex.printStackTrace();
    return DBConstants.ERROR_RETURN;
} finally { // Restore the state
    this.setKeyArea(iOldOrder);
    if (subBehavior != null)
        this.removeListener(subBehavior, true);
    subBehavior = null;
    if (fldTemp != null)
        fldTemp.free();
    fldTemp = null;
    if (rgbRecordListeners != null)
        this.setEnableListeners(rgbRecordListeners);
    rgbRecordListeners = null;
    if (rgobjEnabledFields != null)
        this.setEnableFieldListeners(rgobjEnabledFields);
    rgobjEnabledFields = null;
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1958">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>setupNewTour</MethodName>
		<LogicDescription>From this tour header and departure date, create a new tour.</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Record recTourHeader, BaseField fldDepDate, String strCode, String strDescription</MethodInterface>
		<MethodClassName>Tour</MethodClassName>
		<LogicSource><![CDATA[boolean[] rgbRecordListeners = null;
Object[] rgobjEnabledFields = null;
int iOldOrder = this.getDefaultOrder();
try {
    // There are probably a million listeners on this record, so disable them first.
    rgbRecordListeners = this.setEnableListeners(false);
    rgobjEnabledFields = this.setEnableFieldListeners(false);

    Calendar calDepDate = null;
    if (fldDepDate instanceof DateTimeField)
        calDepDate = ((DateTimeField)fldDepDate).getCalendar();
    if (calDepDate == null)
        calDepDate = ((DateTimeField)this.getField(Tour.DEPARTURE_DATE)).getCalendar();

    if ((this.getOpenMode() & DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY) != DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY)
        this.setOpenMode(this.getOpenMode() | DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);
    this.addNew();
    ((DateTimeField)this.getField(Tour.DEPARTURE_DATE)).setCalendar(calDepDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
    if (strCode == null)
        strCode = DBConstants.BLANK;
    this.getField(Tour.CODE).setString(strCode, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
    if ((strDescription == null) || (strDescription.length() == 0))
        strDescription = recTourHeader.getField(TourHeader.DESCRIPTION).toString() + " - " + fldDepDate.toString();
    this.getField(Tour.DESCRIPTION).setString(strDescription, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
    this.getField(Tour.TOUR_HEADER_ID).moveFieldToThis(recTourHeader.getField(TourHeader.ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
    TourClass recTourClass = (TourClass)((ReferenceField)recTourHeader.getField(TourHeader.TOUR_CLASS_ID)).getReference();
    recTourClass.fixBasedFields();
    this.moveTourClassInfo(recTourClass);

    if (rgbRecordListeners != null)
        this.setEnableListeners(rgbRecordListeners);
    rgbRecordListeners = null;
    if (rgobjEnabledFields != null)
        this.setEnableFieldListeners(rgobjEnabledFields);
    rgobjEnabledFields = null;

    this.calcTourDates(recTourHeader);

    this.add();
    Object bookmark = this.getLastModified(DBConstants.BOOKMARK_HANDLE);
    this.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
    this.edit();
} catch (DBException ex)    {
    ex.printStackTrace();
    return DBConstants.ERROR_RETURN;
} finally { // Restore the state
    this.setKeyArea(iOldOrder);
    if (rgbRecordListeners != null)
        this.setEnableListeners(rgbRecordListeners);
    rgbRecordListeners = null;
    if (rgobjEnabledFields != null)
        this.setEnableFieldListeners(rgobjEnabledFields);
    rgobjEnabledFields = null;
}   
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1960">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>updateTourApTrx</MethodName>
		<LogicDescription>Update all the vouchers for this tour.</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BookingDetail recBookingDetail, ApTrx recApTrx</MethodInterface>
		<MethodClassName>Tour</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
BookingDetail recBookingDetailNew = null;
ApTrx recApTrxNew = null;
RecordOwner recordOwner = this.findRecordOwner();
if (recBookingDetail == null)
{
    if (recordOwner != null)
        if (recordOwner.getRecord(Booking.BOOKING_FILE) != null)
        {
        }
    recBookingDetail = new BookingDetail(recordOwner);
    recBookingDetailNew = recBookingDetail;
}
recBookingDetail.setKeyArea(BookingDetail.TOUR_ID_KEY);   
recBookingDetail.addListener(new SubFileFilter(this));

if (recApTrx == null)
{
    recApTrx = new ApTrx(recordOwner);
    recApTrxNew = recApTrx;
}
recApTrx.setKeyArea(ApTrx.TOUR_ID_KEY);
recApTrx.addListener(new SubFileFilter(this));
recApTrx.addListener(new UpdateDepEstHandler(null));

ApTrx recApTrxAdd = new ApTrx(recordOwner);    // This one I use for new ApTrxs.
recApTrxAdd.addListener(new UpdateDepEstHandler(null));

int iOldOpenMode = this.getOpenMode();
try {
    this.setOpenMode(iOldOpenMode & ~DBConstants.OPEN_READ_ONLY);   // Allow write (I don't know where this file has been)
    this.writeAndRefresh();

    recBookingDetail.close();
    recApTrx.close();
    BaseTable tblBookingDetail = recBookingDetail.getTable();
    BaseTable tblApTrx = recApTrx.getTable();
    recBookingDetail = (BookingDetail)tblBookingDetail.next();
    recApTrx = (ApTrx)tblApTrx.next();

    while ((recApTrx != null) || (recBookingDetail != null))
    {
        boolean bAddNewVoucher = false;
        int intProductTypeID = 0;
        Vendor recVendor = null;
        if ((recApTrx == null)
            || ((recBookingDetail != null) && (recBookingDetail.getField(BookingDetail.VENDOR_ID).compareTo(recApTrx.getField(ApTrx.VENDOR_ID)) > 0)))
                bAddNewVoucher = true;
        else
        {    // (recApTrx != null)
            if ((recBookingDetail == null)
                || ((recApTrx != null) && (recBookingDetail.getField(BookingDetail.VENDOR_ID).compareTo(recApTrx.getField(ApTrx.VENDOR_ID)) < 0)))
                    bAddNewVoucher = false;
            else
            {
                recVendor = (Vendor)((ReferenceField)recApTrx.getField(ApTrx.VENDOR_ID)).getReference();
                if (OperationTypeField.ALL_TOGETHER_CODE.equalsIgnoreCase(recVendor.getField(Vendor.OPERATION_TYPE_CODE).toString()))
                    bAddNewVoucher = false;
                else if (OperationTypeField.INDIVIDUALLY_CODE.equalsIgnoreCase(recVendor.getField(Vendor.OPERATION_TYPE_CODE).toString()))
                {
                    if (recBookingDetail.getField(BookingDetail.AP_TRX_ID).compareTo(recApTrx.getField(ApTrx.ID)) != 0)
                        bAddNewVoucher = true;
                    else
                        bAddNewVoucher = false;
                }
                else // if (OperationTypeField.LIKE_TOGETHER_CODE.equalsIgnoreCase(recVendor.getField(Vendor.OPERATION_TYPE_CODE).toString()))
                {
                    if (recBookingDetail.getField(BookingDetail.PRODUCT_TYPE_ID).compareTo(recApTrx.getField(ApTrx.PRODUCT_TYPE_ID)) > 0)
                        bAddNewVoucher = true;
                    else
                        bAddNewVoucher = false;
                }
            }
        }
        if (recBookingDetail != null)
            if (recVendor == null)
                recVendor = (Vendor)((ReferenceField)recBookingDetail.getField(BookingDetail.VENDOR_ID)).getReference();
        if (recVendor != null)
            if ((OperationTypeField.LIKE_TOGETHER_CODE.equalsIgnoreCase(recVendor.getField(Vendor.OPERATION_TYPE_CODE).toString()))
                || (OperationTypeField.INDIVIDUALLY_CODE.equalsIgnoreCase(recVendor.getField(Vendor.OPERATION_TYPE_CODE).toString())))
                    intProductTypeID = (int)recBookingDetail.getField(BookingDetail.PRODUCT_TYPE_ID).getValue();
        if (bAddNewVoucher)
        { // Branch 1 - No A/P detail to match product detail (Create A/P detail & U/D all product detail)
            ApTrx recNewApTrx = recApTrxAdd.addNewApTrx(this.getField(Tour.ID), recVendor, intProductTypeID);
            iErrorCode = recNewApTrx.updateThisApTrx(tblBookingDetail, this, recVendor, intProductTypeID);
        }
        else
        { // Branch 2 - First product detail matches A/P detail (Scan product detail to make sure all are here)
            iErrorCode = recApTrx.updateThisApTrx(tblBookingDetail, this, recVendor, intProductTypeID);
            recApTrx = (ApTrx)tblApTrx.next();
        }
        // No need to call tblCustSaleDetail.next(), because xxxNewVoucher has already
        recBookingDetail = null;
        if ((tblBookingDetail.getCurrentTable() != null)
            && (tblBookingDetail.getCurrentTable().getRecord().getEditMode() != DBConstants.EDIT_ADD)
            && (tblBookingDetail.getCurrentTable().getRecord().getEditMode() != DBConstants.EDIT_NONE))
                recBookingDetail = (BookingDetail)tblBookingDetail.getCurrentTable().getRecord();
    }
} catch (DBException ex)   {
    ex.printStackTrace();
} finally {
    this.setOpenMode(iOldOpenMode);   // Set it back
    if (recBookingDetailNew != null)
        recBookingDetailNew.free();
    if (recApTrxNew != null)
        recApTrxNew.free();
    if (recApTrxAdd != null)
        recApTrxAdd.free();
    recBookingDetailNew = null;
    recApTrxNew = null;
    recApTrxAdd = null;
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1961">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getHeaderRecord().getField(Tour.ID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord(), true));
/*
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(VendorScreenRecord.TOTAL), ApTrx.INVOICE_AMOUNT, false, true));	// Init this field override for other value
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(VendorScreenRecord.BALANCE), ApTrx.INVOICE_BALANCE, false, true));	// Init this field override for other value
this.getScreenRecord().getField(VendorScreenRecord.TOUR_ID).addListener(new FieldReSelectHandler(this));

String strDisplayType = this.getProperty(this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE).getFieldName());
if (strDisplayType != null)
    this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE).setString(strDisplayType, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
this.getMainRecord().addListener(new FilterApTrxHandler(this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE)));
this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE).addListener(new FieldReSelectHandler(this));
*/
this.setEditing(false);
this.setAppending(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1965">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourApTrxGridScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1967">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourApTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1968">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourApTrxGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourApTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1970">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClassField</MethodClassName>
		<LogicSource>return new TourClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1971">
		<LastChanged>2012-01-31T10:43:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClassField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), TourClass.CLASS_NAME_KEY, TourClass.CLASS_NAME, false, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1972">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>getMaxLength</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCodeConverter</MethodClassName>
		<LogicSource><![CDATA[return 10;		// 10 characters]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1973">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCodeConverter</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
String strTemp = strField;
int iFirstNumber = -1;
int iFirstSpace = strTemp.length();
strTemp = strTemp.toUpperCase();
for (int iIndex = 0; iIndex < strTemp.length(); iIndex++)
{
    if (Character.isDigit(strTemp.charAt(iIndex)))
        if (iFirstNumber == -1)
            iFirstNumber = iIndex;   // This is the first number
    if (Character.isSpaceChar(strTemp.charAt(iIndex)))
        if (iFirstSpace == strTemp.length())
        {
            iFirstSpace = iIndex;  // This is the first space
            break;
        }
}
int iCodeLength = Math.min(iFirstSpace, iFirstNumber) + 1 - 1;
if (iFirstNumber == -1)
    iCodeLength = iFirstSpace;
int iDateLength = strTemp.length() - iFirstNumber;
if ((iFirstNumber != -1) & (iFirstSpace+1 >= 3) & (iFirstNumber+1 <= 5) &
     (iDateLength >= 4) & (iDateLength <= 5))
{ // Input has a date, get the date
    if (iCodeLength <= 4)    // Blank the code field to keep the tour header listener from kicking in
        iErrorCode = this.getNextConverter().setString(Constants.BLANK, bDisplayOption, iMoveMode);  // Tour Code
    int iMonth = Integer.parseInt(strTemp.substring(iFirstNumber, iFirstNumber + 2));
    int iDay = Integer.parseInt(strTemp.substring(iFirstNumber+2, iFirstNumber + 2 + 2));
    int iYearDigit = -1;
    if (iDateLength == 5)
        iYearDigit = Integer.parseInt(strTemp.substring(iFirstNumber+4, iFirstNumber+4+1));
    Calendar calTime = Calendar.getInstance();
    int iYear = calTime.get(Calendar.YEAR);   // Current year
    int iLastDigit = iYear - (iYear / 10 * 10);
    if (iYearDigit != -1) if (iYearDigit != iLastDigit)
    {
        iYear = (iYear / 10 * 10) + iYearDigit;
        if (iYear < calTime.get(Calendar.YEAR) - 3)
            iYear = iYear + 10;
    }
    Calendar calTargetTimeTime = Calendar.getInstance();
    calTargetTimeTime.set(iYear, iMonth - 1, iDay, 0, 0, 0);
    if (iYearDigit == -1) // If they didn't enter a date
        if (calTargetTimeTime.getTime().getTime() < calTime.getTime().getTime())  // And I get a date from last year, bump to next year
            calTargetTimeTime.set(iYear + 1, iMonth, iDay, 0, 0, 0);
    ((DateTimeField)m_fldTourDepDate).setCalendar(calTargetTimeTime, bDisplayOption, iMoveMode);  // Tour departure date
}
if (iCodeLength <= 4)
    iErrorCode = this.getNextConverter().setString(strTemp.substring(0, iCodeLength), bDisplayOption, iMoveMode);  // Tour Code
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1974">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourCodeConverter*2</MethodName>
		<LogicDescription/>
		<MethodReturns>fldHdrTourCode</MethodReturns>
		<MethodInterface>BaseField fldHdrTourCode, BaseField fldTourDepDate</MethodInterface>
		<MethodClassName>TourCodeConverter</MethodClassName>
		<LogicSource>m_fldTourDepDate = fldTourDepDate;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1975">
		<LastChanged>2012-01-31T10:43:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysis</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(ApTrx.AP_TRX_FILE).setKeyArea(ApTrx.TOUR_ID_KEY);
this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.TOUR_ID).addListener(new ReadSecondaryHandler(this.getRecord(Tour.TOUR_FILE)));

this.getRecord(ApTrx.AP_TRX_FILE).addListener(new CompareFileFilter(this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.TOUR_ID), this.getScreenRecord().getField(CostAnalysisScreenRecord.TOUR_ID), "=", null, true));
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new FilterApTrxDateRange(ApTrx.DEPARTURE_DATE, this.getScreenRecord().getField(ApReportScreenRecord.START_DEPARTURE), this.getScreenRecord().getField(ApReportScreenRecord.END_DEPARTURE)));

Record recPaymentHistory = this.getRecord(PaymentHistory.PAYMENT_HISTORY_FILE);
Record recApTrx = this.getRecord(ApTrx.AP_TRX_FILE);
recPaymentHistory.addListener(new SubFileFilter(recApTrx));
recApTrx.addListener(new RecountOnValidHandler(recPaymentHistory));
recPaymentHistory.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.PAYMENTS), PaymentHistory.AMOUNT_LOCAL, false, true));

recApTrx.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.SUB_TOTAL_DEP_EST_USD), ApTrx.DEPARTURE_ESTIMATE_LOCAL, true, true, true));
recApTrx.addListener(new InvoiceAmountSubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.SUB_TOTAL_INVOICE_USD), ApTrx.INVOICE_LOCAL, true, true, true));
recPaymentHistory.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.SUB_TOTAL_PAYMENTS_USD), PaymentHistory.AMOUNT_LOCAL, true, true, true));
recApTrx.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.SUB_TOTAL_BAL_USD), ApTrx.INVOICE_BALANCE_LOCAL, true, true, true));

recApTrx.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.TOTAL_BALANCE), ApTrx.DEPARTURE_ESTIMATE_LOCAL, true, true));
recApTrx.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.TOTAL_INVOICE_USD), ApTrx.INVOICE_LOCAL, true, true));
recPaymentHistory.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.TOTAL_PAYMENTS_USD), PaymentHistory.AMOUNT_LOCAL, true, true));
recApTrx.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.TOTAL_USD_BAL), ApTrx.INVOICE_BALANCE_LOCAL, true, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1976">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysis</MethodClassName>
		<LogicSource>return new CostAnalysisScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1977">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysis</MethodClassName>
		<LogicSource>return new TourCostAnalysisToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1978">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysis</MethodClassName>
		<LogicSource>return new TourCostAnalysisFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1979">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysis</MethodClassName>
		<LogicSource>return new TourCostAnalysisHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1980">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysis</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1981">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysis</MethodClassName>
		<LogicSource><![CDATA[super;
new Tour(this);
new PaymentHistory(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1982">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysis</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1983">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysisFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1984">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysisHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1985">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysisToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1986">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1987">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1988">
		<LastChanged>2012-02-03T20:00:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailReport</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(Tour.TOUR_FILE).setKeyArea(Tour.TOUR_HEADER_ID_KEY);
this.getRecord(ApTrx.AP_TRX_FILE).setKeyArea(ApTrx.TOUR_ID_KEY);

Record recTour = this.getRecord(Tour.TOUR_FILE);
//xthis.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.TOUR_ID).addListener(new ReadSecondaryHandler(recTour));
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubFileFilter(recTour));
// Add Filters
this.getRecord(Tour.TOUR_FILE).addListener(new CompareFileFilter(this.getRecord(Tour.TOUR_FILE).getField(Tour.ID), this.getScreenRecord().getField(ApReportScreenRecord.TOUR_ID), "=", null, true));
//this.getRecord(Tour.TOUR_FILE).addListener(new CompareFileFilter(this.getRecord(Tour.TOUR_FILE).getField(Tour.TOUR_TYPE_ID), this.getScreenRecord().getField(ApReportScreenRecord.TOUR_TYPE_ID), "=", null, true));
this.getRecord(Tour.TOUR_FILE).addListener(new CompareFileFilter(this.getRecord(Tour.TOUR_FILE).getField(Tour.TOUR_HEADER_ID), this.getScreenRecord().getField(ApReportScreenRecord.TOUR_HEADER_ID), "=", null, true));
//this.getRecord(Tour.TOUR_FILE).addListener(new CompareFileFilter(this.getRecord(Tour.TOUR_FILE).getField(Tour.TOUR_CLASS_ID), this.getScreenRecord().getField(ApReportScreenRecord.TOUR_CLASS_ID), "=", null, true));
//this.getRecord(Tour.TOUR_FILE).addListener(new CompareFileFilter(this.getRecord(Tour.TOUR_FILE).getField(Tour.PRODUCT_CATEGORY_ID), this.getScreenRecord().getField(ApReportScreenRecord.PRODUCT_CATEGORY_ID), "=", null, true));
this.getRecord(Tour.TOUR_FILE).addListener(new CompareFileFilter(this.getRecord(Tour.TOUR_FILE).getField(Tour.TOUR_STATUS_ID), this.getScreenRecord().getField(ApReportScreenRecord.TOUR_STATUS_ID), "=", null, true));
this.getRecord(Tour.TOUR_FILE).addListener(new CompareFileFilter(this.getRecord(Tour.TOUR_FILE).getField(Tour.DEPARTURE_DATE), this.getScreenRecord().getField(ApReportScreenRecord.START_DEPARTURE), ">=", null, true));
this.getRecord(Tour.TOUR_FILE).addListener(new CompareFileFilter(this.getRecord(Tour.TOUR_FILE).getField(Tour.DEPARTURE_DATE), this.getScreenRecord().getField(ApReportScreenRecord.END_DEPARTURE), "<=", null, true));

this.getRecord(ApTrx.AP_TRX_FILE).addListener(new ApTrxFilter(ApTrx.TRX_STATUS_ID, (ScreenRecord)this.getScreenRecord()));

this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(ApReportScreenRecord.TOTAL_USD_BAL), ApTrx.INVOICE_BALANCE_LOCAL, true, true, true));    // Sub-count
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(ApReportScreenRecord.GRAND_USD_BAL), ApTrx.INVOICE_BALANCE_LOCAL, true, true));          // Total count

this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(ApReportScreenRecord.REPORT_COUNT), null, true, true, true));    // Sub-count
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(ApReportScreenRecord.COUNT), null, true, true, false));     // Total count

this.getRecord(ApTrx.AP_TRX_FILE).addListener(new MoveEstimateHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1989">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailReport</MethodClassName>
		<LogicSource>return new ApReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1990">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailReport</MethodClassName>
		<LogicSource>return new TourDetailToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1991">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailReport</MethodClassName>
		<LogicSource>return new TourDetailFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1992">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailReport</MethodClassName>
		<LogicSource>return new TourDetailHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1993">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailReport</MethodClassName>
		<LogicSource>return new Tour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1994">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailReport</MethodClassName>
		<LogicSource><![CDATA[super;
new ApTrx(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1995">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1996">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1997">
		<LastChanged>2012-03-31T21:45:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourField</MethodClassName>
		<LogicSource><![CDATA[Record recTour = Record.makeRecordFromClassName(TourModel.THICK_CLASS, recordOwner);
if (BookingModel.BOOKING_FILE.equals(this.getRecord().getTableNames(false)))
{    // Make sure that these are moved back to the booking if the user changes them
    recTour.getField(TourModel.DESCRIPTION).addListener(new SyncTourFieldHandler(this.getRecord(), BookingModel.DESCRIPTION));
    recTour.getField(TourModel.CODE).addListener(new SyncTourFieldHandler(this.getRecord(), BookingModel.CODE));
}
return recTour;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1998">
		<LastChanged>2012-07-19T16:49:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourField</MethodClassName>
		<LogicSource><![CDATA[Record recTour = this.getReferenceRecord(null, false);
boolean bUpdateRecord = false;
if (recTour != null)
    bUpdateRecord = true;
else
    recTour = this.makeReferenceRecord();   // Only set read-only if this is created by me.
BaseField fldDepartureDate = recTour.getField(TourModel.DEPARTURE_DATE);
fldDepartureDate.removeListener(fldDepartureDate.getListener(InitOnceFieldHandler.class.getName()), true);
BaseField fldTourDesc = recTour.getField(TourModel.DESCRIPTION);
BaseField fldCode = recTour.getField(TourModel.CODE);

recTour.setKeyArea(TourModel.CODE_KEY);
fldCode.addListener(new MainReadOnlyHandler(TourModel.CODE_KEY));
Converter conv = new FieldDescConverter((Converter)fldCode, (Converter)converter); // Use the description for this field
conv = new FieldLengthConverter(conv, 10);
ScreenComponent sfDesc = createScreenComponent(ScreenModel.EDIT_TEXT, itsLocation, targetScreen, conv, iDisplayFieldDesc, properties);

boolean bIncludeBlankOption = true;
ReadSecondaryHandler pBehavior2 = new ReadSecondaryHandler(recTour, null, DBConstants.CLOSE_ON_FREE, bUpdateRecord, bIncludeBlankOption);
this.addListener(pBehavior2);

ScreenComponent screenField = (ScreenComponent)fldDepartureDate.setupDefaultView(targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, fldDepartureDate, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
fldDepartureDate.setEnabled(false);

conv = new FieldLengthConverter(fldTourDesc, 30);
this.setupTableLookup(targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, converter, ScreenConstants.DONT_DISPLAY_FIELD_DESC, recTour, -1, conv, false, true);

return sfDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="1999">
		<LastChanged>2012-01-31T10:43:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
TourHeader recTourHeader = (TourHeader)this.getRecord(TourHeader.TOUR_HEADER_FILE);
Record screenQuery = this.getScreenRecord();

if (((NumberField)screenQuery.getField(LookupScreenRecord.QUERY_KEY)).getValue() > 2)
    ((NumberField)screenQuery.getField(LookupScreenRecord.QUERY_KEY)).setValue(0);
FieldListener behCheckRange = new CheckRangeHandler(0, 2);
screenQuery.getField(LookupScreenRecord.QUERY_KEY).addListener(behCheckRange);
recTour.addListener(new FileRemoveBOnCloseHandler(behCheckRange));

SortOrderHandler behQueryKeyHandler = new SortOrderHandler(this);
behQueryKeyHandler.setGridTable(Tour.DESCRIPTION_KEY, recTour, -1);
behQueryKeyHandler.setGridTable(Tour.DEPARTURE_DATE_KEY, recTour, -1);
screenQuery.getField(LookupScreenRecord.QUERY_KEY).addListener(behQueryKeyHandler);

this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.DEPARTURE_DATE), screenQuery.getField(LookupScreenRecord.TOUR_HDR_START_DATE), ">=", null, true));
screenQuery.getField(LookupScreenRecord.TOUR_HDR_START_DATE).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.DEPARTURE_DATE), screenQuery.getField(LookupScreenRecord.TOUR_HDR_END_DATE), "<=", null, true));
screenQuery.getField(LookupScreenRecord.TOUR_HDR_END_DATE).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new BitFileFilter(recTourHeader.getField(TourHeader.TOUR_TYPE), screenQuery.getField(LookupScreenRecord.TOUR_HDR_TOUR_TYPE)));
screenQuery.getField(LookupScreenRecord.TOUR_HDR_TOUR_TYPE).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new StartSearchFilter(screenQuery.getField(LookupScreenRecord.START_TARGET_FIELD)));
screenQuery.getField(LookupScreenRecord.START_TARGET_FIELD).addListener(new FieldReSelectHandler(this));
FieldListener behInitOnChange = new InitOnChangeHandler(screenQuery.getField(LookupScreenRecord.START_TARGET_FIELD));
screenQuery.getField(LookupScreenRecord.QUERY_KEY).addListener(behInitOnChange);
recTour.addListener(new FileRemoveBOnCloseHandler(behInitOnChange));
this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.TOUR_HEADER_ID), screenQuery.getField(LookupScreenRecord.TOUR_HEADER_ID), "=", null, true));
screenQuery.getField(LookupScreenRecord.TOUR_HEADER_ID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.TOUR_STATUS_ID), screenQuery.getField(LookupScreenRecord.TOUR_STATUS_ID), "=", null, true));
screenQuery.getField(LookupScreenRecord.TOUR_STATUS_ID).addListener(new FieldReSelectHandler(this));

this.getScreenRecord().getField(LookupScreenRecord.BK_DISPLAY_TYPE).setValue(DisplayTypeField.TOUR_DISPLAY, DBConstants.DISPLAY, DBConstants.INIT_MOVE);

this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2000">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourGridScreen</MethodClassName>
		<LogicSource><![CDATA[//x new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + "Booking", "Booking entry", null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2001">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (!(this.getScreenRecord() instanceof LookupScreenRecord))
    return new LookupScreenRecord(this);
else
    return this.getScreenRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2002">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourGridScreen</MethodClassName>
		<LogicSource><![CDATA[((LookupScreenRecord)this.getScreenRecord()).addStandardToolbar(this);  // I'm running stand-alone
return ((LookupScreenRecord)this.getScreenRecord()).addTourToolbar(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2004">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourGridScreen</MethodClassName>
		<LogicSource>return new TourLookupQuery(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2005">
		<LastChanged>2012-01-31T10:43:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
if (record != null)
{
    Record mainRecord = null;
    if (record instanceof ScreenRecord)
    {
        mainRecord = this.openMainRecord();
        this.setScreenRecord(record);
    }
    if (Tour.TOUR_FILE.equalsIgnoreCase(record.getTableNames(false)))
    {
        record.free();
        mainRecord = this.openMainRecord();
    }
    if (mainRecord == null)
        mainRecord = this.getRecord(TourLookupQuery.TOUR_LOOKUP_QUERY_FILE);
    this.addRecord(mainRecord, true);    // Make sure this is the main record
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2006">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2008">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderSelectHandler</MethodClassName>
		<LogicSource><![CDATA[int errorCode = super;
if (errorCode != DBConstants.NORMAL_RETURN)
	return errorCode;
if (iChangeType == DBConstants.SELECT_TYPE)
{		// Process the "Change field listener!)
	errorCode = this.getOwner().getField(TourHeader.ID).handleFieldChanged(bDisplayOption, DBConstants.SCREEN_MOVE);
}
return errorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2009">
		<LastChanged>2012-02-01T03:39:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,100</Sequence>
		<MethodName>lookupTourHdr</MethodName>
		<LogicDescription><![CDATA[Lookup the tour header.
You can pass either the description and a target date, or
pass the tour code and a target departure date.
@param fldTourCode A field containing the tour code.
@param fldDepartureDate field Containing the target departure date.
@param fldTourDesc A field with the tour desc.
@param bDisplayOption The display option.
@return true if the lookup was successful (and this TourHeader will be current)]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BaseField fldTourCode, BaseField fldDepartureDate, BaseField fldTourDesc, boolean bDisplayOption</MethodInterface>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[String strSave = null;
boolean bHeaderFound = false;
try   {
    if (fldTourDesc != null)
        if (fldTourDesc.getLength() != 0)
    { // Tour code is in, read using this code and the date
        strSave = fldTourDesc.getString();  // Save this
        this.addNew();
        this.getField(TourHeader.DESCRIPTION).setString(strSave);
        strSave = this.getField(TourHeader.DESC_SORT).toString();
        this.addNew();
        FileListener fileBehavior = new StringSubFileFilter(strSave, TourHeader.DESC_SORT, null, null, null, null);
        this.addListener(fileBehavior);
        FileListener fileBehavior2 = null;
        if (fldDepartureDate.getLength() != 0)
        {
            fileBehavior2 = new ExtractRangeFilter(TourHeader.START_DATE, fldDepartureDate, TourHeader.END_DATE, fldDepartureDate, ExtractRangeFilter.PAD_END_FIELD);
            this.addListener(fileBehavior2);
        }
        this.setKeyArea(TourHeader.DESC_SORT_KEY);
        this.close();
        boolean bHasNext = this.hasNext();
        if (bHasNext)
            this.next();
        this.getField(TourHeader.DESCRIPTION).setEnabled(true);
        this.setKeyArea(TourHeader.ID_KEY);
        this.removeListener(fileBehavior, true);
        if (fileBehavior2 != null)
            this.removeListener(fileBehavior2, true);
        if (!bHasNext)
        {
            this.addNew();
            fldTourDesc.setString(strSave, bDisplayOption, DBConstants.INIT_MOVE);  // Restore this
        }
        else
            bHeaderFound = true;
    }
    if (bHeaderFound == false)
        if (fldTourCode != null) if (fldTourCode.getLength() != 0)
    { // Tour code is in, read using this code and the date
        strSave = fldTourCode.getString();  // Save this
        this.addNew();
        FileListener fileBehavior = new StringSubFileFilter(strSave, TourHeader.CODE, null, null, null, null);
        this.addListener(fileBehavior);
        FileListener fileBehavior2 = null;
        if (fldDepartureDate.getLength() != 0)
        {
            fileBehavior2 = new ExtractRangeFilter(TourHeader.START_DATE, fldDepartureDate, TourHeader.END_DATE, fldDepartureDate, ExtractRangeFilter.PAD_END_FIELD);
            this.addListener(fileBehavior2);
        }
        this.setKeyArea(TourHeader.CODE_KEY);
        this.close();
        boolean bHasNext = this.hasNext();
        if (bHasNext)
            this.next();
        this.getField(TourHeader.CODE).setEnabled(true);
        this.setKeyArea(TourHeader.ID_KEY);
        this.removeListener(fileBehavior, true);
        if (fileBehavior2 != null)
            this.removeListener(fileBehavior2, true);
        if (!bHasNext)
        {
            this.addNew();
            fldTourCode.setString(strSave, bDisplayOption, DBConstants.INIT_MOVE);  // Restore this
        }
        else
            bHeaderFound = true;
    }
    if (bHeaderFound == false)
        this.addNew();
} catch (DBException ex)   {
    ex.printStackTrace();
}
if (bHeaderFound)
    return DBConstants.NORMAL_RETURN;
else
    return DBConstants.KEY_NOT_FOUND;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2010">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderField</MethodClassName>
		<LogicSource>return new TourHeader(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2011">
		<LastChanged>2012-01-31T10:43:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), TourHeader.DESCRIPTION, false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2012">
		<LastChanged>2012-02-01T10:19:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.setEditing(false);
TourHeader recTourHeader = (TourHeader)this.getRecord(TourHeader.TOUR_HEADER_FILE);
Record screenRecord = this.getScreenRecord();

int iCommandID = (int)screenRecord.getField(LookupScreenRecord.BOOKING_LIST_FORMAT).getValue();
if (((NumberField)screenRecord.getField(BookingScreenRecord.BK_SUB_SCREEN)).getValue() > 3)
    ((NumberField)screenRecord.getField(BookingScreenRecord.BK_SUB_SCREEN)).setValue(0);
FieldListener behCheckRange = new CheckRangeHandler(0, 3);
screenRecord.getField(BookingScreenRecord.BK_SUB_SCREEN).addListener(behCheckRange);
recTourHeader.addListener(new FileRemoveBOnCloseHandler(behCheckRange));

KeyArea tempKeyStart = recTourHeader.makeIndex(DBConstants.NOT_UNIQUE, null);  // Add temp key
tempKeyStart.addKeyField(TourHeader.START_DATE, DBConstants.ASCENDING);
KeyArea tempKeyEnd = recTourHeader.makeIndex(DBConstants.NOT_UNIQUE, null);
tempKeyEnd.addKeyField(TourHeader.END_DATE, DBConstants.ASCENDING);
SortOrderHandler behQueryKeyHandler = new SortOrderHandler(this);
behQueryKeyHandler.setGridTable(TourHeader.DESCRIPTION, recTourHeader, 0);
behQueryKeyHandler.setGridTable(tempKeyStart.getKeyName(), recTourHeader, 1);
behQueryKeyHandler.setGridTable(tempKeyEnd.getKeyName(), recTourHeader, 2);
behQueryKeyHandler.setGridTable(TourHeader.ID, recTourHeader, 3);
screenRecord.getField(BookingScreenRecord.BK_SUB_SCREEN).addListener(behQueryKeyHandler);

recTourHeader.addListener(new CompareFileFilter(TourHeader.BROCHURE_ID, screenRecord.getField(LookupScreenRecord.TOUR_HDR_BROCHURE_ID), "=", null, true));
screenRecord.getField(LookupScreenRecord.TOUR_HDR_BROCHURE_ID).addListener(new FieldReSelectHandler(this));
recTourHeader.addListener(new BitFileFilter(TourHeader.TOUR_TYPE, screenRecord.getField(LookupScreenRecord.TOUR_HDR_TOUR_TYPE)));
screenRecord.getField(LookupScreenRecord.TOUR_HDR_TOUR_TYPE).addListener(new FieldReSelectHandler(this));
recTourHeader.addListener(new CompareFileFilter(TourHeader.AIRLINE_ID, screenRecord.getField(LookupScreenRecord.TOUR_HDR_AIRLINE_CODE), "=", null, true));
screenRecord.getField(LookupScreenRecord.TOUR_HDR_AIRLINE_CODE).addListener(new FieldReSelectHandler(this));
recTourHeader.addListener(new CompareFileFilter(TourHeader.END_DATE, screenRecord.getField(LookupScreenRecord.TOUR_HDR_START_DATE), ">=", null, true));
screenRecord.getField(LookupScreenRecord.TOUR_HDR_START_DATE).addListener(new FieldReSelectHandler(this));
recTourHeader.addListener(new CompareFileFilter(TourHeader.START_DATE, screenRecord.getField(LookupScreenRecord.TOUR_HDR_END_DATE), "<=", null, true));
screenRecord.getField(LookupScreenRecord.TOUR_HDR_END_DATE).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new StartSearchFilter(screenRecord.getField(LookupScreenRecord.START_TARGET_FIELD)));
screenRecord.getField(LookupScreenRecord.START_TARGET_FIELD).addListener(new FieldReSelectHandler(this));
FieldListener behInitOnChange = new InitOnChangeHandler(screenRecord.getField(LookupScreenRecord.START_TARGET_FIELD));
screenRecord.getField(LookupScreenRecord.QUERY_KEY).addListener(behInitOnChange);
recTourHeader.addListener(new FileRemoveBOnCloseHandler(behInitOnChange));

this.getScreenRecord().getField(LookupScreenRecord.BK_DISPLAY_TYPE).setValue(DisplayTypeField.TOUR_HEADER_DISPLAY, DBConstants.DISPLAY, DBConstants.INIT_MOVE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2013">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderGridScreen</MethodClassName>
		<LogicSource><![CDATA[//x new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + "Booking", "Booking entry", null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2014">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (!(this.getScreenRecord() instanceof LookupScreenRecord))
    return new LookupScreenRecord(this);
else
    return this.getScreenRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2015">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderGridScreen</MethodClassName>
		<LogicSource><![CDATA[((LookupScreenRecord)this.getScreenRecord()).addStandardToolbar(this);  // I'm running stand-alone
return ((LookupScreenRecord)this.getScreenRecord()).addTourHdrToolbar(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2017">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderGridScreen</MethodClassName>
		<LogicSource>return new TourHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2018">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record query = this.getMainRecord();
Converter converter = query.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.DESCRIPTION);
converter = new FieldLengthConverter(converter, 30);
this.addColumn(converter);
this.addColumn(query.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.START_DATE));
//? this.addColumn(query.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.ID));
this.addColumn(query.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.END_DATE));
this.addColumn(query.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.DAYS));
this.addColumn(query.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.NIGHTS));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2020">
		<LastChanged>2012-01-31T10:43:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
Record recVendor = ((ReferenceField)this.getMainRecord().getField(Product.VENDOR_ID)).getReferenceRecord(this);
recVendor.getField(Vendor.CURRENCYS_ID).setEnabled(false);
this.getMainRecord().getField(TourHeader.TOUR_TYPE).addListener(new CheckTourSeriesHandler(null));

((TourHeader)this.getMainRecord()).addSubFileIntegrityHandlers();	// Make sure detail records are gone before deleting this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2021">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourList</MethodClassName>
		<LogicSource><![CDATA[this.addTable(new TourHeader(recordOwner));
this.addTable(new City(recordOwner));
this.addTable(new Vendor(recordOwner));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2022">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourList</MethodClassName>
		<LogicSource><![CDATA[this.setSelected(false);
super;
this.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.ID).setSelected(true);
this.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.DESCRIPTION).setSelected(true);
this.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.ID).setSelected(true);
this.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.VENDOR_ID).setSelected(true);
this.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.CITY_ID).setSelected(true);
this.getField(City.CITY_FILE, City.DESCRIPTION).setSelected(true);
this.getField(City.CITY_FILE, City.COUNTRY_ID).setSelected(true);
this.getField(Vendor.VENDOR_FILE, Vendor.VENDOR_NAME).setSelected(true);
this.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.DESC_SORT).setSelected(true);
this.getField(Vendor.VENDOR_FILE, Vendor.NAME_SORT).setSelected(true);
this.getField(City.CITY_FILE, City.TICKET_CITY_DESC).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2023">
		<LastChanged>2012-02-01T03:20:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupRelationships</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourList</MethodClassName>
		<LogicSource><![CDATA[this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(TourHeader.TOUR_HEADER_FILE), this.getRecord(City.CITY_FILE), TourHeader.CITY_ID, City.ID);
this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(TourHeader.TOUR_HEADER_FILE), this.getRecord(Vendor.VENDOR_FILE), TourHeader.VENDOR_ID, Vendor.ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2028">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourStatusField</MethodClassName>
		<LogicSource>return new TourStatus(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2030">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourTypeField</MethodClassName>
		<LogicSource>return new TourType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2040">
		<LastChanged>2012-01-31T12:02:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrialBalance</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(Account.ACCOUNT_NO_KEY);

SubFileFilter listener = new SubFileFilter(((AccountField)this.getScreenRecord().getField(GenledScreenRecord.START_ACCOUNT_ID)).getReferenceRecord().getField(Account.ACCOUNT_NO), Account.ACCOUNT_NO, null, null, null, null);
listener.setEndKey(false);
this.getMainRecord().addListener(listener);
listener = new SubFileFilter(((AccountField)this.getScreenRecord().getField(GenledScreenRecord.END_ACCOUNT_ID)).getReferenceRecord().getField(Account.ACCOUNT_NO), Account.ACCOUNT_NO, null, null, null, null);
listener.setInitialKey(false);
this.getMainRecord().addListener(listener);
// Profit Center filter
this.getMainRecord().addListener(new ProfitCenterFilter(Account.ACCOUNT_NO, this.getScreenRecord().getField(GenledScreenRecord.PROFIT_CENTER_ID)));

CalcAcctBalHandler calcListener = null;
this.getMainRecord().addListener(calcListener = new CalcAcctBalHandler(this.getScreenRecord().getField(GenledScreenRecord.END_BALANCE), null, this.getScreenRecord().getField(GenledScreenRecord.CUTOFF_DATE), true, this.getScreenRecord().getField(GenledScreenRecord.SUB_TOTAL)));
calcListener.getAcctDetail().addListener(new SubCountHandler(this.getScreenRecord().getField(GenledScreenRecord.REPORT_TOTAL), AcctDetail.AMOUNT_LOCAL, false, false));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(GenledScreenRecord.REPORT_COUNT), false, true));

this.setProperty(LIMIT_PARAM, LIMIT_UNLIMITED);   // Unlimited detail records]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2041">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrialBalance</MethodClassName>
		<LogicSource>return new GenledScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2042">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrialBalance</MethodClassName>
		<LogicSource>return new TrialBalanceToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2043">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrialBalance</MethodClassName>
		<LogicSource>return new TrialBalanceFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2044">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrialBalance</MethodClassName>
		<LogicSource>return new TrialBalanceHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2045">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrialBalance</MethodClassName>
		<LogicSource>return new Account(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2047">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrialBalance</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2048">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrialBalanceFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2049">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrialBalanceHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2050">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrialBalanceToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2051">
		<LastChanged>2012-01-31T14:41:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getReferenceRecord();  // Get/make the record that describes the referenced class.
if (this.isPopupControl())
    return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, TrxStatus.SYSTEM_CODE_KEY, TrxStatus.STATUS_DESC, false, false);
return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, null, TrxStatus.STATUS_DESC, false, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2052">
		<LastChanged>2012-01-31T14:11:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getReferenceRecord();  // Get/make the record that describes the referenced class.
return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, null, TrxDesc.DESCRIPTION, false, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2053">
		<LastChanged>2012-03-26T10:20:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxIDField</MethodClassName>
		<LogicSource><![CDATA[ScreenComponent sField = createScreenComponent(ScreenModel.EDIT_TEXT, itsLocation, targetScreen, converter, iDisplayFieldDesc, properties);
createScreenComponent(TransactionType.TRX_ID_SFIELD_CLASS, targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, this, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
return sField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2054">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxIDSField</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand != null) && (strCommand.equals(AcctDetailDist.DIST_SOURCE)))
{ // Pressed the MenuConstants.FORM button, display the SourceTrx
    BaseField field = (BaseField)sourceSField.getConverter().getField();
    if (field.isNull())
        return true; // Command handled (and ignored)
    // First, get the transaction type
    Record recAcctDetailDist = field.getRecord();
    Record recAcctDetail = ((ReferenceField)recAcctDetailDist.getField(AcctDetailDist.ACCT_DETAIL_ID)).getReference();
    Record recTransactionType = ((ReferenceField)recAcctDetail.getField(AcctDetail.TRX_TYPE_ID)).getReference();
    if ((recTransactionType == null) || (recTransactionType.getEditMode() != Constants.EDIT_CURRENT))
        return false;
    // Next, get the Record, make it current, and display the MaintScreen.
    String strRecordTarget = recTransactionType.getField(TransactionType.SOURCE_FILE).toString();
    if (strRecordTarget.length() == 0)
        strRecordTarget = recTransactionType.getField(TransactionType.DESC_CODE).toString();
    if (strRecordTarget.length() == 0)
        return true;
    if (strRecordTarget.indexOf('.') == -1)
        strRecordTarget = ".tour." + recTransactionType.getField(TransactionType.SYSTEM_CODE).toString() + ".db." + strRecordTarget;
    RecordOwner recordOwner = null;
    if (this.getConverter() != null)
        if (this.getConverter().getField() != null)
            recordOwner = ((BaseField)this.getConverter().getField()).getRecord().findRecordOwner();
    Record recTarget = Record.makeRecordFromClassName(strRecordTarget, recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(recTarget);	// Will be owned by the new screen
    if (recTarget == null)
        return true;    // Command handled
    try   {
        Record record = recTarget.setHandle(field.getData(), DBConstants.BOOKMARK_HANDLE);
        if ((record == null) || (recTarget.getEditMode() != DBConstants.EDIT_CURRENT))
        {
            recTarget.free();
            return true;
        }
    } catch (DBException ex)    {
        ex.printStackTrace();
        recTarget.free();
        return true;
    }   
    BaseScreen screen = (BaseScreen)recAcctDetailDist.getRecordOwner();
    BasePanel parentScreen = screen.getParentScreen();
    ScreenLocation itsLocation = null;
    if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_SAME_WINDOW)	// Use same window
    {
        itsLocation = screen.getScreenLocation();
        screen.free();
    }
    else
        parentScreen = Screen.makeWindow(null);
    recTarget.makeScreen(itsLocation, parentScreen, ScreenConstants.MAINT_MODE, null);
    return true;
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2055">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TrxIDSField</MethodName>
		<LogicDescription/>
		<MethodReturns>itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, null, strDesc, AcctDetailDist.DIST_SOURCE, AcctDetailDist.DIST_SOURCE, null, null, null</MethodReturns>
		<MethodInterface>ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc</MethodInterface>
		<MethodClassName>TrxIDSField</MethodClassName>
		<LogicSource><![CDATA[if (fieldConverter != null)
{ // Make sure this field comes back on the query
    ((BaseField)fieldConverter.getField()).getRecord().getField(AcctDetailDist.ACCT_DETAIL_ID).setSelected(true);
}
String strDesc = AcctDetailDist.DIST_SOURCE;
if (parentScreen instanceof GridScreen)
    strDesc = null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2056">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeField</MethodClassName>
		<LogicSource>return new TransactionType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2057">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.makeReferenceRecord();
Converter fldDisplayFieldDesc = new TrxTypeConverter(record.getField(TransactionType.TYPE_DESC));
return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, -1, fldDisplayFieldDesc, false, true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2058">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TypicalBalanceField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
case 0:
	tempString = "Debit";break;
case 1:
	tempString = "Credit";break;
default:
	tempString = "";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2059">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TypicalBalanceField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
if (index == 1)
	tempString = Account.CREDIT;
else
	tempString = Account.DEBIT;
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2060">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TypicalBalanceField</MethodClassName>
		<LogicSource><![CDATA[if (tempString.equalsIgnoreCase(TypicalBalanceField.CREDIT))
	return 1;
else
	return 0;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2062">
		<LastChanged>2012-01-18T17:05:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TypicalBalanceField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2063">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addDetailTrx</MethodName>
		<LogicDescription><![CDATA[Override this method and call recAcctDetailDist.addDetailTrx(...) to
add the G/L transaction.
@param recTransactionType TransactionType record
@param recAcctDetailDist AcctDetailDist record
@param recAcctDetail AcctDetail record
@param recPeriod Period record
@param dCurrentBalance The current balance for this type of transaction]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>TransactionType recTransactionType, AcctDetailDist recAcctDetailDist, AcctDetail recAcctDetail, Period recPeriod, double dCurrentBalance</MethodInterface>
		<MethodClassName>UpdateAcctDetailHandler</MethodClassName>
		<LogicSource>// Override this!</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2064">
		<LastChanged>2012-01-31T11:59:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_UPDATE_TYPE)
    || (iChangeType == DBConstants.AFTER_ADD_TYPE))
{   
    this.checkFiles();

    if (iChangeType == DBConstants.AFTER_ADD_TYPE)
        if ((this.getOwner().getEditMode() == DBConstants.EDIT_NONE)
                || ((this.getOwner().getEditMode() == DBConstants.EDIT_ADD) && (this.getOwner().getCounterField().isNull())))
    {
        try {
            this.getOwner().setHandle(this.getOwner().getLastModified(DBConstants.DATA_SOURCE_HANDLE), DBConstants.DATA_SOURCE_HANDLE);
        } catch (DBException ex)    {
            ex.printStackTrace();
        }
    }

    int iTrxGroupID = -1;
    if (this.getOwner() instanceof Trx)   // Always
        iTrxGroupID = ((Trx)this.getOwner()).getTrxGroupID();
    m_recTransactionType.setKeyArea(TransactionType.TRX_GROUP_ID_KEY);
    FileListener behSub = new StringSubFileFilter(Integer.toString(iTrxGroupID), TransactionType.TRX_GROUP_ID, null, null, null, null);
    m_recTransactionType.addListener(behSub);
    m_recTransactionType.close();
    try   {
        m_recAcctDetailDist.startDistTrx();
        while (m_recTransactionType.hasNext())
        {
            m_recTransactionType.next();
            if (isNewTrx(iChangeType))
                this.addDetailTrx(m_recTransactionType, m_recAcctDetailDist, m_recAcctDetail, m_recPeriod, 0);
            else
                this.modifyDetailTrx(m_recTransactionType, m_recAcctDetailDist, m_recAcctDetail, m_recPeriod);
        }
    } catch (DBException ex)    {
        ex.printStackTrace();
    } finally {
        m_recAcctDetailDist.endDistTrx();
        m_recTransactionType.removeListener(behSub, true);
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2065">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getCrAccount</MethodName>
		<LogicDescription><![CDATA[Get the Credit Account field.
@return The credit account field.]]></LogicDescription>
		<MethodReturns>ReferenceField</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UpdateAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2066">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getDrAccount</MethodName>
		<LogicDescription><![CDATA[Get the Debit Account field.
@return The debit account field.]]></LogicDescription>
		<MethodReturns>ReferenceField</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UpdateAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2068">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getOwner() != null)
	this.getOwner().setOpenMode(this.getOwner().getOpenMode() | DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);
else
{
	if (m_recAcctDetailDist != null)
		m_recAcctDetailDist.free();
	if (m_recTransactionType != null)
		m_recTransactionType.free();
	if (m_recAcctDetail != null)
		m_recAcctDetail.free();
	if (m_recPeriod != null)
		m_recPeriod.free();
	m_recPeriod = null;
	m_recAcctDetail = null;
	m_recTransactionType = null;
	m_recAcctDetailDist = null;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2069">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addDetailTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateApTrxHandler</MethodClassName>
		<LogicSource><![CDATA[Record recApTrx = this.getOwner();
double dAmount = this.getTrxAmount(recTransactionType.getField(TransactionType.TYPICAL_BALANCE));
if (recTransactionType.getField(TransactionType.SOURCE_PREFERRED_SIGN).getString().equals(PreferredSignField.NEGATIVE))
    dAmount = -dAmount;
ReferenceField fldAccount = null;
if (recTransactionType.getField(TransactionType.TYPICAL_BALANCE).getString().equals(Account.DEBIT))
    fldAccount = (ReferenceField)this.getDrAccount();
else if (recTransactionType.getField(TransactionType.TYPICAL_BALANCE).getString().equals(Account.CREDIT))
{
    fldAccount = (ReferenceField)this.getCrAccount();
    dAmount = -dAmount;
}
else
{
    fldAccount = (ReferenceField)this.getDiffAccount();
    if (fldAccount == null)
        return;
}
dAmount = dAmount - dCurrentBalance;
DateTimeField fldTrxDate = (DateTimeField)this.getTrxDate();
DateTimeField fldEntryDate = null;  // Now
BaseField fldTrxID = recApTrx.getField(ApTrx.ID);
String strUserID = ((BaseApplication)this.getOwner().getRecordOwner().getTask().getApplication()).getUserID();
if (strUserID == null)
    strUserID = "0";    // No user/System user
int iUserID = Integer.parseInt(strUserID);
recAcctDetailDist.addDetailTrx(fldAccount, fldTrxDate, fldTrxID, recTransactionType, fldEntryDate, dAmount, iUserID, recAcctDetail, recPeriod);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2070">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getDiffAccount</MethodName>
		<LogicDescription><![CDATA[Get the differential account (Cost Over/Under) for this type of trx.
@return The field that contains the differential account.]]></LogicDescription>
		<MethodReturns>ReferenceField</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UpdateApTrxHandler</MethodClassName>
		<LogicSource>return null;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2071">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>getInvoiceAmtUSD</MethodName>
		<LogicDescription><![CDATA[Utility method to get the invoice amount and convert it to USD
using the last exchange rate in the currency file.
@return The invoice amount converted to USD.]]></LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UpdateApTrxHandler</MethodClassName>
		<LogicSource><![CDATA[Record recApTrx = this.getOwner();
double dAmountUSD = 0;
Vendor recVendor = (Vendor)((ReferenceField)recApTrx.getField(ApTrx.VENDOR_ID)).getReference();
Currencys recCurrencys = null;
if (recVendor != null)
	recCurrencys = (Currencys)((ReferenceField)recVendor.getField(Vendor.CURRENCYS_ID)).getReference();
double dExchange = 1;
if (recCurrencys != null)
	dExchange = recCurrencys.getField(Currencys.LAST_RATE).getValue();
double dAmount = recApTrx.getField(ApTrx.INVOICE_AMOUNT).getValue();
dAmountUSD = (Math.floor(dAmount * dExchange * 100 + 0.5)) / 100;
return dAmountUSD;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2072">
		<LastChanged>2012-04-01T10:39:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getProductCategory</MethodName>
		<LogicDescription><![CDATA[Utility method to get the product category record for this trx.
(The product category contains many of the G/L accounts).
@return The product category record for this trx.]]></LogicDescription>
		<MethodReturns>ProductCategoryModel</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UpdateApTrxHandler</MethodClassName>
		<LogicSource><![CDATA[// ApTrx->Tour->TourHeader->ProductCat P/P  vs  A/R
Record recApTrx = this.getOwner();
if (recApTrx.getField(ApTrx.TOUR_ID).isNull())
	return null;	// No tour
Record recTour =((ReferenceField)recApTrx.getField(ApTrx.TOUR_ID)).getReference();
Record recTourHeader = ((ReferenceField)recTour.getField(TourModel.TOUR_HEADER_ID)).getReference();
ProductCategoryModel recProductCategory = (ProductCategoryModel)((ReferenceField)recTourHeader.getField(TourHeaderModel.PRODUCT_CAT_ID)).getReference();
return recProductCategory;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2073">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getTrxAmount</MethodName>
		<LogicDescription><![CDATA[Get the transaction amount for this type of transaction.
@param fldTypicalBalance The typical balance field (Debit/Credit/none).
@return The transaction amount.]]></LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>BaseField fldTypicalBalance</MethodInterface>
		<MethodClassName>UpdateApTrxHandler</MethodClassName>
		<LogicSource>return 0;   // Override this</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2075">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getTrxDate</MethodName>
		<LogicDescription><![CDATA[Get the transaction date.
@return The transaction date for this type of transaction.]]></LogicDescription>
		<MethodReturns>BaseField</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UpdateApTrxHandler</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2076">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getCrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateArcHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getOwner().getRecordOwner().getScreenRecord().getField(ArcReportScreenRecord.SUMMARY_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2077">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getDrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateArcHandler</MethodClassName>
		<LogicSource><![CDATA[ReferenceField fldAccount = null;
if (this.getProductCategory() != null)
	fldAccount = (ReferenceField)this.getProductCategory().getField(ProductCategory.PP_TIC_ACCOUNT_ID);
if (fldAccount == null)
	fldAccount = (ReferenceField)this.getOwner().getRecordOwner().getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.PP_TIC_ACCOUNT_ID);
return fldAccount;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2078">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getTrxAmount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateArcHandler</MethodClassName>
		<LogicSource>return this.getOwner().getField(TicketTrx.NET_FARE).getValue();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2079">
		<LastChanged>2012-03-29T08:02:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateArTrxHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_UPDATE_TYPE)
    || (iChangeType == DBConstants.AFTER_ADD_TYPE))
{   // Be careful because booking is no longer current
    BookingModel recBooking = (BookingModel)this.getOwner();
    boolean bUpdateArTrx = false;
    if (recBooking.getField(BookingModel.BOOKING_STATUS_ID).isModified())
        bUpdateArTrx = true;
    if (recBooking.getField(BookingModel.NET).isModified())
        bUpdateArTrx = true;
    if (bUpdateArTrx)
    { // Only do if booking is accepted
        BookingStatusModel recBookingStatus = (BookingStatusModel)((ReferenceField)recBooking.getField(BookingModel.BOOKING_STATUS_ID)).getReference();
        if ((BookingStatusModel.NO_STATUS_CODE.equalsIgnoreCase(recBookingStatus.getField(BookingStatusModel.CODE).toString()))
            || (BookingStatusModel.PROPOSAL_CODE.equalsIgnoreCase(recBookingStatus.getField(BookingStatusModel.CODE).toString())))
                bUpdateArTrx = false;   // Don't update A/R if the booking has not been accepted
        if (recBooking.getField(BookingModel.BALANCE).getValue() != 0)
            if (recBooking.getField(BookingModel.FINAL_PAYMENT_RECEIVED).getState() == false) // Because if final pymt was received, the balance should be 0
                bUpdateArTrx = true;    // Special case - A/R Trx's already exist
    }
    if (bUpdateArTrx)
    {
        try   {
            Object bookmark = null;
            if (iChangeType == DBConstants.AFTER_UPDATE_TYPE)
                bookmark = recBooking.getTable().getHandle(DBConstants.BOOKMARK_HANDLE);
            else
                bookmark = recBooking.getTable().getLastModified(DBConstants.BOOKMARK_HANDLE);
            if (bookmark == null)
                return this.getOwner().getTask().setLastError("Booking not current on A/R update");    // Should never happen
            recBooking.getTable().setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
            if (recBooking.getEditMode() == DBConstants.EDIT_CURRENT)
                recBooking.getTable().edit();
            ArTrxModel recArTrx = recBooking.addArDetail(null, null, true);     // Make sure BookingLine and ArTrx detail (totals) are there
        // First, total the booking balance
            double dTotal = recBooking.getField(BookingModel.NET).getValue();
        // Next, total the current A/R invoice total
            
            ArTrxInvoiceSubCountHandler subCountHandler = (ArTrxInvoiceSubCountHandler)((Record)recArTrx).getListener(ArTrxInvoiceSubCountHandler.class);
            double dOldNet = subCountHandler.getTotalToVerify();
            int iTrxStatus = subCountHandler.getTrxStatus();
            double dAdjustment = Math.floor((dTotal - dOldNet) * 100.00 + 0.5) / 100.00;
            if (dAdjustment != 0)
            { // Add an A/R Adjustment
                recArTrx.getTable().addNew();
                recArTrx.getField(ArTrx.TRX_STATUS_ID).setValue(iTrxStatus);   // Invoice modification
                recArTrx.getField(ArTrx.AMOUNT).setValue(dAdjustment);
                ((Record)recArTrx).getField(ArTrx.COMMENTS).moveFieldToThis(((ReferenceField)recArTrx.getField(ArTrx.TRX_STATUS_ID)).getReference().getField(TrxStatus.STATUS_DESC));
                recArTrx.getTable().add(recArTrx);
            }
            recBooking.getTable().set(recBooking);   // Since it was 'after update' this will leave booking in the same state.
        } catch (DBException ex)    {
            ex.printStackTrace();
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2081">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addDetailTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateArTrxAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[Record recArTrx = this.getOwner();
double dAmount = recArTrx.getField(ArTrx.AMOUNT).getValue();
ReferenceField fldAccount = null;
if (Account.DEBIT.equalsIgnoreCase(recTransactionType.getField(TransactionType.TYPICAL_BALANCE).toString()))
    fldAccount = (ReferenceField)this.getDrAccount();
else
{
    fldAccount = (ReferenceField)this.getCrAccount();
    dAmount = -dAmount;
}
DateTimeField fldTrxDate = (DateTimeField)recArTrx.getField(ArTrx.TRX_DATE);
if ("DepTrx".equalsIgnoreCase(recTransactionType.getField(TransactionType.TYPE_CODE).toString()))
{
    fldTrxDate = (DateTimeField)recArTrx.getField(ArTrx.DEPARTURE_DATE);
    fldAccount = (ReferenceField)this.getDepartureDrAccount();
}
if ("DepDist".equalsIgnoreCase(recTransactionType.getField(TransactionType.TYPE_CODE).toString()))
{
    fldTrxDate = (DateTimeField)recArTrx.getField(ArTrx.DEPARTURE_DATE);
    fldAccount = (ReferenceField)this.getDepartureCrAccount();
}
DateTimeField fldEntryDate = null;  // Now
BaseField fldTrxTypeID = recArTrx.getField(ArTrx.ID);
int iUserID = Integer.parseInt(((BaseApplication)this.getOwner().getRecordOwner().getTask().getApplication()).getUserID());
recAcctDetailDist.addDetailTrx(fldAccount, fldTrxDate, fldTrxTypeID, recTransactionType, fldEntryDate, dAmount, iUserID, recAcctDetail, recPeriod);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2082">
		<LastChanged>2012-03-29T08:13:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>getCrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateArTrxAcctDetailHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getProductCategory().getField(ProductCategoryModel.PP_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2083">
		<LastChanged>2012-03-29T08:12:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getDrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateArTrxAcctDetailHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getProductCategory().getField(ProductCategoryModel.AR_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2084">
		<LastChanged>2012-03-29T08:12:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductCategory</MethodName>
		<LogicDescription>Get the product category for this booking</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UpdateArTrxAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[// Booking->Tour->TourHeader->ProductCat P/P  vs  A/R
Record recTour = ((ReferenceField)m_recBooking.getField(BookingModel.TOUR_ID)).getReference();
Record recTourHeader = ((ReferenceField)recTour.getField(TourModel.TOUR_HEADER_ID)).getReference();
Record recProductCategory = ((ReferenceField)recTourHeader.getField(TourHeaderModel.PRODUCT_CAT_ID)).getReference();
return recProductCategory;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2086">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdateArTrxAcctDetailHandler</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Record recBooking</MethodInterface>
		<MethodClassName>UpdateArTrxAcctDetailHandler</MethodClassName>
		<LogicSource>m_recBooking = recBooking;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2087">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>getCrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateCrDrAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[ReferenceField fldCrAccount = (ReferenceField)this.getOwner().getRecordOwner().getScreenRecord().getField(CrDrScreenRecord.COUNTER_ACCOUNT_ID);
if (fldCrAccount.isNull())
    fldCrAccount = (ReferenceField)this.getOwner().getRecordOwner().getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.CREDIT_DEBIT_ACCOUNT_ID);
return fldCrAccount;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2088">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getDrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateCrDrAcctDetailHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getProductCategory().getField(ProductCategory.AR_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2089">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdateCrDrAcctDetailHandler</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>recBooking</MethodReturns>
		<MethodInterface>Record recBooking</MethodInterface>
		<MethodClassName>UpdateCrDrAcctDetailHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2090">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getCrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateCreditMemoHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getOwner().getRecordOwner().getScreenRecord().getField(DebitMemoScreenRecord.AP_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2091">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getDrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateCreditMemoHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getOwner().getRecordOwner().getScreenRecord().getField(DebitMemoScreenRecord.TOUR_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2092">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getTrxAmount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateCreditMemoHandler</MethodClassName>
		<LogicSource>return this.getOwner().getField(ApTrx.INVOICE_LOCAL).getValue();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2093">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getCrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateDebitMemoHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getOwner().getRecordOwner().getScreenRecord().getField(DebitMemoScreenRecord.TOUR_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2094">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getDrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateDebitMemoHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getOwner().getRecordOwner().getScreenRecord().getField(DebitMemoScreenRecord.PP_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2095">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getTrxAmount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateDebitMemoHandler</MethodClassName>
		<LogicSource><![CDATA[double dAmount = this.getOwner().getField(ApTrx.INVOICE_LOCAL).getValue();
if (dAmount > 0)
    dAmount = -dAmount;	// Must be negative.
return dAmount;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2099">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getCrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateInvoiceHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getProductCategory().getField(ProductCategory.AP_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2100">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getDiffAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateInvoiceHandler</MethodClassName>
		<LogicSource><![CDATA[Record recApTrx = this.getOwner();
if (recApTrx.getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL).isNull())
    return null;
return (ReferenceField)this.getProductCategory().getField(ProductCategory.COST_OU_ACCOUNT_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2101">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getDrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateInvoiceHandler</MethodClassName>
		<LogicSource><![CDATA[Record recApTrx = this.getOwner();
if (recApTrx.getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL).isNull())
        return (ReferenceField)this.getProductCategory().getField(ProductCategory.LAND_ACCOUNT_ID);
return (ReferenceField)this.getProductCategory().getField(ProductCategory.UNINV_ACCOUNT_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2102">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getTrxAmount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateInvoiceHandler</MethodClassName>
		<LogicSource><![CDATA[double dAmountUSD = 0;
Record recApTrx = this.getOwner();
double dDrAmountUSD = recApTrx.getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL).getValue();
double dCrAmountUSD = this.getInvoiceAmtUSD();
if (dDrAmountUSD == 0)
    dDrAmountUSD = dCrAmountUSD;
if (fldTypicalBalance.getString().equals(Account.DEBIT))
    dAmountUSD = dDrAmountUSD; // HACK - Much better to scan the amount (and accounts) credited on the departure date posting
else if (fldTypicalBalance.getString().equals(Account.CREDIT))
    dAmountUSD = dCrAmountUSD;
else
    dAmountUSD = dCrAmountUSD - dDrAmountUSD;  // Calculate the differential amount
return dAmountUSD;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2103">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getTrxDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateInvoiceHandler</MethodClassName>
		<LogicSource>return this.getOwner().getField(ApTrx.INVOICE_DATE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2104">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getCrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateNonTourInvoiceHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getOwner().getRecordOwner().getScreenRecord().getField(InvoiceScreenRecord.AP_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2105">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getDrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateNonTourInvoiceHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getOwner().getRecordOwner().getScreenRecord().getField(InvoiceScreenRecord.COST_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2106">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getTrxAmount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateNonTourInvoiceHandler</MethodClassName>
		<LogicSource>return this.getInvoiceAmtUSD();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2107">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getTrxDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateNonTourInvoiceHandler</MethodClassName>
		<LogicSource>return this.getOwner().getField(ApTrx.INVOICE_DATE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2108">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getCrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateOverrideAcctDetailHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getOwner().getRecordOwner().getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.OVERRIDE_REC_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2109">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getDrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateOverrideAcctDetailHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getOwner().getRecordOwner().getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.OVERRIDE_SUMM_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2110">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getTrxAmount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateOverrideAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[double dOverrideReceived = this.getOwner().getField(TicketTrx.OVERRIDE_PAID).getValue();
double dOverrideAmount = this.getOwner().getField(TicketTrx.OVERRIDE_AMOUNT).getValue();
if (Account.DEBIT.equalsIgnoreCase(fldTypicalBalance.getString()))
	return dOverrideReceived;
else if (Account.CREDIT.equalsIgnoreCase(fldTypicalBalance.getString()))
	return dOverrideAmount;
else
	return dOverrideAmount - dOverrideReceived;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2113">
		<LastChanged>2012-04-12T22:07:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getDrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateRefundAcctDetailHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getProductCategory().getField(ProductCategoryModel.AR_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2114">
		<LastChanged>2012-04-12T22:09:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getCrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateRefundAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bTempControl = false;
Record recArControl = (Record)this.getOwner().getRecordOwner().getRecord(ArControlModel.AR_CONTROL_FILE);
if (recArControl == null)
{
    bTempControl = true;
    recArControl = Record.makeRecordFromClassName(ArControlModel.THICK_CLASS, this.getOwner().getRecordOwner());
}
ReferenceField field = (ReferenceField)recArControl.getField(ArControlModel.REFUND_SUSPENSE_ACCOUNT_ID);
if (bTempControl)
    recArControl.free();
return field;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2115">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdateRefundAcctDetailHandler</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>recBooking</MethodReturns>
		<MethodInterface>Record recBooking</MethodInterface>
		<MethodClassName>UpdateRefundAcctDetailHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2116">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addDetailTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateRefundPaidAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[Record recArTrx = this.getOwner();
RecordOwner recordOwner = recArTrx.getRecordOwner();
Record recScreenRecord = (Record)recordOwner.getScreenRecord();

double dAmount = recArTrx.getField(ArTrx.AMOUNT).getValue();
ReferenceField fldAccount = null;
DateTimeField fldTrxDate = (DateTimeField)recScreenRecord.getField(RefundScreenRecord.CHECK_DATE);
DateTimeField fldEntryDate = null;  // Now
BaseField fldTrxID = recArTrx.getField(ArTrx.ID);
int iUserID = Integer.parseInt(((MainApplication)this.getOwner().getRecordOwner().getTask().getApplication()).getUserID());
if (recTransactionType.getField(recTransactionType.TYPICAL_BALANCE).getString().equals(Account.DEBIT))
{
    fldAccount = (ReferenceField)this.getDrAccount();
    recAcctDetailDist.addDetailTrx(fldAccount, fldTrxDate, fldTrxID, recTransactionType, fldEntryDate, dAmount, iUserID, recAcctDetail, recPeriod);
}
else
{
// Step 2a - Create and write the bank transaction (in BankTrx).
    BankAcct recBankAcct = (BankAcct)((ReferenceField)recScreenRecord.getField(RefundScreenRecord.BANK_ACCT_ID)).getReference();
    BankTrx recBankTrx = (BankTrx)recordOwner.getRecord(BankTrx.BANK_TRX_FILE);
    Record recBooking = ((ReferenceField)recArTrx.getField(ArTrx.BOOKING_ID)).getReference();
    fldAccount = (ReferenceField)recBankAcct.getField(BankAcct.ACCOUNT_ID);
    try   {
        recBankTrx.addNew();
        recBankTrx.getField(BankTrx.TRX_STATUS_ID).moveFieldToThis(recArTrx.getField(ArTrx.TRX_STATUS_ID));
        recBankTrx.getField(BankTrx.TRX_DATE).moveFieldToThis(fldTrxDate);
        recBankTrx.getField(BankTrx.AMOUNT_LOCAL).setValue(-dAmount);
        recBankTrx.getField(BankTrx.TRX_ENTRY).initField(DBConstants.DONT_DISPLAY);
        recBankTrx.getField(BankTrx.BANK_ACCT_ID).moveFieldToThis(recScreenRecord.getField(RefundScreenRecord.BANK_ACCT_ID));
        recBankTrx.getField(BankTrx.AMOUNT).setValue(-dAmount);
        recBankTrx.getField(BankTrx.EXCHANGE).initField(DBConstants.DONT_DISPLAY);
        recBankTrx.getField(BankTrx.COMMENTS).moveFieldToThis(recArTrx.getField(ArTrx.COMMENTS));
        if (recBankTrx.getField(BankTrx.COMMENTS).isNull())
            recBankTrx.getField(BankTrx.COMMENTS).moveFieldToThis(recTransactionType.getField(TransactionType.GROUP_DESC));
        recBankTrx.getField(BankTrx.TRX_NUMBER).moveFieldToThis(recScreenRecord.getField(RefundScreenRecord.CHECK_NO));
        recBankTrx.getField(BankTrx.PAYEE_TRX_DESC_ID).moveFieldToThis(recTransactionType.getField(TransactionType.TRX_DESC_ID));
        recBankTrx.getField(BankTrx.PAYEE_ID).moveFieldToThis(recBooking.getField(Booking.PROFILE_ID));
        recBankTrx.getField(BankTrx.PAYEE_NAME).moveFieldToThis(recBooking.getField(Booking.GENERIC_NAME));
        // Step 2 - Post it to the G/L
        //+recAcctDetail.getDatabase().startTrx();
        // Step 2a - Create and write the bank transaction (in BankTrx).
        boolean bSuccess = recBankTrx.onPostTrx();
        //?if (!bSuccess)
            //?return bSuccess;
        // Step 2b - Post the transaction side of the distribution.
        bSuccess = recBankTrx.onPostTrxDist(fldAccount, -dAmount, PostingType.DIST_POST, recAcctDetail, recAcctDetailDist, recPeriod);
        //?if (!bSuccess)
            //?return bSuccess;
        //?recAcctDetailDist.addDetailTrx(fldAccount, fldTrxDate, fldTrxTypeID, recTransactionType, fldEntryDate, dAmount, iUserID, recAcctDetail, recPeriod);
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2117">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getDrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateRefundPaidAcctDetailHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getOwner().getRecordOwner().getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.REFUND_SUSPENSE_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2118">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserChangedHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_CurrentUserID == -1)
{	// First time through
	CurrentUserHandler cCurrentUserBehavior = new CurrentUserHandler();
	m_CurrentUserID = cCurrentUserBehavior.getCurrentUserID();
	cCurrentUserBehavior.free();
	cCurrentUserBehavior = null;
}
switch (iChangeType)
{
	case DBConstants.ADD_TYPE:
	case DBConstants.UPDATE_TYPE:
		IntegerField thisField = (IntegerField)this.getOwner().getField(m_UserIDFieldSeq);
		thisField.setValue(m_CurrentUserID, bDisplayOption, DBConstants.SCREEN_MOVE);		// File written or updated, set the update date
		break;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2119">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>UserChangedHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>int fsUserID</MethodInterface>
		<MethodClassName>UserChangedHandler</MethodClassName>
		<LogicSource>m_CurrentUserID = fsUserID;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2123">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileTypeFilter</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2124">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrochureClassField</MethodClassName>
		<LogicSource>return new BrochureClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2125">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrochureClassField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2126">
		<LastChanged>2012-03-27T10:26:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Bundle</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(BundleDetail.BUNDLE_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(BUNDLE_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(BUNDLE_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2127">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleDetailGridScreen</MethodClassName>
		<LogicSource>return new BundleDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2143">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doLocalCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ValidBookingHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_iAcceptedType == 0)
{
	BookingStatus recBookingStatus = new BookingStatus(this.getOwner().findRecordOwner());
	recBookingStatus.setKeyArea(BookingStatus.CODE_KEY);
	recBookingStatus.getField(BookingStatus.CODE).setString(BookingStatus.OKAY_CODE);
	m_iAcceptedType = -1;	// In case not found
	try
	{
		boolean bSuccess = recBookingStatus.seek("=");
		if (bSuccess)
			m_iAcceptedType = (int)recBookingStatus.getField(BookingStatus.ID).getValue();
		else
			System.out.println("Sys error - Status not found (ValidBookingHandler)");
	} catch (DBException ex)	{
		ex.printStackTrace();
	}
	recBookingStatus.free();
	recBookingStatus = null;
}
if (this.getOwner().getField(Booking.BALANCE).getValue() >= this.getOwner().getField(Booking.NET).getValue())
	if (this.getOwner().getField(Booking.BOOKING_STATUS_ID).getValue() != m_iAcceptedType)
		return false;	// Skip this one; not accepted and no money in yet
return super;	// Valid booking]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2144">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>addSelectBehaviors</MethodName>
		<LogicDescription>Add the behaviors to calculate the "Amount Selected" and Balance field</LogicDescription>
		<MethodReturns>ApTrx</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Vendor</MethodClassName>
		<LogicSource><![CDATA[RecordOwner recordOwner = this.findRecordOwner();
ApTrx recApTrx2 = new ApTrx(recordOwner);      // Don't add second copy to screen
if (recordOwner != null)
    recordOwner.removeRecord(recApTrx2);
this.addListener(new FreeOnFreeHandler(recApTrx2));  // ...but be sure to free it
recApTrx2.addListener(new SubFileFilter(this));
this.addListener(new RecountOnValidHandler(recApTrx2));

BooleanField fldTrue = new BooleanField(null, "True", 1, null, new Boolean(true));
recApTrx2.addListener(new FreeOnFreeHandler(fldTrue));
recApTrx2.addListener(new CompareFileFilter(ApTrx.ACTIVE_TRX, fldTrue, "=", fldTrue, true));

recApTrx2.addListener(new SubCountHandler(this.getField(Vendor.AMOUNT_SELECTED), ApTrx.AMOUNT_SELECTED, true, true));
recApTrx2.addListener(new SubCountHandler(this.getField(Vendor.VENDOR_BALANCE), ApTrx.INVOICE_BALANCE, true, true));

return recApTrx2;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2145">
		<LastChanged>2012-03-27T12:49:01</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Vendor</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & Vendor.BROKER_DETAIL_MODE) == Vendor.BROKER_DETAIL_MODE)
    screen = Record.makeNewScreen(BROKER_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Vendor.MESSAGE_DETAIL_MODE) == Vendor.MESSAGE_DETAIL_MODE)
    screen = Record.makeNewScreen(MessageDetail.MESSAGE_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Vendor.MESSAGE_LOG_MODE) == Vendor.MESSAGE_LOG_MODE)
    screen = Record.makeNewScreen(MessageLog.MESSAGE_LOG_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == Vendor.VENDOR_DETAIL_MODE)
    screen = Record.makeNewScreen(ApTrx.VENDOR_AP_TRX_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(VENDOR_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(VENDOR_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2146">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysis</MethodClassName>
		<LogicSource><![CDATA[super;

this.getRecord(ApTrx.AP_TRX_FILE).setKeyArea(ApTrx.VENDOR_ID_KEY);
this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.VENDOR_ID).addListener(new ReadSecondaryHandler(this.getRecord(Vendor.VENDOR_FILE)));

this.getRecord(ApTrx.AP_TRX_FILE).addListener(new CompareFileFilter(this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.VENDOR_ID), this.getScreenRecord().getField(ApReportScreenRecord.VENDOR_ID), "=", null, true));
this.getRecord(ApTrx.AP_TRX_FILE).addListener(new FilterApTrxDateRange(ApTrx.DEPARTURE_DATE, this.getScreenRecord().getField(ApReportScreenRecord.START_DEPARTURE), this.getScreenRecord().getField(ApReportScreenRecord.END_DEPARTURE)));

Record recPaymentHistory = this.getRecord(PaymentHistory.PAYMENT_HISTORY_FILE);
Record recApTrx = this.getRecord(ApTrx.AP_TRX_FILE);
recPaymentHistory.addListener(new SubFileFilter(recApTrx));
recApTrx.addListener(new RecountOnValidHandler(recPaymentHistory));
recPaymentHistory.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.PAYMENTS), PaymentHistory.AMOUNT_LOCAL, false, true));

recApTrx.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.TOTAL_ESTIMATE), ApTrx.DEPARTURE_ESTIMATE, true, true, true));
recApTrx.addListener(new InvoiceAmountSubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.TOTAL_INVOICE), ApTrx.INVOICE_AMOUNT, true, true, true));
recApTrx.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.SUB_TOTAL_DEP_EST_USD), ApTrx.DEPARTURE_ESTIMATE_LOCAL, true, true, true));
recApTrx.addListener(new InvoiceAmountSubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.SUB_TOTAL_INVOICE_USD), ApTrx.INVOICE_LOCAL, true, true, true));
recPaymentHistory.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.SUB_TOTAL_PAYMENTS_USD), PaymentHistory.AMOUNT_LOCAL, true, true, true));
recApTrx.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.SUB_TOTAL_BAL_USD), ApTrx.INVOICE_BALANCE_LOCAL, true, true, true));

recApTrx.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.TOTAL_DEP_EST_USD), ApTrx.DEPARTURE_ESTIMATE_LOCAL, true, true));
recApTrx.addListener(new InvoiceAmountSubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.TOTAL_INVOICE_USD), ApTrx.INVOICE_LOCAL, true, true, false));
recPaymentHistory.addListener(new SubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.TOTAL_PAYMENTS_USD), PaymentHistory.AMOUNT_LOCAL, true, true));
recApTrx.addListener(new InvoiceAmountSubCountHandler(this.getScreenRecord().getField(CostAnalysisScreenRecord.TOTAL_USD_BAL), ApTrx.INVOICE_BALANCE_LOCAL, true, true, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2147">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysis</MethodClassName>
		<LogicSource>return new CostAnalysisScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2148">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysis</MethodClassName>
		<LogicSource>return new VendorCostAnalysisToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2149">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysis</MethodClassName>
		<LogicSource>return new VendorCostAnalysisFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2150">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysis</MethodClassName>
		<LogicSource>return new VendorCostAnalysisHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2151">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysis</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2152">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysis</MethodClassName>
		<LogicSource><![CDATA[super;
new Vendor(this);
new PaymentHistory(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2153">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysis</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2154">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysisFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2155">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysisHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2156">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysisToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2157">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

//x I want to see them all
//xSubFileFilter filter = (SubFileFilter)this.getMainRecord().getListener(SubFileFilter.class);
//xif (filter != null)
//x    filter.setFilterIfNull(true);

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(VendorScreenRecord.BALANCE), ApTrx.INVOICE_BALANCE, false, true)); // Init this field override for other value
this.getScreenRecord().getField(VendorScreenRecord.VENDOR_ID).addListener(new FieldReSelectHandler(this));

String strDisplayType = this.getProperty(this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE).getFieldName());
if (strDisplayType != null)
    this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE).setString(strDisplayType, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
this.getMainRecord().addListener(new FilterApTrxHandler(this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE)));
this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new CompareFileFilter(ApTrx.ACTIVE_TRX, this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_ACTIVE), "=", this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_ACTIVE), true));
this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_ACTIVE).addListener(new FieldReSelectHandler(this));

this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2158">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[ScreenRecord screenRecord = new VendorScreenRecord(this);
((ReferenceField)screenRecord.getField(VendorScreenRecord.VENDOR_ID)).setReferenceRecord(this.getRecord(Vendor.VENDOR_FILE));
((ReferenceField)screenRecord.getField(VendorScreenRecord.VENDOR_ID)).setReference(this.getRecord(Vendor.VENDOR_FILE), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
return screenRecord;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2160">
		<LastChanged>2012-01-23T08:57:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.isContactDisplay())
    return null;
return new VendorHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2161">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorApTrxGridScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2162">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorApTrxGridScreen</MethodClassName>
		<LogicSource>return new Vendor(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2163">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorApTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2164">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>VendorApTrxGridScreen*2</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>VendorApTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2165">
		<LastChanged>2012-02-01T12:54:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(VendorScreenRecord.VENDOR_ID).setEnabled(true);

((ReferenceField)this.getScreenRecord().getField(VendorScreenRecord.VENDOR_ID)).getReferenceRecord().getField(Vendor.CODE).setEnabled(true);
this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE).setEnabled(true);
this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_ACTIVE).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2166">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2167">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorField</MethodClassName>
		<LogicSource>return new Vendor(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2168">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Vendor.CODE_KEY, Vendor.VENDOR_NAME, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2169">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Vendor recVendor = (Vendor)this.getMainRecord();
Record recScreenRecord = this.getScreenRecord();
((NumberField)recScreenRecord.getField(VendorScreenRecord.VENDOR_KEY)).setValue(0, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
recScreenRecord.getField(VendorScreenRecord.VENDOR_KEY).addListener(new RegisterValueHandler(null));
this.setEditing(false);
SortOrderHandler keyBehavior = new SortOrderHandler(this);
keyBehavior.setGridTable(Vendor.NAME_SORT_KEY, recVendor, 0);
keyBehavior.setGridTable(Vendor.CODE_KEY, recVendor, 1);
recScreenRecord.getField(VendorScreenRecord.VENDOR_KEY).addListener(keyBehavior);

recVendor.addListener(new ExtractRangeFilter(Vendor.NAME_SORT, recScreenRecord.getField(VendorScreenRecord.VENDOR_NAME), ExtractRangeFilter.PAD_END_FIELD));
recVendor.addListener(new ExtractRangeFilter(Vendor.COUNTRY_ID, recScreenRecord.getField(VendorScreenRecord.VENDOR_COUNTRY), ExtractRangeFilter.PAD_END_FIELD));

recScreenRecord.getField(VendorScreenRecord.VENDOR_NAME).addListener(new FieldReSelectHandler(this));
recScreenRecord.getField(VendorScreenRecord.VENDOR_COUNTRY).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2170">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2171">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorGridScreen</MethodClassName>
		<LogicSource>return new VendorScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2172">
		<LastChanged>2012-01-31T10:43:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);

this.getScreenRecord().getField(VendorScreenRecord.VENDOR_NAME).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(VendorScreenRecord.VENDOR_COUNTRY).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2174">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorGridScreen</MethodClassName>
		<LogicSource>return new Vendor(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2175">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2176">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorScreen</MethodClassName>
		<LogicSource><![CDATA[super;

((Vendor)this.getMainRecord()).addPropertyListeners();

this.addMainKeyBehavior();
this.getMainRecord().getField(Vendor.COUNTRY_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.COUNTRY_ID)));
this.getMainRecord().getField(Vendor.CURRENCYS_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.CURRENCYS_ID)));
this.getMainRecord().getField(Vendor.MESSAGE_TRANSPORT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.MESSAGE_TRANSPORT_ID)));
this.getMainRecord().getField(Vendor.VENDOR_STATUS_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.VENDOR_STATUS_ID)));
this.getMainRecord().getField(Vendor.PAYMENT_CYCLE_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.PAYMENT_CYCLE_ID)));
this.getMainRecord().getField(Vendor.PAYMENT_CODE_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.PAYMENT_CODE_ID)));
this.getMainRecord().getField(Vendor.PREPAY_TYPE_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.PREPAY_TYPE_ID)));
this.getMainRecord().getField(Vendor.DEFAULT_ACCOUNT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.COST_ACCOUNT_ID)));

Record recCountry = ((ReferenceField)this.getMainRecord().getField(Vendor.COUNTRY_ID)).getReferenceRecord();
this.getMainRecord().getField(Vendor.COUNTRY_ID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(Vendor.COUNTRY), recCountry.getField(Country.NAME), false,  true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2177">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, Vendor.MESSAGE_DETAIL_SCREEN, MenuConstants.FORMDETAIL, Vendor.MESSAGE_DETAIL_SCREEN, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, Vendor.MESSAGE_LOG_SCREEN, MenuConstants.FORMDETAIL, Vendor.MESSAGE_LOG_SCREEN, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2179">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorScreen</MethodClassName>
		<LogicSource>return new Vendor(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2180">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ApControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2181">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2183">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorSelectGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(VendorScreenRecord.TOTAL_SELECTED), ApTrx.AMOUNT_SELECTED, false, true));
this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.AMOUNT_SELECTED).setEnabled(true);

FilterApTrxHandler listener = (FilterApTrxHandler)this.getMainRecord().getListener(FilterApTrxHandler.class.getName());
listener.clearFilter();
listener.addTrxStatusID(ApTrx.INVOICE);
listener.addTrxStatusID(ApTrx.INVOICE_NON_TOUR);
listener.addTrxStatusID(ApTrx.PREPAYMENT_REQUEST);
listener.addTrxStatusID(ApTrx.BROKER_PAYMENT_HEADER);
listener.addTrxStatusID(ApTrx.BROKER_PAYMENT);
listener.addTrxStatusID(ApTrx.CREDIT_MEMO);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2184">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorSelectGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Select All", MenuConstants.SELECT, "Select All", null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2185">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorSelectGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase("Select All"))
{
	// No select all the amounts for this Vendor
	Record recApTrx = this.getMainRecord();
	try	{
		recApTrx.close();
		while (recApTrx.hasNext())
		{
			recApTrx.next();
			recApTrx.edit();
			recApTrx.getField(ApTrx.AMOUNT_SELECTED).moveFieldToThis(recApTrx.getField(ApTrx.INVOICE_AMOUNT));
			recApTrx.set();
		}
	RecordOwner screen = recApTrx.getRecordOwner();
	if (screen instanceof GridScreen)
		((GridScreen)screen).reSelectRecords();
	} catch (DBException ex)	{
		ex.printStackTrace();
	}
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2186">
		<LastChanged>2012-01-23T08:57:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorSelectGridScreen</MethodClassName>
		<LogicSource>return new VendorSelectHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2187">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorSelectGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2188">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorSelectHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2189">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorStatusField</MethodClassName>
		<LogicSource>return new VendorStatus(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2190">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorStatusField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2191">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VersionField</MethodClassName>
		<LogicSource>return new Versions(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2192">
		<LastChanged>2012-01-31T14:46:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VersionField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), null, Versions.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2205">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Worksheet</MethodClassName>
		<LogicSource>return new WorksheetToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2208">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Worksheet</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2209">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>WorksheetToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2217">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>zBkEntHdr</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2218">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ZPrTimeTrx</MethodClassName>
		<LogicSource>return new CHFPrTimeTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2219">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ZPrTimeTrx</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2272">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleGridScreen</MethodClassName>
		<LogicSource>return new Bundle(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2273">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleScreen</MethodClassName>
		<LogicSource>return new Bundle(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2274">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2275">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2276">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2277">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2278">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2279">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
	// Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(BundleDetailScreenRecord.BUNDLE_ID)).syncReference(this.getRecord(Bundle.BUNDLE_FILE));
	// The detail file is the sub-file to to passed-in header record.
this.getMainRecord().setKeyArea(BundleDetail.BUNDLE_ID_KEY);		
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));
	// Any change to the bundle file triggers a re-select (note: SPopup read-thru will not respond)
this.getRecord(Bundle.BUNDLE_FILE).getField(Bundle.ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2280">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleDetailGridScreen</MethodClassName>
		<LogicSource>return new BundleDetailScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2281">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>BundleDetailGridScreen*2</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recBundle, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BundleDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2283">
		<LastChanged>2012-01-23T08:57:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleDetailGridScreen</MethodClassName>
		<LogicSource>return new BundleHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2284">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleDetailGridScreen</MethodClassName>
		<LogicSource>return new Bundle(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2285">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2286">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2287">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(BundleDetailScreenRecord.BUNDLE_ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2288">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BundleFilter</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Bundle.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2289">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScfToHandler</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getOwner().getRecord();
String strFrom = record.getField(SCF.SCF_FROM).toString();
String strTo =  record.getField(SCF.SCF_TO).toString();
if ((strFrom == null) || (strFrom.length() == 0))
    strFrom = Constants.BLANK;
if ((strTo == null) || (strTo.length() == 0))
    strTo = StringField.HIGH_STRING;
if (strFrom.compareTo(strTo) > 0) if (record.getRecordOwner() != null)
{
    String strError = "To SCF must be larger than or equal to From SCF";
    strError = ((BaseApplication)record.getRecordOwner().getTask().getApplication()).getResources(ResourceConstants.PROFILE_RESOURCE, true).getString(strError);
    return record.getRecordOwner().getTask().setLastError(strError);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2290">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>seek</MethodName>
		<LogicDescription>Find the record</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>ScfFromHandler</MethodClassName>
		<LogicSource><![CDATA[String strFromTarget = record.getField(SCF.SCF_FROM).toString();
record.getField(SCF.SCF_TO).moveFieldToThis(record.getField(SCF.SCF_FROM), DBConstants.DONT_DISPLAY, DBConstants.READ_MOVE);
record.getField(SCF.SCF_FROM).setString(Constants.BLANK, DBConstants.DONT_DISPLAY, DBConstants.READ_MOVE);
boolean bSuccess = record.seek(">=");
if (bSuccess)
{
	String strFrom = record.getField(SCF.SCF_FROM).toString();
	String strTo = record.getField(SCF.SCF_TO).toString();
	if ((strFrom == null) || (strFrom.length() == 0))
		strFrom = Constants.BLANK;
	if ((strTo == null) || (strTo.length() == 0))
		strTo = Constants.BLANK;
	if ((strFromTarget.compareTo(strFrom) >= 0) && (strFromTarget.compareTo(strTo) <= 0))
		bSuccess = true;	// Success
	else
		bSuccess = false;
}
return bSuccess;]]></LogicSource>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2291">
		<LastChanged>2012-07-19T14:28:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ScfFromHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>field, SCF.SCF_TO</MethodReturns>
		<MethodInterface>BaseField field</MethodInterface>
		<MethodClassName>ScfFromHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2292">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
toolScreen.getScreenRecord().getField(ProfileScreenRecord.NAME_SORT).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(ProfileScreenRecord.LAST_NAME_SORT).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(ProfileScreenRecord.POSTAL_CODE_SORT).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(ProfileScreenRecord.PROFILE_TYPE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2295">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2296">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EAddressTypeField</MethodClassName>
		<LogicSource>return new EAddressType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2297">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CertificationTypeField</MethodClassName>
		<LogicSource>return new CertificationType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2298">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addBundle</MethodName>
		<LogicDescription><![CDATA[Add the brochure detail that is contained in this bundle to this file.
If there is a field that contains the default quantity, pass it.
If the bundle record does not have a current record, then:
	- If the item record is not null, all the items are added
	- If the item record is null, no items are added]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseField fldBundleID, Record recBundleDetail, Record recItem, BaseField fldDefaultQty</MethodInterface>
		<MethodClassName>RequestInput</MethodClassName>
		<LogicSource><![CDATA[// First, delete the current detail
try	{
	this.close();
	while (this.next() != null)
	{
		this.remove();
	}
// Next add back the new detail
	if ((fldBundleID != null) && (!fldBundleID.isNull()))
	{		// Valid bundle ID, fill the RequestItems with this bundle
		recBundleDetail.close();
		while (recBundleDetail.hasNext())
		{
			recBundleDetail.next();
			this.addNew();
			if (fldDefaultQty != null)
				this.getField(RequestInput.BROCHURE_QTY).moveFieldToThis(fldDefaultQty, DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
			this.getField(RequestInput.BROCHURE_ID).moveFieldToThis(recBundleDetail.getField(BundleDetail.BROCHURE_ID), DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
			if (recItem != null)
				this.getField(RequestInput.BROCHURE_DESC).moveFieldToThis(recItem.getField(Brochure.DESCRIPTION), DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
			if (!this.getField(RequestInput.BROCHURE_ID).isNull())
				this.add();
		}
	}
	else if (recItem != null)
	{		// Not a valid bundle ID, set up all the items
		recItem.close();
		recItem.setKeyArea(recItem.getDefaultScreenKeyArea());
		BaseListener listener = recBundleDetail.getField(BundleDetail.BROCHURE_ID).getListener(ReadSecondaryHandler.class.getName());
		if (listener != null)
			listener.setEnabledListener(false);	// Don't want this listener kicking in
		while (recItem.hasNext())
		{
			recItem.next();
			if (recItem.getField(Brochure.DISCONTINUED).getState() == true)
				continue;
			this.addNew();
			if (fldDefaultQty != null)
				this.getField(RequestInput.BROCHURE_QTY).moveFieldToThis(fldDefaultQty, DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
			this.getField(RequestInput.BROCHURE_ID).moveFieldToThis(recItem.getField(Brochure.ID), DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
			this.getField(RequestInput.BROCHURE_DESC).moveFieldToThis(recItem.getField(Brochure.DESCRIPTION), DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
			if (!this.getField(RequestInput.BROCHURE_ID).isNull())
				this.add();
		}
		if (listener != null)
			listener.setEnabledListener(true);
	}
	this.close();
} catch (DBException ex)	{
	ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2299">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addBundleBehaviors</MethodName>
		<LogicDescription>Add the behaviors needed to read the bundles in the addBundle method.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recBundle, Record recBundleDetail, Record recItem</MethodInterface>
		<MethodClassName>RequestInput</MethodClassName>
		<LogicSource><![CDATA[if (recItem != null)
	recBundleDetail.getField(BundleDetail.BROCHURE_ID).addListener(new ReadSecondaryHandler(recItem));
recBundleDetail.addListener(new SubFileFilter(recBundle));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2305">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestSession</MethodClassName>
		<LogicSource>return new Request(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2306">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestSession</MethodClassName>
		<LogicSource><![CDATA[super;
new RequestDetail(this);
// The following files are needed to set up the brochure query
new RequestControl(this);
new BundleDetail(this);
new Brochure(this);
new RequestInput(this);		// Memory-based file]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2307">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestSession</MethodClassName>
		<LogicSource><![CDATA[this.getRecord(RequestDetail.REQUEST_DETAIL_FILE).addListener(new SubFileFilter(this.getRecord(Request.REQUEST_FILE)));

RequestControl recControl = (RequestControl)this.getRecord(RequestControl.REQUEST_CONTROL_FILE);
RequestInput recRequestInput = (RequestInput)this.getRecord(RequestInput.REQUEST_INPUT_FILE);
Brochure recItem = (Brochure)this.getRecord(Brochure.BROCHURE_FILE);
BundleDetail recBundleDetail = (BundleDetail)this.getRecord(BundleDetail.BUNDLE_DETAIL_FILE);
try	{
	recControl.open();		// Read control record
	ReferenceField fldBundleID = (ReferenceField)recControl.getField(RequestControl.THIN_BUNDLE_ID);
	Bundle recBundle = (Bundle)fldBundleID.getReference();	// Current reference record
	recRequestInput.addBundleBehaviors(recBundle, recBundleDetail, recItem);
} catch (DBException ex)	{
	ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2308">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestSession</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equals("RebuildRequestInput"))
{
	RequestInput recRequestInput = (RequestInput)this.getRecord(RequestInput.REQUEST_INPUT_FILE);
	Brochure recItem = (Brochure)this.getRecord(Brochure.BROCHURE_FILE);
	BundleDetail recBundleDetail = (BundleDetail)this.getRecord(BundleDetail.BUNDLE_DETAIL_FILE);
	Bundle recBundle = (Bundle)this.getRecord(Bundle.BUNDLE_FILE);
	BaseField fldBundleID = recBundle.getField(Bundle.ID);
	recRequestInput.addBundle(fldBundleID, recBundleDetail, recItem, null);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2310">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHtmlScreen</MethodClassName>
		<LogicSource>return new Request(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2311">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHtmlScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2312">
		<LastChanged>2012-03-27T10:17:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Request</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
{
    if (ScreenConstants.HTML_SCREEN_TYPE.equalsIgnoreCase(((ComponentParent)parentScreen).getViewType()))
        screen = Record.makeNewScreen(REQUEST_HTML_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
    else
        screen = Record.makeNewScreen(REQUEST_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
}
else
    screen = Record.makeNewScreen(REQUEST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2317">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHtmlScreen</MethodClassName>
		<LogicSource>return new ToolScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2318">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHtmlScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON_WITH_GAP, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, MenuConstants.SUBMIT);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, MenuConstants.RESET);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2324">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHtmlDetailGrid</MethodClassName>
		<LogicSource><![CDATA[String strAgentProperty = this.getProperty("agent");
if (strAgentProperty == null)
	strAgentProperty = "no";
if (strAgentProperty.equalsIgnoreCase("yes"))
	this.getRecord(RequestInput.REQUEST_INPUT_FILE).getField(RequestInput.BROCHURE_QTY).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
else
	new SCheckBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(RequestInput.REQUEST_INPUT_FILE).getField(RequestInput.BROCHURE_QTY), ScreenConstants.DEFAULT_DISPLAY, "1", null);
this.getRecord(RequestInput.REQUEST_INPUT_FILE).getField(RequestInput.BROCHURE_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2325">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHtmlScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new RequestDetail(this);
new RequestInput(this);
new RequestControl(this);
new BundleDetail(this);
new Brochure(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2326">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHtmlScreen</MethodClassName>
		<LogicSource><![CDATA[super;

Record recRequestControl = this.getRecord(RequestControl.REQUEST_CONTROL_FILE);
Request recRequest = (Request)this.getRecord(Request.REQUEST_FILE);
RequestDetail recRequestDetail = (RequestDetail)this.getRecord(RequestDetail.REQUEST_DETAIL_FILE);
BundleDetail recBundleDetail = (BundleDetail)this.getRecord(BundleDetail.BUNDLE_DETAIL_FILE);
Brochure recItem = (Brochure)this.getRecord(Brochure.BROCHURE_FILE);
RequestHtmlDetailGrid subScreen = null;
for (int i = 0; i < this.getSFieldCount(); i++)
{
	if (this.getSField(i) instanceof RequestHtmlDetailGrid)
		subScreen = (RequestHtmlDetailGrid)this.getSField(i);
}
RequestInput recRequestInput = (RequestInput)subScreen.getRecord(RequestInput.REQUEST_INPUT_FILE);

try   {
    recRequestControl.open();
} catch (DBException ex)    {
    ex.printStackTrace(); // Never
}
// Set up the initial detail.
Record recBundle = ((ReferenceField)recRequestControl.getField(RequestControl.HTML_BUNDLE_ID)).getReference(); //this.getRecord(Bundle.BUNDLE_FILE);
recBundleDetail.addListener(new SubFileFilter(recBundle));
recRequestInput.addBundle(recRequestControl.getField(RequestControl.HTML_BUNDLE_ID), recBundleDetail, recItem, null);
// Behaviors to add brochures on submit.
recRequestDetail.addListener(new SubFileFilter(recRequest));
recRequest.addListener(new SetupBrocDetailHandler(recRequest, recRequestDetail, recBundleDetail, recItem, recRequestInput));
recRequest.setOpenMode(recRequest.getOpenMode() | DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2327">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHtmlDetailGrid</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(true);
this.getRecord(RequestInput.REQUEST_INPUT_FILE).getField(RequestInput.BROCHURE_ID).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2328">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHtmlDetailGrid</MethodClassName>
		<LogicSource>// No nav buttons</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2332">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>onAdd</MethodName>
		<LogicDescription>Same as onAdd, but don't clear the record, so I can redisplay it.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHtmlScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
try
{
	if (record.isModified(false))
	{
		if (record.getEditMode() == Constants.EDIT_IN_PROGRESS)
			record.set();
		else if (record.getEditMode() == Constants.EDIT_ADD)
			record.add();
	}
//x	record.addNew();
}
catch(DBException e)
{
	this.displayError(e);
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2335">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintLabels</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(RequestLabelsScreenRecord.SEND_VIA_ID).addListener(new InitFieldHandler(this.getRecord(RequestControl.REQUEST_CONTROL_FILE).getField(RequestControl.SEND_VIA_CODE)));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(Request.SEND_VIA_CODE), this.getScreenRecord().getField(RequestLabelsScreenRecord.SEND_VIA_ID), "="));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(Request.PRINT_NOW), this.getScreenRecord().getField(RequestLabelsScreenRecord.TRUE_FIELD), "="));
this.getRecord(RequestDetail.REQUEST_DETAIL_FILE).addListener(new SubFileFilter(this.getMainRecord()));
this.getMainRecord().addListener(new SetupLabelTextHandler(null)); 
this.getRecord(RequestDetail.REQUEST_DETAIL_FILE).getField(RequestDetail.BROCHURE_ID).addListener(new ReadSecondaryHandler(this.getRecord(Brochure.BROCHURE_FILE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2336">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintLabels</MethodClassName>
		<LogicSource>return new Request(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2338">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintLabels</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2339">
		<LastChanged>2012-01-23T09:38:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintLabels</MethodClassName>
		<LogicSource>return new RequestLabelsToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2340">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestLabelsToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2341">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintLabels</MethodClassName>
		<LogicSource>return new RequestLabelsScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2342">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SendViaFilter</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2349">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>XmlToRequests</MethodClassName>
		<LogicSource>return new Request(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2350">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>XmlToRequests</MethodClassName>
		<LogicSource><![CDATA[super;
new RequestControl(this);
new RequestDetail(this);
new Brochure(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2351">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>XmlToRequests</MethodClassName>
		<LogicSource><![CDATA[super;
Record recRequest = this.getRecord(Request.REQUEST_FILE);
Record recRequestDetail = this.getRecord(RequestDetail.REQUEST_DETAIL_FILE);
Record recRequestControl = this.getRecord(RequestControl.REQUEST_CONTROL_FILE);
try	{
	recRequestControl.open();
} catch (DBException ex)	{
	ex.printStackTrace();
}
recRequest.getField(Request.SEND_VIA_CODE).addListener(new InitFieldHandler(recRequestControl.getField(RequestControl.SEND_VIA_CODE)));

recRequestDetail.addListener(new SubFileFilter(recRequest));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2352">
		<LastChanged>2013-01-22T14:06:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>XmlToRequests</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> properties = m_properties;
if (properties != null)
{
	XmlInOut xmlParser = new XmlInOut(null, null, properties);		// Parse the properties
	xmlParser.run();
// Now, do the stuff
	Record recXmlRequest = xmlParser.getRecord("Request");
	recXmlRequest.close();
	Record recXmlRequestDetail = xmlParser.getRecord("RequestDetail");
	recXmlRequestDetail.close();
	Record recXmlItem = xmlParser.getRecord("Item");
	recXmlItem.close();
	try	{
		if (recXmlRequest != null)
		{
			if (recXmlRequestDetail != null)
			{
				recXmlRequestDetail.addListener(new SubFileFilter(recXmlRequest));
				if (recXmlItem != null) if (recXmlRequestDetail.getField("BrochureID") != null)
				{
					recXmlRequestDetail.getField("BrochureID").addListener(new ReadSecondaryHandler(recXmlItem));
				}
			}
			// Now that I've parsed the XML file, read through it and write it to the request detail
			Record recRequest = this.getRecord(Request.REQUEST_FILE);
			recRequest.setOpenMode(recRequest.getOpenMode() | DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);	// So I can update the detail
			Record recRequestDetail = this.getRecord(RequestDetail.REQUEST_DETAIL_FILE);
			Record recItem = this.getRecord(Brochure.BROCHURE_FILE);

			ResourceBundle resRequestLookup = new RequestConversionTable();
			ResourceBundle resRequestDetailLookup = new RequestDetailConversionTable();
			while (recXmlRequest.next() != null)
			{
				recRequest.addNew();
				recRequest.moveFields(recXmlRequest, resRequestLookup, true, DBConstants.SCREEN_MOVE, true, false, false, false);
				if (recXmlRequestDetail != null)
				{
					recXmlRequestDetail.close();
					while (recXmlRequestDetail.next() != null)
					{
						recRequestDetail.addNew();
						recRequestDetail.moveFields(recXmlRequestDetail, resRequestDetailLookup, true, DBConstants.SCREEN_MOVE, true, false, false, false);
						if (recXmlItem != null)
							if (recXmlRequestDetail.getField("BrochureID") != null)
								if (recRequestDetail.getField(RequestDetail.BROCHURE_DESC).isNull())
						{
							recRequestDetail.getField(RequestDetail.BROCHURE_DESC).moveFieldToThis(recXmlItem.getField("Description"));
						}
						recRequestDetail.add();
					}
				}
				recRequest.add();
			}

		}
	} catch (DBException ex)	{
		ex.printStackTrace();
	}
// *** End of do stuff
	xmlParser.free();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2362">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetupLabelTextHandler</MethodClassName>
		<LogicSource><![CDATA[super; 
Record recRequest = this.getOwner();
RecordOwner recordOwner = recRequest.getRecordOwner();
Record recScreen = (Record)recordOwner.getScreenRecord();
Record recRequestDetail = (Record)recordOwner.getRecord(RequestDetail.REQUEST_DETAIL_FILE);
Record recItem = (Record)recordOwner.getRecord(Brochure.BROCHURE_FILE);
BaseField fldFullAddress = recScreen.getField(RequestLabelsScreenRecord.FULL_ADDRESS);
BaseField fldRequestText = recScreen.getField(RequestLabelsScreenRecord.REQUEST_TEXT);
fldFullAddress.initField(false);
fldRequestText.initField(false);

String strFullAddress = Constants.BLANK;
strFullAddress = this.addOptionalString(strFullAddress, recRequest, Request.ATTENTION, "\n");
strFullAddress = this.addOptionalString(strFullAddress, recRequest, Request.GENERIC_NAME, "\n");
strFullAddress = this.addOptionalString(strFullAddress, recRequest, Request.ADDRESS_LINE_1, "\n");
strFullAddress = this.addOptionalString(strFullAddress, recRequest, Request.ADDRESS_LINE_2, "\n");
strFullAddress = this.addOptionalString(strFullAddress, recRequest, Request.CITY_OR_TOWN, ", ");
strFullAddress = this.addOptionalString(strFullAddress, recRequest, Request.STATE_OR_REGION, "  ");
strFullAddress = this.addOptionalString(strFullAddress, recRequest, Request.POSTAL_CODE, null);
strFullAddress += '\n';
strFullAddress = this.addOptionalString(strFullAddress, recRequest, Request.COUNTRY, null);
fldFullAddress.setString(strFullAddress);

String strRequestText = Constants.BLANK;
recRequestDetail.close();
try	{
	while (recRequestDetail.hasNext())
	{
		recRequestDetail.next();
		strRequestText += '(';
		strRequestText = this.addOptionalString(strRequestText, recRequestDetail, RequestDetail.BROCHURE_QTY, ")");
		if ((recRequestDetail.getField(RequestDetail.BROCHURE_ID).isNull()) || (recItem.getField(Brochure.DESCRIPTION).isNull()))
			strRequestText = this.addOptionalString(strRequestText, recRequestDetail, RequestDetail.BROCHURE_DESC, null);
		else
			strRequestText = this.addOptionalString(strRequestText, recItem, Brochure.DESCRIPTION, null);
		strRequestText += ' ';
	}
} catch (DBException ex)	{
	ex.printStackTrace();
} 
strRequestText += recRequest.getField(Request.BROCHURE_TEXT).toString();
fldRequestText.setString(strRequestText);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2363">
		<LastChanged>2012-01-31T17:28:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addOptionalString</MethodName>
		<LogicDescription>Add this field's string to the current string and if the string is not null add the optional string.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strFullName, Record record, String iFieldSeq, String strOptional</MethodInterface>
		<MethodClassName>SetupLabelTextHandler</MethodClassName>
		<LogicSource><![CDATA[String string = record.getField(iFieldSeq).toString();
if ((string != null) && (string.length() > 0))
{
	strFullName += string;
	if (strOptional != null)
		strFullName += strOptional;
}
return strFullName;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2364">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintLabels</MethodClassName>
		<LogicSource><![CDATA[super;
new RequestDetail(this); 
new Brochure(this);
new RequestControl(this);
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2365">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestLabelsUpdate</MethodClassName>
		<LogicSource>return new Request(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2366">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestLabelsUpdate</MethodClassName>
		<LogicSource><![CDATA[super;
new RequestDetail(this);
new RequestHistory(this);
new RequestHistoryDetail(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2367">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestLabelsUpdate</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(RequestLabelsScreenRecord.SEND_VIA_ID).setData(this.getProperty("sendvia"));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(Request.SEND_VIA_CODE), this.getScreenRecord().getField(RequestLabelsScreenRecord.SEND_VIA_ID), "="));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(Request.PRINT_NOW), this.getScreenRecord().getField(RequestLabelsScreenRecord.TRUE_FIELD), "="));
this.getRecord(RequestDetail.REQUEST_DETAIL_FILE).addListener(new SubFileFilter(this.getMainRecord()));
this.getRecord(RequestHistoryDetail.REQUEST_HISTORY_DETAIL_FILE).addListener(new SubFileFilter(this.getRecord(RequestHistory.REQUEST_HISTORY_FILE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2368">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestLabelsUpdate</MethodClassName>
		<LogicSource>return new RequestLabelsScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2371">
		<LastChanged>2013-01-22T14:07:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestLabelsUpdate</MethodClassName>
		<LogicSource><![CDATA[Record recRequest = this.getRecord(Request.REQUEST_FILE);
Record recRequestDetail = this.getRecord(RequestDetail.REQUEST_DETAIL_FILE);
Record recRequestHistory = this.getRecord(RequestHistory.REQUEST_HISTORY_FILE);
Record recRequestHistoryDetail = this.getRecord(RequestHistoryDetail.REQUEST_HISTORY_DETAIL_FILE);

try   {
    recRequest.close();
    while (recRequest.hasNext())
    {
        recRequest.next();
        recRequest.edit();
        if (recRequest.getField(Request.HIST_REPRINT).getState() != true)
        {   // Not reprinted = update history
            recRequestHistory.addNew();
            recRequestHistory.moveFields(recRequest, Record.MOVE_BY_NAME, true, DBConstants.SCREEN_MOVE, true, false, false, false);   // Move all fields to the history record
            recRequestHistory.add();
            Object bookmark = recRequestHistory.getLastModified(DBConstants.BOOKMARK_HANDLE);
            recRequestHistory.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
    
            this.updateHistoryDetail(recRequestDetail, recRequestHistoryDetail, recRequest);
        }
        recRequest.remove();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2372">
		<LastChanged>2013-01-22T14:08:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>updateHistoryDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recRequestDetail, Record recRequestHistoryDetail, Record recRequest</MethodInterface>
		<MethodClassName>RequestLabelsUpdate</MethodClassName>
		<LogicSource><![CDATA[try   {
    recRequestDetail.close();
    while (recRequestDetail.hasNext())
    {
        recRequestDetail.next();
        recRequestDetail.edit();

        recRequestHistoryDetail.addNew();
        recRequestHistoryDetail.moveFields(recRequestDetail, Record.MOVE_BY_NAME, true, DBConstants.SCREEN_MOVE, true, false, false, false);   // Move all fields to the history record
        recRequestHistoryDetail.getField(RequestHistoryDetail.PROFILE_ID).moveFieldToThis(recRequest.getField(Request.PROFILE_ID));
        recRequestHistoryDetail.add();  

        recRequestDetail.remove();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2373">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintLabels</MethodClassName>
		<LogicSource><![CDATA[if ("Request History".equalsIgnoreCase(strCommand))
{
    BasePanel parentScreen = Screen.makeWindow(this.getTask().getApplication());
    new RequestHistoryDisplayScreen(null, null, parentScreen, null, 0, null);
    return true;
}
Map properties = new HashMap();
properties.put("sendvia", this.getScreenRecord().getField(RequestLabelsScreenRecord.SEND_VIA_ID).getData());
if (strCommand.equalsIgnoreCase(MenuConstants.PRINT))
{
    // Step 1 - Move any history to the Request file before starting.
    RequestLabelsRestore update = new RequestLabelsRestore(this.getTask(), null, properties);
    update.run();
    update.free();
    // Step 2 - Mark all the records to print (In case someone submits a request between print and update).
    MarkLabelsToPrint markProcess = new MarkLabelsToPrint(this.getTask(), null, properties);
    markProcess.run();
    markProcess.free();
    // DO NOT RETURN, continue "printing".
}
boolean bSuccess = super;
if (bSuccess)
    if (strCommand.equalsIgnoreCase(MenuConstants.PRINT))
{       // Move the printed labels to history
    RequestLabelsUpdate update = new RequestLabelsUpdate(this.getTask(), null, properties);
    update.run();
    update.free();
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2374">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintLabels</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Request History", MenuConstants.LOOKUP, "Request History", null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2376">
		<LastChanged>2012-02-21T00:13:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>layoutPrintControl</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintLabels</MethodClassName>
		<LogicSource><![CDATA[/*
JPanel panel = (JPanel)control;
int x = 0;
int y = 0;
int width = 3 * 72;
int height = 2 * 72;
panel.setBounds(x, y, width, height);

JTextArea label = (JTextArea)((STEView)this.getScreenRecord().getField(RequestLabelsScreenRecord.FULL_ADDRESS).getComponent(0)).getScreenFieldView().getControl();
JScrollPane compTop = (JScrollPane)((STEView)this.getScreenRecord().getField(RequestLabelsScreenRecord.FULL_ADDRESS).getComponent(0)).getScreenFieldView().getControl(DBConstants.CONTROL_TOP);
this.setupComponent(compTop, x, y, width, height);

label = (JTextArea)((STEView)this.getScreenRecord().getField(RequestLabelsScreenRecord.REQUEST_TEXT).getComponent(0)).getScreenFieldView().getControl();
compTop = (JScrollPane)((STEView)this.getScreenRecord().getField(RequestLabelsScreenRecord.REQUEST_TEXT).getComponent(0)).getScreenFieldView().getControl(DBConstants.CONTROL_TOP);
compTop.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
compTop.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
y = (int)(1.5 * 72);
height = (int)(0.5 * 72);
this.setupComponent(compTop, x, y, width, height);
label.setFont(new Font("SansSerif", Font.PLAIN, 8));
*/]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2378">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>75</Sequence>
		<MethodName>setEndDate</MethodName>
		<LogicDescription><![CDATA[Set the ending time for this tour product.
Then, return the actual ending date that was set.]]></LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>Date time</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[return this.getEndDate();		// By default, don't allow changes]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2379">
		<LastChanged>2012-02-01T10:08:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>92</Sequence>
		<MethodName>setEndDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotel</MethodClassName>
		<LogicSource><![CDATA[// First get the number of nights
Calendar startDate = ((DateTimeField)this.getField(BookingHotel.DETAIL_DATE)).getCalendar();
if (startDate != null)
{
    boolean[] rgbEnabled = this.getField(BookingHotel.DETAIL_END_DATE).setEnableListeners(false);  // No echos

    startDate.set(Calendar.HOUR_OF_DAY, 0);
    startDate.set(Calendar.MINUTE, 0);
    startDate.set(Calendar.SECOND, 0);
    startDate.set(Calendar.MILLISECOND, 0);
    long lStartDate = startDate.getTime().getTime();
    startDate.setTime(time);
    startDate.set(Calendar.HOUR_OF_DAY, 0);
    startDate.set(Calendar.MINUTE, 1);  // For rounding
    startDate.set(Calendar.SECOND, 0);
    startDate.set(Calendar.MILLISECOND, 0);
    long lEndDate = startDate.getTime().getTime();
    int iDays = (int)((lEndDate - lStartDate) / DBConstants.KMS_IN_A_DAY);

    if (iDays > 0)
    {
        int iOldDays = (int)this.getField(BookingHotel.NIGHTS).getValue();
        int iErrorCode = this.getField(BookingHotel.NIGHTS).setValue(iDays);
        if (iErrorCode == DBConstants.NORMAL_RETURN)
        { // Move this code to a listener!!!
            int mealQty1 = this.getFieldSeq(BookingHotel.MEAL_PLAN_1_QTY);
            int mealQty2 = this.getFieldSeq(BookingHotel.MEAL_PLAN_2_QTY);
            int mealQty4 = this.getFieldSeq(BookingHotel.MEAL_PLAN_4_QTY);
            for (int iFieldSeq = mealQty1; iFieldSeq <= mealQty4; iFieldSeq += mealQty2 - mealQty1)
            {
                if (this.getField(iFieldSeq).getValue() == iOldDays)
                    this.getField(iFieldSeq).setValue(iDays);
            }
        }
    }

    this.getField(BookingHotel.DETAIL_END_DATE).setEnableListeners(rgbEnabled);  // Restore this
}
return this.getEndDate();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2380">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandField</MethodClassName>
		<LogicSource>return new Land(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2381">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarField</MethodClassName>
		<LogicSource>return new Car(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2383">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationField</MethodClassName>
		<LogicSource>return new Transportation(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2700">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseField</MethodClassName>
		<LogicSource>return new Cruise(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2725">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PictureScreen</MethodClassName>
		<LogicSource>return new Picture(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2726">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PictureScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2727">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PictureGridScreen</MethodClassName>
		<LogicSource>return new Picture(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2728">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PictureGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strJob = null;
strJob = Utility.addURLParam(strJob, DBParams.TASK, DBConstants.ROOT_PACKAGE + "screen.thread.ProcessRunner");	// Screen class
strJob = Utility.addURLParam(strJob, DBParams.PROCESS, DBConstants.ROOT_PACKAGE + "personal.manual.ScanImages");	// Screen class
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, strJob, "Scan");
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2729">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PictureGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
String strJob = null;
strJob = Utility.addURLParam(strJob, DBParams.TASK, DBConstants.ROOT_PACKAGE + "screen.thread.ProcessRunner");	// Screen class
strJob = Utility.addURLParam(strJob, DBParams.PROCESS, DBConstants.ROOT_PACKAGE + "personal.manual.ScanImages");	// Screen class
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, strJob, "Scan");]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2730">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PictureGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2731">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PictureGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2732">
		<LastChanged>2012-01-19T20:33:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Picture</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
	screen = new PictureGridScreen(this, null, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
	screen = new PictureScreen(this, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
	screen = new PictureGridScreen(this, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2733">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PictureGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recLayout, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>PictureGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2745">
		<LastChanged>2012-04-11T09:30:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getProduct</MethodName>
		<LogicDescription>Get the product for this detail</LogicDescription>
		<MethodReturns>ProductModel</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[((ReferenceField)this.getField(BookingDetail.PRODUCT_ID)).getReferenceRecord(this.getRecordOwner());	// Reference same recordowner
return (Product)((ReferenceField)this.getField(BookingDetail.PRODUCT_ID)).getReference();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="2750">
		<LastChanged>2012-04-11T15:40:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>69</Sequence>
		<MethodName>setupStartDate</MethodName>
		<LogicDescription><![CDATA[Set up the date and time for this detail item 
@return The start date]]></LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>TourSub recTourHeaderDetail, Booking recBooking, Tour recTour, BaseField fldPaxID, BaseField fldQaID, BaseField fldModID, Date dateStart</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[Calendar calendar = DateTimeField.m_calendar;
Date timeDetail = null;  // Time portion
boolean bSetTime = false;

if (recTourHeaderDetail != null)
{
    // If you passed tour detail, use this tour detail to create the date/time for this booking detail
    // Date comes from the # days offset for this detail
    // Time comes from the detail time field (if null, use the product's etd time)
    if ((dateStart == null) || (dateStart.getTime() == 0))
        dateStart = ((DateTimeField)recTour.getField(Tour.DEPARTURE_DATE)).getDateTime();
    calendar.setTime(dateStart);
    calendar.set(Calendar.HOUR_OF_DAY, 0);
    calendar.set(Calendar.MINUTE, 0);
    calendar.set(Calendar.SECOND, 0);
    calendar.set(Calendar.MILLISECOND, 0);
    int iDaysOffset = (int)recTourHeaderDetail.getField(TourHeaderDetail.DAY).getValue();
    iDaysOffset -= 1; // Day 1 = offset +0
    calendar.add(Calendar.DATE, iDaysOffset);
    dateStart = calendar.getTime();     // Start date
    if (!recTourHeaderDetail.getField(TourHeaderDetail.ETD).isNull())
    {
        timeDetail = ((DateTimeField)recTourHeaderDetail.getField(TourHeaderDetail.ETD)).getDateTime();    // Start time
        bSetTime = true;    // Use this time!
    }
}

ProductModel recProduct = this.getProduct();
if (!bSetTime)
    if ((recProduct != null) && (!recProduct.getField(Product.ETD).isNull()))
{
    timeDetail = ((TimeField)recProduct.getField(Product.ETD)).getDateTime();
    bSetTime = true;    // Did supply a time
}

if ((dateStart == null) || (dateStart.getTime() == 0)
    || ((recTourHeaderDetail == null) && (!this.getField(BookingDetail.DETAIL_DATE).isNull())))
        dateStart = ((DateTimeField)this.getField(BookingDetail.DETAIL_DATE)).getDateTime();    // Don't change date (change time only if 0 or 12)
if (dateStart != null)
    calendar.setTime(dateStart); // Time portion
if (!bSetTime)
    if (((calendar.get(Calendar.HOUR_OF_DAY) != 0) && (calendar.get(Calendar.HOUR_OF_DAY) != 12)) || (calendar.get(Calendar.MINUTE) != 0) || (calendar.get(Calendar.SECOND) != 0) || (calendar.get(Calendar.MILLISECOND) != 0))
{
    timeDetail = dateStart;
    bSetTime = true;    // Did supply a time
}

if (timeDetail == null)
    bSetTime = false;   // Never (being careful)

if (!bSetTime)
{   // If 
    calendar.setTime(new Date());
    // Default time is noon, not midnight.
    calendar.set(Calendar.HOUR_OF_DAY, 12);
    calendar.set(Calendar.MINUTE, 0);
    calendar.set(Calendar.SECOND, 0);
    calendar.set(Calendar.MILLISECOND, 0);
    timeDetail = calendar.getTime();
}
else
{
    calendar.setTime(timeDetail);
    if ((calendar.get(Calendar.HOUR_OF_DAY) == 12) || (calendar.get(Calendar.MINUTE) == 0) || (calendar.get(Calendar.SECOND) == 0) || (calendar.get(Calendar.MILLISECOND) == 0))
    {       // Special case - user specified 12:00PM exactly, by adding this, it won't auto-change to another value.
        calendar.set(Calendar.MILLISECOND, 1);
        timeDetail = calendar.getTime();
    }
}

boolean[] rgbEnabled = this.getField(BookingDetail.DETAIL_DATE).setEnableListeners(false);  // Don't call again
((DateTimeField)this.getField(BookingDetail.DETAIL_DATE)).setDate(dateStart, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
if (timeDetail != null)
    ((DateTimeField)this.getField(BookingDetail.DETAIL_DATE)).setTime(timeDetail, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(BookingDetail.DETAIL_DATE).setEnableListeners(rgbEnabled);

return ((DateTimeField)this.getField(BookingDetail.DETAIL_DATE)).getDateTime();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2752">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuSession</MethodClassName>
		<LogicSource><![CDATA[return new ReportScreenRecord(this);	// For current user name]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2753">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuSession</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(DBConstants.MAIN_KEY_AREA + 1);
this.getMainRecord().addListener(new CompareFileFilter(this.getRecord(Booking.BOOKING_FILE).getField(Booking.EMPLOYEE_ID), this.getScreenRecord().getField(ReportScreenRecord.REPORT_USER_ID), "="));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2754">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuSession</MethodClassName>
		<LogicSource>return new BookingMenuLookup(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2755">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuSession</MethodClassName>
		<LogicSource><![CDATA[// Add code here later when you have folder handling
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2756">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuLookup</MethodClassName>
		<LogicSource><![CDATA[this.addTable(new Booking(recordOwner));
this.addTable(new Tour(recordOwner));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2757">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>setSelected</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuLookup</MethodClassName>
		<LogicSource><![CDATA[if (bSelect == false)		// Don't allow TableSessionObject to select all the fields
	super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2758">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuLookup</MethodClassName>
		<LogicSource><![CDATA[this.setSelected(false);
super;
this.getField(Booking.BOOKING_FILE, Booking.ID).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.BOOKING_DATE).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.EMPLOYEE_ID).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.CODE).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.DESCRIPTION).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.EMPLOYEE_MOD_ID).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.MOD_DATE).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.BOOKING_STATUS_ID).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.GENERIC_NAME).setSelected(true);
this.getField(Tour.TOUR_FILE, Tour.DEPARTURE_DATE).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2759">
		<LastChanged>2012-02-01T09:49:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>setupRelationships</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuLookup</MethodClassName>
		<LogicSource>this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(Booking.BOOKING_FILE), this.getRecord(Tour.TOUR_FILE), Booking.TOUR_ID, Tour.ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2760">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>setupKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuLookup</MethodClassName>
		<LogicSource><![CDATA[KeyArea keyArea = null;
if (iKeyArea == DBConstants.MAIN_KEY_AREA)
{
    keyArea = this.makeIndex(DBConstants.UNIQUE, "PrimaryKey");
    keyArea.addKeyField(this.getField(Booking.BOOKING_FILE, Booking.ID), DBConstants.ASCENDING);
}
if (iKeyArea == DBConstants.MAIN_KEY_AREA + 1)
{
    keyArea = this.makeIndex(DBConstants.NOT_UNIQUE, "DescriptionKey");
    keyArea.addKeyField(this.getField(Booking.BOOKING_FILE, Booking.DESCRIPTION), DBConstants.ASCENDING);
}
return keyArea;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2762">
		<LastChanged>2013-01-22T05:56:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand != null)
{
    if (strCommand.equalsIgnoreCase(BOOKING_ENTRY))
    {
        iCommandOptions = ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER;     // Must open a new window
        strCommand = Utility.addURLParam(null, DBParams.APPLET, DBParams.BASE_APPLET);
        strCommand = Utility.addURLParam(strCommand, DBParams.SCREEN, com.tourgeek.thin.app.booking.entry.TourGeekScreen.class.getName());
        if ((this.getMainRecord().getEditMode() == DBConstants.EDIT_IN_PROGRESS) ||
            (this.getMainRecord().getEditMode() == DBConstants.EDIT_CURRENT))
        {   // Add booking ID
            String strBookingID = this.getMainRecord().getField(Booking.ID).toString();
            strCommand = Utility.addURLParam(strCommand, DBConstants.OBJECT_ID, strBookingID);
        }
    }
    else if ((strCommand.equalsIgnoreCase(MenuConstants.FORMLINK))
            || (strCommand.equalsIgnoreCase(MenuConstants.FORM)))
    {
        try   {
            int iSelection = this.getScreenFieldView().getSelectedRow();
            if (iSelection != -1)
            {
                Record recAtTarget = (Record)((GridTable)this.getMainRecord().getTable()).get(iSelection);
                if (recAtTarget != null)
                    if (recAtTarget.getHandle(DBConstants.BOOKMARK_HANDLE) == null)
                {   // Special weird case - booking, but no pax, show booking (std logic will not read booking)
                    Object bookmark = recAtTarget.getBaseRecord().getHandle(DBConstants.BOOKMARK_HANDLE);
                    recAtTarget.getBaseRecord().setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
                    this.addRecord(recAtTarget.getBaseRecord(), false);
                    return (this.onForm(recAtTarget.getBaseRecord(), ScreenConstants.MAINT_MODE, true, iCommandOptions, null) != null);
                }
            }
        } catch (DBException ex)    {
            ex.printStackTrace();
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2763">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourLookupQuery</MethodClassName>
		<LogicSource><![CDATA[this.addTable(new Tour(recordOwner));
this.addTable(new TourHeader(recordOwner)); 
this.addTable(new Inventory(recordOwner));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2764">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourLookupQuery</MethodClassName>
		<LogicSource><![CDATA[this.setSelected(false);
super;
this.getField(Tour.TOUR_FILE, Tour.ID).setSelected(true);
this.getField(Tour.TOUR_FILE, Tour.DESCRIPTION).setSelected(true);
this.getField(Tour.TOUR_FILE, Tour.DEPARTURE_DATE).setSelected(true);
this.getField(Tour.TOUR_FILE, Tour.TOUR_STATUS_ID).setSelected(true);
this.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.ID).setSelected(true);
this.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.DESCRIPTION).setSelected(true);
this.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.TOUR_TYPE).setSelected(true);
this.getField(TourHeader.TOUR_HEADER_FILE, TourHeader.CODE).setSelected(true);
this.getField(Inventory.INVENTORY_FILE, Inventory.BLOCKED).setSelected(true);
this.getField(Inventory.INVENTORY_FILE, Inventory.USED).setSelected(true);
this.getField(Inventory.INVENTORY_FILE, Inventory.AVAILABLE).setSelected(true);
this.getField(Inventory.INVENTORY_FILE, Inventory.OVERSELL).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2765">
		<LastChanged>2012-02-01T10:20:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>setupRelationships</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourLookupQuery</MethodClassName>
		<LogicSource><![CDATA[this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(Tour.TOUR_FILE), this.getRecord(TourHeader.TOUR_HEADER_FILE), Tour.TOUR_HEADER_ID, TourHeader.ID);
TableLink link = new TableLink(this, DBConstants.LEFT_OUTER, this.getRecord(Tour.TOUR_FILE), this.getRecord(Inventory.INVENTORY_FILE));
this.getRecord(Inventory.INVENTORY_FILE).setKeyArea(Inventory.INV_DATE_KEY);
Record recProductType = new ProductType(this.findRecordOwner());
recProductType.setKeyArea(ProductType.CODE_KEY);
recProductType.getField(ProductType.CODE).setString(ProductType.TOUR_CODE);
try {
    recProductType.seek("=");
    link.addLink(recProductType.getCounterField().toString(), Inventory.PRODUCT_TYPE_ID);
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    recProductType.free();
}
link.addLink(Tour.TOUR_HEADER_ID, Inventory.PRODUCT_ID);
link.addLink("0", Inventory.RATE_ID);
link.addLink("0", Inventory.CLASS_ID);
link.addLink("0", Inventory.OTHER_ID);
link.addLink(Tour.DEPARTURE_DATE, Inventory.INV_DATE);
this.getRecord(Inventory.INVENTORY_FILE).getField(Inventory.BLOCKED).removeListener(this.getRecord(Inventory.INVENTORY_FILE).getField(Inventory.BLOCKED).getListener(InitOnceFieldHandler.class.getName()), true);
this.getRecord(Inventory.INVENTORY_FILE).getField(Inventory.USED).removeListener(this.getRecord(Inventory.INVENTORY_FILE).getField(Inventory.USED).getListener(InitOnceFieldHandler.class.getName()), true);
this.getRecord(Inventory.INVENTORY_FILE).getField(Inventory.AVAILABLE).removeListener(this.getRecord(Inventory.INVENTORY_FILE).getField(Inventory.AVAILABLE).getListener(InitOnceFieldHandler.class.getName()), true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2766">
		<LastChanged>2013-01-22T05:56:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand != null)
	if (strCommand.equalsIgnoreCase("Booking Entry"))
{
	iCommandOptions = ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER;     // Must open a new window
	strCommand = Utility.addURLParam(null, DBParams.APPLET, DBParams.BASE_APPLET);
	strCommand = Utility.addURLParam(strCommand, DBParams.SCREEN, com.tourgeek.thin.app.booking.entry.TourGeekScreen.class.getName());
	if ((this.getMainRecord().getEditMode() == DBConstants.EDIT_IN_PROGRESS) ||
		(this.getMainRecord().getEditMode() == DBConstants.EDIT_CURRENT))
	{		// Add booking ID
		String strTourID = this.getMainRecord().getField(Tour.ID).toString();
		strCommand = Utility.addURLParam(strCommand, "TourID", strTourID);
	}
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2767">
		<LastChanged>2013-01-22T05:57:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand != null)
	if (strCommand.equalsIgnoreCase("Booking Entry"))
{
	iCommandOptions = ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER;     // Must open a new window
	strCommand = Utility.addURLParam(null, DBParams.APPLET, DBParams.BASE_APPLET);
	strCommand = Utility.addURLParam(strCommand, DBParams.SCREEN, com.tourgeek.thin.app.booking.entry.TourGeekScreen.class.getName());
	if ((this.getMainRecord().getEditMode() == DBConstants.EDIT_IN_PROGRESS) ||
		(this.getMainRecord().getEditMode() == DBConstants.EDIT_CURRENT))
	{		// Add booking ID
		String strTourHeaderID = this.getMainRecord().getField(TourHeader.ID).toString();
		strCommand = Utility.addURLParam(strCommand, "TourHeaderID", strTourHeaderID);
	}
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2768">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactScreen</MethodClassName>
		<LogicSource>return new Contact(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2769">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactGridScreen</MethodClassName>
		<LogicSource>return new Contact(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2770">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2771">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record recContact = this.getMainRecord();
recContact.setKeyArea(Contact.NAME_SORT_KEY);
SortOrderHandler keyBehavior = new SortOrderHandler(this);
keyBehavior.setGridTable(Contact.NAME_SORT_KEY, recContact, 0);
keyBehavior.setGridTable(Contact.CONTACT_KEY, recContact, 1);
keyBehavior.setGridTable(-1, recContact, 2);
keyBehavior.setGridTable(Contact.POSTAL_CODE_SORT_KEY, recContact, 3);
keyBehavior.setGridTable(-1, recContact, 4);
keyBehavior.setGridTable(-1, recContact, 5);
keyBehavior.setGridTable(-1, recContact, 6);
this.getScreenRecord().getField(ContactScreenRecord.PROFILE_KEY).addListener(keyBehavior);

recContact.addListener(new ExtractRangeFilter(Contact.POSTAL_CODE_SORT, this.getScreenRecord().getField(ContactScreenRecord.POSTAL_CODE_SORT)));
recContact.addListener(new ExtractRangeFilter(Contact.NAME_SORT, this.getScreenRecord().getField(ContactScreenRecord.NAME_SORT)));
recContact.addListener(new CompareFileFilter(Contact.CONTACT_CATEGORY_ID, this.getScreenRecord().getField(ContactScreenRecord.CONTACT_CATEGORY_ID), "=", null, true));

this.getScreenRecord().getField(ContactScreenRecord.NAME_SORT).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(ContactScreenRecord.POSTAL_CODE_SORT).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(ContactScreenRecord.CONTACT_CATEGORY_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2772">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactGridScreen</MethodClassName>
		<LogicSource>return new ContactScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2773">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2774">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetProductDescHandler</MethodClassName>
		<LogicSource><![CDATA[if (owner != null)
{
	Record recProduct = ((BaseField)owner).getRecord();
	String string = recProduct.getTableNames(false);
	if (string.equals("TourHeader"))
		string = "Tour";
	((BaseField)owner).setDefault(string);
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2775">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PictureControlScreen</MethodClassName>
		<LogicSource>return new PictureControl(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2777">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SyncPictures</MethodClassName>
		<LogicSource>return new Picture(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2778">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SyncPictures</MethodClassName>
		<LogicSource><![CDATA[super;
new PictureControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2780">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SyncPictures</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2781">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SyncPictures</MethodClassName>
		<LogicSource><![CDATA[boolean bFlag = false;

if (strCommand.indexOf("ScanImages") != -1)
{	// Don't run in a new thread, run it here
	org.jbundle.app.picture.manual.ScanImages convert = new org.jbundle.app.picture.manual.ScanImages(this.getTask(), null, null);
	convert.run();
	convert.free();
	bFlag = true;
}

if (bFlag == false)
	bFlag = super.doCommand(strCommand, sourceSField, iCommandOptions);	// This will send the command to my parent
return bFlag;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2782">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProcessPictures</MethodClassName>
		<LogicSource>return new Picture(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2783">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProcessPictures</MethodClassName>
		<LogicSource><![CDATA[super;
new PictureControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2785">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProcessPictures</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2786">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProcessPictures</MethodClassName>
		<LogicSource><![CDATA[boolean bFlag = false;

if (strCommand.indexOf("WritePicture") != -1)
{	// Don't run this in a task
	org.jbundle.app.picture.manual.WritePicture convert = new org.jbundle.app.picture.manual.WritePicture(this.getTask(), null, null);
	convert.run();
	convert.free();
	bFlag = true;
}

if (bFlag == false)
	bFlag = super;	// This will send the command to my parent
return bFlag;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2787">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PictureTypeField</MethodClassName>
		<LogicSource>return new PictureType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2795">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ExportPictures</MethodClassName>
		<LogicSource><![CDATA[super;
try	{
	this.getRecord(PictureControl.PICTURE_CONTROL_FILE).open();	// Get the control record
} catch (DBException ex)	{
	ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2797">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ExportPictures</MethodClassName>
		<LogicSource>return new Picture(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2798">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ExportPictures</MethodClassName>
		<LogicSource><![CDATA[super;
new PictureControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2799">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ExportPictures</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2800">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ExportPictures</MethodClassName>
		<LogicSource><![CDATA[boolean bFlag = false;

if (strCommand.indexOf("ExportPictures") != -1)
{
	Properties properties = new Properties();
	Record recPictureControl = this.getRecord(PictureControl.PICTURE_CONTROL_FILE);
	String strDate = "";
	if (!recPictureControl.getField(PictureControl.LAST_EXPORTED).isNull())
	{
		Date date = ((DateTimeField)recPictureControl.getField(PictureControl.LAST_EXPORTED)).getDateTime();
		strDate = DateFormat.getInstance().format(date);
	}
	properties.setProperty("date", strDate);
	String strRoot = recPictureControl.getField(PictureControl.BASE_DIRECTORY).toString();
	if (strRoot.length() > 0)
		if ((strRoot.charAt(strRoot.length() - 1) != '/')
			|| (strRoot.charAt(strRoot.length() - 1) != '\\'))
				strRoot += '/';
	String strRecord = "Picture";
	String strPackage = "personal";
	String strFilename = strRoot + strPackage.replace('.', '/') + '/' + strRecord + ".xml";
	properties.setProperty("filename", strFilename);
	org.jbundle.app.picture.manual.ExportPictureRecord convert = new org.jbundle.app.picture.manual.ExportPictureRecord(null, null, properties);
	convert.run();
	convert.free();
	try	{
		recPictureControl.edit();
		((DateTimeField)recPictureControl.getField(PictureControl.LAST_EXPORTED)).setDateTime(new Date(), true, DBConstants.SCREEN_MOVE);
		recPictureControl.set();
	} catch (DBException ex)	{
		ex.printStackTrace();
	}
	bFlag = true;
}

if (bFlag == false)
	bFlag = super;	// This will send the command to my parent
return bFlag;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2801">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getStatus</MethodName>
		<LogicDescription><![CDATA[Get the overall status of this line item.
This includes status of the pricing, inventory, date, etc.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[int iStatus = (1 << 0);   // Normal status
if ((this.getField(BookingDetail.INFO_STATUS_ID).getValue() != InfoStatus.VALID) && (this.getField(BookingDetail.INFO_STATUS_ID).getValue() != InfoStatus.NO_STATUS) && (this.getField(BookingDetail.INFO_STATUS_ID).getValue() != InfoStatus.NULL_STATUS))
    iStatus = iStatus | (1 << BookingConstants.INFO_LOOKUP);
if ((this.getField(BookingDetail.COST_STATUS_ID).getValue() != CostStatus.VALID) && (this.getField(BookingDetail.COST_STATUS_ID).getValue() != CostStatus.NO_STATUS) && (this.getField(BookingDetail.COST_STATUS_ID).getValue() != CostStatus.NULL_STATUS))
    iStatus = iStatus | (1 << BookingConstants.COST_LOOKUP);
if ((this.getField(BookingDetail.INVENTORY_STATUS_ID).getValue() != InventoryStatus.VALID) && (this.getField(BookingDetail.INVENTORY_STATUS_ID).getValue() != InventoryStatus.NO_STATUS) && (this.getField(BookingDetail.INVENTORY_STATUS_ID).getValue() != InventoryStatus.NULL_STATUS))
    iStatus = iStatus | (1 << BookingConstants.INVENTORY_LOOKUP);
if ((this.getField(BookingDetail.PRODUCT_STATUS_ID).getValue() != ProductStatus.VALID) && (this.getField(BookingDetail.PRODUCT_STATUS_ID).getValue() != ProductStatus.NO_STATUS) && (this.getField(BookingDetail.PRODUCT_STATUS_ID).getValue() != ProductStatus.NULL_STATUS) && (this.getField(BookingDetail.PRODUCT_STATUS_ID).getValue() != ProductStatus.PROPOSAL) && (this.getField(BookingDetail.PRODUCT_STATUS_ID).getValue() != ProductStatus.CANCELED))
    iStatus = iStatus | (1 << BookingConstants.PRODUCT_LOOKUP);
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2802">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>getStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource>return this.getBookingDetail().getStatus();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2814">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doGetData</MethodName>
		<LogicDescription>Get the status by combining the other status</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatusHandler</MethodClassName>
		<LogicSource><![CDATA[this.getOwner().setData(this.getStatus());
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2817">
		<LastChanged>2012-01-31T10:43:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doGetData</MethodName>
		<LogicDescription><![CDATA[Get the product type of this detail record.
This is used to fill in the virtual ProductType field in BookingDetail.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTypeHandler</MethodClassName>
		<LogicSource><![CDATA[String strDesc = DBConstants.BLANK;
Record recBookingDetail = (BookingSub)this.getOwner().getRecord();
Record recProductType = ((ReferenceField)recBookingDetail.getField(BookingDetail.PRODUCT_TYPE_ID)).getReference();
if ((recProductType == null)
    || (recProductType.getEditMode() == DBConstants.EDIT_ADD)
    || (recProductType.getEditMode() == DBConstants.EDIT_NONE))
{
    strDesc = recBookingDetail.getRecordName();
    if (strDesc.indexOf(Booking.BOOKING_FILE) == 0)
        strDesc = strDesc.substring(Booking.BOOKING_FILE.length());
}
else
    strDesc = recProductType.getField(ProductType.DESCRIPTION).toString();
if (this.getOwner().getRecord().isModified())
    this.getOwner().setData(strDesc);
else
{	// Make sure you don't trigger any field or file changes by setting this here
    boolean[] listenersState = this.getOwner().setEnableListeners(false);
    this.getOwner().setData(strDesc, Constants.DISPLAY, Constants.INIT_MOVE);
    this.getOwner().setModified(false);
    this.getOwner().setEnableListeners(listenersState);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2818">
		<LastChanged>2012-01-25T19:48:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doGetData</MethodName>
		<LogicDescription><![CDATA[Get the meals in a special format:
M1 M2
M1
This is primarly used to pass to thin]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MealsHandler</MethodClassName>
		<LogicSource><![CDATA[if (!this.getOwner().isNull())
    return super.doGetData();		// Already cached
if (m_recMealPlan == null)
{
    RecordOwner recordOwner = this.getOwner().getRecord().findRecordOwner();
    m_recMealPlan = new MealPlan(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recMealPlan);
    this.getOwner().getRecord().addListener(new FreeOnFreeHandler(m_recMealPlan));
}
BookingDetail recCustSaleDetail = (BookingDetail)this.getOwner().getRecord();
String strMeals = Constants.BLANK;
Date dateStart = recCustSaleDetail.getStartDate();
Date dateEnd = recCustSaleDetail.getEndDate();
if ((dateStart == null) || (dateEnd == null))
    return strMeals;
Calendar calendar = Converter.gCalendar;
calendar.setTime(dateStart);
calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.MINUTE, 0);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);
dateStart = calendar.getTime();
calendar.setTime(dateEnd);
calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.MINUTE, 0);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);
dateEnd = calendar.getTime();
int iDays = (int)((dateEnd.getTime() - dateStart.getTime()) / Constants.KMS_IN_A_DAY) + 2;
if (iDays <= 0)
    return null;
String[] rgstrMeals = new String[iDays];
Date date = new Date(dateStart.getTime());
for (int iDay = 0; iDay < iDays; iDay++)
{
    rgstrMeals[iDay] = recCustSaleDetail.getMealDesc(date, false, m_recMealPlan);
    date.setTime(date.getTime() + Constants.KMS_IN_A_DAY);

    if (rgstrMeals[iDay] == null)
        rgstrMeals[iDay] = Constants.BLANK;
    strMeals += rgstrMeals[iDay] + Constants.RETURN;
}
this.getOwner().setData(strMeals);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2819">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MealsHandler</MethodClassName>
		<LogicSource><![CDATA[m_recMealPlan = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2827">
		<LastChanged>2012-06-10T05:53:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FullCurrencyField</MethodClassName>
		<LogicSource><![CDATA[if (targetScreen != null)
{
    Record recCurrencys = (Record)Utility.getRecordOwner(targetScreen).getRecord(Currencys.CURRENCYS_FILE);
    if (recCurrencys != null)
    {
        BaseField fldCurrencyCode = recCurrencys.getField(Currencys.CURRENCY_CODE);
        Converter conv = new FieldDescConverter(fldCurrencyCode, (Converter)converter);    // Use the description for this field
        ScreenComponent sfCurrency = createScreenComponent(ScreenModel.EDIT_TEXT, itsLocation, targetScreen, conv, iDisplayFieldDesc, properties);
        sfCurrency.setEnabled(false);
        itsLocation = targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR);
        iDisplayFieldDesc = ScreenConstants.DONT_DISPLAY_DESC;      // Display it only once
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2828">
		<LastChanged>2012-03-27T20:45:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.makeReferenceRecord();
if (record != null)
{
    Converter fldProductDesc = record.getField(Product.DESCRIPTION);
    fldProductDesc = new FieldLengthConverter(fldProductDesc, 30);
    String iKeyArea = Product.CODE_KEY;
    if (targetScreen instanceof GridScreenParent)
        iKeyArea = null;
    return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, iKeyArea, fldProductDesc, true, true);
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2835">
		<LastChanged>2012-04-12T10:12:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>processCostRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Land</MethodClassName>
		<LogicSource><![CDATA[String DATE_REQUIRED = "Date required";
String PAX_REQUIRED = "Passengers required";
int iCostStatus = BaseStatus.VALID;
double dTotalLocalCost = 0.00;
String strErrorMessage = DBConstants.BLANK;
String strPMCErrorMessage = DBConstants.BLANK;
String strSICErrorMessage = DBConstants.BLANK;

ProductRequest productRequest = (ProductRequest)((BaseMessage)messageIn).getMessageDataDesc(null);
LandMessageData productMessageData = (LandMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
PassengerMessageData passengerMessageData = (PassengerMessageData)productRequest.getMessageDataDesc(ProductRequest.PASSENGER_MESSAGE);

Date dateTarget = productMessageData.getTargetDate();
if (dateTarget == null)
    strErrorMessage = this.getTask().getApplication().getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(DATE_REQUIRED);
short sTargetPax = passengerMessageData.getTargetPax();
if (sTargetPax <= 0)
    strErrorMessage = this.getTask().getApplication().getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(PAX_REQUIRED);
int iSicPmc = productMessageData.getRateClassID();

ReferenceField fldLandClass = (ReferenceField)this.getProductPricing().getField(LandPricing.CLASS_ID);
int iPMC = fldLandClass.getIDFromCode(LandClass.PRIVATE_VEHICLE_CODE);
int iSIC = fldLandClass.getIDFromCode(LandClass.SEAT_IN_COACH_CODE);
LandRateResponse responseMessage = null;
if (messageReply == null)
{
    messageReply = new TreeMessage(null, null);
    responseMessage =  new LandRateResponse((BaseMessage)messageReply, null);
}
else
    responseMessage = (LandRateResponse)((BaseMessage)messageReply).getMessageDataDesc(null);
responseMessage.moveRequestInfoToReply(messageIn);
LandRateResponseMessageData responseMessageData = (LandRateResponseMessageData)responseMessage.getMessageDataDesc(ProductRateResponse.PRODUCT_RESPONSE_MESSAGE);

Map<String,Object> mapSurvey = new HashMap<String, Object>();

if ((strErrorMessage == null) || (strErrorMessage.length() == 0))
{
    FileListener listener = ((LandPricing)this.getProductPricing()).setupLandFilter(this, dateTarget, sTargetPax, iPMC);
    this.getProductPricing().addListener(listener);
    double dCostPP = 0.00;
    double dPricePP = 0.00;
    
    try   {
        this.getProductPricing().close();
        while (this.getProductPricing().hasNext())
        {   // Loop until found or not
            this.getProductPricing().next();
            int iQuantity = ((LandPricing)this.getProductPricing()).getQuantity(this.getTask(), sTargetPax, productMessageData, mapSurvey);
            double dCost = ((LandPricing)this.getProductPricing()).getCost(LandPricing.COST, m_recProductTerms);
            double dPrice = ((LandPricing)this.getProductPricing()).getField(LandPricing.PRICE).getValue();
            if (strPMCErrorMessage.length() == 0)
            {
                dCostPP += dCost * iQuantity / sTargetPax;
                dPricePP += dPrice * iQuantity / sTargetPax;
            }
            if (iQuantity < 0)
            { // Error
                strPMCErrorMessage = this.getTask().getLastError(iQuantity);
                dCostPP = 0;
                dPricePP = 0;
            }
        }
        double dPMCCostPP = dCostPP;
        double dPMCPricePP = dPricePP;
        this.getField(Land.PMC_COST).setValue(dPMCCostPP);
        this.getField(Land.PMC_PRICE_HOME).setValue(dPMCPricePP);

        dCostPP = 0.00;
        dPricePP = 0.00;
        ((LandPricingFilter)listener).setSicPmc(iSIC);
        this.getProductPricing().close();
        while (this.getProductPricing().hasNext())
        {   // Loop until found or not
            this.getProductPricing().next();
            int iQuantity = ((LandPricing)this.getProductPricing()).getQuantity(this.getTask(), sTargetPax, productMessageData, mapSurvey);
            double dCost = ((LandPricing)this.getProductPricing()).getCost(LandPricing.COST, m_recProductTerms);
            double dPrice = ((LandPricing)this.getProductPricing()).getField(LandPricing.PRICE).getValue();
            if (strSICErrorMessage.length() == 0)
            {
                dCostPP += dCost * iQuantity / sTargetPax;
                dPricePP += dPrice * iQuantity / sTargetPax;
            }
            if (iQuantity < 0)
            { // Error
                strSICErrorMessage = this.getTask().getLastError(iQuantity);
                dCostPP = 0;
                dPricePP = 0;
            }
        }
        double dSICCostPP = dCostPP;
        double dSICPricePP = dPricePP;
        this.getField(Land.SIC_COST).setValue(dSICCostPP);
        this.getField(Land.SIC_PRICE_HOME).setValue(dSICPricePP);
    
        if (dSICCostPP == 0)
            if (dPMCCostPP > 0)
                iSicPmc = iPMC;
        if (dPMCCostPP == 0)
            if (dSICCostPP > 0)
                iSicPmc = iSIC;
        if (iSicPmc <= 0)
        {   // Pick the cheapest
            if (dSICCostPP > dPMCCostPP)
                iSicPmc = iPMC;
            else
                iSicPmc = iSIC;
        }
        if ((dSICCostPP == 0) && (dPMCCostPP == 0))
            iSicPmc = 0;
    
        double dLandCost = 0;
        double dLandPriceLocal = 0;
        if (iSicPmc == iPMC)
        {
            dLandCost = dPMCCostPP;
            dLandPriceLocal = dPMCPricePP;
        }
        else if (iSicPmc == iSIC)
        {
            dLandCost = dSICCostPP;
            dLandPriceLocal = dSICPricePP;
        }
    
        dTotalLocalCost = Math.floor(dLandCost * sTargetPax * 100.00 + 0.5) / 100.00;
        double dTotalLocalPrice = Math.floor(dLandPriceLocal * sTargetPax * 100.00 + 0.5) / 100.00;
    
        this.getField(Land.CLASS_ID).setValue(iSicPmc);
    
        this.getField(Land.PP_COST).setValue(dLandCost);
        this.getField(Land.PP_PRICE_LOCAL).setValue(dLandPriceLocal);
        this.getField(Product.PRODUCT_COST).setValue(dTotalLocalCost);
        this.getField(Product.PRODUCT_PRICE_LOCAL).setValue(dTotalLocalPrice);
    
        responseMessageData.setPMCCost(this.getField(Land.PMC_COST).getValue());
        responseMessageData.setSICCost(this.getField(Land.SIC_COST).getValue());
        responseMessageData.setPPCost(this.getField(Land.PP_COST).getValue());
        if (iSicPmc != productMessageData.getRateClassID())
        {
            responseMessageData.setRateClassID(productMessageData.getRateClassID());
            responseMessageData.setNewRateClassID(iSicPmc);
        }
        responseMessageData.setProductCost(dTotalLocalCost);
    } catch (DBException e)   {
        System.out.println(e.getMessage());
        e.printStackTrace();
    } finally {
        this.getProductPricing().removeListener(listener, true);
    }
}
if (dTotalLocalCost == 0)
    iCostStatus = BaseStatus.NOT_VALID;
responseMessage.setMessageDataStatus(iCostStatus);
this.getField(Product.DISPLAY_COST_STATUS_ID).setValue(iCostStatus);
if (iCostStatus != BaseStatus.VALID)
{
    responseMessage.setMessageDataError(strErrorMessage);
    if (strPMCErrorMessage.length() > 0)
        responseMessage.setMessageDataError(strPMCErrorMessage);
    if (strSICErrorMessage.length() > 0)
        responseMessage.setMessageDataError(strSICErrorMessage);
    if ((responseMessage.getMessageDataError() == null)
        || (responseMessage.getMessageDataError().length() == 0))
        responseMessage.setMessageDataError(this.getTask().getApplication().getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(COST_NOT_FOUND_MSG));
    for (String key : mapSurvey.keySet())
    {
        responseMessage.put(key, mapSurvey.get(key).toString());
    }
}
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2836">
		<LastChanged>2012-04-12T09:08:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>260</Sequence>
		<MethodName>processCostRequestInMessage</MethodName>
		<LogicDescription>Read the locally stored product cost (Override)</LogicDescription>
		<MethodReturns>Message</MethodReturns>
		<MethodInterface>Message messageIn, Message messageReply</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[return null;	// Unknown (Override this!)]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2839">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InfoStatusField</MethodClassName>
		<LogicSource>return new InfoStatus(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2845">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource><![CDATA[if (m_recHotelMealPricing != null)
{
    m_recHotelMealPricing.free();
    m_recHotelMealPricing = null;
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2847">
		<LastChanged>2013-01-22T05:55:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelScreen</MethodClassName>
		<LogicSource><![CDATA[Record recHotel = this.getRecord(Hotel.HOTEL_FILE);
if (strCommand.equalsIgnoreCase(Hotel.MEAL_DETAIL))
	return (this.onForm(recHotel, Hotel.MEAL_PRICING_GRID_SCREEN, true, ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2848">
		<LastChanged>2012-06-06T22:17:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatusSummaryField</MethodClassName>
		<LogicSource><![CDATA[if (properties == null)
    properties = new HashMap<String,Object>();
properties.put(ScreenModel.NEVER_DISABLE, Constants.TRUE);
ScreenComponent blink = createScreenComponent(ScreenModel.BLINK_IMAGE, itsLocation, targetScreen, converter, iDisplayFieldDesc, properties);
blink.setRequestFocusEnabled(false);     // By default, make user click with mouse
if (((BasePanel)targetScreen).getAppletScreen() != null)
    if (((BasePanel)targetScreen).getAppletScreen().getTask() instanceof org.jbundle.thin.base.screen.BaseApplet)
{
    org.jbundle.thin.base.screen.BaseApplet applet = (org.jbundle.thin.base.screen.BaseApplet)((BasePanel)targetScreen).getAppletScreen().getTask();
    String strProductType = this.getProductType();
    ((ExtendedComponent)blink).addIcon(applet.loadImageIcon(BookingConstants.BUTTON_LOCATION + strProductType, strProductType), 0);
    ((ExtendedComponent)blink).addIcon(applet.loadImageIcon(BookingConstants.BUTTON_LOCATION + BookingConstants.INFO, BookingConstants.INFO), BookingConstants.INFO_LOOKUP);
    ((ExtendedComponent)blink).addIcon(applet.loadImageIcon(BookingConstants.BUTTON_LOCATION + BookingConstants.COST, BookingConstants.COST), BookingConstants.COST_LOOKUP);
    ((ExtendedComponent)blink).addIcon(applet.loadImageIcon(BookingConstants.BUTTON_LOCATION + BookingConstants.INVENTORY, BookingConstants.INVENTORY), BookingConstants.INVENTORY_LOOKUP);
    ((ExtendedComponent)blink).addIcon(applet.loadImageIcon(BookingConstants.BUTTON_LOCATION + BookingConstants.PRODUCT, BookingConstants.PRODUCT), BookingConstants.PRODUCT_LOOKUP);
}

if (!(targetScreen instanceof GridScreen))
{   // If it is not in a grid screen, add the description
    itsLocation = targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR);
    iDisplayFieldDesc = ScreenConstants.DONT_DISPLAY_FIELD_DESC;
    converter = new StatusDescConverter((Converter)converter);
    ScreenComponent sEditText = createScreenComponent(ScreenModel.EDIT_TEXT, itsLocation, targetScreen, converter, iDisplayFieldDesc, properties);
    sEditText.setEnabled(false);    // Remember, can't change the cost status.
}

return blink;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2859">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doSetData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatusHandler</MethodClassName>
		<LogicSource><![CDATA[if (iMoveMode == DBConstants.INIT_MOVE)
	objData = this.getStatus();
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2860">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getStatus</MethodName>
		<LogicDescription/>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface/>
		<MethodClassName>StatusHandler</MethodClassName>
		<LogicSource><![CDATA[int iStatus = ((BookingDetail)this.getOwner().getRecord()).getStatus();
return new Integer(iStatus);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2866">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelRateMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingHotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2868">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelRateMsgReplyInProcessor</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2876">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorInfoLookup</MethodClassName>
		<LogicSource><![CDATA[String strRoomType = (String)internalMessage.get("rateType");
String strRoomClass = (String)internalMessage.get("roomClass");
// Add code to lookup hotel rate here
try   {
java.lang.Thread.currentThread().sleep(5000);   // Simulate time for message turnaround
} catch (InterruptedException ex) {
}
BaseMessage replyMessage = new MapMessage();
replyMessage.put(DBParams.FIELD, "multipleFields");
replyMessage.put("CityOrTown", "Los Angeles");
replyMessage.put("Contact", "Fred");

//?        this.sendMessage(new BaseMessage(null, replyMessage));

return null;    // No reply expected]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2879">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorInfoLookup</MethodClassName>
		<LogicSource>return new Vendor(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2887">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandRateMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingLand(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2888">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandRateMsgReplyInProcessor</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2891">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));
this.getMainRecord().addListener(new CompareFileFilter(Product.CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.CITY_ID), DBConstants.EQUALS, null, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2894">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));
this.getMainRecord().addListener(new CompareFileFilter(Product.CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.CITY_ID), "=", null, true));
this.getMainRecord().addListener(new CompareFileFilter(Product.VENDOR_ID, this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID), "=", null, true));

this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID).addListener(new FieldReSelectHandler(this));

this.getScreenRecord().getField(ProductScreenRecord.PAX).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2895">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.CITY_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

this.getScreenRecord().getField(ProductScreenRecord.PAX).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.REMOTE_QUERY_ENABLED).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2896">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetLandCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>recProductVars, intRegistryID</MethodReturns>
		<MethodInterface>Record recProductVars, Integer intRegistryID</MethodInterface>
		<MethodClassName>GetLandCostHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2898">
		<LastChanged>2012-04-06T22:57:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>setPriceProperties</MethodName>
		<LogicDescription>Set up the properties for a price lookup.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseMessage message, Record recProduct</MethodInterface>
		<MethodClassName>ProductScreenRecord</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequest = (ProductRequest)message.getMessageDataDesc(null);
ProductMessageData productMessageData = (ProductMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
PassengerMessageData passengerMessageData = (PassengerMessageData)productRequest.getMessageDataDesc(ProductRequest.PASSENGER_MESSAGE);

this.addMapProperty(productMessageData, BookingDetailModel.DETAIL_DATE, this, ProductScreenRecord.DETAIL_DATE);
this.addMapProperty(productMessageData, BookingDetailModel.PRODUCT_ID, recProduct, Product.ID);
this.addMapProperty(passengerMessageData, Product.PAX_PARAM, this, ProductScreenRecord.PAX);
if (this.getField(ProductScreenRecord.PAX).getValue() == 2)  // Default
    passengerMessageData.put(Product.ROOM_TYPE_PARAM + Integer.toString(PaxCategory.DOUBLE_ID), new Short((short)2));   // Two pax in a double room

try   {
    productRequest.put(DBConstants.STRING_OBJECT_ID_HANDLE, recProduct.getHandle(DBConstants.OBJECT_ID_HANDLE));
} catch (DBException ex)    {
    ex.printStackTrace();
}
// Land only
productMessageData.put(Land.SIC_PMC_PARAM, LandClass.PRIVATE_VEHICLE_CODE);
// Others
productRequest.put(DBParams.RECORD, recProduct.getTableNames(false));
productRequest.put(DBParams.TIMESTAMP, Double.toString(this.getField(ProductScreenRecord.LAST_CHANGED).getValue()));
this.addMapProperty(productMessageData, BookingDetailModel.RATE_ID, this, ProductScreenRecord.RATE_ID);
this.addMapProperty(productMessageData, BookingDetailModel.CLASS_ID, this, ProductScreenRecord.CLASS_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2899">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>isQueryComplete</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>GetHotelCostHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bQueryComplete = super;
if ((bQueryComplete)
    && (!m_recProductVars.getField(ProductScreenRecord.CLASS_ID).isNull()))
        return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2904">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>isQueryComplete</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetLandCostHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bQueryComplete = super;
if ((bQueryComplete)
	&& (m_recProductVars.getField(ProductScreenRecord.PAX).getValue() > 0))
	return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2907">
		<LastChanged>2012-04-07T16:06:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>fixMessageMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateMessageListener</MethodClassName>
		<LogicSource><![CDATA[super;
HotelRateResponse productRateResponse = (HotelRateResponse)message.getMessageDataDesc(null);
HotelRateResponseMessageData messageData = (HotelRateResponseMessageData)productRateResponse.getMessageDataDesc(BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);
String strDoubleCostParam = m_record.getField(Hotel.DOUBLE_COST).getFieldName();
Double dblProductCost = (Double)messageData.get(BookingDetailModel.TOTAL_COST);
if (dblProductCost == null)
    dblProductCost = DoubleField.ZERO;
message.put(strDoubleCostParam, dblProductCost.toString());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2909">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateScreen</MethodClassName>
		<LogicSource>return new HotelRate(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2910">
		<LastChanged>2012-04-12T10:12:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>processCostRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequest = (ProductRequest)((BaseMessage)messageIn).getMessageDataDesc(null);
TourMessageData productMessageData = (TourMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
PassengerMessageData passengerMessageData  = (PassengerMessageData)productRequest.getMessageDataDesc(ProductRequest.PASSENGER_MESSAGE);

Date dateTarget = productMessageData.getTargetDate();
short sTargetPax = passengerMessageData.getTargetPax();
int iTourRateID = productMessageData.getRateTypeID();
int iTourClassID = productMessageData.getRateClassID();

if (m_recTourHeaderPricing == null)
{
    m_recTourHeaderPricing = new TourHeaderLine(this.findRecordOwner());
    if (m_recTourHeaderPricing.getRecordOwner() != null)
        m_recTourHeaderPricing.getRecordOwner().removeRecord(m_recTourHeaderPricing);
}
//ReferenceField fldTourClass = (ReferenceField)m_recTourHeaderPricing.getField(TourHeaderPricing.CLASS_ID);
TourRateResponse responseMessage = null;
if (messageReply == null)
{
    messageReply = new TreeMessage(null, null);
    responseMessage =  new TourRateResponse((BaseMessage)messageReply, null);
}
else
    responseMessage = (TourRateResponse)((BaseMessage)messageReply).getMessageDataDesc(null);
responseMessage.moveRequestInfoToReply(messageIn);
ProductRateResponseMessageData responseProductMessageData = (ProductRateResponseMessageData)responseMessage.getMessageDataDesc(ProductRateResponse.PRODUCT_RESPONSE_MESSAGE);

double dTotalLocalCost = this.getTourCost(dateTarget, productMessageData, false);
double dTotalLocalPrice = this.getTourCost(dateTarget, productMessageData, true);

double dTourCost = 0;
double dTourPrice = 0;

dTotalLocalCost = Math.floor(dTotalLocalCost * 100.00 + 0.5) / 100.00;

this.getField(TourHeader.CLASS_ID).setValue(iTourClassID);

this.getField(TourHeader.PP_COST).setValue(dTourCost);
this.getField(TourHeader.PP_PRICE_LOCAL).setValue(dTourPrice);
this.getField(Product.PRODUCT_COST).setValue(dTotalLocalCost);
this.getField(Product.PRODUCT_PRICE_LOCAL).setValue(dTotalLocalPrice);

responseProductMessageData.setPPCost(this.getField(TourHeader.PP_COST).getValue());
if (iTourClassID != productMessageData.getRateClassID())
{
    responseProductMessageData.setRateClassID(productMessageData.getRateClassID());
    responseProductMessageData.setNewRateClassID(iTourClassID);
}
responseProductMessageData.setProductCost(dTotalLocalCost);

int iStatus = BaseStatus.VALID;
if (dTotalLocalCost == 0)
    iStatus = BaseStatus.NOT_VALID;
responseMessage.setMessageDataStatus(iStatus);
this.getField(Product.DISPLAY_COST_STATUS_ID).setValue(iStatus);
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2911">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,100</Sequence>
		<MethodName>getTourCost*1</MethodName>
		<LogicDescription>Get the tour cost for the pax category.</LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>Date dateTarget, TourMessageData productMessageData, boolean bGetPrice</MethodInterface>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource>return this.getTourCost(dateTarget, TourHeaderOption.TOUR, this.getField(TourHeader.ID), productMessageData, bGetPrice);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2912">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>fixMessageMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateMessageListener</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2913">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record record = null;
// NOTE: You MUST override this method
//record = new Product(this);
//try	{	// Wrap the record in a ProductSessionObject so the default TableSesionObject isn't used.
//	ProductSessionObject obj = new ProductSessionObject(this, record, null);
//} catch (RemoteException ex)	{
//	ex.printStackTrace();
//}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2914">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource>return new ProductScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2915">
		<LastChanged>2012-04-07T12:31:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
record.setKeyArea(Product.DESC_SORT_KEY);
if (!(record.getTable() instanceof GridTable))
{
    GridTable gridTable = new GridTable(null, record);
    gridTable.setCache(true);  // Typically, the client is a gridscreen which caches the records (so I don't have to!)
}

Record recVendor = ((ReferenceField)record.getField(Product.VENDOR_ID)).getReferenceRecord();
record.getField(Product.VENDOR_ID).addListener(new ReadSecondaryHandler(recVendor));
Record recCurrencys = ((ReferenceField)recVendor.getField(Vendor.CURRENCYS_ID)).getReferenceRecord();
recVendor.getField(Product.VENDOR_ID).addListener(new ReadSecondaryHandler(recCurrencys));
FieldListener listener = null;
recVendor.getField(Vendor.VENDOR_NAME).addListener(listener = new MoveOnChangeHandler(record.getField(Product.VENDOR_NAME)));
listener.setRespondsToMode(DBConstants.READ_MOVE, true);
recCurrencys.getField(Currencys.CURRENCY_CODE).addListener(listener = new MoveOnChangeHandler(record.getField(Product.CURRENCY_CODE)));
listener.setRespondsToMode(DBConstants.READ_MOVE, true);
this.selectGridFields();    // Initial value

record.addListener(new MoveOnValidHandler(record.getField(Product.CURRENCY_CODE_LOCAL), this.getRecord(BookingModel.BOOKING_FILE).getField(BookingModel.CURRENCY_CODE)));

this.addRateMessageListeners((Product)this.getMainRecord(), (ProductScreenRecord)this.getScreenRecord());
this.addAvailabilityMessageListeners((Product)this.getMainRecord(), (ProductScreenRecord)this.getScreenRecord());
this.addPriceListeners((Product)this.getMainRecord());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2916">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[if (SearchConstants.REQUERY_COMMAND.equalsIgnoreCase(strCommand))
{
    Record recProduct = this.getMainRecord();
    Record recProductVars = this.getScreenRecord();
    recProductVars.handleNewRecord(); // Init the fields without changing the status (no table).
    if (properties.get(MODIFIED_PARAM) != null)
        properties.remove(MODIFIED_PARAM);
    FileListener listenerLast = this.removeTempListeners();
    this.setScreenFields(properties);
    this.markTempListeners(listenerLast);
    this.getMainRecord().close();
    this.getMainRecord().open();    // This forces a requery on the file (clears the autorecord cache)
    if (Boolean.TRUE.equals(properties.get(MODIFIED_PARAM)))
    {
        properties.put(SearchConstants.SUCCESS, Boolean.TRUE);
        properties.remove(MODIFIED_PARAM);
        return properties;
    }
    return Boolean.TRUE;    // Success
}
if (SearchConstants.SELECT_MAINT.equalsIgnoreCase(strCommand))
{
    Record recProduct = this.getMainRecord();
    recProduct.close();
    this.selectMaintFields();
    TableSession session = (TableSession)this.getRemoteTable(this.getMainRecord().getTableNames(false));
    session.setFieldTypes(this.getMainRecord(), -1);
    return Boolean.TRUE;    // Success
}
if (SearchConstants.SELECT_GRID.equalsIgnoreCase(strCommand))
{
    Record recProduct = this.getMainRecord();
    recProduct.close();
    recProduct.setKeyArea(Product.DESC_SORT_KEY);  // Default order
    this.selectGridFields();
    TableSession session = (TableSession)this.getRemoteTable(this.getMainRecord().getTableNames(false));
    session.setFieldTypes(this.getMainRecord(), -1);
    return Boolean.TRUE;    // Success
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2918">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>getPropertyDate</MethodName>
		<LogicDescription>Convert the date from UTF format and return it.</LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>String strDate</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[if ((strDate == null) || (strDate.length() == 0))
    return null;
Converter.initGlobals();
Date date = null;
try   {
    synchronized (Converter.gCalendar)
    {
        date = Converter.gGMTDateTimeFormat.parse(strDate);
    }
} catch (ParseException ex)   {
    ex.printStackTrace();
}
return date;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2919">
		<LastChanged>2012-02-01T04:31:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>addThisRecordFilter</MethodName>
		<LogicDescription><![CDATA[If this location filter is specified, add this location filter.
@param properties properties passed from the user.
@param strRecordName Name of the location record I'm looking for (null for the reference record of this field).
@param strParamName The param name to get/set this value, ID, and record.
@param iFieldSeq Sequence of the field to set the filter on.
@returns true If the filter was added.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Map&lt;String,Object&gt; properties, String strRecordName, String strParamName, String iFieldSeq, String iScreenRecordField</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[if (strParamName == null)
    strParamName = JTreePanel.LOCATION;
String strLocation = (String)properties.get(strParamName);
String strLocationID = (String)properties.get(strParamName + DBParams.ID);
if ((strLocation != null) && (strLocation.length() > 0))
{
    if ((strLocationID == null) || (strLocationID.length() == 0))
        strLocationID = this.findRecord(properties, strRecordName, strParamName, iScreenRecordField);
    String strLocationRecord = (String)properties.get(strParamName + MenuConstants.RECORD);

    if ((strRecordName == null) || (strRecordName.equals(strLocationRecord)))
    {
        this.addObjectIDFilter(strLocationID, iFieldSeq, iScreenRecordField);
        return true;
    }
}
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2920">
		<LastChanged>2012-02-01T08:32:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,600</Sequence>
		<MethodName>addObjectIDFilter</MethodName>
		<LogicDescription>Given this reference field and key, create a filter</LogicDescription>
		<MethodReturns/>
		<MethodInterface>String strID, String iFieldSeq, String iScreenRecordField</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record screenRecord = this.getScreenRecord();
ReferenceField fldReference = (ReferenceField)screenRecord.getField(iScreenRecordField);
Record recLocation = fldReference.getReferenceRecord();
try   {
    recLocation = recLocation.setHandle(strID, DBConstants.OBJECT_ID_HANDLE);
} catch (DBException ex)    {
    ex.printStackTrace();
    recLocation = null;
}
if (recLocation != null)
{
    Record recProduct = this.getMainRecord();
    recProduct.addListener(new ExtractRangeFilter(iFieldSeq, recLocation.getField(DBConstants.MAIN_FIELD)));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2922">
		<LastChanged>2012-02-01T15:39:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,900</Sequence>
		<MethodName>findRecord</MethodName>
		<LogicDescription>From the location text, look up a matching (or close) location</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Map&lt;String,Object&gt; properties, String strRecordName, String strParamName, String iScreenRecordField</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[String strLocationText = (String)properties.get(strParamName);
if ((strLocationText == null) || (strLocationText.length() == 0))
    return null;
Record screenRecord = this.getScreenRecord();
ReferenceField fldReference = (ReferenceField)screenRecord.getField(iScreenRecordField);
Record recLocation = fldReference.getReferenceRecord();
if (recLocation == null)
    this.getRecord(strRecordName);
if (recLocation == null)
{
    if (Continent.CONTINENT_FILE.equalsIgnoreCase(strRecordName))
        recLocation = new Continent(this);
    else if (Region.REGION_FILE.equalsIgnoreCase(strRecordName))
        recLocation = new Region(this);
    else if (Country.COUNTRY_FILE.equalsIgnoreCase(strRecordName))
        recLocation = new Country(this);
    else if (State.STATE_FILE.equalsIgnoreCase(strRecordName))
        recLocation = new State(this);
    else if (City.CITY_FILE.equalsIgnoreCase(strRecordName))
        recLocation = new City(this);
}
if (recLocation == null)
    return null;
try {
    int iCodeLength = recLocation.getKeyArea(Location.CODE_KEY).getField(DBConstants.MAIN_FIELD).getMaxLength();
    boolean bSuccess = false;
    if (strLocationText.length() <= iCodeLength)
    {
        recLocation.setKeyArea(Location.CODE_KEY);
        recLocation.getKeyArea(Location.CODE_KEY).getField(DBConstants.MAIN_FIELD).setString(strLocationText);
        bSuccess = recLocation.seek(null);
    }
    if (!bSuccess)
    {
        recLocation.setKeyArea(Location.NAME_KEY);
        recLocation.getKeyArea(Location.NAME_KEY).getField(DBConstants.MAIN_FIELD).setString(strLocationText);
        bSuccess = recLocation.seek(">=");
        if (bSuccess)
            if (!recLocation.getKeyArea(Location.NAME_KEY).getField(DBConstants.MAIN_FIELD).toString().toUpperCase().startsWith(strLocationText.toUpperCase()))
                bSuccess = false;
    }
    if (bSuccess)
    {
        properties.put(MODIFIED_PARAM, Boolean.TRUE);
        properties.put(strParamName, recLocation.getKeyArea(Location.NAME_KEY).getField(DBConstants.MAIN_FIELD).toString());
        properties.put(strParamName + DBParams.ID, recLocation.getHandle(DBConstants.OBJECT_ID_HANDLE).toString());
        if (strRecordName != null)
            properties.put(strParamName + MenuConstants.RECORD, strRecordName);
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
return (String)properties.get(strParamName + DBParams.ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2936">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record record = new Hotel(this);
try	{	// Wrap the record in a ProductSessionObject so the default TableSesionObject isn't used.
	ProductSession obj = new ProductSession(this, record, null);
} catch (RemoteException ex)	{
	ex.printStackTrace();
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2938">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;

((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID)).getReferenceRecord(this);

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));
this.getMainRecord().addListener(new CompareFileFilter(Product.CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.CITY_ID), DBConstants.EQUALS, null, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2940">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>selectGridFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();

record.getField(TourHeader.TOUR_TYPE).setSelected(true);
record.getField(TourHeader.PRODUCT_CAT_ID).setSelected(true);
record.getField(TourHeader.TOUR_CLASS_ID).setSelected(true);

record.getField(TourHeader.DAYS).setSelected(true);

this.getRecord(TourType.TOUR_TYPE_FILE).setKeyArea(TourType.DESCRIPTION_KEY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2941">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record record = new TourHeader(this);
try	{	// Wrap the record in a ProductSessionObject so the default TableSesionObject isn't used.
	ProductSession obj = new ProductSession(this, record, null);
} catch (RemoteException ex)	{
	ex.printStackTrace();
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2944">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record record = new Land(this);
try	{	// Wrap the record in a ProductSessionObject so the default TableSesionObject isn't used.
	ProductSession obj = new ProductSession(this, record, null);
} catch (RemoteException ex)	{
	ex.printStackTrace();
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2945">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record record = new Car(this);
try	{	// Wrap the record in a ProductSessionObject so the default TableSesionObject isn't used.
	ProductSession obj = new ProductSession(this, record, null);
} catch (RemoteException ex)	{
	ex.printStackTrace();
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2946">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record record = new Transportation(this);
try	{	// Wrap the record in a ProductSessionObject so the default TableSesionObject isn't used.
	ProductSession obj = new ProductSession(this, record, null);
} catch (RemoteException ex)	{
	ex.printStackTrace();
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2947">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record record = new Cruise(this);
try	{	// Wrap the record in a ProductSessionObject so the default TableSesionObject isn't used.
	ProductSession obj = new ProductSession(this, record, null);
} catch (RemoteException ex)	{
	ex.printStackTrace();
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2948">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getID</MethodName>
		<LogicDescription><![CDATA[Get the ID of this object. For example, if object was an employee you might return 'EmployeeID=43332'.
This is a server defined string, so supply whatever it takes for you to find this object.
<P><B>NOTE: Make sure you return an object that implements Serializable (like String).</B></P>]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductSession</MethodClassName>
		<LogicSource><![CDATA[return null;	// Add code]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2949">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setID</MethodName>
		<LogicDescription>The the object ID. This method is usually only supported locally.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Object objectID</MethodInterface>
		<MethodClassName>ProductSession</MethodClassName>
		<LogicSource>// Add code</LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2950">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getDescription</MethodName>
		<LogicDescription>Get the item description.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductSession</MethodClassName>
		<LogicSource><![CDATA[Product recProduct = (Product)this.setRecordCurrent();
return recProduct.getField(Product.DESCRIPTION).toString();]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2955">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setDescriptionURL</MethodName>
		<LogicDescription>Set the description URL</LogicDescription>
		<MethodReturns/>
		<MethodInterface>String strDescriptionURL, int iType</MethodInterface>
		<MethodClassName>ProductSession</MethodClassName>
		<LogicSource>// Add code</LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2960">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getProductType</MethodName>
		<LogicDescription><![CDATA[Get the product type.
This violates OO rules, but it is convenient to have.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductSession</MethodClassName>
		<LogicSource><![CDATA[Product recProduct = (Product)this.setRecordCurrent();
String strClass = null;
if (recProduct != null)
{
	strClass = recProduct.getClass().getName();
	if (strClass.lastIndexOf('.') != -1)
	{
		strClass = strClass.substring(strClass.lastIndexOf('.') + 1);
	}
}
return strClass;]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2961">
		<LastChanged>2012-01-19T08:13:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BookingDetailSession</MethodName>
		<LogicDescription/>
		<MethodReturns>parentSessionObject, record, objectID</MethodReturns>
		<MethodInterface>BaseSession parentSessionObject, Record record, Map&lt;String,Object&gt; objectID, ProductSession productSession</MethodInterface>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource>m_productSession = productSession;</LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2962">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[super;

this.getRecord(BookingDetail.BOOKING_DETAIL_FILE).setupRecordListener(this, true, true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2963">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>getID</MethodName>
		<LogicDescription><![CDATA[Get the ID of this object. For example, if object was an employee you might return 'EmployeeID=43332'.
This is a server defined string, so supply whatever it takes for you to find this object.
<P><B>NOTE: Make sure you return an object that implements Serializable (like String).</B></P>]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[return null;	// Add code.]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2964">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,100</Sequence>
		<MethodName>setID</MethodName>
		<LogicDescription>The the object ID. This method is usually only supported locally.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Object objID</MethodInterface>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource>// Add code.</LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2965">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>getQuantity</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[return 0;	// Add code]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2967">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,200</Sequence>
		<MethodName>setQuantity</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iQuantity</MethodInterface>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource>// add code.</LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2968">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,800</Sequence>
		<MethodName>getPrice</MethodName>
		<LogicDescription>Get the price</LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[double dPrice = 0;
BookingDetail recCustSaleDetail = (BookingDetail)this.setRecordCurrent();

Properties properties = new Properties();
int iMode = 0;

String strMessageCode = null;//???recCustSaleDetail.getMessageRequestCode(BookingDetail.COST_STATUS_ID);
properties.setProperty(TrxMessageHeader.MESSAGE_RESPONSE_CLASS, strMessageCode);
properties.setProperty(DBParams.RECORD, recCustSaleDetail.getTableNames(false));
try   {
    properties.setProperty(DBConstants.OBJECT_ID, recCustSaleDetail.getHandle(DBConstants.OBJECT_ID_HANDLE).toString());
} catch (DBException ex)    {
    ex.printStackTrace();
}
try   {
    // Don't need to lock, setRecordCurrent did it already!
    int iStatus = (int)recCustSaleDetail.getField(BookingDetail.COST_STATUS_ID).getValue();;
    dPrice = recCustSaleDetail.getField(BookingDetail.TOTAL_COST_LOCAL).getValue();
    if (recCustSaleDetail.isModified())
        recCustSaleDetail.set();
} catch (DBException ex)    {
    ex.printStackTrace();
}

return dPrice;]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2969">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,800</Sequence>
		<MethodName>setPrice</MethodName>
		<LogicDescription>Set the price</LogicDescription>
		<MethodReturns/>
		<MethodInterface>double dPrice</MethodInterface>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource>// Add code</LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2970">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,300</Sequence>
		<MethodName>setAvailability</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iQuantity</MethodInterface>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource>// Add code</LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2971">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,500</Sequence>
		<MethodName>getStartDate</MethodName>
		<LogicDescription>Get the item start date</LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[BookingDetail recCustSaleDetail = (BookingDetail)this.setRecordCurrent();
Date date = recCustSaleDetail.getStartDate();
return date;]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2972">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,400</Sequence>
		<MethodName>getEndDate</MethodName>
		<LogicDescription>Get the product end date.</LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[BookingDetail recCustSaleDetail = (BookingDetail)this.setRecordCurrent();
return recCustSaleDetail.getEndDate();]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2973">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,600</Sequence>
		<MethodName>getMealDesc</MethodName>
		<LogicDescription>Get the meal description for this date</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Date date</MethodInterface>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[BookingDetail recCustSaleDetail = (BookingDetail)this.setRecordCurrent();
Record recMealPlan = (Record)recCustSaleDetail.getRecordOwner().getRecord(MealPlan.MEAL_PLAN_FILE);
return recCustSaleDetail.getMealDesc(date, false, recMealPlan);]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2974">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,500</Sequence>
		<MethodName>setStartDate</MethodName>
		<LogicDescription>Set the new start time for this service</LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>Date dateStart</MethodInterface>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[Date newTime = dateStart;
BookingDetail recCustSaleDetail = (BookingDetail)this.setRecordCurrent();
try	{
	recCustSaleDetail.edit();
	newTime = recCustSaleDetail.setStartDate(dateStart);
	recCustSaleDetail.set();
} catch (DBException ex)	{
	ex.printStackTrace();
}
return newTime;]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2975">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,400</Sequence>
		<MethodName>setEndDate</MethodName>
		<LogicDescription>Set the end date.</LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>Date time</MethodInterface>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[BookingDetail recCustSaleDetail = (BookingDetail)this.setRecordCurrent();
Date newTime = time;
try	{
	recCustSaleDetail.edit();
	newTime = recCustSaleDetail.setEndDate(time);
	if (!time.equals(newTime))
		recCustSaleDetail.set();
} catch (DBException ex)	{
	ex.printStackTrace();
}
return newTime;]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2976">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,700</Sequence>
		<MethodName>getStatus</MethodName>
		<LogicDescription>Get the status of this item</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[BookingDetail recCustSaleDetail = (BookingDetail)this.setRecordCurrent();
return recCustSaleDetail.getStatus();]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2978">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>getAvailability</MethodName>
		<LogicDescription>Get the inventory</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>int iQuantiry</MethodInterface>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[BookingDetail recCustSaleDetail = (BookingDetail)this.setRecordCurrent();
boolean bInventory = recCustSaleDetail.getField(BookingDetail.INVENTORY_STATUS_ID).getState();
return -1;]]></LogicSource>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2979">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>BookingSession</MethodName>
		<LogicDescription/>
		<MethodReturns>parentSessionObject, null, null</MethodReturns>
		<MethodInterface>TaskSession parentSessionObject</MethodInterface>
		<MethodClassName>BookingSession</MethodClassName>
		<LogicSource/>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2980">
		<LastChanged>2012-07-19T14:25:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSession</MethodClassName>
		<LogicSource><![CDATA[super;
Booking recBooking = (Booking)this.getMainRecord();
Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
TourHeader recTourHdr = (TourHeader)this.getRecord(TourHeader.TOUR_HEADER_FILE);
ReferenceField fldTourID = (ReferenceField)recBooking.getField(Booking.TOUR_ID);
BookingControl recBookingControl = (BookingControl)this.getRecord(BookingControl.BOOKING_CONTROL_FILE);
ProfileControl recProfileControl = (ProfileControl)this.getRecord(ProfileControl.PROFILE_CONTROL_FILE);

recBooking.setOpenMode(recBooking.getOpenMode() | DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);
fldTourID.addListener(new ReadSecondaryHandler(recTour, Tour.ID_KEY, DBConstants.DONT_CLOSE_ON_FREE, true, true));  // Update record
recTour.addListener(new DisplayReadHandler(Tour.TOUR_HEADER_ID, recTourHdr, TourHeader.ID));        
recTour.getField(Tour.TOUR_HEADER_ID).addListener(new MainReadOnlyHandler(null));
recBooking.addControlDefaults(recBookingControl, recProfileControl);

// This code read the currency CODE into a virtual field for use in displays 
Record recCurrencys = ((ReferenceField)recBooking.getField(Booking.CURRENCYS_ID)).getReferenceRecord(this);
recBooking.getField(Booking.CURRENCYS_ID).addListener(new ReadSecondaryHandler(recCurrencys));
MoveOnChangeHandler moveListener = new MoveOnChangeHandler(recBooking.getField(Booking.CURRENCY_CODE), recCurrencys.getField(Currencys.CURRENCY_CODE));
moveListener.setRespondsToMode(DBConstants.INIT_MOVE, true);
moveListener.setRespondsToMode(DBConstants.READ_MOVE, true);
recBooking.getField(Booking.CURRENCYS_ID).addListener(moveListener);

this.getRecord(BookingDetail.BOOKING_DETAIL_FILE).setKeyArea(BookingDetail.BOOKING_ID_KEY);
((BookingSub)this.getRecord(BookingDetail.BOOKING_DETAIL_FILE)).addDetailBehaviors(recBooking, recTour);
recBooking.addListener(new RequeryOnUpdateHandler(this.getRecord(BookingDetail.BOOKING_DETAIL_FILE)));

this.getRecord(BookingLine.BOOKING_LINE_FILE).setKeyArea(BookingLine.BOOKING_ID_KEY);
((BookingLine)this.getRecord(BookingLine.BOOKING_LINE_FILE)).addDetailBehaviors(recBooking, recTour);
recBooking.addListener(new RecountOnValidHandler(this.getRecord(BookingLine.BOOKING_LINE_FILE)));
        
TourHeader recTourHeader = (TourHeader)((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReferenceRecord(this);
TourClass recTourClass = (TourClass)((ReferenceField)recTourHeader.getField(TourHeader.TOUR_CLASS_ID)).getReferenceRecord(this);

BaseField fldTourCode = this.getRecord(TourHeader.TOUR_HEADER_FILE).getField(TourHeader.CODE);
BaseField fldDepartureDate = this.getRecord(Tour.TOUR_FILE).getField(Tour.DEPARTURE_DATE);
BaseField fldTourDesc = this.getRecord(TourHeader.TOUR_HEADER_FILE).getField(TourHeader.DESCRIPTION);

FieldListener fieldBehavior = null;
fieldBehavior = new ChangeTourHeaderHandler(recTourHeader, recTourClass, recTour, recBooking, fldTourCode, fldDepartureDate, fldTourDesc);
fldDepartureDate.addListener(fieldBehavior);

NewBookingHandler newBookingHandler = (NewBookingHandler)recBooking.getListener(NewBookingHandler.class);
if (newBookingHandler != null)
    newBookingHandler.useThinTourHeader(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2981">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSession</MethodClassName>
		<LogicSource><![CDATA[if (BookingConstants.GET_DETAIL_COMMAND.equalsIgnoreCase(strCommand))
{
        return this.getRemoteTable(BookingDetail.BOOKING_DETAIL_FILE);
}
else if (DBConstants.RESET.equalsIgnoreCase(strCommand))
{
    Booking recBooking = (Booking)this.getMainRecord();
    try {
        recBooking.addNew();
    } catch (DBException ex)   {
        ex.printStackTrace();
    }
}
else if (DBConstants.DELETE.equalsIgnoreCase(strCommand))
{
    Booking recBooking = (Booking)this.getMainRecord();
    try {
        if ((recBooking.getEditMode() == Constants.EDIT_CURRENT)
            || (recBooking.getEditMode() == Constants.EDIT_IN_PROGRESS))
        {
            recBooking.remove();    // This will delete the detail also
            recBooking.addNew();
            return Boolean.TRUE;    // Success
        }
    } catch (DBException ex)   {
        ex.printStackTrace();
        return Boolean.FALSE;   // Error
    }
    return Boolean.FALSE;   // Error
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2982">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSession</MethodClassName>
		<LogicSource>return new Booking(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2983">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSession</MethodClassName>
		<LogicSource><![CDATA[super;
Tour recTour = (Tour)((ReferenceField)this.getMainRecord().getField(Booking.TOUR_ID)).getReferenceRecord(this);//new Tour(this);
TourHeader recTourHeader = (TourHeader)((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReferenceRecord(this);

new BookingControl(this);
new ProfileControl(this);

BookingDetail recCustSaleDetail = new BookingDetail(this);
recCustSaleDetail.setKeyArea(BookingDetail.BOOKING_ID_KEY);
ProductSession productSession = null;		// pend(don) How do I do this?
try	{
	new BookingDetailSession(this, recCustSaleDetail, null, productSession);
} catch (RemoteException ex)	{
	ex.printStackTrace();
}

new BookingLine(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2993">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProductSession</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSession</MethodClassName>
		<LogicSource/>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2994">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>selectGridFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();

record.getField(Land.PMC_COST).setSelected(true);
record.getField(Land.SIC_COST).setSelected(true);
record.getField(Land.PMC_COST_HOME).setSelected(true);
record.getField(Land.SIC_COST_HOME).setSelected(true);
record.getField(Land.PMC_PRICE_HOME).setSelected(true);
record.getField(Land.SIC_PRICE_HOME).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2996">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record record = new Air(this);
try	{	// Wrap the record in a ProductSessionObject so the default TableSesionObject isn't used.
	ProductSession obj = new ProductSession(this, record, null);
} catch (RemoteException ex)	{
	ex.printStackTrace();
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2998">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>selectGridFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();

record.getField(Air.ETD).setSelected(true);
record.getField(Air.ARRIVE_TIME).setSelected(true);
record.getField(Air.CITY_CODE).setSelected(true);
record.getField(Air.TO_CITY_CODE).setSelected(true);
record.getField(Air.ADD_DAYS).setSelected(true);
record.getField(Air.EQUIPMENT).setSelected(true);
record.getField(Air.MEALS).setSelected(true);
record.getField(Air.DAYS).setSelected(true);
record.getField(Air.CLASSES).setSelected(true);
record.getField(Air.STOPS).setSelected(true);
record.getField(Air.SEGMENT).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3001">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>selectGridFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3002">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>setScreenFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record recProduct = this.getMainRecord();

String strCarClass = (String)properties.get(SearchConstants.CAR_CLASS);
this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).setString(strCarClass);

Record recProductControl = this.getRecord(ProductControl.PRODUCT_CONTROL_FILE);
this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).moveFieldToThis(recProductControl.getField(ProductControl.CAR_RATE_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3004">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>selectGridFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();

record.getField(Transportation.ETD).setSelected(true);
record.getField(Transportation.CITY_CODE).setSelected(true);
record.getField(Transportation.TO_CITY_CODE).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3005">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>setScreenFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record recProduct = this.getMainRecord();

this.addThisRecordFilter(properties, City.CITY_FILE, SearchConstants.LOCATION_TO, TransportProduct.TO_CITY_ID, ProductScreenRecord.TO_CITY_ID);

String strTransClass = (String)properties.get(SearchConstants.TRANSPORTATION_CLASS);
this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).setString(strTransClass);

Record recProductControl = this.getRecord(ProductControl.PRODUCT_CONTROL_FILE);
this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).moveFieldToThis(recProductControl.getField(ProductControl.TRANSPORTATION_RATE_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3007">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>selectGridFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseSearchSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3009">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record record = new Item(this);
try	{	// Wrap the record in a ProductSessionObject so the default TableSesionObject isn't used.
	ProductSession obj = new ProductSession(this, record, null);
} catch (RemoteException ex)	{
	ex.printStackTrace();
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3010">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>selectGridFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemSearchSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3012">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[if (SearchConstants.ADD_COMMAND.equalsIgnoreCase(strCommand))
{
	return this.doAddAction(properties);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3013">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxSession</MethodClassName>
		<LogicSource>return new BookingPax(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3014">
		<LastChanged>2012-01-31T10:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxSession</MethodClassName>
		<LogicSource><![CDATA[super;
BookingPax recBookingPax = (BookingPax)this.getRecord(BookingPax.BOOKING_PAX_FILE);
recBookingPax.addBookingBehaviors(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3015">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxSession</MethodClassName>
		<LogicSource><![CDATA[super;
new PaxCategory(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3021">
		<LastChanged>2012-02-01T11:40:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addSecondProfile</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[ReadSecondaryHandler behavior = new ReadSecondaryHandler(recProfile, Profile.PROFILE_CODE_KEY);
behavior.setRespondsToMode(DBConstants.READ_MOVE, false);
this.getField(Booking.PROFILE_CODE).addListener(behavior);

behavior.addFieldSeqPair(Booking.PROFILE_ID, Profile.ID, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.PROFILE_CODE, Profile.PROFILE_CODE, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.GENERIC_NAME, Profile.GENERIC_NAME, DBConstants.MOVE_TO_DEPENDENT, DBConstants.MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.ADDRESS_LINE_1, Profile.ADDRESS_LINE_1, DBConstants.MOVE_TO_DEPENDENT, DBConstants.MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.ADDRESS_LINE_2, Profile.ADDRESS_LINE_2, DBConstants.MOVE_TO_DEPENDENT, DBConstants.MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.CITY_OR_TOWN, Profile.CITY_OR_TOWN, DBConstants.MOVE_TO_DEPENDENT, DBConstants.MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.COUNTRY, Profile.COUNTRY, DBConstants.MOVE_TO_DEPENDENT, DBConstants.MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.STATE_OR_REGION, Profile.STATE_OR_REGION, DBConstants.MOVE_TO_DEPENDENT, DBConstants.MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.POSTAL_CODE, Profile.POSTAL_CODE, DBConstants.MOVE_TO_DEPENDENT, DBConstants.MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.TEL, Profile.TEL, DBConstants.MOVE_TO_DEPENDENT, DBConstants.MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.FAX, Profile.FAX, DBConstants.MOVE_TO_DEPENDENT, DBConstants.MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.EMAIL, Profile.EMAIL, DBConstants.MOVE_TO_DEPENDENT, DBConstants.MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.LANGUAGE_ID, Profile.PRIMARY_LANGUAGE_ID, DBConstants.MOVE_TO_DEPENDENT, DBConstants.MOVE_DEPENDENT_BACK);
behavior.addFieldSeqPair(Booking.CURRENCYS_ID, Profile.CURRENCYS_ID, DBConstants.MOVE_TO_DEPENDENT, DBConstants.MOVE_DEPENDENT_BACK);
// Only move contact if not blank
Converter convTrueIfContactNotBlank = new RadioConverter(this.getField(Booking.CONTACT), DBConstants.BLANK, true);
recProfile.addListener(new RemoveConverterOnCloseHandler(convTrueIfContactNotBlank));
MoveOnValidHandler moveHandler = behavior.addFieldSeqPair(Booking.CONTACT, Profile.CONTACT, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK, convTrueIfContactNotBlank, null);
moveHandler.setDisableOnMove(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3023">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getHiddenParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HRequestHtmlScreen</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> mapParams = super.getHiddenParams();
String key = "agent";
String value = this.getProperty(key);
if (value == null)
    value = "no";
mapParams.put(key, value);
return mapParams;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3024">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPrintOptions</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HRequestHtmlScreen</MethodClassName>
		<LogicSource><![CDATA[int iToolbarOptions = super;
if (this.getScreenField().isEnabled() == false)		// For display - no toolbars
	iToolbarOptions = iToolbarOptions & ~(HtmlConstants.PRINT_TOOLBAR_BEFORE | HtmlConstants.PRINT_TOOLBAR_BEFORE);
return iToolbarOptions;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3025">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>printZmlToolbarData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HRequestHtmlScreen</MethodClassName>
		<LogicSource><![CDATA[boolean bFieldsFound = super;

String strAgentParam = this.getProperty("agent");
if (strAgentParam == null)
    strAgentParam = "no";
BasePanel screen = (BasePanel)this.getScreenField();
String strURL = HtmlConstants.SERVLET_LINK + screen.getScreenURL();
if (strAgentParam.equalsIgnoreCase("yes"))
    strURL = screen.addURLParam(strURL, "agent", "no");
else
    strURL = screen.addURLParam(strURL, "agent", "yes");
if (strAgentParam.equalsIgnoreCase("yes"))
    out.println("<br/><a href=\"" + strURL + "\">If you are <b>not</b> a travel agent, click here</a>");
else
    out.println("<br/><a href=\"" + strURL + "\">If you are a travel agent, click here</a>");
bFieldsFound = true;

return bFieldsFound;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3026">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>processServletCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HRequestHtmlScreen</MethodClassName>
		<LogicSource><![CDATA[boolean bDefaultParamsFound = super;
String strError = this.getTask().getStatusText(DBConstants.INFORMATION);
if (bDefaultParamsFound)
    if ((strError == null) || (strError.length() == 0))
{
    String strStatus = HtmlConstants.SERVLET_LINK + "?menu=";
    strStatus = "<a href=" + strStatus + ">Click here to return to the main menu</a>.";
    this.getTask().setStatusText(strStatus, DBConstants.INFORMATION);
    this.getScreenField().setEnabled(false);        // Display screen!
}
return bDefaultParamsFound;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3042">
		<LastChanged>2012-01-21T06:35:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setupScreenFieldView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHtmlScreen</MethodClassName>
		<LogicSource><![CDATA[if (ScreenModel.HTML_TYPE.equalsIgnoreCase(this.getViewFactory().getViewSubpackage()))
	return new HRequestHtmlScreen(this, bEditableControl);
else
	return null;	// Not supported!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3048">
		<LastChanged>2012-04-12T22:02:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setupTourFromHeader</MethodName>
		<LogicDescription><![CDATA[Given the tour header and the departure date, setup or locate
the correct tour.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>TourHeaderModel recTourHeader, Field fldDepDate, String strCode, String strDescription</MethodInterface>
		<MethodClassName>Tour</MethodClassName>
		<LogicSource><![CDATA[if ((recTourHeader.getEditMode() != DBConstants.EDIT_CURRENT)
    && (recTourHeader.getEditMode() != DBConstants.EDIT_IN_PROGRESS))
        return DBConstants.ERROR_RETURN;    // Must pass in a valid tour header!
boolean bNewTour = false;
if (recTourHeader.getField(TourHeader.TOUR_SERIES).getState() == false)
	bNewTour = true;	// New tour
if (TOUR_SCREEN_CLASS.equalsIgnoreCase(this.getRecordOwner().getClass().toString()))
{	// Special case - series entry
	if (bNewTour)
		return DBConstants.ERROR_RETURN;    // Can't enter series tour for a non-series header
	bNewTour = true;	// Special case - Tour entry for a tour series header
}
if (bNewTour)
{ // Tour Header - Create this booking's tour from the tour header
    return this.setupNewTour((Record)recTourHeader, (BaseField)fldDepDate, strCode, strDescription);
}
else
{ // Series - Get the booking's tour from the tour header
    return this.lookupTour((Record)recTourHeader, (BaseField)fldDepDate);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="3051">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>63</Sequence>
		<MethodName>setStartDate</MethodName>
		<LogicDescription><![CDATA[Set the start date for this item.
This is here so you can do an action when the user changes the start date.
The StartDateHandler is added automatically to this class.]]></LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>Date time</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[((DateTimeField)this.getField(BookingDetail.DETAIL_DATE)).setDateTime(time, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
return ((DateTimeField)this.getField(BookingDetail.DETAIL_DATE)).getDateTime();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3058">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestHotelRateScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3059">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestHotelRateScreen</MethodClassName>
		<LogicSource>return new TestHotelRateScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3060">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelClassGridScreen</MethodClassName>
		<LogicSource>return new HotelClass(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3061">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateGridScreen</MethodClassName>
		<LogicSource>return new HotelRate(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3062">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestHotelRateScreen</MethodClassName>
		<LogicSource><![CDATA[return new Hotel(this);	// ? Is this necessary?]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3063">
		<LastChanged>2012-01-26T06:03:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestHotelRateScreen</MethodClassName>
		<LogicSource><![CDATA[super;
MessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager(false);
if (messageManager != null)
    ((BaseMessageManager)messageManager).freeFiltersWithListener(this);  // Free all filters listening for me.]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3064">
		<LastChanged>2012-01-25T23:04:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestHotelRateScreen</MethodClassName>
		<LogicSource><![CDATA[super;
MessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
if (messageManager != null)
{
    Object source = this;
    BaseMessageFilter filter = new BaseMessageFilter(MessageConstants.TRX_RETURN_QUEUE, MessageConstants.INTERNET_QUEUE, source, null);
    filter.addMessageListener(this);
    messageManager.addMessageFilter(filter);
    m_intRegistryID = filter.getRegistryID();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3065">
		<LastChanged>2012-02-01T17:48:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestHotelRateScreen</MethodClassName>
		<LogicSource><![CDATA[if ("getrate".equalsIgnoreCase(strCommand))
{
    Hotel recHotel = (Hotel)((ReferenceField)this.getScreenRecord().getField(TestHotelRateScreenRecord.PRODUCT_ID)).getReference();
    if ((recHotel.getEditMode() == DBConstants.EDIT_CURRENT)
        || (recHotel.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
    {
        String strMessageInfoType = MessageInfoType.REQUEST;
        String strContactType = recHotel.getTableNames(false);
        String strRequestType = RequestType.PRICE;
        String strMessageType = MessageType.MESSAGE_OUT;
        String strProcessType = ProcessType.INFO;
        String strMessageTransport = null;
        TrxMessageHeader trxMessageHeader = recHotel.createProcessMessage(strMessageInfoType, strContactType, strRequestType, strMessageType, strProcessType, strMessageTransport);
        if (trxMessageHeader == null)
            return false;
        BaseMessage messageOut = BaseMessage.createMessage(trxMessageHeader);
        ProductRequest message = (ProductRequest)messageOut.getMessageDataDesc(null);
        if (message == null)
            return false;

        trxMessageHeader = (TrxMessageHeader)messageOut.getMessageHeader();
        trxMessageHeader.put(MessageTransport.MANUAL_RESPONSE_PARAM, DBConstants.TRUE);    // For testing, allow manual requests
        if (m_intRegistryID != null)
            trxMessageHeader.put(TrxMessageHeader.REGISTRY_ID, m_intRegistryID);    // The return Queue ID

        Record record = this.getScreenRecord();
        ((MessageRecordDesc)message.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE)).putRawFieldData(record.getField(TestHotelRateScreenRecord.PRODUCT_ID));
        ((MessageRecordDesc)message.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE)).putRawFieldData(record.getField(TestHotelRateScreenRecord.RATE_ID));
        ((MessageRecordDesc)message.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE)).putRawFieldData(record.getField(TestHotelRateScreenRecord.CLASS_ID));
        ((MessageRecordDesc)message.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE)).putRawFieldData(record.getField(TestHotelRateScreenRecord.DETAIL_DATE));

        ((PassengerMessageData)message.getMessageDataDesc(ProductRequest.PASSENGER_MESSAGE)).setPaxInRoom(PaxCategory.DOUBLE_ID, (short)2);
        ((PassengerMessageData)message.getMessageDataDesc(ProductRequest.PASSENGER_MESSAGE)).setTargetPax((short)2);

        if (MessageTransport.DIRECT.equalsIgnoreCase((String)trxMessageHeader.get(MessageTransport.SEND_MESSAGE_BY_PARAM)))
        {
            String strMessageCode = (String)trxMessageHeader.get(LocalMessageTransport.LOCAL_PROCESSOR);
            if (trxMessageHeader.getMessageInfoMap() != null)
            {
                trxMessageHeader.getMessageInfoMap().remove(TrxMessageHeader.MESSAGE_PROCESSOR_CLASS);
                trxMessageHeader.getMessageInfoMap().remove(TrxMessageHeader.BASE_PACKAGE);
            }
            MessageProcessInfo recMessageProcessInfo = new MessageProcessInfo(this);
            recMessageProcessInfo.setupMessageHeaderFromCode(message.getMessage(), strMessageCode, null);
            recMessageProcessInfo.free();
            String strDefaultProcessorClass = BaseMessageInProcessor.class.getName();
            BaseExternalMessageProcessor messageInProcessor = (BaseExternalMessageProcessor)BaseMessageProcessor.getMessageProcessor(this.getTask(), (BaseMessage)message.getMessage(), strDefaultProcessorClass);
            BaseMessage baseMessageReply = null;
            BaseProductResponse messageReply = null;
            if (messageInProcessor != null)
            {   // Always
                    // Note: Since recProduct is already read you may be able to speed things up by passing recProduct to this process..
                baseMessageReply = messageInProcessor.processMessage((BaseMessage)message.getMessage());
                messageReply = (BaseProductResponse)baseMessageReply.getMessageDataDesc(null);
                messageInProcessor.free();
            }
            int iStatus = BaseDataStatus.NOT_VALID;
            if (messageReply != null)
                this.handleMessage(baseMessageReply);
            else
                this.getScreenRecord().getField(TestHotelRateScreenRecord.DISPLAY_COST_STATUS_ID).setValue(iStatus);
        }
        else
        {
            MessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
            if (messageManager != null)
                messageManager.sendMessage(messageOut);
        }
    }
}
if ("ping".equalsIgnoreCase(strCommand))
{
    Hotel recHotel = (Hotel)((ReferenceField)this.getScreenRecord().getField(TestHotelRateScreenRecord.PRODUCT_ID)).getReference();
    if ((recHotel.getEditMode() == DBConstants.EDIT_CURRENT)
        || (recHotel.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
    {
        MessageProcessInfo recMessageProcessInfo = new MessageProcessInfo(this);
        recMessageProcessInfo.setKeyArea(MessageProcessInfo.CODE_KEY);
        recMessageProcessInfo.getField(MessageProcessInfo.CODE).setString("PingOutRQ");
        try {
            if (recMessageProcessInfo.seek(null))
            {
                TrxMessageHeader trxMessageHeader = recMessageProcessInfo.createProcessMessageHeader(recHotel, null);
                if (trxMessageHeader == null)
                    return false;
                trxMessageHeader.put(MessageTransport.MANUAL_RESPONSE_PARAM, DBConstants.TRUE);    // For testing, allow manual requests
                if (m_intRegistryID != null)
                    trxMessageHeader.put(TrxMessageHeader.REGISTRY_ID, m_intRegistryID);    // The return Queue ID
                BaseMessage message = new TreeMessage(trxMessageHeader, null);
                message.put(PingRequestMessageInProcessor.MESSAGE_PARAM, "Hello");
                if (!MessageTransport.DIRECT.equalsIgnoreCase((String)trxMessageHeader.get(MessageTransport.SEND_MESSAGE_BY_PARAM)))
                {
                    MessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
                    if (messageManager != null)
                        messageManager.sendMessage(message);
                }
            }
        } catch (DBException e) {
            e.printStackTrace();
        } finally {
            recMessageProcessInfo.free();
        }
    }
}
if ("Currency".equalsIgnoreCase(strCommand))
{
    Hotel recHotel = (Hotel)((ReferenceField)this.getScreenRecord().getField(TestHotelRateScreenRecord.PRODUCT_ID)).getReference();
    if ((recHotel.getEditMode() == DBConstants.EDIT_CURRENT)
        || (recHotel.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
    {
        MessageProcessInfo recMessageProcessInfo = new MessageProcessInfo(this);
        recMessageProcessInfo.setKeyArea(MessageProcessInfo.CODE_KEY);
        recMessageProcessInfo.getField(MessageProcessInfo.CODE).setString("CurrencyRateOut");
        try {
            if (recMessageProcessInfo.seek(null))
            {
                TrxMessageHeader trxMessageHeader = recMessageProcessInfo.createProcessMessageHeader(recHotel, null);
                if (trxMessageHeader == null)
                    return false;
                trxMessageHeader.put(MessageTransport.MANUAL_RESPONSE_PARAM, DBConstants.TRUE);    // For testing, allow manual requests
                if (m_intRegistryID != null)
                    trxMessageHeader.put(TrxMessageHeader.REGISTRY_ID, m_intRegistryID);    // The return Queue ID
                BaseMessage message = new TreeMessage(trxMessageHeader, null);
                message.put(PingRequestMessageInProcessor.MESSAGE_PARAM, "CHF");
                if (!MessageTransport.DIRECT.equalsIgnoreCase((String)trxMessageHeader.get(MessageTransport.SEND_MESSAGE_BY_PARAM)))
                {
                    MessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
                    if (messageManager != null)
                        messageManager.sendMessage(message);
                }
            }
        } catch (DBException e) {
            e.printStackTrace();
        } finally {
            recMessageProcessInfo.free();
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3066">
		<LastChanged>2012-02-01T17:49:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>handleMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestHotelRateScreen</MethodClassName>
		<LogicSource><![CDATA[if (message != null)
    if (message.getMessageHeader().getRegistryIDMatch() != null)    // My private message
{
    if (message.get(PingRequestMessageInProcessor.MESSAGE_PARAM) == null)
    {
        HotelRateResponse msgHotelRateResponse = new HotelRateResponse(message, null);
        HotelRateResponseMessageData responseMessageData = (HotelRateResponseMessageData)msgHotelRateResponse.getMessageDataDesc(ProductRateResponse.PRODUCT_RESPONSE_MESSAGE);
    
        Double dblRate = (Double)responseMessageData.get(BookingDetail.TOTAL_COST);
        if (dblRate != null)    // Display the rate
            this.getScreenRecord().getField(TestHotelRateScreenRecord.TOTAL_COST).setValue(dblRate.doubleValue());
        int iStatus = ((BaseProductResponse)message.getMessageDataDesc(null)).getMessageDataStatus();
        this.getScreenRecord().getField(TestHotelRateScreenRecord.DISPLAY_COST_STATUS_ID).setValue(iStatus);
    }
    else
    {
        String strMessage = (String)message.get(PingRequestMessageInProcessor.MESSAGE_PARAM);
        System.out.println("Message: " + strMessage);
        if ("Hello".equalsIgnoreCase(strMessage))
            this.getScreenRecord().getField(TestHotelRateScreenRecord.DISPLAY_COST_STATUS_ID).setValue(BaseStatus.OKAY);
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3069">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Period</MethodClassName>
		<LogicSource><![CDATA[this.setKeyArea(Period.END_PERIOD_KEY);	// Default order
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3070">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Account</MethodClassName>
		<LogicSource><![CDATA[this.setKeyArea(Account.ACCOUNT_NO_KEY);	// Default key order

this.addListener(new SoftDeleteDetailHandler(this.getField(Account.DISCONTINUED), null)
{
    public Record getDetailRecord(RecordOwner screen)
    {
        Record record = super.getDetailRecord(screen);
        if (record == null)
        {
            record = new AcctDetail(screen);
            record.addListener(new SubFileFilter(this.getOwner()));
            this.setDetailRecord(record);
        }
        return record;
    }
});

super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3071">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountGridScreen</MethodClassName>
		<LogicSource><![CDATA[return new AccountScreenRecord(this);	// Needed to keep track of key order]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3080">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxSystemGridScreen</MethodClassName>
		<LogicSource><![CDATA[return new TrxSystem(this);
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3081">
		<LastChanged>2012-03-26T09:55:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxSystem</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(TrxDesc.TRX_DESC_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(TRX_SYSTEM_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(TRX_SYSTEM_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3082">
		<LastChanged>2012-06-15T20:51:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDesc</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(TrxGroup.TRX_GROUP_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == (ScreenConstants.DETAIL_MODE | 4096))
    screen = Record.makeNewScreen(TrxStatus.TRX_STATUS_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(TRX_DESC_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(TRX_DESC_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3083">
		<LastChanged>2012-03-26T10:05:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatus</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(TRX_STATUS_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(TRX_STATUS_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3084">
		<LastChanged>2012-03-26T10:04:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransactionType</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(TRANSACTION_TYPE_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(TRANSACTION_TYPE_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3086">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TrxTypeGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recMain, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TrxTypeGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3087">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TrxStatusGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TrxStatusGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3088">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeGridScreen</MethodClassName>
		<LogicSource>return new TransactionType(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3089">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeScreen</MethodClassName>
		<LogicSource>return new TransactionType(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3090">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusScreen</MethodClassName>
		<LogicSource>return new TrxStatus(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3091">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusGridScreen</MethodClassName>
		<LogicSource>return new TrxStatus(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3092">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescScreen</MethodClassName>
		<LogicSource>return new TrxDesc(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3093">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TrxDescGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recMain, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TrxDescGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3094">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescGridScreen</MethodClassName>
		<LogicSource>return new TrxDesc(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3095">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxSystemScreen</MethodClassName>
		<LogicSource>return new TrxSystem(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3096">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxSystemGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3097">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication app = (BaseApplication)this.getTask().getApplication();
String strStatus = "Status";
String strStatusDesc = app.getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strStatus);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, strStatus, strStatusDesc);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL);
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3104">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication app = (BaseApplication)this.getTask().getApplication();
String strStatus = "Status";
String strStatusDesc = app.getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strStatus);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strStatusDesc, MenuConstants.FORMDETAIL, strStatus, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3105">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication app = (BaseApplication)this.getTask().getApplication();
String strStatus = "Status";
String strStatusDesc = app.getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strStatus);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strStatusDesc, MenuConstants.FORMDETAIL, strStatus, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3106">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxSystemScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3107">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxSystemGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3108">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescGridScreen</MethodClassName>
		<LogicSource>return new TrxSystem(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3109">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusGridScreen</MethodClassName>
		<LogicSource>return new TrxDesc(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3110">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeGridScreen</MethodClassName>
		<LogicSource>return new TrxGroup(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3111">
		<LastChanged>2012-01-31T11:57:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(TrxStatus.TRX_DESC_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(TrxStatusScreenRecord.TRX_DESC_ID), TrxStatus.TRX_DESC_ID, null, null, null, null));
this.getScreenRecord().getField(TrxStatusScreenRecord.TRX_DESC_ID).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new UpdateTrxStatusHandler(null, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3112">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new UpdateTrxDescHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3113">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));

this.getMainRecord().addListener(new UpdateTrxTypeHandler(null));

for (int i = 0; ;i++)
{
    ScreenField sField = (ScreenField)this.getRecord(TransactionType.TRANSACTION_TYPE_FILE).getField(TransactionType.SOURCE_TRX_STATUS_ID).getComponent(i);
    if (sField == null)
        break;
    if (sField instanceof SCannedBox)
    {
        String strCommand = Utility.addURLParam(null, DBParams.COMMAND, ((SCannedBox)sField).getButtonCommand());
        BaseField field = this.getRecord(TransactionType.TRANSACTION_TYPE_FILE).getField(TransactionType.TRX_DESC_ID);
        BaseField fldSrc = field;
        if (field.isNull())
            fldSrc = this.getRecord(TrxGroup.TRX_GROUP_FILE).getField(TrxGroup.ID);
        strCommand = Utility.addURLParam(strCommand, field.getFieldName(), fldSrc.toString());
        field = this.getRecord(TransactionType.TRANSACTION_TYPE_FILE).getField(TransactionType.TRX_SYSTEM_ID);
        strCommand = Utility.addURLParam(strCommand, field.getFieldName(), field.toString());
        ((SCannedBox)sField).setButtonCommand(strCommand);
    }
}

Record recTrxStatus = ((ReferenceField)this.getMainRecord().getField(TransactionType.SOURCE_TRX_STATUS_ID)).getReferenceRecord(this);
this.getMainRecord().getField(TransactionType.SOURCE_TRX_STATUS_ID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(TransactionType.SOURCE_PREFERRED_SIGN), recTrxStatus.getField(TrxStatus.PREFERRED_SIGN)));
this.getMainRecord().getField(TransactionType.SOURCE_TRX_STATUS_ID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(TransactionType.SOURCE_TRX_DESC_ID), recTrxStatus.getField(TrxStatus.TRX_DESC_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3117">
		<LastChanged>2012-01-23T08:57:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescGridScreen</MethodClassName>
		<LogicSource>return new TrxSystemHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3118">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxSystemHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3119">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescStatusHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3120">
		<LastChanged>2012-01-23T08:57:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusGridScreen</MethodClassName>
		<LogicSource>return new TrxDescStatusHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3121">
		<LastChanged>2012-01-23T08:57:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeGridScreen</MethodClassName>
		<LogicSource>return new TrxGroupHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3122">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3123">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3124">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxTypeHandler</MethodClassName>
		<LogicSource><![CDATA[switch (iChangeType)
{
    case DBConstants.ADD_TYPE:
    case DBConstants.UPDATE_TYPE:
        Record record = this.getOwner();
        Record recTrxGroup = ((ReferenceField)record.getField(TransactionType.TRX_GROUP_ID)).getReference();
        record.getField(TransactionType.GROUP_CODE).moveFieldToThis(recTrxGroup.getField(TrxGroup.GROUP_CODE));
        record.getField(TransactionType.GROUP_DESC).moveFieldToThis(recTrxGroup.getField(TrxGroup.GROUP_DESC));

        Record recTrxDesc = ((ReferenceField)recTrxGroup.getField(TrxGroup.TRX_DESC_ID)).getReference();
        record.getField(TransactionType.TRX_DESC_ID).moveFieldToThis(recTrxDesc.getField(TrxDesc.ID));
        record.getField(TransactionType.DESC_CODE).moveFieldToThis(recTrxDesc.getField(TrxDesc.DESC_CODE));
        record.getField(TransactionType.DESCRIPTION).moveFieldToThis(recTrxDesc.getField(TrxDesc.DESCRIPTION));

        Record recTrxSystem = ((ReferenceField)recTrxDesc.getField(TrxDesc.TRX_SYSTEM_ID)).getReference();
        record.getField(TransactionType.TRX_SYSTEM_ID).moveFieldToThis(recTrxSystem.getField(TrxSystem.ID));
        record.getField(TransactionType.SYSTEM_CODE).moveFieldToThis(recTrxSystem.getField(TrxSystem.SYSTEM_CODE));
        record.getField(TransactionType.SYSTEM_DESC).moveFieldToThis(recTrxSystem.getField(TrxSystem.SYSTEM_DESC));

        break;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3125">
		<LastChanged>2012-01-31T12:01:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusField</MethodClassName>
		<LogicSource><![CDATA[Record record = new TrxStatus(recordOwner);
String strSystem = this.getSystem();
String strDesc = this.getDesc();
if ((strSystem != null) && (strDesc != null))
{
    record.setKeyArea(TrxStatus.SYSTEM_CODE_KEY);
    record.addListener(new StringSubFileFilter(strSystem, TrxStatus.SYSTEM_CODE, strDesc, TrxStatus.DESC_CODE, null, null));
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3126">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescField</MethodClassName>
		<LogicSource>return new TrxDesc(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3127">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxSystemField</MethodClassName>
		<LogicSource>return new TrxSystem(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3128">
		<LastChanged>2012-01-31T14:45:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxSystemField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getReferenceRecord();  // Get/make the record that describes the referenced class.
return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, null, TrxSystem.SYSTEM_DESC, false, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3130">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxDescHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.UPDATE_TYPE)
    || (iChangeType == DBConstants.DELETE_TYPE))
{
    TrxDesc recTrxDesc = (TrxDesc)this.getOwner();
    RecordOwner recordOwner = recTrxDesc.findRecordOwner();
    try {
        // Update the transaction status file
        if (m_recTrxStatus == null)
        {
            m_recTrxStatus = new TrxStatus(recordOwner);
            m_recTrxStatus.addListener(new SubFileFilter(recTrxDesc));
            m_recTrxStatus.addListener(new UpdateTrxStatusHandler(null, recTrxDesc));
            if (recordOwner != null)
                recordOwner.removeRecord(m_recTrxStatus);
        }

        m_recTrxStatus.close();
        while (m_recTrxStatus.hasNext())
        {
            m_recTrxStatus.next();
            m_recTrxStatus.edit();
            m_recTrxStatus.getField(TrxStatus.DESC_CODE).moveFieldToThis(recTrxDesc.getField(TrxDesc.DESC_CODE));

            Record recTrxSystem = ((ReferenceField)recTrxDesc.getField(TrxDesc.TRX_SYSTEM_ID)).getReference();
            if (recTrxSystem != null)
            {
                m_recTrxStatus.getField(TrxStatus.SYSTEM_CODE).moveFieldToThis(recTrxSystem.getField(TrxSystem.SYSTEM_CODE));
                m_recTrxStatus.getField(TrxStatus.TRX_SYSTEM_ID).moveFieldToThis(recTrxSystem.getField(TrxSystem.ID));
            }

            if (iChangeType == DBConstants.UPDATE_TYPE)
                m_recTrxStatus.set();
            else if (iChangeType == DBConstants.DELETE_TYPE)
                m_recTrxStatus.remove();
        }

        // Update the transaction group file
        if (m_recTrxGroup == null)
        {
            m_recTrxGroup = new TrxGroup(recordOwner);
            m_recTrxGroup.addListener(new SubFileFilter(recTrxDesc));
            m_recTrxGroup.addListener(new UpdateTrxGroupHandler(null, recTrxDesc));
            if (recordOwner != null)
                recordOwner.removeRecord(m_recTrxGroup);
        }

        m_recTrxGroup.close();
        while (m_recTrxGroup.hasNext())
        {
            m_recTrxGroup.next();
            m_recTrxGroup.edit();
            m_recTrxGroup.getField(TrxGroup.DESC_CODE).moveFieldToThis(recTrxDesc.getField(TrxDesc.DESC_CODE));

            Record recTrxSystem = ((ReferenceField)recTrxDesc.getField(TrxDesc.TRX_SYSTEM_ID)).getReference();
            if (recTrxSystem != null)
            {
                m_recTrxGroup.getField(TrxGroup.SYSTEM_CODE).moveFieldToThis(recTrxSystem.getField(TrxSystem.SYSTEM_CODE));
                m_recTrxGroup.getField(TrxGroup.TRX_SYSTEM_ID).moveFieldToThis(recTrxSystem.getField(TrxSystem.ID));
            }

            if (iChangeType == DBConstants.UPDATE_TYPE)
                m_recTrxGroup.set();
            else if (iChangeType == DBConstants.DELETE_TYPE)
                m_recTrxGroup.remove();
        }
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3131">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxSystemHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.UPDATE_TYPE)
    || (iChangeType == DBConstants.DELETE_TYPE))
{
    try {
        Record recTrxSystem = this.getOwner();
        RecordOwner recordOwner = recTrxSystem.findRecordOwner();
        if (m_recTrxDesc == null)
        {
            m_recTrxDesc = new TrxDesc(recordOwner);
            m_recTrxDesc.addListener(new SubFileFilter(recTrxSystem));
            m_recTrxDesc.addListener(new UpdateTrxDescHandler(null));
            if (recordOwner != null)
                recordOwner.removeRecord(m_recTrxDesc);
        }
        m_recTrxDesc.close();
        while (m_recTrxDesc.hasNext())
        {
            m_recTrxDesc.next();
            m_recTrxDesc.edit();
            m_recTrxDesc.getField(TrxDesc.DESC_CODE).setModified(true); // Have to make sure the UpdateTrxDescHandler is called.
            if (iChangeType == DBConstants.UPDATE_TYPE)
                m_recTrxDesc.set();
            if (iChangeType == DBConstants.DELETE_TYPE)
                m_recTrxDesc.remove();
        }
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3132">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxSystemGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new UpdateTrxSystemHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3135">
		<LastChanged>2012-02-01T19:02:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getTrxTypeID</MethodName>
		<LogicDescription>Lookup this transaction type given the System, Class, and Desc.</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>String strSystemCode, String strDescCode, String strGroupCode, String strTypeCode</MethodInterface>
		<MethodClassName>TransactionType</MethodClassName>
		<LogicSource><![CDATA[int iTrxTypeID = 0;
this.setKeyArea(TransactionType.TRX_TYPE_CODE_KEY);
this.getField(TransactionType.SYSTEM_CODE).setString(strSystemCode);
this.getField(TransactionType.DESC_CODE).setString(strDescCode);
this.getField(TransactionType.GROUP_CODE).setString(strGroupCode);
this.getField(TransactionType.TYPE_CODE).setString(strTypeCode);
try   {
    boolean bSuccess = this.seek("=");
    if (bSuccess)
        iTrxTypeID = (int)this.getField(TransactionType.ID).getValue();
} catch (DBException ex)    {
    ex.printStackTrace();
}
return iTrxTypeID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3136">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>clone</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxTypeHandler</MethodClassName>
		<LogicSource>return new UpdateTrxTypeHandler(null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3137">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3138">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>clone</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxSystemHandler</MethodClassName>
		<LogicSource>return new UpdateTrxSystemHandler(null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3139">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>clone</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxDescHandler</MethodClassName>
		<LogicSource>return new UpdateTrxDescHandler(null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3141">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PreferredBalanceField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
case 0:
default:
    tempString = DBConstants.BLANK;break;
case 1:
    tempString = "Debit";break;
case 2:
    tempString = "Credit";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3142">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PreferredBalanceField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
if (index == 2)
    tempString = Account.CREDIT;
else if (index == 1)
    tempString = Account.DEBIT;
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3143">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PreferredBalanceField</MethodClassName>
		<LogicSource><![CDATA[if (tempString.equalsIgnoreCase(PreferredBalanceField.CREDIT))
    return 2;
else if (tempString.equalsIgnoreCase(PreferredBalanceField.DEBIT))
    return 1;
else
    return 0;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3144">
		<LastChanged>2012-01-18T17:05:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PreferredBalanceField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3145">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PreferredBalanceField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3146">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TypicalBalanceField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3147">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatch</MethodClassName>
		<LogicSource><![CDATA[super;
this.addListener(new SubFileIntegrityHandler(AcctBatchDetail.class.getName()));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3148">
		<LastChanged>2012-01-31T15:33:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>setPeriodDefaults</MethodName>
		<LogicDescription><![CDATA[Set the start and end fields to the current period.
@param record The record to set.
@param fsStartDateField The field to set to the start period date.
@param fsEndDateField The field to set to the end period date.
@param datePeriod The date to calc the period for (null for the current date).]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record record, String fsStartDateField, String fsEndDateField, Date datePeriod</MethodInterface>
		<MethodClassName>Period</MethodClassName>
		<LogicSource><![CDATA[if (fsStartDateField != null)
{
    Date startDate = this.getPeriodStartDate(datePeriod);
    ((DateTimeField)record.getField(fsStartDateField)).setDate(startDate, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
}
if (fsEndDateField != null)
{
    Date endDate = this.getPeriodEndDate(datePeriod);
    ((DateTimeField)record.getField(fsEndDateField)).setDate(endDate, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3149">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenledScreenRecord</MethodClassName>
		<LogicSource><![CDATA[super;
if (m_recPeriod == null)
{
    m_recPeriod = new Period(this.findRecordOwner());
    if (m_recPeriod.getRecordOwner() != null)
        m_recPeriod.getRecordOwner().removeRecord(m_recPeriod);
}
m_recPeriod.setPeriodDefaults(this, GenledScreenRecord.START_DATE, GenledScreenRecord.END_DATE, null);
this.getField(GenledScreenRecord.CUTOFF_DATE).moveFieldToThis(this.getField(GenledScreenRecord.END_DATE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3150">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenledScreenRecord</MethodClassName>
		<LogicSource><![CDATA[if (m_recPeriod != null)
    m_recPeriod.free();
m_recPeriod= null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3151">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtReportHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3152">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtReportScreen</MethodClassName>
		<LogicSource>return new FinStmtReportHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3153">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtDetailReportScreen</MethodClassName>
		<LogicSource>return this.getRecord(FinStmtDetail.FIN_STMT_DETAIL_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3154">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtDetailReportScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3155">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtReportScreen</MethodClassName>
		<LogicSource>return new FinStmtDetailReportScreen(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3156">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription>Calculate the amounts needed for Financial Statements.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AddFinStmtDetailTotals</MethodClassName>
		<LogicSource><![CDATA[super;

if (this.getScreenRecord().getField(FinStmtReportScreenRecord.LAST_STATEMENT).getValue() != this.getOwner().getField(FinStmtDetail.FIN_STMT_ID).getValue())
{
    if (this.getScreenRecord().getField(FinStmtReportScreenRecord.LAST_STATEMENT).getValue() != 0)
    {   // Save the total from the last statement for subsequent uses.
        m_htTotals.put(m_strLastReportName, new Double(this.getScreenRecord().getField(FinStmtReportScreenRecord.TARGET_AMOUNT).getValue()));
    }
    this.resetTotals(9);    // New statement = reset all totals
    this.getScreenRecord().getField(FinStmtReportScreenRecord.RATIO_AMOUNT).setValue(0);
    this.getScreenRecord().getField(FinStmtReportScreenRecord.RATIO_PERCENT).setValue(0);
    this.getScreenRecord().getField(FinStmtReportScreenRecord.LAST_STATEMENT).moveFieldToThis(this.getOwner().getField(FinStmtDetail.FIN_STMT_ID));
    m_strLastReportName = this.getRecord(FinStmt.FIN_STMT_FILE).getField(FinStmt.STATEMENT_DESC).toString();
}

double dStartBalance = this.getScreenRecord().getField(FinStmtReportScreenRecord.START_BALANCE).getValue();
double dBalanceChange = this.getScreenRecord().getField(FinStmtReportScreenRecord.BALANCE_CHANGE).getValue();
double dEndBalance = dStartBalance + dBalanceChange;
this.getScreenRecord().getField(FinStmtReportScreenRecord.END_BALANCE).setValue(dEndBalance);
if (this.getOwner().getField(FinStmtDetail.ACCOUNT_ID).getValue() != 0)
{
    Record recAccount = ((ReferenceField)this.getOwner().getField(FinStmtDetail.ACCOUNT_ID)).getReference();
    if (recAccount != null)
    {
        if (recAccount.getField(Account.CLOSE_YEAR_END).getState() == true)
            this.getScreenRecord().getField(FinStmtReportScreenRecord.IS_AMOUNT).setValue(this.getScreenRecord().getField(FinStmtReportScreenRecord.IS_AMOUNT).getValue() + dStartBalance);
    }
}

int iLevel = (int)this.getOwner().getField(FinStmtDetail.SUB_TOTAL_LEVEL).getValue();
double dTrxAmount = 0.00;
if (StatementNumberField.NET_CHANGE.equalsIgnoreCase(this.getRecord(FinStmt.FIN_STMT_FILE).getField(FinStmt.STATEMENT_NUMBER).toString()))
    dTrxAmount = dBalanceChange;
else
    dTrxAmount = dEndBalance;
if (this.checkCommand(null))
{
    if (this.checkCommand(START))
        dTrxAmount = this.getScreenRecord().getField(FinStmtReportScreenRecord.START_BALANCE).getValue();
    if (this.checkCommand(END))
        dTrxAmount = this.getScreenRecord().getField(FinStmtReportScreenRecord.END_BALANCE).getValue();
    if (this.checkCommand(CHANGE))
        dTrxAmount = this.getScreenRecord().getField(FinStmtReportScreenRecord.BALANCE_CHANGE).getValue();
    if (this.checkCommand(TRANSFER))
        dTrxAmount = this.getTransferAmount();
    if (this.checkCommand(IS_START))
        dTrxAmount = this.getScreenRecord().getField(FinStmtReportScreenRecord.IS_AMOUNT).getValue();
}
this.addTotals(dTrxAmount);
this.getScreenRecord().getField(FinStmtReportScreenRecord.TARGET_AMOUNT).setValue(this.getTotal(iLevel));

if (StatementFormatField.RATIO.equalsIgnoreCase(this.getRecord(FinStmt.FIN_STMT_FILE).getField(FinStmt.STATEMENT_FORMAT).toString()))
{
    if (this.checkCommand(BASE_RATIO))
        this.getScreenRecord().getField(FinStmtReportScreenRecord.RATIO_AMOUNT).setValue(dTrxAmount);
    double dRatio = 0;
    double dRatioAmount = this.getScreenRecord().getField(FinStmtReportScreenRecord.RATIO_AMOUNT).getValue();
    if (dRatioAmount != 0)
    {
        double dTargetAmount = this.getScreenRecord().getField(FinStmtReportScreenRecord.TARGET_AMOUNT).getValue();
        dRatio = Math.abs(dTargetAmount / dRatioAmount);
    }
    this.getScreenRecord().getField(FinStmtReportScreenRecord.RATIO_PERCENT).setValue(dRatio);
}

if ((this.getRecord(FinStmtDetail.FIN_STMT_DETAIL_FILE).getField(FinStmtDetail.INVISIBLE).getState() == false)   // Invisible
    && ((this.getRecord(FinStmtDetail.FIN_STMT_DETAIL_FILE).getField(FinStmtDetail.DATA_COLUMN).getValue() != 0) || (this.getRecord(FinStmtDetail.FIN_STMT_DETAIL_FILE).getField(FinStmtDetail.DATA_COLUMN).isNull())))  // Number does not display
        this.resetTotals(iLevel);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3157">
		<LastChanged>2012-01-31T15:37:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>210</Sequence>
		<MethodName>addTotals</MethodName>
		<LogicDescription>Add this amount to all the level totals</LogicDescription>
		<MethodReturns/>
		<MethodInterface>double dAmount</MethodInterface>
		<MethodClassName>AddFinStmtDetailTotals</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getScreenRecord();
for (int iFieldSeq = 0; iFieldSeq < record.getFieldCount(); iFieldSeq++)
{
    if (record.getField(iFieldSeq).getFieldName().startsWith("total"))
        record.getField(iFieldSeq).setValue(dAmount + this.getScreenRecord().getField(iFieldSeq).getValue());
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3158">
		<LastChanged>2012-06-15T20:12:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getTotal</MethodName>
		<LogicDescription>Get the total at this level</LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>int iLevel</MethodInterface>
		<MethodClassName>AddFinStmtDetailTotals</MethodClassName>
		<LogicSource>return this.getScreenRecord().getField(this.getScreenRecord().getFieldSeq(FinStmtReportScreenRecord.TOTAL_0) + iLevel).getValue();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3159">
		<LastChanged>2012-01-31T15:37:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>230</Sequence>
		<MethodName>resetTotals</MethodName>
		<LogicDescription>Reset the totals at this level and below</LogicDescription>
		<MethodReturns/>
		<MethodInterface>int iMaxLevel</MethodInterface>
		<MethodClassName>AddFinStmtDetailTotals</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getScreenRecord();
for (int iFieldSeq = 0; iFieldSeq < record.getFieldCount(); iFieldSeq++)
{
    if (record.getField(iFieldSeq).getFieldName().startsWith("total"))
        record.getField(iFieldSeq).setValue(0.00);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3160">
		<LastChanged>2012-01-25T16:18:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getRecord</MethodName>
		<LogicDescription>A convience method to get the owner's recordowner's record</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>String strRecordName</MethodInterface>
		<MethodClassName>AddFinStmtDetailTotals</MethodClassName>
		<LogicSource>return (Record)this.getOwner().getRecordOwner().getRecord(strRecordName);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3161">
		<LastChanged>2012-01-25T16:18:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getScreenRecord</MethodName>
		<LogicDescription>A convience method to get the screenrecord</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>AddFinStmtDetailTotals</MethodClassName>
		<LogicSource>return (Record)this.getOwner().getRecordOwner().getScreenRecord();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3162">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtReportScreenRecord</MethodClassName>
		<LogicSource><![CDATA[super;
if (m_recPeriod == null)
{
    m_recPeriod = new Period(this.findRecordOwner());
    if (m_recPeriod.getRecordOwner() != null)
        m_recPeriod.getRecordOwner().removeRecord(m_recPeriod);
}
m_recPeriod.setPeriodDefaults(this, FinStmtReportScreenRecord.START_DATE, FinStmtReportScreenRecord.END_DATE, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3163">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfitCenterField</MethodClassName>
		<LogicSource>return new ProfitCenter(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3164">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateSelect</MethodClassName>
		<LogicSource>return new HotelRate(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3165">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelClassSelect</MethodClassName>
		<LogicSource>return new HotelClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3166">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtHeaderField</MethodClassName>
		<LogicSource>return new FinStmtHeader(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3167">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtField</MethodClassName>
		<LogicSource>return new FinStmt(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3168">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AutoDistField</MethodClassName>
		<LogicSource>return new AutoDist(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3172">
		<LastChanged>2012-01-18T17:52:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription>Set up the view with a GlConverter.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountNoField</MethodClassName>
		<LogicSource><![CDATA[converter = new GlConverter((Converter)converter);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3173">
		<LastChanged>2012-01-31T12:06:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtToolbar</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(FinStmtReportScreenRecord.FIN_STMT_HEADER_ID).addListener(new RegisterValueHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3174">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>onAutoClosing</MethodName>
		<LogicDescription>Create the auto-closing entries</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>AcctBatch</MethodClassName>
		<LogicSource><![CDATA[Task task = this.getRecordOwner().getTask();
if ((this.getEditMode() == DBConstants.EDIT_NONE)
    || (this.getEditMode() == DBConstants.EDIT_ADD))
{
    String strError = "Must auto-reverse a new, empty batch";
    strError = ((BaseApplication)task.getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strError);
    task.setLastError(strError);
    return false;
}
if ((this.getField(AcctBatch.NEXT_SEQUENCE).getValue() > 1)
    || (this.getField(AcctBatch.BALANCE).getValue() != 0))
{
    String strError = "Must auto-reverse a new, empty batch";
    strError = ((BaseApplication)task.getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strError);
    task.setLastError(strError);
    return false;
}

Period recPeriod = new Period(this.findRecordOwner());

AcctBatchDetail recAcctBatchDetail = new AcctBatchDetail(this.findRecordOwner());
recAcctBatchDetail.addListener(new SubFileFilter(this));

Account recAccount = new Account(this.findRecordOwner());
AcctDetail recAccountDetail = new AcctDetail(this.findRecordOwner());
recAccountDetail.addListener(new SubFileFilter(recAccount));
DateField fldPeriodStartDate = new DateField(null, "StartDate", Constants.DEFAULT_FIELD_LENGTH, null, null);
DateField fldPeriodEndDate = new DateField(null, "EndDate", Constants.DEFAULT_FIELD_LENGTH, null, null);
Date dateEnd = recPeriod.getPeriodEndDate(((DateTimeField)this.getField(AcctBatch.TRX_DATE)).getDateTime());
Date dateStart = recPeriod.getPeriodStartDate(((DateTimeField)this.getField(AcctBatch.TRX_DATE)).getDateTime());
fldPeriodStartDate.setDate(dateStart, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
fldPeriodEndDate.setDate(dateEnd, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
recAccountDetail.addListener(new ExtractRangeFilter(AcctDetail.TRX_DATE, fldPeriodStartDate, fldPeriodEndDate, ExtractRangeFilter.PAD_DEFAULT));

try {
    double dBalance = 0.00;
    while (recAccount.hasNext())
    {
        recAccount.next();
        if (recAccount.getField(Account.CLOSE_YEAR_END).getState() == false)
            continue;   // Don't close this one.
        double dAmount = 0.00;
        recAccountDetail.close();
        while (recAccountDetail.hasNext())
        {
            recAccountDetail.next();
            dAmount = dAmount + recAccountDetail.getField(AcctDetail.AMOUNT_LOCAL).getValue();
        }

        if (dAmount == 0.00)
            continue;   // No need to close a zero amount
        dBalance = dBalance + dAmount;
        recAcctBatchDetail.addNew();

        recAcctBatchDetail.getField(AcctBatchDetail.SEQUENCE).setValue(1);
        recAcctBatchDetail.getField(AcctBatchDetail.ACCOUNT_ID).moveFieldToThis(recAccount.getField(Account.ID));
        recAcctBatchDetail.getField(AcctBatchDetail.AMOUNT).setValue(-dAmount);

        recAcctBatchDetail.add();
    }

    Object bookmark = this.getHandle(DBConstants.BOOKMARK_HANDLE);
    this.edit();
    this.getField(AcctBatch.AUTO_CLOSING).setState(true);
    this.getField(AcctBatch.TRX_DATE).moveFieldToThis(fldPeriodEndDate);
    this.getField(AcctBatch.BALANCE).setValue(dBalance);
    this.set();
    this.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);

} catch (DBException ex)    {
    ex.printStackTrace();
} finally   {
    fldPeriodStartDate.free();
    fldPeriodEndDate.free();
    recPeriod.free();
    recAccount.free();
    recAccountDetail.free();
    recAcctBatchDetail.free();
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3175">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SpecialFunctionField</MethodClassName>
		<LogicSource><![CDATA[converter = new FieldLengthConverter((Converter)converter, 25);
if (m_recSpecialFunction == null)
 {
     m_recSpecialFunction = new SpecialFunction(this.getRecord().findRecordOwner());
    if (m_recSpecialFunction.getRecordOwner() != null)
        m_recSpecialFunction.getRecordOwner().removeRecord(m_recSpecialFunction);
}
FieldConverter convert = new QueryConverter((Converter)converter, m_recSpecialFunction, SpecialFunction.NAME, true);
return createScreenComponent(ScreenModel.COMBO_BOX, itsLocation, targetScreen, convert, iDisplayFieldDesc, properties);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3176">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>160</Sequence>
		<MethodName>getTransferAmount</MethodName>
		<LogicDescription><![CDATA[Get the total amount from this statement.
@return The total.]]></LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface/>
		<MethodClassName>AddFinStmtDetailTotals</MethodClassName>
		<LogicSource><![CDATA[String strThisCommand = this.getRecord(FinStmtDetail.FIN_STMT_DETAIL_FILE).getField(FinStmtDetail.SPECIAL_FUNCTION).toString();
String strFinStmt = strThisCommand.substring(strThisCommand.toLowerCase().indexOf(TRANSFER) + TRANSFER.length());
if (strFinStmt.startsWith(":"))
    strFinStmt = strFinStmt.substring(1);
if (strFinStmt.startsWith(" "))
    strFinStmt = strFinStmt.substring(1);
Double doubleAmount = (Double)m_htTotals.get(strFinStmt);
if (doubleAmount == null)
    return 0.00;
return doubleAmount.doubleValue();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3177">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>checkCommand</MethodName>
		<LogicDescription><![CDATA[Does this line contain this command?
@return true if it does.
@param strCommand The command to look for (if null, return true if these is any commmand).]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strCommand</MethodInterface>
		<MethodClassName>AddFinStmtDetailTotals</MethodClassName>
		<LogicSource><![CDATA[String strThisCommand = this.getRecord(FinStmtDetail.FIN_STMT_DETAIL_FILE).getField(FinStmtDetail.SPECIAL_FUNCTION).toString();
if ((strThisCommand == null) || (strThisCommand.indexOf('@') == -1))
    return false;
if (strCommand == null)
    return true;    // Yes this is a command
strCommand = "@" + strCommand.toLowerCase();
strThisCommand = strThisCommand.toLowerCase();
return (strThisCommand.indexOf(strCommand) != -1);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3178">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>NumberFormatField</MethodClassName>
		<LogicSource><![CDATA[converter = new FieldLengthConverter((Converter)converter, 25);
if (m_recNumberFormat == null)
{
    m_recNumberFormat = new NumberFormat(this.getRecord().findRecordOwner());
    if (m_recNumberFormat.getRecordOwner() != null)
        m_recNumberFormat.getRecordOwner().removeRecord(m_recNumberFormat);
}
FieldConverter convert = new QueryConverter((Converter)converter, m_recNumberFormat, NumberFormat.NAME, true);
return createScreenComponent(ScreenModel.COMBO_BOX, itsLocation, targetScreen, convert, iDisplayFieldDesc, properties);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3180">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getServletPath</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtReportScreen</MethodClassName>
		<LogicSource>return super.getServletPath(DBParams.XHTMLSERVLET); // Use cocoon</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3181">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setSystem</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strSystem</MethodInterface>
		<MethodClassName>TrxStatusField</MethodClassName>
		<LogicSource>m_strSystem = strSystem;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3182">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getDesc</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>TrxStatusField</MethodClassName>
		<LogicSource><![CDATA[if ((m_strDesc != null) && (m_strDesc.length() > 0))
    return m_strDesc;
Record record = this.getRecord();
if (record instanceof Trx)
    return record.getTableNames(false);
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3183">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strDesc</MethodInterface>
		<MethodClassName>TrxStatusField</MethodClassName>
		<LogicSource>m_strDesc = strDesc;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3184">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getSystem</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>TrxStatusField</MethodClassName>
		<LogicSource><![CDATA[if ((m_strSystem != null) && (m_strSystem.length() < 0))
    return m_strSystem;
Record record = this.getRecord();
if (record != null)
    return record.getDatabaseName();
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3185">
		<LastChanged>2012-01-31T10:43:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetail</MethodClassName>
		<LogicSource><![CDATA[super;
((TrxStatusField)this.getField(BankTrxBatchDetail.TRX_STATUS_ID)).setDesc(BankTrx.BANK_TRX_FILE);
this.removeListener(this.getListener(VoidOnDeleteHandler.class.getName()), true);	// Not used for batches.
this.addListener(new SubFileIntegrityHandler(BankTrxBatchDist.class.getName(), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3187">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PostingType</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
case 0:
default:
    tempString = "";break;
case 1:
    tempString = "Transaction side";break;
case 2:
    tempString = "Distribution side";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3188">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PostingType</MethodClassName>
		<LogicSource><![CDATA[if (tempString.equalsIgnoreCase(DIST_POST))
    return 2;
else if (tempString.equalsIgnoreCase(TRX_POST))
    return 1;
else
    return 0;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3189">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PostingType</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
if (index == 2)
    tempString = DIST_POST;
else if (index == 1)
    tempString = TRX_POST;
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3190">
		<LastChanged>2012-01-18T17:04:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PostingType</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3191">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>PostingType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PostingType</MethodClassName>
		<LogicSource><![CDATA[if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3192">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3193">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3194">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3195">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3197">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DistributionConverter</MethodClassName>
		<LogicSource><![CDATA[ScreenComponent sField = super;

Record recAccount = ((ReferenceField)converter.getField()).getReferenceRecord();
ScreenComponent sFieldNo = recAccount.getField(Account.ACCOUNT_NO).getComponent(0);
Converter fldConverter = (Converter)sFieldNo.getConverter();   // Should be the GlConverter
BaseField field = (BaseField)fldConverter.getField();
if (fldConverter != field)
    fldConverter.free();   // GlConverter is not necessary anymore.
sFieldNo.setConverter(new GlConverter(new AccountNoDistConverter(field, this)));
ScreenComponent sFieldDesc = this.getDisplayField(recAccount).getComponent(0);
sFieldDesc.setConverter(new AccountDescDistConverter((Converter)sFieldDesc.getConverter(), this));
new SCannedBox((ScreenLocation)targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), (BasePanel)targetScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
((BaseField)this.getField()).addListener(new ReferenceChangedHandler(this));

((BaseField)this.getField()).getRecord().addListener(new AddNewDistHandler(null));
return sField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3198">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getAccountNoString</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>DistributionConverter</MethodClassName>
		<LogicSource><![CDATA[String string = this.getString();
if (string == DEFAULT)
    return DBConstants.BLANK;
if (string == SPLIT)
    return DBConstants.BLANK;
Object bookmarkKey = this.getCurrentBookmark(false);
if (bookmarkKey == null)
    return DBConstants.BLANK;
return (String)m_htCacheAccountNo.get(bookmarkKey);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3199">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DistributionConverter</MethodClassName>
		<LogicSource><![CDATA[Record recBankTrxBatchDetail = this.getDetailRecord();
if (recBankTrxBatchDetail.getCounterField().isNull())
    return DBConstants.BLANK;
Object bookmarkKey = recBankTrxBatchDetail.getCounterField().getData();
if (m_htCache.get(bookmarkKey) != null)
    return (String)m_htCache.get(bookmarkKey);
if (m_recBankTrxBatchDist == null)
    m_recBankTrxBatchDist = this.makeDistRecord(null, recBankTrxBatchDetail);
String strResult = DBConstants.BLANK;
String strAccountNo = null;
try {
    int iCount = 0;
    m_recBankTrxBatchDist.close();
    while (m_recBankTrxBatchDist.hasNext())
    {
        m_recBankTrxBatchDist.next();
        iCount++;
    }
    if (iCount == 0)
    {
        strResult = DEFAULT;
        m_htCache.put(bookmarkKey, strResult);
    }
    else if (iCount > 1)
    {
        strResult = SPLIT;
        m_htCache.put(bookmarkKey, strResult);
    }
    else
        strResult = this.addCurrentToCache(bookmarkKey);
} catch (DBException ex)    {
    ex.printStackTrace();
}
return strResult;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3200">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getCurrentBookmark</MethodName>
		<LogicDescription/>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>boolean bRefreshIfNew</MethodInterface>
		<MethodClassName>DistributionConverter</MethodClassName>
		<LogicSource><![CDATA[Record recBankTrxBatchDetail = this.getDetailRecord();
if (recBankTrxBatchDetail.getCounterField().isNull())
{
    if ((bRefreshIfNew)
        && (recBankTrxBatchDetail.getEditMode() == DBConstants.EDIT_ADD))
    {
        try   {
        // Step 2a - Write the transaction.
            recBankTrxBatchDetail.add();
            Object objectID = recBankTrxBatchDetail.getLastModified(DBConstants.DATA_SOURCE_HANDLE);
            recBankTrxBatchDetail.setHandle(objectID, DBConstants.DATA_SOURCE_HANDLE);
        } catch (DBException ex)    {
            ex.printStackTrace();
            return null;
        }
    }
    else
            return null;
}
return recBankTrxBatchDetail.getCounterField().getData();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3201">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DistributionConverter</MethodClassName>
		<LogicSource><![CDATA[if (m_recBankTrxBatchDist != null)
    m_recBankTrxBatchDist.free();
m_recBankTrxBatchDist = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3202">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription>Called from the listener to tell me that the field changed.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseField referenceField</MethodInterface>
		<MethodClassName>DistributionConverter</MethodClassName>
		<LogicSource><![CDATA[boolean bRefreshIfChanged = false;
if (this.getField().getComponent(0) != null)
    if (((ScreenField)this.getField().getComponent(0)).getParentScreen() instanceof GridScreen)
        bRefreshIfChanged = true;
Object bookmarkKey = this.getCurrentBookmark(bRefreshIfChanged);
if (bookmarkKey != null)
{
    // First, delete the old distribution
    try {
        Record recBankTrxBatchDetail = this.getDetailRecord();
        if (m_recBankTrxBatchDist == null)
            m_recBankTrxBatchDist = this.makeDistRecord(null, recBankTrxBatchDetail);
        m_recBankTrxBatchDist.close();
        while (m_recBankTrxBatchDist.hasNext())
        {
            m_recBankTrxBatchDist.next();
            m_recBankTrxBatchDist.edit();
            m_recBankTrxBatchDist.remove();
        }
        this.createNewDist(referenceField);
        this.addCurrentToCache(bookmarkKey);
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3203">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>AccountNoDistConverter</MethodName>
		<LogicDescription/>
		<MethodReturns>converter</MethodReturns>
		<MethodInterface>Converter converter, DistributionConverter distConverter</MethodInterface>
		<MethodClassName>AccountNoDistConverter</MethodClassName>
		<LogicSource>m_distConverter = distConverter;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3204">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountNoDistConverter</MethodClassName>
		<LogicSource><![CDATA[String string = m_distConverter.getAccountNoString();
if ((string == null) || (string.length() == 0))
    return super.getString();
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3205">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>AccountDescDistConverter</MethodName>
		<LogicDescription/>
		<MethodReturns>converter</MethodReturns>
		<MethodInterface>Converter converter, DistributionConverter distConverter</MethodInterface>
		<MethodClassName>AccountDescDistConverter</MethodClassName>
		<LogicSource>m_distConverter = distConverter;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3206">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccountDescDistConverter</MethodClassName>
		<LogicSource><![CDATA[String string = m_distConverter.getString();
if ((string == null) || (string.length() == 0))
    return super.getString();
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3207">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>ReferenceChangedHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>DistributionConverter distConverter</MethodInterface>
		<MethodClassName>ReferenceChangedHandler</MethodClassName>
		<LogicSource><![CDATA[super;
m_distConverter = distConverter;
m_bScreenMove = true;   // Only respond to user change
m_bInitMove = false;
m_bReadMove = false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3208">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ReferenceChangedHandler</MethodClassName>
		<LogicSource><![CDATA[m_distConverter.fieldChanged(this.getOwner());
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3210">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>PreferredSignField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PreferredSignField</MethodClassName>
		<LogicSource><![CDATA[if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3211">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PreferredSignField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
switch(index)
{
case 0:
default:
    tempString = "";break;
case 1:
    tempString = "Positive (+)";break;
case 2:
    tempString = "Negative (-)";break;
}
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3212">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PreferredSignField</MethodClassName>
		<LogicSource><![CDATA[String tempString = null;
if (index == 2)
    tempString = NEGATIVE;
else if (index == 1)
    tempString = POSITIVE;
return tempString;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3213">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PreferredSignField</MethodClassName>
		<LogicSource><![CDATA[if (tempString.equalsIgnoreCase(NEGATIVE))
    return 2;
else if (tempString.equalsIgnoreCase(POSITIVE))
    return 1;
else
    return 0;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3214">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PreferredSignField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, targetScreen, this, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3215">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FocusOnCheckAmount</MethodClassName>
		<LogicSource><![CDATA[ReferenceField fldType = (ReferenceField)this.getOwner().getRecord().getField(BankTrxBatchDetail.TRX_STATUS_ID);
Record recTrxStatus = fldType.getReference();
if (recTrxStatus != null)
{
    String strSignHint = recTrxStatus.getField(TrxStatus.PREFERRED_SIGN).toString();
    if (PreferredSignField.POSITIVE.equals(strSignHint))
    {
        BaseField fldAmount = this.getOwner().getRecord().getField(BankTrxBatchDetail.AMOUNT);
        ScreenField screenField = (ScreenField)fldAmount.getComponent(1);
        screenField.requestFocus();
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3216">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>FocusOnCheckAmount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FocusOnCheckAmount</MethodClassName>
		<LogicSource><![CDATA[super;
m_bScreenMove = true;   // Only respond to user change
m_bInitMove = false;
m_bReadMove = false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3217">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AddNewDistHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
if (!this.getOwner().getTableNames(false).equalsIgnoreCase(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE))
    return DBConstants.NORMAL_RETURN;   // If this is being overidden, don't do rest of code.
switch (iChangeType)
{
    case DBConstants.AFTER_ADD_TYPE:
        BaseField fieldAcct = this.getOwner().getField(BankTrxBatchDetail.DISTRIBUTION_DISPLAY);
        if (fieldAcct != null)
            if (!fieldAcct.isNull())
        {
            Object bookmark = this.getOwner().getLastModified(DBConstants.BOOKMARK_HANDLE);
            if (bookmark != null)
            {
                try {
                    if (m_recBankTrxBatchDist == null)
                    {
                       RecordOwner recordOwner = this.getOwner().findRecordOwner();
                       m_recBankTrxBatchDist = new BankTrxBatchDist(recordOwner);
                        if (recordOwner != null)
                            recordOwner.removeRecord(m_recBankTrxBatchDist);
                    }
                    m_recBankTrxBatchDist.addNew();
                    m_recBankTrxBatchDist.getField(BankTrxBatchDist.BANK_TRX_BATCH_DETAIL_ID).setData(bookmark);
                    m_recBankTrxBatchDist.getField(BankTrxBatchDist.ACCOUNT_ID).moveFieldToThis(fieldAcct);
                    m_recBankTrxBatchDist.getField(BankTrxBatchDist.AMOUNT).moveFieldToThis(this.getOwner().getField(BankTrxBatchDetail.AMOUNT));
                    m_recBankTrxBatchDist.add();
                } catch (DBException ex)    {
                    ex.printStackTrace();
                }
            }
        }
    break;
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3218">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AddNewDistHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recBankTrxBatchDist != null)
	m_recBankTrxBatchDist.free();
m_recBankTrxBatchDist = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3219">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[if (m_recAcctDetail != null)
    m_recAcctDetail.free();
m_recAcctDetail = null;
if (m_recAcctDetailDist != null)
    m_recAcctDetailDist.free();
m_recAcctDetailDist = null;
if (m_recTransactionType != null)
    m_recTransactionType.free();
m_recTransactionType = null;
if (m_recPeriod != null)
    m_recPeriod.free();
m_recPeriod = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3220">
		<LastChanged>2012-01-25T17:18:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>checkFiles</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[RecordOwner recordOwner = this.findRecordOwner();
if (m_recAcctDetail == null)
{
    m_recAcctDetail = new AcctDetail(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recAcctDetail);
}
if (m_recAcctDetailDist == null)
{
    m_recAcctDetailDist = new AcctDetailDist(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recAcctDetailDist);
}
if (m_recTransactionType == null)
{
    m_recTransactionType = new TransactionType(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recTransactionType);
}
if (m_recPeriod == null)
{
    m_recPeriod = new Period(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recPeriod);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3221">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>startDistTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[this.checkFiles();
m_recAcctDetailDist.startDistTrx();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3222">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>endDistTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[if (m_recAcctDetailDist != null)
    m_recAcctDetailDist.endDistTrx();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3223">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,050</Sequence>
		<MethodName>onPostTrxDist*3</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseField fldAccountID, String strPostingType</MethodInterface>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[double dTrxAmount = 0;
TransactionType recTrxType = this.getTrxType(strPostingType);
if ((recTrxType != null) && (!recTrxType.getField(TransactionType.AMOUNT_FIELD).isNull()))
    dTrxAmount = this.getField(recTrxType.getField(TransactionType.AMOUNT_FIELD).toString()).getValue();
else
    dTrxAmount = this.getField(BaseTrx.AMOUNT_LOCAL).getValue();
return this.onPostTrxDist(fldAccountID, dTrxAmount, strPostingType);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3224">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getTrxType</MethodName>
		<LogicDescription/>
		<MethodReturns>TransactionType</MethodReturns>
		<MethodInterface>String strPostingType</MethodInterface>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[int iTrxGroupID = this.getTrxGroupID();
if (m_recTransactionType == null)
{
    m_recTransactionType = new TransactionType(this.getRecordOwner());
    if (this.getRecordOwner() != null)
        this.getRecordOwner().removeRecord(m_recTransactionType);
}
return m_recTransactionType.getTrxType(iTrxGroupID, strPostingType);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3226">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxCalcBalance</MethodClassName>
		<LogicSource><![CDATA[if (m_recBankTrx != null)
	m_recBankTrx.free();
m_recBankTrx = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3227">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxCalcBalance</MethodClassName>
		<LogicSource><![CDATA[super;
if (owner != null)
    this.fieldChanged(DBConstants.DISPLAY, DBConstants.INIT_MOVE);	// Do this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3228">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetDrControlScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3229">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3230">
		<LastChanged>2012-01-18T17:57:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.POST))
{
    int iDocMode = ScreenConstants.POST_MODE;
    Record recordMain = this.getScreenRecord();
    ScreenLocation itsLocation = null;
    BasePanel parentScreen = this.getParentScreen();
    if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_SAME_WINDOW)	// Use same window
        itsLocation = this.getScreenLocation();
    else
        parentScreen = (BasePanel)Screen.makeWindow(this.getTask().getApplication());
    boolean bUseBaseTable = true;
    boolean bLinkGridToQuery = false;
    boolean bCloneThisQuery = false;
    this.finalizeThisScreen();  // Validate current control, update record, get ready to close screen.
    boolean bReadCurrentRecord = false;
    this.setScreenRecord(null);
    this.removeRecord(recordMain);
    BasePanel pScreen = (BasePanel)recordMain.makeScreen(itsLocation, parentScreen, iDocMode, bCloneThisQuery, bReadCurrentRecord, bUseBaseTable, bLinkGridToQuery, null);
    if (pScreen == null)
        return false;
    this.free();
    return true;
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3231">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CurrentClearedHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>DateTimeField fldDateCurrentCleared, CurrencyField fldStartCleared</MethodInterface>
		<MethodClassName>CurrentClearedHandler</MethodClassName>
		<LogicSource><![CDATA[m_fldDateCurrentCleared = fldDateCurrentCleared;
m_fldStartCleared = fldStartCleared;

super;

m_bReadMove = false;
m_bInitMove = false;
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3232">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription>The field changed, recalc the starting balance.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrentClearedHandler</MethodClassName>
		<LogicSource><![CDATA[try {
    m_recBankTrx.close();
    while (m_recBankTrx.hasNext())
    {
        m_recBankTrx.next();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3233">
		<LastChanged>2012-01-31T19:08:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrentClearedHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (owner != null)
{
    if (m_recBankTrx == null)
    {
        RecordOwner recordOwner = this.getOwner().getRecord().findRecordOwner();
        m_recBankTrx = new BankTrx(recordOwner);
        if (recordOwner != null)
            recordOwner.removeRecord(m_recBankTrx);
        m_recBankTrx.setKeyArea(BankTrx.TRX_DATE_KEY);
        m_recBankTrx.addListener(new SubFileFilter(this.getOwner(), BankTrx.BANK_ACCT_ID, null, null, null, null));
        m_recBankTrx.addListener(new CompareFileFilter(m_recBankTrx.getField(BankTrx.DATE_RECONCILED), m_fldDateCurrentCleared, "<=", null, false));
        m_recBankTrx.addListener(new SubCountHandler(m_fldStartCleared, BankTrx.AMOUNT, true, false));    // Init this field override for other value
        this.fieldChanged(DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
    }
}
else
{
   if (m_recBankTrx != null)
    {
        m_recBankTrx.free();
        m_recBankTrx = null;
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3234">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>clone</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckReconDateHandler</MethodClassName>
		<LogicSource>return new CheckReconDateHandler(m_fldToCheck, m_fldToCompare);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3235">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckReconDateHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_fldToCheck instanceof BooleanField)
{
    m_fldToCheck.free();
    m_fldToCheck = null;
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3236">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ReconciledConverter</MethodName>
		<LogicDescription/>
		<MethodReturns>converter, null, fldTargetValue, strAltFieldDesc, bTrueIfMatch, null</MethodReturns>
		<MethodInterface>Converter converter, BaseField fldTargetValue, String strAltFieldDesc, boolean bTrueIfMatch</MethodInterface>
		<MethodClassName>ReconciledConverter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3237">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setState</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ReconciledConverter</MethodClassName>
		<LogicSource><![CDATA[if (bState)
    return ((BaseField)this.getField()).moveFieldToThis((BaseField)m_fldTargetValue, bDisplayOption, iMoveMode);
else
    return this.getField().setData(null, bDisplayOption, iMoveMode);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3238">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getState</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ReconciledConverter</MethodClassName>
		<LogicSource><![CDATA[if ((this.getField().isNull()) || (this.getField().getLength() == 0))
    return false;
else
    return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3241">
		<LastChanged>2012-02-03T19:56:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CountClearedHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null, null, null, fieldMain, ifsToCount, true, false, false</MethodReturns>
		<MethodInterface>BaseField fieldMain, String ifsToCount, String fsReconciled, boolean bCountPositive</MethodInterface>
		<MethodClassName>CountClearedHandler</MethodClassName>
		<LogicSource><![CDATA[m_fsReconciled = fsReconciled;
m_bCountPositive = bCountPositive;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3242">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getFieldValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CountClearedHandler</MethodClassName>
		<LogicSource><![CDATA[BaseField m_fldReconciled = this.getOwner().getField(m_fsReconciled);
if ((m_fldReconciled.isNull()) || (m_fldReconciled.getLength() == 0))
    return 0.00;
double dFieldValue = super.getFieldValue();
if ((m_bCountPositive) && (dFieldValue > 0))
    return dFieldValue;
if ((!m_bCountPositive) && (dFieldValue < 0))
    return dFieldValue;
return 0.00;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3243">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>computeValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CountNewClearedFieldHandler</MethodClassName>
		<LogicSource><![CDATA[this.checkFields();
double dCurrentCleared = m_fldCurrentCleared.getValue();
double dDepositsCleared = m_fldDepositsCleared.getValue();
double dCreditsCleared = m_fldCreditsCleared.getValue();
return dCurrentCleared + dDepositsCleared + dCreditsCleared;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3244">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>checkFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CountNewClearedFieldHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_fldCurrentCleared == null)
{
    Record record = this.getOwner().getRecord();
    m_fldCurrentCleared = record.getField(BankReconScreenRecord.START_CLEARED);
    m_fldDepositsCleared = record.getField(BankReconScreenRecord.DEPOSITS_CLEARED);
    m_fldCreditsCleared = record.getField(BankReconScreenRecord.CHECKS_CLEARED);
}
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3245">
		<LastChanged>2012-07-19T14:20:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CountNewClearedFieldHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null, iTargetFieldSeq, null</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CountNewClearedFieldHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3246">
		<LastChanged>2012-01-19T20:33:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconScreenRecord</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = new BankReconPostScreen(this, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3247">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconPostScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3248">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconPostScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new AssetDrControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3249">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconPostScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.POST))
{
    try {
        Record recAssetDrControl = this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE);
        recAssetDrControl.edit();
        ((DateTimeField)recAssetDrControl.getField(AssetDrControl.DATE_RECONCILED)).setDateTime(new Date(), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
        recAssetDrControl.set();
    } catch (DBException ex) {
        ex.printStackTrace();
    }
    strCommand = DBConstants.BACK;	// Go to previous screen
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3251">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>setupErrorMessage</MethodName>
		<LogicDescription>Set the error text and return a unsucessful flag</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strKey, String strDefaultMessage</MethodInterface>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[Task task = null;
if (this.getRecordOwner() != null)
    task = this.getRecordOwner().getTask();
if (task != null)
{
    String strMessage = null;
    if (strKey != null)
        strMessage = task.getString(strKey);
    if ((strMessage == null) || (strMessage == strKey))
        if (strDefaultMessage != null)
            strMessage = strDefaultMessage;
    task.setLastError(strMessage);
}
return false; // Error - not successful]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3252">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>cancelDistTrx</MethodName>
		<LogicDescription>Cancel the transaction in progress</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource>return false;    // Error - Not successful</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3253">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>onPostManualDist</MethodName>
		<LogicDescription><![CDATA[This is a special form of BaseTrx posting... used for manual G/L posting and for
Distribution where a history file is not referenced
DO NOT call inherited!]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>AcctDetailDist recAcctDetailDist</MethodInterface>
		<MethodClassName>AcctDetail</MethodClassName>
		<LogicSource><![CDATA[// This is a special form of BaseTrx posting... used for manual G/L posting and for
// Distribution where a history file is not referenced
// DO NOT call inherited!
try   {
    recAcctDetailDist.addNew();
    recAcctDetailDist.getField(AcctDetailDist.ACCT_DETAIL_ID).moveFieldToThis(this.getField(AcctDetail.ID));
    recAcctDetailDist.getField(AcctDetailDist.TRX_ID).moveFieldToThis(this.getField(AcctDetail.ID));  // No audit trail needed
    recAcctDetailDist.getField(AcctDetailDist.TRX_DESC_ID).moveFieldToThis(((ReferenceField)this.getField(AcctDetail.TRX_TYPE_ID)).getReference().getField(TransactionType.SOURCE_TRX_DESC_ID));
    recAcctDetailDist.getField(AcctDetailDist.TRX_DATE).moveFieldToThis(this.getField(AcctDetail.TRX_DATE));
    recAcctDetailDist.getField(AcctDetailDist.AMOUNT).moveFieldToThis(this.getField(AcctDetail.AMOUNT_LOCAL));
    recAcctDetailDist.getField(AcctDetailDist.TRX_ENTRY).moveFieldToThis(this.getField(AcctDetail.TRX_ENTRY));
    recAcctDetailDist.getField(AcctDetailDist.USER_ID).setValue(((UserField)recAcctDetailDist.getField(AcctDetailDist.USER_ID)).getUserID());
    recAcctDetailDist.add();
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3254">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailField</MethodClassName>
		<LogicSource>return new AcctDetail(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3255">
		<LastChanged>2012-01-18T17:46:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailField</MethodClassName>
		<LogicSource>return createScreenComponent(ScreenModel.EDIT_TEXT, itsLocation, targetScreen, converter, iDisplayFieldDesc, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3256">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoidOnDeleteHandler</MethodClassName>
		<LogicSource><![CDATA[if (iChangeType == DBConstants.DELETE_TYPE)
{
    Task task = null;
    if (this.getOwner().getRecordOwner() != null)
        task = this.getOwner().getRecordOwner().getTask();
    boolean bSuccess = ((BankTrx)this.getOwner()).onVoid();
    if (bSuccess)
        if (task != null)
    {
        String strError = "Transaction voided successfully";
        strError = ((BaseApplication)task.getApplication()).getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString(strError);
        return task.setLastError(strError);
    }
    return DBConstants.ERROR_RETURN;  // Don't delete the physical record
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3257">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrx</MethodClassName>
		<LogicSource><![CDATA[super;
this.addListener(new VoidOnDeleteHandler(null));
this.getField(BankTrx.INV_BALANCE).addListener(new UpdatePreferredSign(null, this.getField(BankTrx.INV_SIGN)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3258">
		<LastChanged>2012-03-27T01:25:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>setEnabled</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxIDField</MethodClassName>
		<LogicSource><![CDATA[if (!bEnable)
    super;
else
{
    for (int iPosition = 0; ; iPosition++)
    {
        ScreenComponent sField = this.getComponent(iPosition);
        if (sField == null)
            break;
        if (sField.getClass().getName().contains(ScreenModel.EDIT_TEXT))
            continue;   // Don't enable this control
        sField.setEnabled(bEnable);
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3261">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetail</MethodClassName>
		<LogicSource><![CDATA[super;
this.addListener(new NoDeleteModifyHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3264">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrxDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (m_fldTrxDescID != null)
    m_fldTrxDescID.free();
m_fldTrxDescID = null;
if (m_fldTrxID != null)
    m_fldTrxID.free();
m_fldTrxID = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3270">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryGridScreen</MethodClassName>
		<LogicSource>return new RequestHistory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3272">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, Profile.MESSAGE_LOG_SCREEN, MenuConstants.FORMDETAIL, Profile.MESSAGE_LOG_SCREEN, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3273">
		<LastChanged>2012-01-20T06:37:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Profile</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(REQUEST_HISTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Profile.MESSAGE_LOG_MODE) == Profile.MESSAGE_LOG_MODE)
    screen = Record.makeNewScreen(MESSAGE_LOG_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(MAINT_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3275">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileDetailBaseGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getHeaderRecord().getField(Profile.ID).addListener(new FieldReSelectHandler(this));  // Reselect on file change]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3276">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProfileDetailBaseGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProfileDetailBaseGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3278">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileDetailBaseGridScreen</MethodClassName>
		<LogicSource>return new Profile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3279">
		<LastChanged>2012-01-23T08:57:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileDetailBaseGridScreen</MethodClassName>
		<LogicSource>return new ProfileHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3280">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>RequestHistoryGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>RequestHistoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3281">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3282">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProfileDetailGridScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProfileDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3283">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3284">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ElectronicAddressGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ElectronicAddressGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3285">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ElectronicAddressGridScreen</MethodClassName>
		<LogicSource>return new ElectronicAddress(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3286">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ElectronicAddressGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3287">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileDetailGridScreen</MethodClassName>
		<LogicSource>return new Profile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3288">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ExtensionGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ExtensionGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3289">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ExtensionGridScreen</MethodClassName>
		<LogicSource>return new Extension(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3290">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ExtensionGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3291">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>InterestGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>InterestGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3292">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InterestGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3293">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InterestGridScreen</MethodClassName>
		<LogicSource>return new Interest(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3294">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>MembershipsGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>MembershipsGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3295">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MembershipsGridScreen</MethodClassName>
		<LogicSource>return new Memberships(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3296">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MembershipsGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3297">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileCertificationGridScreen</MethodClassName>
		<LogicSource>return new ProfileCertification(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3298">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileCertificationGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3299">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProfileCertificationGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProfileCertificationGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3300">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileCreditCardGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3301">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileCreditCardGridScreen</MethodClassName>
		<LogicSource>return new ProfileCreditCard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3302">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProfileCreditCardGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProfileCreditCardGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3303">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>DocumentGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProfile, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>DocumentGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3304">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DocumentGridScreen</MethodClassName>
		<LogicSource>return new Document(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3305">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[// I have to get the header record, since one of the sub-screens is the profile screen.
((BaseScreen)this.getParentScreen()).getHeaderRecord().getField(Profile.NAME).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);

Record record = ((BaseScreen)this.getParentScreen()).getHeaderRecord();
Converter converter = record.getCounterField();
new SSelectBox(this.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), this, converter, ScreenConstants.DONT_DISPLAY_DESC, record);

((BaseScreen)this.getParentScreen()).getHeaderRecord().getField(Profile.CONTACT).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3306">
		<LastChanged>2012-01-20T07:29:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileDetailBaseGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
ScreenLocation itsLocation = null;
BasePanel parentScreen = this.getParentScreen();
int iDocMode = m_iDisplayFieldDesc;
Record recHeader = this.getHeaderRecord();
if ((strCommand != null) && (strCommand.startsWith("Detail ")))
{
    this.removeRecord(recHeader);
    this.free();
    if ("Detail Passenger Detail".equalsIgnoreCase(strCommand))
        screen = new ProfileDetailGridScreen(recHeader, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    if ("Detail Request History".equalsIgnoreCase(strCommand))
        screen = (BaseScreen)Record.makeNewScreen(ProfileModel.REQUEST_HISTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, null, recHeader, true);
    if ("Detail Electronic Addresses".equalsIgnoreCase(strCommand))
        screen = new ElectronicAddressGridScreen(recHeader, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    if ("Detail Extensions".equalsIgnoreCase(strCommand))
        screen = new ExtensionGridScreen(recHeader, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    if ("Detail Memberships".equalsIgnoreCase(strCommand))
        screen = new MembershipsGridScreen(recHeader, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    if ("Detail Certifications".equalsIgnoreCase(strCommand))
        screen = new ProfileCertificationGridScreen(recHeader, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    if ("Detail Credit cards".equalsIgnoreCase(strCommand))
        screen = new ProfileCreditCardGridScreen(recHeader, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    if ("Detail Travel interest".equalsIgnoreCase(strCommand))
        screen = new InterestGridScreen(recHeader, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    if ("Detail Documents".equalsIgnoreCase(strCommand))
        screen = new DocumentGridScreen(recHeader, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);

    parentScreen.popHistory(1, false);      // Don't maintain the stack for these screens.

    return true;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3307">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileDetailBaseGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Passenger Detail", MenuConstants.FORMDETAIL, "Detail Passenger Detail", null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Request History", MenuConstants.FORMDETAIL, "Detail Request History", null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Electronic Addresses", MenuConstants.FORMDETAIL, "Detail Electronic Addresses", null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Extensions", MenuConstants.FORMDETAIL, "Detail Extensions", null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.FLUSH_LEFT, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Memberships", MenuConstants.FORMDETAIL, "Detail Memberships", null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Certifications", MenuConstants.FORMDETAIL, "Detail Certifications", null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Credit cards", MenuConstants.FORMDETAIL, "Detail Credit cards", null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Travel interest", MenuConstants.FORMDETAIL, "Detail Travel interest", null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Documents", MenuConstants.FORMDETAIL, "Detail Documents", null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3308">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3309">
		<LastChanged>2012-01-18T18:00:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EAddressStringField</MethodClassName>
		<LogicSource><![CDATA[converter = new FieldLengthConverter((Converter)converter, 40);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3310">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3311">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3312">
		<LastChanged>2012-03-27T10:23:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistory</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(RequestHistoryDetail.REQUEST_HISTORY_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(REQUEST_HISTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(REQUEST_HISTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3313">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryScreen</MethodClassName>
		<LogicSource>return new RequestHistory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3314">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryDetailGridScreen</MethodClassName>
		<LogicSource>return new RequestHistoryDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3315">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryDetailGridScreen</MethodClassName>
		<LogicSource>return new RequestHistory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3317">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryDetailGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3318">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>RequestHistoryDetailGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recRequestHistory, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>RequestHistoryDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3319">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3320">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Request recRequest = (Request)this.getRecord(Request.REQUEST_FILE);
Profile recProfile = (Profile)this.getRecord(Profile.PROFILE_FILE);
RequestDetail recRequestDetail = (RequestDetail)this.getRecord(RequestDetail.REQUEST_DETAIL_FILE);
BundleDetail recBundleDetail = (BundleDetail)this.getRecord(BundleDetail.BUNDLE_DETAIL_FILE);
Brochure recItem = (Brochure)this.getRecord(Brochure.BROCHURE_FILE);
RequestControl recRequestControl = (RequestControl)this.getRecord(RequestControl.REQUEST_CONTROL_FILE);
GridScreen gsBrocDetail = (GridScreen)this.getSField(this.getSFieldCount() - 1);
RequestInput recItemReqInput = (RequestInput)gsBrocDetail.getRecord(RequestInput.REQUEST_INPUT_FILE);

recRequest.getField(Request.SEND_VIA_CODE).addListener(new InitOnceFieldHandler(null));
recRequest.getField(Request.SEND_VIA_CODE).addListener(new InitFieldHandler(recRequestControl.getField(RequestControl.SEND_VIA_CODE)));
recRequest.getField(Request.BUNDLE_ID).addListener(new InitFieldHandler(recRequestControl.getField(RequestControl.BUNDLE_ID)));
recRequest.getField(Request.BUNDLE_QTY).addListener(new InitFieldHandler(recRequestControl.getField(RequestControl.BROCHURE_QTY)));
// Here's the code to move the agency info on select
ReadSecondaryHandler pSecondaryBehavior = new ReadSecondaryHandler(recProfile, Profile.PROFILE_CODE_KEY);
pSecondaryBehavior.setRespondsToMode(DBConstants.READ_MOVE, false);
recRequest.getField(Request.PROFILE_CODE).addListener(pSecondaryBehavior);

pSecondaryBehavior.addFieldSeqPair(Request.PROFILE_ID);
pSecondaryBehavior.addFieldSeqPair(Request.PROFILE_CODE, Profile.PROFILE_CODE, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK);
pSecondaryBehavior.addFieldSeqPair(Request.GENERIC_NAME, Profile.GENERIC_NAME, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK);
pSecondaryBehavior.addFieldSeqPair(Request.ADDRESS_LINE_1, Profile.ADDRESS_LINE_1, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK);
pSecondaryBehavior.addFieldSeqPair(Request.ADDRESS_LINE_2, Profile.ADDRESS_LINE_2, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK);
pSecondaryBehavior.addFieldSeqPair(Request.CITY_OR_TOWN, Profile.CITY_OR_TOWN, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK);
pSecondaryBehavior.addFieldSeqPair(Request.STATE_OR_REGION, Profile.STATE_OR_REGION, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK);
pSecondaryBehavior.addFieldSeqPair(Request.POSTAL_CODE, Profile.POSTAL_CODE, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK);
pSecondaryBehavior.addFieldSeqPair(Request.COUNTRY, Profile.COUNTRY, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK);
pSecondaryBehavior.addFieldSeqPair(Request.ATTENTION, Profile.NAME_ORDERED, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK);
pSecondaryBehavior.addFieldSeqPair(Request.EMAIL, Profile.EMAIL, DBConstants.MOVE_TO_DEPENDENT, DBConstants.DONT_MOVE_DEPENDENT_BACK);

recRequest.getField(Request.PROFILE_CODE).addListener(new ChangeFocusOnChangeHandler(recRequest.getField(Request.ATTENTION)));

recBundleDetail.setKeyArea(BundleDetail.BUNDLE_ID_KEY);
recBundleDetail.addListener(new SubFileFilter(recRequest.getField(Request.BUNDLE_ID), BundleDetail.BUNDLE_ID, null, null, null, null));

recRequestDetail.addListener(new SubFileFilter(recRequest));
// Set up the initial detail

recItemReqInput.getField(RequestInput.BROCHURE_QTY).addListener(new InitFieldHandler(recRequest.getField(Request.BUNDLE_QTY)));
// These will guarantee that update calls the SetupBrocDetail listener
recItemReqInput.getField(RequestInput.BROCHURE_QTY).addListener(new SetDirtyOnChangeHandler(recRequest.getField(Request.BUNDLE_ID), false, true));
recItemReqInput.getField(RequestInput.BROCHURE_ID).addListener(new SetDirtyOnChangeHandler(recRequest.getField(Request.BUNDLE_ID), false, true));

if ((recRequest.getEditMode() == Constants.EDIT_NONE) || (recRequest.getEditMode() == Constants.EDIT_ADD))
{
    recRequest.getField(Request.BUNDLE_ID).initField(DBConstants.DISPLAY);
    recRequest.getField(Request.BUNDLE_QTY).initField(DBConstants.DISPLAY);
    this.setupBrocDetail(recRequest, recRequestDetail, recBundleDetail, recItem, recItemReqInput);
}

recRequest.getField(Request.BUNDLE_ID).addListener(new SetBrocDetailHandler(this, gsBrocDetail, recRequest, recRequestDetail, recBundleDetail, recItem, recItemReqInput));
recRequest.getField(Request.BUNDLE_QTY).addListener(new SetBrocDetailHandler(this, gsBrocDetail, recRequest, recRequestDetail, recBundleDetail, recItem, recItemReqInput));

recRequest.getField(Request.ID).addListener(new FieldReSelectHandler(gsBrocDetail)); // Reselect on file change

recRequest.addListener(new SetupBrocDetailHandler(recRequest, recRequestDetail, recBundleDetail, recItem, recItemReqInput));

recRequest.setOpenMode(recRequest.getOpenMode() | DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);

InitOnceFieldHandler listener = null;
recRequest.getField(Request.BUNDLE_ID).addListener(listener = new InitOnceFieldHandler(null));
listener.setFirstTime(false);   // Don't allow any more changes
recRequest.getField(Request.BUNDLE_QTY).addListener(listener = new InitOnceFieldHandler(null));
listener.setFirstTime(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3321">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestScreen</MethodClassName>
		<LogicSource><![CDATA[if ("Request Detail".equalsIgnoreCase(strCommand))
{
    Record recProfile = this.getRecord(Profile.PROFILE_FILE);
    ScreenLocation itsLocation = null;
    int iDocMode = ScreenConstants.DETAIL_MODE;
    boolean bCloneThisQuery = false;
    boolean bReadCurrentRecord = true;
    boolean bUseBaseTable = true;
    boolean bLinkGridToQuery = true;
    BasePanel parentScreen = Screen.makeWindow(this.getTask().getApplication());
    recProfile.makeScreen(itsLocation, parentScreen, iDocMode, bCloneThisQuery, bReadCurrentRecord, bUseBaseTable, bLinkGridToQuery, null);
    return true;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3322">
		<LastChanged>2012-01-21T06:34:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupScreenFieldView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHtmlDetailGrid</MethodClassName>
		<LogicSource><![CDATA[if (ScreenModel.HTML_TYPE.equalsIgnoreCase(this.getViewFactory().getViewSubpackage()))
	return new HRequestHtmlDetailGrid(this, bEditableControl);
else
	return null;	// Not supported!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3323">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>isPrintableControl</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>int iHtmlAttributes</MethodInterface>
		<MethodClassName>HRequestHtmlDetailGrid</MethodClassName>
		<LogicSource><![CDATA[return true;	// Typically input sub-screens are not displayed, this IS]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3324">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingInField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Booking.ID_KEY, Booking.GENERIC_NAME, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3325">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryDisplayScreen</MethodClassName>
		<LogicSource>return new RequestHistory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3326">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryDisplayScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setAppending(false);
this.setEnabled(false);
this.getMainRecord().getField(RequestHistory.HIST_REPRINT).setEnabled(true);

this.getMainRecord().setKeyArea(RequestHistory.HIST_REPRINT_KEY);
this.getMainRecord().getKeyArea(RequestHistory.HIST_REPRINT_KEY).getKeyField(DBConstants.MAIN_KEY_FIELD).setKeyOrder(DBConstants.DESCENDING);
this.getMainRecord().getKeyArea(RequestHistory.HIST_REPRINT_KEY).getKeyField(DBConstants.MAIN_KEY_FIELD+1).setKeyOrder(DBConstants.DESCENDING);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3327">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryDisplayScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3328">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>NameOrderedField</MethodClassName>
		<LogicSource><![CDATA[converter = new FirstMLastConverter((Converter)converter, Profile.NAME_PREFIX, Profile.NAME_FIRST, Profile.NAME_MIDDLE, Profile.NAME_SUR, Profile.NAME_SUFFIX, Profile.NAME_TITLE);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3329">
		<LastChanged>2012-01-31T18:45:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestLabelsRestore</MethodClassName>
		<LogicSource><![CDATA[// DO NOT CALL INHERITED (my listeners are different)
this.getRecord(RequestHistory.REQUEST_HISTORY_FILE).setKeyArea(RequestHistory.HIST_REPRINT_KEY);
this.getRecord(RequestHistory.REQUEST_HISTORY_FILE).addListener(new SubFileFilter(this.getScreenRecord().getField(RequestLabelsScreenRecord.TRUE_FIELD), RequestHistory.HIST_REPRINT, null, null, null, null));
this.getRecord(RequestDetail.REQUEST_DETAIL_FILE).addListener(new SubFileFilter(this.getRecord(Request.REQUEST_FILE)));
this.getRecord(RequestHistoryDetail.REQUEST_HISTORY_DETAIL_FILE).addListener(new SubFileFilter(this.getRecord(RequestHistory.REQUEST_HISTORY_FILE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3330">
		<LastChanged>2013-01-22T14:06:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription>Restore the marked history</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestLabelsRestore</MethodClassName>
		<LogicSource><![CDATA[Record recRequest = this.getRecord(Request.REQUEST_FILE);
Record recRequestDetail = this.getRecord(RequestDetail.REQUEST_DETAIL_FILE);
Record recRequestHistory = this.getRecord(RequestHistory.REQUEST_HISTORY_FILE);
Record recRequestHistoryDetail = this.getRecord(RequestHistoryDetail.REQUEST_HISTORY_DETAIL_FILE);

try {
    recRequestHistory.close();
    while (recRequestHistory.hasNext())
    {
        recRequestHistory.next();
        recRequestHistory.edit();

        recRequest.addNew();
        recRequest.moveFields(recRequestHistory, Record.MOVE_BY_NAME, true, DBConstants.SCREEN_MOVE, true, false, false, false);   // Move all fields to the history record
        recRequest.add();
        Object bookmark = recRequest.getLastModified(DBConstants.BOOKMARK_HANDLE);
        recRequest.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);

        this.updateRequestDetail(recRequestDetail, recRequestHistoryDetail);

        recRequestHistory.getField(RequestHistory.HIST_REPRINT).setState(false);
        recRequestHistory.set();
    }
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3331">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MarkLabelsToPrint</MethodClassName>
		<LogicSource>return new Request(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3332">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MarkLabelsToPrint</MethodClassName>
		<LogicSource><![CDATA[Record recRequest = this.getMainRecord();
try {
    recRequest.close();
    while (recRequest.hasNext())
    {
        recRequest.next();
        recRequest.edit();
        recRequest.getField(Request.PRINT_NOW).setState(true);
        recRequest.set();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3333">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MarkLabelsToPrint</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(RequestLabelsScreenRecord.SEND_VIA_ID).setData(this.getProperty("sendvia"));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(Request.SEND_VIA_CODE), this.getScreenRecord().getField(RequestLabelsScreenRecord.SEND_VIA_ID), "="));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3334">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MarkLabelsToPrint</MethodClassName>
		<LogicSource>return new RequestLabelsScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3335">
		<LastChanged>2013-01-22T14:07:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>updateRequestDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recRequestDetail, Record recRequestHistoryDetail</MethodInterface>
		<MethodClassName>RequestLabelsRestore</MethodClassName>
		<LogicSource><![CDATA[try   {
    recRequestHistoryDetail.close();
    while (recRequestHistoryDetail.hasNext())
    {
        recRequestHistoryDetail.next();

        recRequestDetail.addNew();
        recRequestDetail.moveFields(recRequestHistoryDetail, Record.MOVE_BY_NAME, true, DBConstants.SCREEN_MOVE, true, false, false, false);   // Move all fields to the history record
        recRequestDetail.add();  
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3336">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryDisplayScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super.addNavButtons();  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3337">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestHistoryDisplayScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3345">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintXMLLabels</MethodClassName>
		<LogicSource>return new Request(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3346">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintXMLLabels</MethodClassName>
		<LogicSource><![CDATA[super;
new RequestDetail(this); 
new Brochure(this);
new RequestControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3347">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintXMLLabels</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(RequestLabelsScreenRecord.SEND_VIA_ID).addListener(new InitFieldHandler(this.getRecord(RequestControl.REQUEST_CONTROL_FILE).getField(RequestControl.SEND_VIA_CODE)));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(Request.SEND_VIA_CODE), this.getScreenRecord().getField(RequestLabelsScreenRecord.SEND_VIA_ID), "="));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(Request.PRINT_NOW), this.getScreenRecord().getField(RequestLabelsScreenRecord.TRUE_FIELD), "="));
this.getRecord(RequestDetail.REQUEST_DETAIL_FILE).addListener(new SubFileFilter(this.getMainRecord()));
this.getMainRecord().addListener(new SetupLabelTextHandler(null)); 
this.getRecord(RequestDetail.REQUEST_DETAIL_FILE).getField(RequestDetail.BROCHURE_ID).addListener(new ReadSecondaryHandler(this.getRecord(Brochure.BROCHURE_FILE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3348">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintXMLLabels</MethodClassName>
		<LogicSource>return new RequestLabelsScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3349">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintXMLLabels</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3350">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintXMLLabels</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Request History", MenuConstants.LOOKUP, "Request History", null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Canned Labels", MenuConstants.PRINT, "Canned Labels", null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3351">
		<LastChanged>2012-01-23T09:38:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintXMLLabels</MethodClassName>
		<LogicSource>return new RequestLabelsXMLToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3352">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintXMLLabels</MethodClassName>
		<LogicSource><![CDATA[if ("Request History".equalsIgnoreCase(strCommand))
{
    BasePanel parentScreen = Screen.makeWindow(this.getTask().getApplication());
    new RequestHistoryDisplayScreen(null, null, parentScreen, null, 0, null);
    return true;
}
Map properties = new HashMap();
properties.put("sendvia", this.getScreenRecord().getField(RequestLabelsScreenRecord.SEND_VIA_ID).getData());
if (strCommand.equalsIgnoreCase(MenuConstants.PRINT))
{
    // Step 1 - Move any history to the Request file before starting.
    RequestLabelsRestore update = new RequestLabelsRestore(this.getTask(), null, properties);
    update.run();
    update.free();
    // Step 2 - Mark all the records to print (In case someone submits a request between print and update).
    MarkLabelsToPrint markProcess = new MarkLabelsToPrint(this.getTask(), null, properties);
    markProcess.run();
    markProcess.free();
    // DO NOT RETURN, continue "printing".
}
if ("Canned Labels".equalsIgnoreCase(strCommand))
{
    Record record = null;//this.getMainRecord();
    BasePanel parentScreen = this.getParentScreen();
    ScreenLocation itsLocation = this.getScreenLocation();
    FieldConverter fieldConverter = null;
    int iDisplayFieldDesc = ScreenConstants.DEFAULT_DISPLAY;
    int iSendViaID = (int)this.getScreenRecord().getField(RequestLabelsScreenRecord.SEND_VIA_ID).getValue();
    this.free();        // Remove this screen
    parentScreen.popHistory(1, false);  // Back should skip this screen
    BaseScreen screen = new RequestPrintLabels(record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties);
    screen.getScreenRecord().getField(RequestLabelsScreenRecord.SEND_VIA_ID).setValue(iSendViaID);   // Sync

    strCommand = MenuConstants.PRINT;
    return screen.doCommand(strCommand, sourceSField, iCommandOptions);
}
boolean bSuccess = super;
if (bSuccess)
    if (strCommand.equalsIgnoreCase(MenuConstants.PRINT))
{       // Move the printed labels to history
    RequestLabelsUpdate update = new RequestLabelsUpdate(this.getTask(), null, properties);
    update.run();
    update.free();
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3353">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getServletPath</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestPrintXMLLabels</MethodClassName>
		<LogicSource>return super.getServletPath(DBParams.XHTMLSERVLET); // Use cocoon</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3354">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestLabelsXMLToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3356">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchGridScreen</MethodClassName>
		<LogicSource>return new BankTrxBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3357">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3358">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchScreen</MethodClassName>
		<LogicSource>return new BankTrxBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3359">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3360">
		<LastChanged>2012-01-31T19:00:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record recAssetDrControl = this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE);
this.getMainRecord().getField(BankTrxBatch.BANK_ACCT_ID).addListener(new InitFieldHandler(recAssetDrControl.getField(AssetDrControl.BANK_ACCT_ID)));
this.getMainRecord().setKeyArea(BankTrxBatch.USER_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(BankTrxScreenRecord.USER_ID), BankTrxBatch.USER_ID, null, null, null, null));
this.getScreenRecord().getField(BankTrxScreenRecord.USER_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3361">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.POST, MenuConstants.POST, null);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3362">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchGridScreen</MethodClassName>
		<LogicSource>return new BankTrxScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3363">
		<LastChanged>2012-01-31T10:43:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);

this.getScreenRecord().getField(BankTrxScreenRecord.USER_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3365">
		<LastChanged>2012-01-31T18:59:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().getField(BankTrxBatch.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE).getField(AssetDrControl.BANK_ACCT_ID)));

this.getScreenRecord().getField(BankTrxScreenRecord.USER_ID).moveFieldToThis(this.getMainRecord().getField(BankTrxBatch.USER_ID));
this.getMainRecord().setKeyArea(BankTrxBatch.USER_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(BankTrxScreenRecord.USER_ID), BankTrxBatch.USER_ID, null, null, null, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3366">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchScreen</MethodClassName>
		<LogicSource>return new BankTrxScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3367">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3368">
		<LastChanged>2012-03-27T11:10:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatch</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.POST_MODE)
    screen = Record.makeNewScreen(BANK_TRX_BATCH_POST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(BANK_TRX_BATCH_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(BANK_TRX_BATCH_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3369">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
String strDesc = "Distribution";
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
if (this.getTask() != null)
    strDesc = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(strDesc);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3370">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[String strDesc = "Distribution";
if (this.getTask() != null)
    strDesc = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(strDesc);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strDesc, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3371">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new AssetDrControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3372">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new AssetDrControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3373">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatch</MethodClassName>
		<LogicSource><![CDATA[super;
this.addListener(new SubFileIntegrityHandler(BankTrxBatchDetail.class.getName(), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3374">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchField</MethodClassName>
		<LogicSource>return new BankTrxBatch(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3375">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchField</MethodClassName>
		<LogicSource>return new CashBatch(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3376">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3377">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3378">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetail</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SubFileIntegrityHandler(CashBatchDist.class.getName(), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3379">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistGridScreen</MethodClassName>
		<LogicSource>return new CashBatchDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3380">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CashBatchDistGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recCashBatchDetail, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CashBatchDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3381">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistGridScreen</MethodClassName>
		<LogicSource>return new CashBatchDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3382">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).getField(CashBatchDetail.ID).addListener(new FieldReSelectHandler(this));

this.getRecord(CashBatchDist.CASH_BATCH_DIST_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), CashBatchDist.AMOUNT, false, true));
this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE).addListener(new CalcBalanceHandler(this.getScreenRecord().getField(CashBatchScreenRecord.END_BALANCE), this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).getField(CashBatchDetail.AMOUNT), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3383">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistGridScreen</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3384">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistGridScreen</MethodClassName>
		<LogicSource>return this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3385">
		<LastChanged>2012-01-23T08:57:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistGridScreen</MethodClassName>
		<LogicSource>return new CashBatchDetailHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3386">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3387">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistScreen</MethodClassName>
		<LogicSource>return new CashBatchDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3388">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;

new CashBatchDetail(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3389">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));

this.getRecord(CashBatchDist.CASH_BATCH_DIST_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), CashBatchDist.AMOUNT, false, true));
this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE).addListener(new CalcBalanceHandler(this.getScreenRecord().getField(CashBatchScreenRecord.END_BALANCE), this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE).getField(CashBatchDetail.AMOUNT), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3390">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3391">
		<LastChanged>2012-01-23T08:57:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistScreen</MethodClassName>
		<LogicSource>return new CashBatchDetailHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3392">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistScreen</MethodClassName>
		<LogicSource>return this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3393">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDistScreen</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3394">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3395">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3396">
		<LastChanged>2012-03-27T11:21:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetail</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(CashBatchDist.CASH_BATCH_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.POST_MODE)
    screen = Record.makeNewScreen(CashBatch.CASH_BATCH_POST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(CASH_BATCH_DETAIL_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(CASH_BATCH_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3397">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addCurrentToCache</MethodName>
		<LogicDescription><![CDATA[Add the current dist record to the cache under this key.
@return The description for display.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Object bookmarkKey</MethodInterface>
		<MethodClassName>DistributionConverter</MethodClassName>
		<LogicSource><![CDATA[// Then, update the cache
String strResult = this.getDisplayField(null).toString();
String strAccountNo = ((ReferenceField)m_recBankTrxBatchDist.getField(BankTrxBatchDist.ACCOUNT_ID)).getReference().getField(Account.ACCOUNT_NO).toString();
m_htCache.put(bookmarkKey, strResult);
m_htCacheAccountNo.put(bookmarkKey, strAccountNo);
return strResult;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3398">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>createNewDist</MethodName>
		<LogicDescription>Create a new dist record using the detail record information</LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseField referenceField</MethodInterface>
		<MethodClassName>DistributionConverter</MethodClassName>
		<LogicSource><![CDATA[// Now create the new distribution
Record recBankTrxBatchDetail = this.getDetailRecord();
m_recBankTrxBatchDist.addNew();
m_recBankTrxBatchDist.getField(BankTrxBatchDist.ACCOUNT_ID).moveFieldToThis(referenceField);
m_recBankTrxBatchDist.getField(BankTrxBatchDist.AMOUNT).moveFieldToThis(recBankTrxBatchDetail.getField(BankTrxBatchDetail.AMOUNT));
m_recBankTrxBatchDist.add();]]></LogicSource>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3399">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>160</Sequence>
		<MethodName>getDetailRecord</MethodName>
		<LogicDescription>Get the detail record (dist's header) for this record.</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>DistributionConverter</MethodClassName>
		<LogicSource><![CDATA[Record recBankTrxBatchDetail = (Record)((BaseField)this.getField()).getRecord().getRecordOwner().getRecord(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE);
return recBankTrxBatchDetail;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3400">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>155</Sequence>
		<MethodName>makeDistRecord</MethodName>
		<LogicDescription>Create the dist record and set up the sub-file</LogicDescription>
		<MethodReturns>BankTrxBatchDist</MethodReturns>
		<MethodInterface>RecordOwner recordOwner, Record recBatchDetail</MethodInterface>
		<MethodClassName>DistributionConverter</MethodClassName>
		<LogicSource><![CDATA[RecordOwner ro = recordOwner;
if (recordOwner == null)
    if (this.getField() != null)
        ro = ((BaseField)this.getField()).getRecord().findRecordOwner();
BankTrxBatchDist recBankTrxBatchDist = new BankTrxBatchDist(ro);
if (recordOwner == null)
{
    if (recBankTrxBatchDist.getRecordOwner() != null)
        recBankTrxBatchDist.getRecordOwner().removeRecord(recBankTrxBatchDist);
    if (this.getField() != null)
        if (this.getField().getRecord() != null)
            ((BaseField)this.getField()).getRecord().addListener(new FreeOnFreeHandler(recBankTrxBatchDist));
}
recBankTrxBatchDist.setKeyArea(BankTrxBatchDist.BANK_TRX_BATCH_DETAIL_ID_KEY);
recBankTrxBatchDist.addListener(new SubFileFilter(recBatchDetail));
return recBankTrxBatchDist;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3401">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>createNewDist</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashDistConverter</MethodClassName>
		<LogicSource><![CDATA[// Now create the new distribution
Record recCashBatchDetail = this.getDetailRecord();
m_recBankTrxBatchDist.addNew();
m_recBankTrxBatchDist.getField(CashBatchDist.BOOKING_ID).moveFieldToThis(referenceField);
m_recBankTrxBatchDist.getField(CashBatchDist.AMOUNT).moveFieldToThis(recCashBatchDetail.getField(CashBatchDetail.AMOUNT));
m_recBankTrxBatchDist.add();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3402">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeDistRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashDistConverter</MethodClassName>
		<LogicSource><![CDATA[RecordOwner ro = recordOwner;
if (recordOwner == null)
    if (this.getField() != null)
        ro = ((BaseField)this.getField()).getRecord().findRecordOwner();
CashBatchDist recCashBatchDist = this.createDistRecord(ro);
if (recordOwner == null)
{
    if (recCashBatchDist.getRecordOwner() != null)
        recCashBatchDist.getRecordOwner().removeRecord(recCashBatchDist);
    if (this.getField() != null)
        if (this.getField().getRecord() != null)
            ((BaseField)this.getField()).getRecord().addListener(new FreeOnFreeHandler(recCashBatchDist));
}
recCashBatchDist.setKeyArea(CashBatchDist.CASH_BATCH_DETAIL_ID_KEY);
recCashBatchDist.addListener(new SubFileFilter(recBatchDetail));
return recCashBatchDist;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3403">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getDetailRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashDistConverter</MethodClassName>
		<LogicSource><![CDATA[Record recCashBatchDetail = (Record)((BaseField)this.getField()).getRecord().getRecordOwner().getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE);
return recCashBatchDetail;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3404">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addCurrentToCache</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashDistConverter</MethodClassName>
		<LogicSource><![CDATA[// Then, update the cache
String strResult = SPLIT;
if (!m_recBankTrxBatchDist.getField(CashBatchDist.BOOKING_ID).isNull())
{
    strResult = this.getDisplayField(null).toString();
    m_htCache.put(bookmarkKey, strResult);
    String strAccountNo = ((ReferenceField)m_recBankTrxBatchDist.getField(CashBatchDist.BOOKING_ID)).getReference().getField(Booking.ID).toString();
    m_htCacheAccountNo.put(bookmarkKey, strAccountNo);
}
return strResult;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3405">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashDistConverter</MethodClassName>
		<LogicSource><![CDATA[ScreenComponent sField = (ScreenField)converter.getField().setupDefaultView(itsLocation, targetScreen, converter, iDisplayFieldDesc, properties);

Record recBooking = ((ReferenceField)converter.getField()).getReferenceRecord();

// Don't want to display the booking number if code doesn't exist (too confusing)
//ScreenField sFieldNo = recBooking.getField(Booking.CODE).getSFieldAt(0);
//Converter fldConverter = sFieldNo.getConverter();
//BaseField field = (BaseField)fldConverter.getField();
//if (fldConverter != field)
//    fldConverter.free();   // not necessary anymore.
//sFieldNo.setConverter(new AccountNoDistConverter(field, this));

ScreenComponent sFieldDesc = this.getDisplayField(recBooking).getComponent(0);
sFieldDesc.setConverter(new AccountDescDistConverter((Converter)sFieldDesc.getConverter(), this));

properties = new HashMap<String,Object>();
properties.put(ScreenModel.COMMAND, MenuConstants.FORMDETAIL);
properties.put(ScreenModel.IMAGE, MenuConstants.FORMDETAIL);
BaseField.createScreenComponent(ScreenModel.CANNED_BOX, targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, null, ScreenConstants.DEFAULT_DISPLAY, properties);
((BaseField)this.getField()).addListener(new ReferenceChangedHandler(this));

((BaseField)this.getField()).getRecord().addListener(new AddNewCashDistHandler(null));
return sField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3406">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getDisplayField</MethodName>
		<LogicDescription><![CDATA[Get the description display field.
@recSecondary The (optional) secondary record.
@return the field.]]></LogicDescription>
		<MethodReturns>BaseField</MethodReturns>
		<MethodInterface>Record recSecondary</MethodInterface>
		<MethodClassName>DistributionConverter</MethodClassName>
		<LogicSource><![CDATA[if (recSecondary == null)
	recSecondary = ((ReferenceField)m_recBankTrxBatchDist.getField(BankTrxBatchDist.ACCOUNT_ID)).getReference();
return recSecondary.getField(Account.DESCRIPTION);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3407">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getDisplayField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashDistConverter</MethodClassName>
		<LogicSource><![CDATA[if (recSecondary == null)
    recSecondary = ((ReferenceField)m_recBankTrxBatchDist.getField(CashBatchDist.BOOKING_ID)).getReference();
return recSecondary.getField(Booking.DESCRIPTION);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3408">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AddNewCashDistHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
if (!this.getOwner().getTableNames(false).equalsIgnoreCase(CashBatchDetail.CASH_BATCH_DETAIL_FILE))
    return DBConstants.NORMAL_RETURN;   // If this is being overidden, don't do rest of code.
switch (iChangeType)
{
    case DBConstants.AFTER_ADD_TYPE:
        BaseField fldBookingID = this.getOwner().getField(CashBatchDetail.BOOKING_ID);
        if (!fldBookingID.isNull())
        {
            Object bookmark = this.getOwner().getLastModified(DBConstants.BOOKMARK_HANDLE);
            if (bookmark != null)
            {
                try {
                    if (m_recBankTrxBatchDist == null)
                    {
                        RecordOwner recordOwner = this.getOwner().findRecordOwner();
                        m_recBankTrxBatchDist = new CashBatchDist(recordOwner);
                        if (recordOwner != null)
                            recordOwner.removeRecord(m_recBankTrxBatchDist);
                    }
                    m_recBankTrxBatchDist.addNew();
                    m_recBankTrxBatchDist.getField(CashBatchDist.BANK_TRX_BATCH_DETAIL_ID).setData(bookmark);
                    m_recBankTrxBatchDist.getField(CashBatchDist.BOOKING_ID).moveFieldToThis(fldBookingID);
                    m_recBankTrxBatchDist.getField(CashBatchDist.AMOUNT).moveFieldToThis(this.getOwner().getField(CashBatchDetail.AMOUNT));
                    m_recBankTrxBatchDist.add();
                } catch (DBException ex)    {
                    ex.printStackTrace();
                }
            }
        }
    break;
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3409">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.POST))
    return this.onPost();
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3410">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>onPost</MethodName>
		<LogicDescription><![CDATA[Post all the transactions in this batch.
@return true if successful.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = true;
Record recBaseTrxBatchDetail = this.getDetailRecord();
try {
    if (!this.checkValidHeader())
        return false;
    if (!this.updateBaseTrx())
        return false;
    recBaseTrxBatchDetail.close();
    while (recBaseTrxBatchDetail.hasNext())
    {
        recBaseTrxBatchDetail.next();
        bSuccess = this.onPostTrx() & bSuccess;
        if (!bSuccess)
            break;
        recBaseTrxBatchDetail.close();  // Since position may have changed
    }
    if (bSuccess)
        bSuccess = this.removeTrxHeader();
} catch (DBException ex)    {
    ex.printStackTrace();
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3411">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>650</Sequence>
		<MethodName>getDetailRecord</MethodName>
		<LogicDescription>Get the batch detail record</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3412">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>checkValidHeader</MethodName>
		<LogicDescription><![CDATA[Is the batch header record valid?
@return true if valid (if false, set the last error).]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[try {
    BaseApplication application = (BaseApplication)this.getTask().getApplication();
    this.getMainRecord().setOpenMode(this.getMainRecord().getOpenMode() & ~DBConstants.OPEN_READ_ONLY); // Make sure not read only
    if (this.getMainRecord().edit() != DBConstants.NORMAL_RETURN)
    {
        this.displayError(application.getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString("Batch in use, can't post"));
        return false;
    }
    if (this.getMainRecord().getEditMode() != Constants.EDIT_IN_PROGRESS)
    {   // Error - I need exclusive use of this record
        this.displayError(application.getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString("Not a valid batch, can't post"));
        return false;
    }
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}
return true;    // Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3413">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>checkValidHeader</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchPost</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = super;
if (!bSuccess)
    return bSuccess;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
BankAcct recBankAcct = (BankAcct)((ReferenceField)this.getMainRecord().getField(BankTrxBatch.BANK_ACCT_ID)).getReference();
if (recBankAcct == null)
{
    this.displayError(application.getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString("Invalid Bank account, can't post"));
    return false;
}
BaseField fldDefAccountID = this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE).getField(AssetDrControl.ACCOUNT_ID);
if (fldDefAccountID.isNull())
{
    this.displayError(application.getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString("No default account set in control file"));
    return false;
}
return true;    // Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3414">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getDetailRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchPost</MethodClassName>
		<LogicSource>return this.getRecord(BankTrxBatchDetail.BANK_TRX_BATCH_DETAIL_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3415">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getDistRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchPost</MethodClassName>
		<LogicSource>return this.getRecord(BankTrxBatchDist.BANK_TRX_BATCH_DIST_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3416">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getDistRecord</MethodName>
		<LogicDescription><![CDATA[Return the distribution detail record.
@return The dist record.]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3417">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>onPostTrx</MethodName>
		<LogicDescription><![CDATA[Post this detail transaction to the BaseTrx and to the G/L.
@return true If successful.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[if (!this.checkValidDetail())
    return false;
if (!this.updateDetailTrx())
    return false;
if (!this.postDetailTrx())
    return false;
return this.removeDetailTrx();	// Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3418">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,600</Sequence>
		<MethodName>checkValidDetail</MethodName>
		<LogicDescription><![CDATA[Make sure this batch detail trx is valid.
@return True if batch is okay.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
Record recBankTrxBatchDetail = this.getDetailRecord();
try   {
    if (recBankTrxBatchDetail.getEditMode() == Constants.EDIT_CURRENT)
    {
        if (recBankTrxBatchDetail.edit() != DBConstants.NORMAL_RETURN)
        {
            this.displayError(application.getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString("Batch in use, can't post"));
            return false;
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}
return true;	// Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3419">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>checkValidDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchPost</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = super;
Record recBankTrxBatchDetail = this.getDetailRecord();
if (bSuccess)
    if (recBankTrxBatchDetail.getField(BankTrxBatchDetail.TRX_DATE).isNull())
{
    BaseApplication application = (BaseApplication)this.getTask().getApplication();
    this.displayError(application.getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString("You must have a transaction date, can't post"));
    return false;
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3420">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,800</Sequence>
		<MethodName>postDetailTrx</MethodName>
		<LogicDescription><![CDATA[Post this detail transaction to the BaseTrx and the G/L.
@return True if successful.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[BaseTrx recBaseTrx = this.getBaseTrx();
recBaseTrx.startDistTrx();
int iTrxGroupID = this.getTrxGroupID(this.getDetailRecord());
TransactionType recTransactionType = recBaseTrx.getTransactionType();
boolean bSuccess = this.postBaseTrx(recBaseTrx, recTransactionType.getTrxType(iTrxGroupID, PostingType.TRX_POST));
if (!bSuccess)
    return bSuccess;
bSuccess = this.postDistTrx(recBaseTrx, recTransactionType.getTrxType(iTrxGroupID, PostingType.DIST_POST));
if (!bSuccess)
    return bSuccess;
recBaseTrx.endDistTrx();
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3421">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>removeDetailTrx</MethodName>
		<LogicDescription><![CDATA[Remove this batch detail transaction and the distribution.
@return true if successful.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[// Step 3 - Delete the batch (if not recurring)
Record recBankTrxBatchDetail = this.getDetailRecord();
Record recBankTrxBatchDist = this.getDistRecord();
recBankTrxBatchDist.close();
try   {
    while (recBankTrxBatchDist.hasNext())
    {
        recBankTrxBatchDist.next();
        recBankTrxBatchDist.edit();
        recBankTrxBatchDist.remove();
    }
    recBankTrxBatchDetail.remove();
    recBankTrxBatchDetail.addNew();
} catch (DBException ex)    {
    ex.printStackTrace();
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3422">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getBaseTrx</MethodName>
		<LogicDescription><![CDATA[Get the base trx record.
@return The record.]]></LogicDescription>
		<MethodReturns>BaseTrx</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3423">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>postBaseTrx</MethodName>
		<LogicDescription><![CDATA[Setup and post this base transaction.
@param recBaseTrx The base transaction to post.
@param recTransactionType The transaction type for the TRX posting.
@return true If successful.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseTrx recBaseTrx, TransactionType recTransactionType</MethodInterface>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource>return true;    // Override this!</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3424">
		<LastChanged>2012-01-31T18:59:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,810</Sequence>
		<MethodName>postBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchPost</MethodClassName>
		<LogicSource><![CDATA[BankAcct recBankAcct = (BankAcct)((ReferenceField)this.getMainRecord().getField(BankTrxBatch.BANK_ACCT_ID)).getReference();
Record recBankTrxBatchDetail = this.getDetailRecord();
BaseField fldDrAccountID = recBankAcct.getField(BankAcct.ACCOUNT_ID);
try   {
// Step 2a - Create and write the bank transaction (in BankTrx).
    recBaseTrx.addNew();
    for (int iFieldSeq = 1; iFieldSeq < recBaseTrx.getFieldCount(); iFieldSeq++)
    {
        recBaseTrx.getField(iFieldSeq).moveFieldToThis(recBankTrxBatchDetail.getField(iFieldSeq));
    }
    recBaseTrx.getField(BankTrx.BANK_ACCT_ID).moveFieldToThis(this.getRecord(BankTrxBatch.BANK_TRX_BATCH_FILE).getField(BankTrxBatch.BANK_ACCT_ID));
    ((BankTrx)recBaseTrx).calcUSDAmounts(true);
    boolean bSuccess = recBaseTrx.onPost(fldDrAccountID, null);
    return bSuccess;
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3425">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,820</Sequence>
		<MethodName>postDistTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchPost</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = true;
Record recBankTrxBatchDist = this.getDistRecord();
BankAcct recBankAcct = (BankAcct)((ReferenceField)this.getMainRecord().getField(BankTrxBatch.BANK_ACCT_ID)).getReference();
BaseField fldDefAccountID = this.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE).getField(AssetDrControl.ACCOUNT_ID);
try {
    TransactionType recTrxType = recBaseTrx.getTrxType(PostingType.DIST_POST);
    double dTotalLocal = recBaseTrx.getField(BankTrx.AMOUNT).getValue();
    int iSign = +1;
    if (dTotalLocal > 0)
        iSign = -iSign; // Should have the opposite sign
    dTotalLocal = Math.abs(dTotalLocal);
    double dTotalUSD = Math.abs(recBaseTrx.getField(BankTrx.AMOUNT_LOCAL).getValue());
    double dExchange = 1.0;
    if (dTotalLocal != 0)
        dExchange = dTotalUSD / dTotalLocal;
    if (dExchange <= 0)
        dExchange = 1.0;
    double dBalanceLocal = dTotalLocal;
    double dBalanceUSD = dTotalUSD;
    recBankTrxBatchDist.close();
    while (recBankTrxBatchDist.hasNext())
    {
        recBankTrxBatchDist.next();
        BaseField fldDistAccountID = recBankTrxBatchDist.getField(BankTrxBatchDist.ACCOUNT_ID);
        double dAmountLocal = recBankTrxBatchDist.getField(BankTrxBatchDist.AMOUNT).getValue();
        dAmountLocal = Math.abs(dAmountLocal);      // Should have same sign as the total
        dBalanceLocal = dBalanceLocal - dAmountLocal;

        double dNewBalanceUSD = Math.floor(dBalanceLocal * dExchange * 100.00 + 0.5) / 100.00;
        double dAmountUSD = dBalanceUSD - dNewBalanceUSD;
        dBalanceUSD = dBalanceUSD - dAmountUSD;
        bSuccess = recBaseTrx.onPostTrxDist(fldDistAccountID, dAmountUSD * iSign, PostingType.DIST_POST);
        if (!bSuccess)
            return bSuccess;
    }
    if (Math.round((dBalanceLocal + 0.001) * 100) != 0)
    {   // Send the rest of this dist to the default account
        bSuccess = recBaseTrx.onPostTrxDist(fldDefAccountID, dBalanceUSD * iSign, PostingType.DIST_POST);
        if (!bSuccess)
            return bSuccess;
    }
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3426">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,820</Sequence>
		<MethodName>postDistTrx</MethodName>
		<LogicDescription><![CDATA[Post the distribution detail.
@param recBaseTrx The base transaction to post.
@param recTransactionType The transaction type for the DIST posting.
@return true If successful.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseTrx recBaseTrx, TransactionType recTransactionType</MethodInterface>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource>return true;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3427">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource>return new CashBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3428">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3429">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>checkValidDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = super.checkValidDetail();
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3430">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>checkValidHeader</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = super.checkValidHeader();
if (!bSuccess)
    return bSuccess;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
BankAcct recBankAcct = (BankAcct)((ReferenceField)this.getMainRecord().getField(CashBatch.BANK_ACCT_ID)).getReference();
if (recBankAcct == null)
{
    this.displayError(application.getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString("Invalid Bank account, can't post"));
    return false;
}
BaseField fldDefAccountID = this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.AR_ACCOUNT_ID);
if (fldDefAccountID.isNull())
{
    this.displayError(application.getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString("No default account set in control file"));
    return false;
}
if (this.getMainRecord().getField(CashBatch.DETAIL_DATE).isNull())
{
    this.displayError(application.getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString("You must have a transaction date, can't post"));
    return false;
}
if (((!this.getMainRecord().getField(CashBatch.BATCH_TOTAL).isNull()) && (Math.abs(this.getMainRecord().getField(CashBatch.BATCH_TOTAL).getValue()) != Math.abs(this.getMainRecord().getField(CashBatch.BATCH_TOTAL_ACTUAL).getValue()))) ||
    ((!this.getMainRecord().getField(CashBatch.BATCH_CHECKS).isNull()) && (this.getMainRecord().getField(CashBatch.BATCH_CHECKS).getValue() != this.getMainRecord().getField(CashBatch.BATCH_CHECKS_ACTUAL).getValue())))
{
    this.displayError(application.getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString("The batch doesn't balance, can't post"));
    return false;
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3431">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getDetailRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource>return this.getRecord(CashBatchDetail.CASH_BATCH_DETAIL_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3432">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getDistRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource>return this.getRecord(CashBatchDist.CASH_BATCH_DIST_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3433">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>postBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource><![CDATA[// Step 2b - Post the transaction side of the distribution.
BankAcct recBankAcct = (BankAcct)((ReferenceField)this.getMainRecord().getField(CashBatch.BANK_ACCT_ID)).getReference();
BaseField fldDrAccountID = recBankAcct.getField(BankAcct.ACCOUNT_ID);
Record recDetail = this.getDetailRecord();
double dAmount = recDetail.getField(CashBatchDetail.AMOUNT).getValue();
boolean bSuccess = recBaseTrx.onPostTrxDist(fldDrAccountID, dAmount, PostingType.TRX_POST);
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3434">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>postDistTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource><![CDATA[BaseField fldDefAccountID = this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.NON_TOUR_ACCOUNT_ID);

Record recBatchDetail = this.getDetailRecord();
double dLocalTotal = recBatchDetail.getField(CashBatchDetail.AMOUNT).getValue();
String strComment = recBatchDetail.getField(CashBatchDetail.COMMENTS).toString();

return this.postDistTrx(recBaseTrx, dLocalTotal, strComment, fldDefAccountID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3435">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,250</Sequence>
		<MethodName>getBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource>return (BaseTrx)this.getRecord(BankTrx.BANK_TRX_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3436">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchPost</MethodClassName>
		<LogicSource>return (BaseTrx)this.getRecord(BankTrx.BANK_TRX_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3437">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>setPopupControl</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>boolean bPopup</MethodInterface>
		<MethodClassName>TrxStatusField</MethodClassName>
		<LogicSource>m_boolPopup = new Boolean(bPopup);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3438">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>isPopupControl</MethodName>
		<LogicDescription>Is this screen control suppose to be a popup control?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>TrxStatusField</MethodClassName>
		<LogicSource><![CDATA[if (m_boolPopup != null)
    return m_boolPopup.booleanValue();
Record record = this.getRecord();  // Get/make the record that describes the referenced class.
//if (record.getListener(StringSubFileFilter.class.getName()) != null)
//    return true;
if (record.getClass().getName().indexOf("Batch") != -1)
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3439">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>55</Sequence>
		<MethodName>getCachedRecord</MethodName>
		<LogicDescription>Get this cached record.</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>String strRecord</MethodInterface>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[if (AcctDetail.ACCT_DETAIL_FILE.equalsIgnoreCase(strRecord))
    return m_recAcctDetail;
if (AcctDetailDist.ACCT_DETAIL_DIST_FILE.equalsIgnoreCase(strRecord))
    return m_recAcctDetailDist;
if (TransactionType.TRANSACTION_TYPE_FILE.equalsIgnoreCase(strRecord))
    return m_recTransactionType;
if (Period.PERIOD_FILE.equalsIgnoreCase(strRecord))
    return m_recPeriod;
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3440">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,050</Sequence>
		<MethodName>onPostTrxDist</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseField fldAccountID, double dTrxAmount, TransactionType recTrxType, AcctDetail recAcctDetail, AcctDetailDist recAcctDetailDist, Period recPeriod</MethodInterface>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[// Step 2b - Post the transaction side of the distribution.
if (recTrxType == null)
    return this.setupErrorMessage(null, "Transaction type is not valid");

DateTimeField fldTrxDate = null;
if (!recTrxType.getField(TransactionType.TRX_DATE_FIELD).isNull())
    fldTrxDate = (DateTimeField)this.getField(recTrxType.getField(TransactionType.TRX_DATE_FIELD).toString());
if (fldTrxDate == null)
    fldTrxDate = (DateTimeField)this.getField(BaseTrx.TRX_DATE);

DateTimeField fldTrxEntryDate = null;
if (!recTrxType.getField(TransactionType.ENTRY_DATE_FIELD).isNull())
    fldTrxEntryDate = (DateTimeField)this.getField(recTrxType.getField(TransactionType.ENTRY_DATE_FIELD).toString());
else if (fldTrxEntryDate == null)
    fldTrxEntryDate = (DateTimeField)this.getField(BaseTrx.TRX_ENTRY);

int iUserID = -1;
if (!recTrxType.getField(TransactionType.USER_ID_FIELD).isNull())
{
    BaseField fldUserID = this.getField(recTrxType.getField(TransactionType.USER_ID_FIELD).toString());
    if (fldUserID != null)
        iUserID = (int)fldUserID.getValue();
}
else if (iUserID == -1)
    iUserID = (int)this.getField(BaseTrx.TRX_USER_ID).getValue();

BaseField fldTrxID = null;
if (!recTrxType.getField(TransactionType.TRX_ID_FIELD).isNull())
    fldTrxID = this.getField(recTrxType.getField(TransactionType.TRX_ID_FIELD).toString());
if (fldTrxID == null)
    fldTrxID = this.getField(BaseTrx.ID);

return recAcctDetailDist.addDetailTrx(fldAccountID, fldTrxDate, fldTrxID, recTrxType, fldTrxEntryDate, dTrxAmount, iUserID, recAcctDetail, recPeriod);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3442">
		<LastChanged>2012-07-19T18:37:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BookingDefaultHandler</MethodName>
		<LogicDescription><![CDATA[Constructor.
@param (Don't pass the field param).]]></LogicDescription>
		<MethodReturns>field, (BaseField)null, (String)null, (Converter)null</MethodReturns>
		<MethodInterface>BaseField field</MethodInterface>
		<MethodClassName>BookingDefaultHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3443">
		<LastChanged>2012-03-29T09:57:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDefaultHandler</MethodClassName>
		<LogicSource><![CDATA[if (!this.getOwner().isNull())
{
    Record recCashBatchDetail = this.getOwner().getRecord();
    if (recCashBatchDetail.getField(CashBatchDetail.AMOUNT).isNull())
        if (recCashBatchDetail.getField(CashBatchDetail.COMMENTS).isNull())
    {
        Record recBooking = ((ReferenceField)recCashBatchDetail.getField(CashBatchDetail.BOOKING_ID)).getReference();
        if (recBooking != null)
        { // Got a valid booking, see if this payment is a probably a deposit or final payment
            boolean bFinalPayment = false;
            if (recBooking.getField(BookingModel.DEPOSIT_RECEIVED).getState() == true)
                bFinalPayment = true;
            else
            {
                Calendar calDate = ((DateTimeField)recBooking.getField(BookingModel.FINAL_PAYMENT_DUE_DATE)).getCalendar();
                if (calDate != null)
                {
                    calDate.add(Calendar.DATE, -20);
                    Calendar calNow = Calendar.getInstance();
                    if (calDate.before(calNow))
                        bFinalPayment = true;   // Probably a final payment
                }
            }
            String strComment = this.getComment(bFinalPayment);
            double dAmount = 0;
            if (bFinalPayment)
            {   // Final payment
                // First, total up the balance.
                if (m_recArTrx == null)
                {
                    RecordOwner recordOwner = this.getOwner().getRecord().findRecordOwner();
                    m_recArTrx = new ArTrx(recordOwner);
                    if (recordOwner != null)
                        recordOwner.removeRecord(m_recArTrx);
                    m_recArTrx.addListener(new SubFileFilter(recBooking));
                    m_recArTrx.addListener(new SubCountHandler(recBooking.getField(BookingModel.BALANCE), ArTrx.AMOUNT, false, true));
                }
                try {
                    m_recArTrx.close();
                    boolean bNoEntries = true;
                    while (m_recArTrx.hasNext())
                    {
                        bNoEntries = false;
                        m_recArTrx.next();
                    }
                    if (bNoEntries)
                        dAmount = recBooking.getField(BookingModel.NET).getValue();
                    else
                        dAmount = recBooking.getField(BookingModel.BALANCE).getValue();
                } catch (DBException ex)    {
                    ex.printStackTrace();
                }
            }
            else
            {   // Deposit
                dAmount = recBooking.getField(BookingModel.DEPOSIT).getValue();
            }
            if (dAmount != 0)
            {
                recCashBatchDetail.getField(CashBatchDetail.AMOUNT).setValue(dAmount);
                recCashBatchDetail.getField(CashBatchDetail.COMMENTS).setString(strComment);
            }
        }
    }
}
return DBConstants.NORMAL_RETURN;   // Don't call inherited]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3445">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getComment</MethodName>
		<LogicDescription>Get the default comment for this payment.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>boolean bFinalPayment</MethodInterface>
		<MethodClassName>BookingDefaultHandler</MethodClassName>
		<LogicSource><![CDATA[String strComment = "Deposit";
if (bFinalPayment)
    strComment = "Final payment";
if (this.getOwner().getRecord().getRecordOwner() != null)
    if (this.getOwner().getRecord().getRecordOwner().getTask() != null)
        strComment = ((BaseApplication)this.getOwner().getRecord().getRecordOwner().getTask().getApplication()).getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(strComment);
return strComment;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3446">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDefaultHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recArTrx != null)
    m_recArTrx.free();
m_recArTrx = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3447">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGroupGridScreen</MethodClassName>
		<LogicSource>return new AcctDetailDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3448">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGroupGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

Record recAcctDetailDist = this.getHeaderRecord();
this.removeRecord(recAcctDetailDist); // Do not add this to the screen (because it may get mixed up with the detail record).
this.getMainRecord().addListener(new FreeOnFreeHandler(recAcctDetailDist));

this.getMainRecord().getField(AcctDetailDist.ACCT_DETAIL_ID).addListener(new ReadSecondaryHandler(this.getRecord(AcctDetail.ACCT_DETAIL_FILE)));

this.setEditing(false);
this.setAppending(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3449">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGroupGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3450">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>AcctDetailDistGroupGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AcctDetailDistGroupGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3451">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGroupGridScreen</MethodClassName>
		<LogicSource>return new AcctDetailDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3454">
		<LastChanged>2012-03-27T01:32:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGroupGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strTransaction = AcctDetailDist.DIST_TRANSACTION;
if (this.getTask() != null)
    strTransaction = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strTransaction);
BaseField.createScreenComponent(TransactionType.TRX_ID_SFIELD_CLASS, this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, this.getMainRecord().getField(AcctDetailDist.TRX_ID), ScreenConstants.DEFAULT_DISPLAY, null);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, AcctDetailDist.DIST_TRANSACTION, AcctDetailDist.DIST_TRANSACTION, strTransaction);
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3455">
		<LastChanged>2012-03-27T01:33:01</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGroupGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strTransaction = AcctDetailDist.DIST_TRANSACTION;
if (this.getTask() != null)
    strTransaction = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strTransaction);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strTransaction, AcctDetailDist.DIST_TRANSACTION, AcctDetailDist.DIST_TRANSACTION, null);
BaseField.createScreenComponent(TransactionType.TRX_ID_SFIELD_CLASS, toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, this.getMainRecord().getField(AcctDetailDist.TRX_ID), ScreenConstants.DEFAULT_DISPLAY, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3456">
		<LastChanged>2012-03-26T09:37:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDist</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.SCREEN_TYPE_MASK) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(ACCT_DETAIL_DIST_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.SCREEN_TYPE_MASK) == ScreenConstants.DISPLAY_MODE)
    screen = Record.makeNewScreen(ACCT_DETAIL_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.SCREEN_TYPE_MASK) == DIST_GROUP_SCREEN)
    screen = Record.makeNewScreen(ACCT_DETAIL_DIST_GROUP_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3457">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AddNewMcoDistHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
if (!this.getOwner().getTableNames(false).equalsIgnoreCase(Mco.MCO_FILE))
    return DBConstants.NORMAL_RETURN;   // If this is being overidden, don't do rest of code.
switch (iChangeType)
{
    case DBConstants.AFTER_ADD_TYPE:
        BaseField fldBookingID = this.getOwner().getField(Mco.BOOKING_ID);
        if (!fldBookingID.isNull())
        {
            Object bookmark = this.getOwner().getLastModified(DBConstants.BOOKMARK_HANDLE);
            if (bookmark != null)
            {
                try {
                    if (m_recBankTrxBatchDist == null)
                    {
                        RecordOwner recordOwner = this.getOwner().findRecordOwner();
                        m_recBankTrxBatchDist = new McoBatchDist(recordOwner);
                        if (recordOwner != null)
                            recordOwner.removeRecord(m_recBankTrxBatchDist);
                    }
                    m_recBankTrxBatchDist.addNew();
                    m_recBankTrxBatchDist.getField(McoBatchDist.BANK_TRX_BATCH_DETAIL_ID).setData(bookmark);
                    m_recBankTrxBatchDist.getField(McoBatchDist.BOOKING_ID).moveFieldToThis(fldBookingID);
                    m_recBankTrxBatchDist.getField(McoBatchDist.AMOUNT).moveFieldToThis(this.getOwner().getField(Mco.NET));
                    m_recBankTrxBatchDist.add();
                } catch (DBException ex)    {
                    ex.printStackTrace();
                }
            }
        }
    break;
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3458">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AddNewCreditCardDistHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
if (!this.getOwner().getTableNames(false).equalsIgnoreCase(CreditCard.CREDIT_CARD_FILE))
    return DBConstants.NORMAL_RETURN;   // If this is being overidden, don't do rest of code.
switch (iChangeType)
{
    case DBConstants.AFTER_ADD_TYPE:
        BaseField fldBookingID = this.getOwner().getField(CreditCard.BOOKING_ID);
        if (!fldBookingID.isNull())
        {
            Object bookmark = this.getOwner().getLastModified(DBConstants.BOOKMARK_HANDLE);
            if (bookmark != null)
            {
                try {
                    if (m_recBankTrxBatchDist == null)
                    {
                        RecordOwner recordOwner = this.getOwner().findRecordOwner();
                        m_recBankTrxBatchDist = new CreditCardBatchDist(recordOwner);
                        if (recordOwner != null)
                            recordOwner.removeRecord(m_recBankTrxBatchDist);
                    }
                    m_recBankTrxBatchDist.addNew();
                    m_recBankTrxBatchDist.getField(CreditCardBatchDist.BANK_TRX_BATCH_DETAIL_ID).setData(bookmark);
                    m_recBankTrxBatchDist.getField(CreditCardBatchDist.BOOKING_ID).moveFieldToThis(fldBookingID);
                    m_recBankTrxBatchDist.getField(CreditCardBatchDist.AMOUNT).moveFieldToThis(this.getOwner().getField(CreditCard.NET));
                    m_recBankTrxBatchDist.add();
                } catch (DBException ex)    {
                    ex.printStackTrace();
                }
            }
        }
    break;
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3459">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>75</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryScreen</MethodClassName>
		<LogicSource><![CDATA[String strDesc = "Distribution";
if (this.getTask() != null)
    strDesc = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(strDesc);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strDesc, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3460">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>75</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardEntryGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strDesc = "Distribution";
if (this.getTask() != null)
    strDesc = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(strDesc);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strDesc, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3461">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>75</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardEntryScreen</MethodClassName>
		<LogicSource><![CDATA[String strDesc = "Distribution";
if (this.getTask() != null)
    strDesc = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(strDesc);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strDesc, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3462">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>createNewDist</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoDistConverter</MethodClassName>
		<LogicSource><![CDATA[// Now create the new distribution
Record recCashBatchDetail = this.getDetailRecord();
m_recBankTrxBatchDist.addNew();
m_recBankTrxBatchDist.getField(CashBatchDist.BOOKING_ID).moveFieldToThis(referenceField);
m_recBankTrxBatchDist.getField(CashBatchDist.AMOUNT).moveFieldToThis(recCashBatchDetail.getField(Mco.NET));
m_recBankTrxBatchDist.add();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3463">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>createDistRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoDistConverter</MethodClassName>
		<LogicSource>return new McoBatchDist(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3464">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getDetailRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoDistConverter</MethodClassName>
		<LogicSource>return (Record)((BaseField)this.getField()).getRecord().getRecordOwner().getRecord(Mco.MCO_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3465">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>createDistRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardDistConverter</MethodClassName>
		<LogicSource>return new CreditCardBatchDist(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3466">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getDetailRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardDistConverter</MethodClassName>
		<LogicSource>return (Record)((BaseField)this.getField()).getRecord().getRecordOwner().getRecord(CreditCard.CREDIT_CARD_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3467">
		<LastChanged>2012-01-18T21:00:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoDistConverter</MethodClassName>
		<LogicSource><![CDATA[ScreenComponent sField = super;
((BaseField)this.getField()).getRecord().removeListener(((BaseField)this.getField()).getRecord().getListener(AddNewCashDistHandler.class.getName()), true);
((BaseField)this.getField()).getRecord().addListener(new AddNewMcoDistHandler(null));
return sField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3468">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>McoBatchDistGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>McoBatchDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3469">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistGridScreen</MethodClassName>
		<LogicSource>return new McoBatchDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3470">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistGridScreen</MethodClassName>
		<LogicSource>return new Mco(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3471">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistGridScreen</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3472">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getRecord(Mco.MCO_FILE).getField(Mco.ID).addListener(new FieldReSelectHandler(this));

this.getRecord(McoBatchDist.MCO_BATCH_DIST_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), McoBatchDist.AMOUNT, false, true));
this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE).addListener(new CalcBalanceHandler(this.getScreenRecord().getField(CashBatchScreenRecord.END_BALANCE), this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), this.getRecord(Mco.MCO_FILE).getField(Mco.NET), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3474">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3475">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistGridScreen</MethodClassName>
		<LogicSource>return new BaseArPayDistHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3476">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistGridScreen</MethodClassName>
		<LogicSource>return new CreditCardBatchDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3477">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistGridScreen</MethodClassName>
		<LogicSource>return new CreditCard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3478">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CreditCardBatchDistGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CreditCardBatchDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3479">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistGridScreen</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3480">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getRecord(CreditCard.CREDIT_CARD_FILE).getField(CreditCard.ID).addListener(new FieldReSelectHandler(this));

this.getRecord(CreditCardBatchDist.CREDIT_CARD_BATCH_DIST_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), CreditCardBatchDist.AMOUNT, false, true));
this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE).addListener(new CalcBalanceHandler(this.getScreenRecord().getField(CashBatchScreenRecord.END_BALANCE), this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), this.getRecord(CreditCard.CREDIT_CARD_FILE).getField(CreditCard.NET), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3482">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistGridScreen</MethodClassName>
		<LogicSource>return new BaseArPayDistHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3483">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3484">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardEntryGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3485">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistScreen</MethodClassName>
		<LogicSource>return new McoBatchDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3486">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Mco(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3487">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistScreen</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3488">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));

this.getRecord(McoBatchDist.MCO_BATCH_DIST_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), Mco.NET, false, true));
this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE).addListener(new CalcBalanceHandler(this.getScreenRecord().getField(CashBatchScreenRecord.END_BALANCE), this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), this.getRecord(Mco.MCO_FILE).getField(Mco.NET), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3489">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistScreen</MethodClassName>
		<LogicSource>return this.getRecord(Mco.MCO_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3490">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistScreen</MethodClassName>
		<LogicSource>return new BaseArPayDistHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3491">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoBatchDistScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3492">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistScreen</MethodClassName>
		<LogicSource>return new CreditCardBatchDist(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3493">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new CreditCard(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3494">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistScreen</MethodClassName>
		<LogicSource>return new CashBatchScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3495">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistScreen</MethodClassName>
		<LogicSource><![CDATA[super;
        
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));
        
this.getRecord(CreditCardBatchDist.CREDIT_CARD_BATCH_DIST_FILE).addListener(new SubCountHandler(this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), CreditCard.NET, false, true));
this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE).addListener(new CalcBalanceHandler(this.getScreenRecord().getField(CashBatchScreenRecord.END_BALANCE), this.getScreenRecord().getField(CashBatchScreenRecord.CHANGE_BALANCE), this.getRecord(CreditCard.CREDIT_CARD_FILE).getField(CreditCard.NET), true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3496">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistScreen</MethodClassName>
		<LogicSource>return this.getRecord(CreditCard.CREDIT_CARD_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3497">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistScreen</MethodClassName>
		<LogicSource>return new BaseArPayDistHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3498">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardBatchDistScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3499">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcMcoHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);	// Only on screen change
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3500">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseArPayDistHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3501">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseArPayDistHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3502">
		<LastChanged>2012-01-18T21:01:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardDistConverter</MethodClassName>
		<LogicSource><![CDATA[ScreenComponent sField = super;
((BaseField)this.getField()).getRecord().removeListener(((BaseField)this.getField()).getRecord().getListener(AddNewMcoDistHandler.class.getName()), true);
((BaseField)this.getField()).getRecord().addListener(new AddNewCreditCardDistHandler(null));
return sField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3503">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getTrxStatusID</MethodName>
		<LogicDescription>Get the status record that matches this template</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>String strSystemCode, String strDescCode, String strStatusCode</MethodInterface>
		<MethodClassName>TrxStatus</MethodClassName>
		<LogicSource><![CDATA[int iTrxStatusID = 0;
this.setKeyArea(TrxStatus.SYSTEM_CODE_KEY);
this.getField(TrxStatus.SYSTEM_CODE).setString(strSystemCode);
this.getField(TrxStatus.DESC_CODE).setString(strDescCode);
this.getField(TrxStatus.STATUS_CODE).setString(strStatusCode);
try   {
    boolean bSuccess = this.seek("=");
    if (bSuccess)
        iTrxStatusID = (int)this.getField(TrxStatus.ID).getValue();
} catch (DBException ex)    {
    ex.printStackTrace();
}
return iTrxStatusID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3504">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardPost</MethodClassName>
		<LogicSource><![CDATA[super;

new CreditCardBatchDist(this);

new ArTrx(this);
new ArControl(this);

new TrxStatus(this);
new TransactionType(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3505">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getDetailRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource>return this.getMainRecord();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3506">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>210</Sequence>
		<MethodName>getDistRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource>return this.getRecord(McoBatchDist.MCO_BATCH_DIST_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3507">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>220</Sequence>
		<MethodName>getBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource>return (BaseTrx)this.getRecord(Mco.MCO_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3508">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>510</Sequence>
		<MethodName>checkValidHeader</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource><![CDATA[// Don't call inherited as there is no batch header on MCOs
BaseApplication application = (BaseApplication)this.getTask().getApplication();
BaseField fldDefAccountID = this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.AR_ACCOUNT_ID);
if (fldDefAccountID.isNull())
{
    this.displayError(application.getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString("No default account set in control file"));
    return false;
}
return true;	// Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3509">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>checkValidDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3510">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>removeDetailTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource><![CDATA[// Step 3 - Delete the batch (if not recurring)
Record recBankTrxBatchDetail = this.getDetailRecord();
Record recBankTrxBatchDist = this.getDistRecord();
recBankTrxBatchDist.close();
try   {
    while (recBankTrxBatchDist.hasNext())
    {
        recBankTrxBatchDist.next();
        recBankTrxBatchDist.edit();
        recBankTrxBatchDist.remove();
    }
    // Don't remove the detail trx as it is not in a batch.
} catch (DBException ex) {
    ex.printStackTrace();
    return false;
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3511">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>postBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource><![CDATA[// Step 2b - Post the transaction side of the distribution.
BaseField fldDrAccountID = this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.MCO_REC_ACCOUNT_ID);
Record recDetail = this.getDetailRecord();
try {
    recDetail.writeAndRefresh();
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}
double dAmount = recDetail.getField(Mco.AMT_APPLY).getValue();
boolean bSuccess = recBaseTrx.onPostTrxDist(fldDrAccountID, dAmount, PostingType.TRX_POST);
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3512">
		<LastChanged>2012-01-31T10:43:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>850</Sequence>
		<MethodName>postDistTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource><![CDATA[BaseField fldDefAccountID = this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.NON_TOUR_ACCOUNT_ID);

Record recBatchDetail = this.getDetailRecord();
double dLocalTotal = recBatchDetail.getField(Mco.AMT_APPLY).getValue();
String strComment = recBatchDetail.getField(Mco.COMMENTS).toString();

return this.postDistTrx(recBaseTrx, dLocalTotal, strComment, fldDefAccountID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3513">
		<LastChanged>2012-03-29T09:59:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>postDistTrx*2</MethodName>
		<LogicDescription>Post this CashBatchDist detail to the ArTrx file.</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseTrx recBaseTrx, double dLocalTotal, String strComment, BaseField fldDefAccountID</MethodInterface>
		<MethodClassName>BaseArTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = true;

Record recCashBatchDist = this.getDistRecord();
Record recTrxStatus = this.getRecord(TrxStatus.TRX_STATUS_FILE);
ArTrx recArTrx = (ArTrx)this.getRecord(ArTrx.AR_TRX_FILE);
recArTrx.getListener(UpdateArTrxAcctDetailHandler.class).setEnabledListener(false);

try {
    double dLocalBalance = dLocalTotal;
    int iDistCount = 0;
    recCashBatchDist.close();
    while (recCashBatchDist.hasNext())
    {
        recCashBatchDist.next();
        iDistCount++;
    }
    int iCurrCount = 0;
    recCashBatchDist.close();
    while (recCashBatchDist.hasNext())
    {
        recCashBatchDist.next();
        iCurrCount++;
        if (recCashBatchDist.getField(CashBatchDist.BOOKING_ID).isNull())
        {   // Non-booking distribution
            BaseField fldDistAccountID = recCashBatchDist.getField(CashBatchDist.ACCOUNT_ID);
            if (fldDistAccountID == null)
                fldDistAccountID = fldDefAccountID;
            double dAmount = Math.abs(recCashBatchDist.getField(CashBatchDist.AMOUNT).getValue());
            if (iCurrCount == iDistCount)
                dAmount = dLocalBalance;
            double dAmountUSD = dAmount;
            if (Math.round((dLocalBalance - dAmount + 0.001) * 100) <= 0)
                dAmountUSD = dLocalBalance;
            dLocalBalance = dLocalBalance - dAmount;
            dAmountUSD = -dAmountUSD;   // Negative = Credit

            DateTimeField trxDate = (DateTimeField)recBaseTrx.getField(BaseTrx.TRX_DATE);
            BaseField fldTrxID = null;  // No reference
            TransactionType recTrxType = recBaseTrx.getTrxType(PostingType.OPTIONAL_POST);
            DateTimeField trxEntryDate = (DateTimeField)recBaseTrx.getField(BaseTrx.TRX_ENTRY);
            int iUserID = Integer.parseInt(((BaseApplication)this.getTask().getApplication()).getUserID());
            AcctDetailDist recAcctDetailDist = (AcctDetailDist)recBaseTrx.getCachedRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE);
            AcctDetail recAcctDetail = (AcctDetail)recBaseTrx.getCachedRecord(AcctDetail.ACCT_DETAIL_FILE);
            Period recPeriod = (Period)recBaseTrx.getCachedRecord(Period.PERIOD_FILE);
            bSuccess = recAcctDetailDist.addDetailTrx(fldDistAccountID, trxDate, fldTrxID, recTrxType, trxEntryDate, dAmountUSD, iUserID, recAcctDetail, recPeriod);

            if (!bSuccess)
                return bSuccess;
        }
        else
        {   // Booking distribution
            recArTrx.addNew();
            recArTrx.getField(ArTrx.TRX_DATE).moveFieldToThis(recBaseTrx.getField(BaseTrx.TRX_DATE));
            recArTrx.getField(ArTrx.TRX_STATUS_ID).moveFieldToThis(recBaseTrx.getField(BaseTrx.TRX_STATUS_ID));
            recArTrx.getField(ArTrx.TRX_ENTRY).initField(DBConstants.DONT_DISPLAY);
            if ((strComment != null) && (strComment.length() > 0))
                recArTrx.getField(ArTrx.COMMENTS).setString(strComment);
            else
                recArTrx.getField(ArTrx.COMMENTS).moveFieldToThis(recTrxStatus.getField(TrxStatus.STATUS_DESC));
            ((ReferenceField)recArTrx.getField(ArTrx.LINKED_TRX_ID)).setReference(recBaseTrx, DBConstants.DONT_DISPLAY, DBConstants.INIT_MOVE);
            // LinkedTrxDescID must be the source file's desc
            Record recTrxDesc = recBaseTrx.getTrxDesc(null);    // Typically this is it.
            Record recTrxType = recBaseTrx.getTrxType(PostingType.TRX_POST);
            if (!recTrxType.getField(TransactionType.SOURCE_FILE).equals(recTrxDesc.getField(TrxDesc.SOURCE_FILE)))
            {
                Object bookmark = recTrxDesc.getHandle(DBConstants.BOOKMARK_HANDLE);
                int iOldKey = recTrxDesc.getDefaultOrder();
                recTrxDesc.setKeyArea(TrxDesc.SOURCE_FILE_KEY);
                recTrxDesc.getField(TrxDesc.SOURCE_FILE).moveFieldToThis(recTrxType.getField(TransactionType.SOURCE_FILE));
                if (!recTrxDesc.seek(DBConstants.EQUALS))    // This is the correct source desc
                {   // If not, use the orig
                    recTrxDesc.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
                }
                recTrxDesc.setKeyArea(iOldKey);
            }
            recArTrx.getField(ArTrx.LINKED_TRX_DESC_ID).moveFieldToThis(recTrxDesc.getField(TrxDesc.ID));

            recArTrx.getField(ArTrx.BOOKING_ID).moveFieldToThis(recCashBatchDist.getField(CashBatchDist.BOOKING_ID));
            double dAmount = Math.abs(recCashBatchDist.getField(CashBatchDist.AMOUNT).getValue());
            if (iCurrCount == iDistCount)
                dAmount = dLocalBalance;
            double dAmountUSD = dAmount;
            if (Math.round((dLocalBalance - dAmount + 0.001) * 100) <= 0)
                dAmountUSD = dLocalBalance;
            dLocalBalance = dLocalBalance - dAmount;
            dAmountUSD = -dAmountUSD;   // Credit
            recArTrx.getField(ArTrx.AMOUNT).setValue(dAmountUSD); // Subtract from booking balance
            bSuccess = recArTrx.onPostTrx();
            if (!bSuccess)
                return bSuccess;
            BaseField fldCrAccountID = recCashBatchDist.getField(CashBatchDist.ACCOUNT_ID);   // Default
            Record recBooking = ((ReferenceField)recCashBatchDist.getField(CashBatchDist.BOOKING_ID)).getReference();
            if (recBooking != null)
            {
                Record recTour = ((ReferenceField)recBooking.getField(BookingModel.TOUR_ID)).getReference();
                if (recTour != null)
                {
                    Record recTourHeader = ((ReferenceField)recTour.getField(TourModel.TOUR_HEADER_ID)).getReference();
                    if (recTourHeader != null)
                    {
                        Record recProductCat = ((ReferenceField)recTourHeader.getField(TourHeaderModel.PRODUCT_CAT_ID)).getReference();
                        if (recProductCat != null)
                            fldCrAccountID = recProductCat.getField(ProductCategoryModel.AR_ACCOUNT_ID);
                    }
                }
            }
            if ((fldCrAccountID == null) || (fldCrAccountID.isNull()))
                fldCrAccountID = fldDefAccountID;
            AcctDetailDist recAcctDetailDist = (AcctDetailDist)recBaseTrx.getCachedRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE);
            AcctDetail recAcctDetail = (AcctDetail)recBaseTrx.getCachedRecord(AcctDetail.ACCT_DETAIL_FILE);
            Period recPeriod = (Period)recBaseTrx.getCachedRecord(Period.PERIOD_FILE);
            bSuccess = recArTrx.onPostTrxDist(fldCrAccountID, dAmountUSD, PostingType.DIST_POST, recAcctDetail, recAcctDetailDist, recPeriod);
            if (!bSuccess)
                return bSuccess;
        }
    }
    if (Math.round((dLocalBalance + 0.001) * 100) != 0)
    {   // Send the rest of this dist to the default account
        double dAmountUSD = -dLocalBalance;   // Credit

        DateTimeField trxDate = (DateTimeField)recBaseTrx.getField(BaseTrx.TRX_DATE);
        BaseField fldTrxID = null;  // No reference
        TransactionType recTrxType = recBaseTrx.getTrxType(PostingType.OPTIONAL_POST);
        DateTimeField trxEntryDate = (DateTimeField)recBaseTrx.getField(BaseTrx.TRX_ENTRY);
        int iUserID = Integer.parseInt(((BaseApplication)this.getTask().getApplication()).getUserID());
        AcctDetailDist recAcctDetailDist = (AcctDetailDist)recBaseTrx.getCachedRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE);
        AcctDetail recAcctDetail = (AcctDetail)recBaseTrx.getCachedRecord(AcctDetail.ACCT_DETAIL_FILE);
        Period recPeriod = (Period)recBaseTrx.getCachedRecord(Period.PERIOD_FILE);
        bSuccess = recAcctDetailDist.addDetailTrx(fldDefAccountID, trxDate, fldTrxID, recTrxType, trxEntryDate, dAmountUSD, iUserID, recAcctDetail, recPeriod);

        if (!bSuccess)
            return bSuccess;
    }
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
} finally {
    recArTrx.getListener(UpdateArTrxAcctDetailHandler.class).setEnabledListener(true);
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3514">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>postDistTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardPost</MethodClassName>
		<LogicSource><![CDATA[BaseField fldDefAccountID = this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.NON_TOUR_ACCOUNT_ID);

Record recBatchDetail = this.getDetailRecord();
double dLocalTotal = recBatchDetail.getField(Mco.AMT_APPLY).getValue();
String strComment = recBatchDetail.getField(Mco.COMMENTS).toString();

return this.postDistTrx(recBaseTrx, dLocalTotal, strComment, fldDefAccountID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3515">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getDistRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardPost</MethodClassName>
		<LogicSource>return this.getRecord(CreditCardBatchDist.CREDIT_CARD_BATCH_DIST_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3516">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardPost</MethodClassName>
		<LogicSource>return (BaseTrx)this.getRecord(CreditCard.CREDIT_CARD_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3517">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>postBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardPost</MethodClassName>
		<LogicSource><![CDATA[// Step 2b - Post the transaction side of the distribution.
BaseField fldDrAccountID = this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.CREDIT_CARD_REC_ACCOUNT_ID);
Record recDetail = this.getDetailRecord();
try {
    recDetail.writeAndRefresh();
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}
double dAmount = recDetail.getField(Mco.AMT_APPLY).getValue();
boolean bSuccess = recBaseTrx.onPostTrxDist(fldDrAccountID, dAmount, PostingType.TRX_POST);
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3518">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,500</Sequence>
		<MethodName>removeTrxHeader</MethodName>
		<LogicDescription>Delete the batch header.</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[try {
    this.getMainRecord().remove();
} catch (DBException ex) {
    ex.printStackTrace();
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3519">
		<LastChanged>2012-02-01T08:05:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,500</Sequence>
		<MethodName>removeTrxHeader</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource><![CDATA[this.getScreenRecord().getField(CashBatchScreenRecord.COUNT).setData(null);
this.getScreenRecord().getField(CashBatchScreenRecord.TOTAL).setData(null);
String strSuccess = "Posted successfully";
strSuccess = this.getTask().getApplication().getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(strSuccess);
this.getTask().setStatusText(this.getTask().getString(strSuccess));
return true;    // Not required for Mcos]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3520">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditBaseGridScreen</MethodClassName>
		<LogicSource>return new CreditCard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3521">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditBaseGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3522">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditBaseGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(McoScreenRecord.CARD_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.CARD_ID)));

this.getMainRecord().addListener(new CompareFileFilter(CreditCard.CARD_ID, this.getScreenRecord().getField(McoScreenRecord.CARD_ID), "=", null, false));
this.getScreenRecord().getField(McoScreenRecord.CARD_ID).addListener(new FieldReSelectHandler(this));
this.setAppending(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3523">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditBaseGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3524">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditBaseGridScreen</MethodClassName>
		<LogicSource>return new McoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3525">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditBaseGridScreen</MethodClassName>
		<LogicSource>this.getScreenRecord().getField(McoScreenRecord.CARD_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3526">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditApproveGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

String strDesc = CreditCard.APPROVED;
if (this.getTask() != null)
    strDesc = ((BaseApplication)this.getTask().getApplication()).getString(strDesc);
BaseField fldFlag = this.getMainRecord().getField(CreditCard.PAID);
fldFlag.setFieldDesc(strDesc);
new SButtonBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, fldFlag, ScreenConstants.DISPLAY_FIELD_DESC);
this.getRecord(CreditCard.CREDIT_CARD_FILE).getField(CreditCard.TRX_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3527">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCollectGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getRecord(CreditCard.CREDIT_CARD_FILE).getField(CreditCard.DATE_PAID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(CreditCard.CREDIT_CARD_FILE).getField(CreditCard.AMOUNT_PAID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);

String strDesc = CreditCard.ITEM_PAID;
if (this.getTask() != null)
    strDesc = ((BaseApplication)this.getTask().getApplication()).getString(strDesc);
this.getMainRecord().getField(Mco.PAID).setFieldDesc(strDesc);
new SButtonBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getMainRecord().getField(Mco.PAID), ScreenConstants.DISPLAY_FIELD_DESC);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3528">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditBaseScreen</MethodClassName>
		<LogicSource>return new CreditCard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3529">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditBaseScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);
new TransactionType(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3530">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditBaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3531">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditBaseScreen</MethodClassName>
		<LogicSource>return new McoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3532">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>getDetailRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollPost</MethodClassName>
		<LogicSource>return this.getMainRecord();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3533">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>getBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoCollPost</MethodClassName>
		<LogicSource>return (BaseTrx)this.getRecord(Mco.MCO_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3534">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>getVarAccountID</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseField</MethodReturns>
		<MethodInterface>Record recBaseArTrx</MethodInterface>
		<MethodClassName>McoCollPost</MethodClassName>
		<LogicSource><![CDATA[BaseField fldAccountID = null;
ArControl recArControl = (ArControl)this.getRecord(ArControl.AR_CONTROL_FILE);
Airline recAirline = (Airline)((ReferenceField)recBaseArTrx.getField(Mco.AIRLINE_ID)).getReference();
if (recAirline != null)
    fldAccountID = recAirline.getField(Airline.MCO_VAR_ACCOUNT_ID);
if ((fldAccountID == null) || (fldAccountID.getValue() == 0))
    fldAccountID = recArControl.getField(ArControl.MCO_VAR_ACCOUNT_ID);
return fldAccountID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3535">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>getDistAccountID</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseField</MethodReturns>
		<MethodInterface>Record recBaseArTrx</MethodInterface>
		<MethodClassName>McoCollPost</MethodClassName>
		<LogicSource>return this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.MCO_SUSPENSE_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3536">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>getTrxAccountID</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseField</MethodReturns>
		<MethodInterface>Record recBaseArTrx</MethodInterface>
		<MethodClassName>McoCollPost</MethodClassName>
		<LogicSource><![CDATA[ArControl recArControl = (ArControl)this.getRecord(ArControl.AR_CONTROL_FILE);
BaseField fldAccountID = null;
Airline recAirline = (Airline)((ReferenceField)recBaseArTrx.getField(Mco.AIRLINE_ID)).getReference();
if (recAirline != null)
    fldAccountID = recAirline.getField(Airline.MCO_REC_ACCOUNT_ID);
if ((fldAccountID == null) || (fldAccountID.getValue() == 0))
    fldAccountID = recArControl.getField(ArControl.MCO_REC_ACCOUNT_ID);
return fldAccountID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3537">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,400</Sequence>
		<MethodName>getNewTrxClass</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>McoCollPost</MethodClassName>
		<LogicSource><![CDATA[TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
int iEnteredTrxClass = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, Mco.MCO_FILE, Mco.ITEM_PAID);
return iEnteredTrxClass;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3538">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardCollPost</MethodClassName>
		<LogicSource>return (BaseTrx)this.getRecord(CreditCard.CREDIT_CARD_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3539">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getDetailRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardCollPost</MethodClassName>
		<LogicSource>return this.getMainRecord();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3540">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,500</Sequence>
		<MethodName>getTrxAccountID</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardCollPost</MethodClassName>
		<LogicSource><![CDATA[BaseField fldAccountID = null;
ArControl recArControl = (ArControl)this.getRecord(ArControl.AR_CONTROL_FILE);
Card recCard = (Card)((ReferenceField)recBaseArTrx.getField(CreditCard.CARD_ID)).getReference();
if (recCard != null)
    fldAccountID = recCard.getField(Card.CREDIT_CARD_REC_ACCOUNT_ID);
if ((fldAccountID == null) || (fldAccountID.getValue() == 0))
    fldAccountID = recArControl.getField(ArControl.CREDIT_CARD_REC_ACCOUNT_ID);
return fldAccountID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3541">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>getNewTrxClass</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardCollPost</MethodClassName>
		<LogicSource><![CDATA[TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
return recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, CreditCard.CREDIT_CARD_FILE, CreditCard.ITEM_PAID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3542">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,600</Sequence>
		<MethodName>getDistAccountID</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardCollPost</MethodClassName>
		<LogicSource>return this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.CREDIT_CARD_SUSPENSE_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3543">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,700</Sequence>
		<MethodName>getVarAccountID</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardCollPost</MethodClassName>
		<LogicSource><![CDATA[BaseField fldAccountID = null;
ArControl recArControl = (ArControl)this.getRecord(ArControl.AR_CONTROL_FILE);
Card recCard = (Card)((ReferenceField)recBaseArTrx.getField(CreditCard.CARD_ID)).getReference();
if (recCard != null)
    fldAccountID = recCard.getField(Card.CREDIT_CARD_VAR_ACCOUNT_ID);
if ((fldAccountID == null) || (fldAccountID.getValue() == 0))
    fldAccountID = recArControl.getField(ArControl.CREDIT_CARD_VAR_ACCOUNT_ID);
return fldAccountID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3544">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SyncArTrxStatusHandler</MethodClassName>
		<LogicSource><![CDATA[if (iChangeType == DBConstants.UPDATE_TYPE)
{
     if (m_recArTrx == null)
    {
        RecordOwner recordOwner = this.getOwner().findRecordOwner();
        m_recArTrx = new ArTrx(recordOwner);
        if (recordOwner != null)
            recordOwner.removeRecord(m_recArTrx);
    }
    Record recBaseArTrx = this.getOwner();
    if (m_recArTrx.getListener(SubFileFilter.class.getName()) == null)
    {
        m_recArTrx.setKeyArea(ArTrx.LINKED_TRX_ID_KEY);
        m_recArTrx.addListener(new SubFileFilter(m_fldTrxStatusID, ArTrx.TRX_STATUS_ID, recBaseArTrx.getField(BaseArPay.ID), ArTrx.LINKED_TRX_ID, null, null));
    }
    try {
        m_recArTrx.close();
        while (m_recArTrx.hasNext())
        {
            m_recArTrx.next();
            m_recArTrx.edit();
            m_recArTrx.getField(ArTrx.TRX_STATUS_ID).moveFieldToThis(recBaseArTrx.getField(BaseArPay.TRX_STATUS_ID));
            m_recArTrx.set();
        }
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3545">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SyncArTrxStatusHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recArTrx != null)
    m_recArTrx.free();
m_recArTrx = null;
if (m_fldTrxStatusID != null)
    m_fldTrxStatusID.free();
m_fldTrxStatusID = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3546">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SyncArTrxStatusHandler</MethodClassName>
		<LogicSource><![CDATA[Record recBaseArTrx = this.getOwner();
if (m_fldTrxStatusID == null)
{
    try {
        m_fldTrxStatusID = (BaseField)recBaseArTrx.getField(BaseTrx.TRX_STATUS_ID).clone();
    } catch (CloneNotSupportedException ex) {
        ex.printStackTrace();
    }
}
// Save the (previous) status, so you can change the status if updated.
m_fldTrxStatusID.moveFieldToThis(recBaseArTrx.getField(BaseTrx.TRX_STATUS_ID));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3547">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CountMcoAmountHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recTrxStatus != null)
    m_recTrxStatus.free();
m_recTrxStatus = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3548">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.setEditing(false);     // Can't change current rows
this.getMainRecord().getField(ArTrx.TRX_DATE).setEnabled(true);
this.getMainRecord().getField(ArTrx.AMOUNT).setEnabled(true);
this.getMainRecord().getField(ArTrx.COMMENTS).setEnabled(true);
this.setAppending(true);    // CAN append
this.getMainRecord().setOpenMode(DBConstants.OPEN_APPEND_ONLY); // This makes it possible

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.REFUND_SUBMITTED);
this.getMainRecord().getField(ArTrx.TRX_STATUS_ID).addListener(new InitFieldHandler(recTrxStatus.getField(TrxStatus.ID)));

this.getMainRecord().getListener(UpdateArTrxAcctDetailHandler.class, true).setEnabledListener(false);    // Since I will be doing the updating
this.getMainRecord().addListener(new UpdateRefundAcctDetailHandler(this.getRecord(Booking.BOOKING_FILE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3549">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxStatus(this);
new ArControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3550">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrx</MethodClassName>
		<LogicSource>this.addListener(new NoDeleteModifyHandler(true, true));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3554">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CrDrGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxStatus(this);
new ArControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3555">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CrDrGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.setEditing(false);     // Can't change current rows
this.getMainRecord().getField(ArTrx.TRX_DATE).setEnabled(true);
this.getMainRecord().getField(ArTrx.AMOUNT).setEnabled(true);
this.getMainRecord().getField(ArTrx.COMMENTS).setEnabled(true);
this.setAppending(true);    // CAN append
this.getMainRecord().setOpenMode(DBConstants.OPEN_APPEND_ONLY); // This makes it possible

this.getMainRecord().getListener(UpdateArTrxAcctDetailHandler.class, true).setEnabledListener(false);    // Since I will be doing the updating
this.getMainRecord().addListener(new UpdateCrDrAcctDetailHandler(this.getRecord(Booking.BOOKING_FILE)));

this.getMainRecord().getField(ArTrx.AMOUNT).addListener(new SetCrDrTypeHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3556">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CrDrScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxStatus(this);
new ArControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3557">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetCrDrTypeHandler</MethodClassName>
		<LogicSource><![CDATA[super;

this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3561">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxAgentGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

if (this.getRecord(Profile.PROFILE_FILE).getField(Profile.PROFILE_CODE).getComponent(0) != null)
	((ScreenField)this.getRecord(Profile.PROFILE_FILE).getField(Profile.PROFILE_CODE).getComponent(0)).requestFocus();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3562">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doLocalCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CompareRefundHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bDontSkip = false;

if (m_fldTarget.getValue() == m_iSubmitted)
    bDontSkip = true;
if (m_fldTarget.getValue() == m_iHeld)
    bDontSkip = true;
if (m_fldTarget.getValue() == m_iPay)
    bDontSkip = true;

if (bDontSkip)
    return super;    // Dont skip this record
else
    return false;   // Skip this one]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3563">
		<LastChanged>2011-08-05T15:59:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CompareRefundHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField fldTarget, int iSubmitted, int iHeld, int iPay</MethodInterface>
		<MethodClassName>CompareRefundHandler</MethodClassName>
		<LogicSource><![CDATA[m_fldTarget = fldTarget;
m_iSubmitted = iSubmitted;
m_iHeld = iHeld;
m_iPay = iPay;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3564">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPrint</MethodClassName>
		<LogicSource>return new ArTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3565">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPrint</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);
new TrxStatus(this);
new BookingLine(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3566">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPrint</MethodClassName>
		<LogicSource><![CDATA[super;

this.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.REFUND_BANK_ACCT_ID)));

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.REFUND_PAY);
this.getMainRecord().setKeyArea(ArTrx.TRX_STATUS_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus.getField(TrxStatus.ID), ArTrx.TRX_STATUS_ID, null, null, null, null));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(RefundScreenRecord.REPORT_COUNT), false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(RefundScreenRecord.REPORT_TOTAL), ArTrx.AMOUNT, false, true));

Record recBooking = this.getRecord(Booking.BOOKING_FILE);
Record recBookingLine = this.getRecord(BookingLine.BOOKING_LINE_FILE);
recBookingLine.addListener(new SubFileFilter(recBooking));
recBooking.addListener(new RecountOnValidHandler(recBookingLine));
recBookingLine.addListener(new SubCountHandler(recBooking.getField(Booking.GROSS), BookingLine.GROSS, true, true));
recBookingLine.addListener(new SubCountHandler(recBooking.getField(Booking.NET), BookingLine.NET, true, true));

Record recBankAcct = ((ReferenceField)this.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID)).getReferenceRecord();
recBankAcct.addListener(new MoveOnValidHandler(this.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO), recBankAcct.getField(BankAcct.NEXT_CHECK)));

this.getMainRecord().addListener(new BumpCheckNoHandler(this.getScreenRecord().getField(RefundScreenRecord.CHECK_NO), this.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO)));

this.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID).addListener(new ReadSecondaryHandler(recBankAcct));

recBooking.addListener(new MoveOnValidHandler(this.getScreenRecord().getField(RefundScreenRecord.PAYEE), recBooking.getField(Booking.GENERIC_NAME)));
this.getMainRecord().addListener(new MoveOnValidHandler(this.getScreenRecord().getField(RefundScreenRecord.CHECK_AMOUNT), this.getMainRecord().getField(ArTrx.AMOUNT)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3568">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>layoutPrintControl</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPrint</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3569">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getServletPath</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PastDueReport</MethodClassName>
		<LogicSource>return super.getServletPath(DBParams.XHTMLSERVLET); // Use cocoon</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3570">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3571">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3572">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BumpCheckNoHandler</MethodName>
		<LogicDescription>Start the target field and bump it with each read.</LogicDescription>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField fldCount, BaseField fldStart</MethodInterface>
		<MethodClassName>BumpCheckNoHandler</MethodClassName>
		<LogicSource><![CDATA[m_fldCount = fldCount;
m_fldStart = fldStart;
if (m_fldStart != null)
    m_iLastCheckNo = (int)m_fldStart.getValue() - 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3573">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BumpCheckNoHandler</MethodClassName>
		<LogicSource><![CDATA[super;
m_iLastCheckNo++;
m_fldCount.setValue(m_iLastCheckNo);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3574">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BumpCheckNoHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    if (iChangeType == DBConstants.AFTER_REQUERY_TYPE)
{    // Init count
    m_iLastCheckNo = (int)m_fldStart.getValue() - 1;
    m_fldCount.setValue(m_iLastCheckNo);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3575">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckScreenRecord</MethodClassName>
		<LogicSource><![CDATA[this.getField(CheckScreenRecord.CHECK_AMOUNT).addListener(new CopyFieldHandler(CheckScreenRecord.CHECK_AMOUNT_TEXT));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3576">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckXMLPrint</MethodClassName>
		<LogicSource><![CDATA[super;

this.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(ArControl.AR_CONTROL_FILE).getField(ArControl.REFUND_BANK_ACCT_ID)));

TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.REFUND_PAY);
this.getMainRecord().setKeyArea(ArTrx.TRX_STATUS_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(recTrxStatus.getField(TrxStatus.ID), ArTrx.TRX_STATUS_ID, null, null, null, null));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(RefundScreenRecord.REPORT_COUNT), false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(RefundScreenRecord.REPORT_TOTAL), ArTrx.AMOUNT, false, true));

Record recBooking = this.getRecord(Booking.BOOKING_FILE);
Record recBookingLine = this.getRecord(BookingLine.BOOKING_LINE_FILE);
recBookingLine.addListener(new SubFileFilter(recBooking));
recBooking.addListener(new RecountOnValidHandler(recBookingLine));
recBookingLine.addListener(new SubCountHandler(recBooking.getField(Booking.GROSS), BookingLine.GROSS, true, true));
recBookingLine.addListener(new SubCountHandler(recBooking.getField(Booking.NET), BookingLine.NET, true, true));

Record recBankAcct = ((ReferenceField)this.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID)).getReferenceRecord();
recBankAcct.addListener(new MoveOnValidHandler(this.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO), recBankAcct.getField(BankAcct.NEXT_CHECK)));

this.getMainRecord().addListener(new BumpCheckNoHandler(this.getScreenRecord().getField(RefundScreenRecord.CHECK_NO), this.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO)));

this.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID).addListener(new ReadSecondaryHandler(recBankAcct));

recBooking.addListener(new MoveOnValidHandler(this.getScreenRecord().getField(RefundScreenRecord.PAYEE), recBooking.getField(Booking.GENERIC_NAME)));
this.getMainRecord().addListener(new MoveOnValidHandler(this.getScreenRecord().getField(RefundScreenRecord.CHECK_AMOUNT), this.getMainRecord().getField(ArTrx.AMOUNT)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3577">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckXMLPrint</MethodClassName>
		<LogicSource>return new ArTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3578">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckXMLPrint</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);
new TrxStatus(this);
new BookingLine(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3579">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckXMLPrint</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3580">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckXMLPrint</MethodClassName>
		<LogicSource>return new RefundScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3581">
		<LastChanged>2012-01-23T09:38:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckXMLPrint</MethodClassName>
		<LogicSource>return new RefundCheckToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3582">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckXMLPrint</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3583">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckXMLPrint</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.POST))
    || (strCommand.equalsIgnoreCase(RefundCheckJournal.CANNED_CHECKS))
    || (strCommand.equalsIgnoreCase(RefundCheckJournal.XML_CHECKS)))
{
    Object objBankID = this.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID).getData();
    Object objCheckNo = this.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO).getData();
    Object objCheckDate = this.getScreenRecord().getField(RefundScreenRecord.CHECK_DATE).getData();
    Record record = this.getMainRecord();
    BasePanel parentScreen = this.getParentScreen();

    int iScreen = ArTrx.REFUND_CHECK_POST;
    if (strCommand.equalsIgnoreCase(RefundCheckJournal.CANNED_CHECKS))
        iScreen = ArTrx.REFUND_CHECK_CANNED_PRINT;
    if (strCommand.equalsIgnoreCase(RefundCheckJournal.XML_CHECKS))
        iScreen = ArTrx.REFUND_CHECK_XML_PRINT;
    boolean bSuccess = (this.onForm(record, iScreen, true, iCommandOptions, null) != null);

    if (bSuccess)
    {
        for (int i = 0; i < parentScreen.getSFieldCount(); i++)
        {
            BasePanel screen = (BasePanel)parentScreen.getSField(i);
            if (screen instanceof BaseScreen)
                if (screen.getScreenRecord() instanceof RefundScreenRecord)
            {
                screen.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID).setData(objBankID);
                screen.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO).setData(objCheckNo);
                screen.getScreenRecord().getField(RefundScreenRecord.CHECK_DATE).setData(objCheckDate);
            }
        }
    }

    return bSuccess;
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3584">
		<LastChanged>2012-01-18T17:54:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AmountTextField</MethodClassName>
		<LogicSource><![CDATA[converter = new AmtDescConverter((Converter)converter);
return createScreenComponent(ScreenModel.EDIT_TEXT, itsLocation, targetScreen, converter, iDisplayFieldDesc, properties);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3585">
		<LastChanged>2012-01-31T10:43:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPrint</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.POST))
    || (strCommand.equalsIgnoreCase(RefundCheckJournal.CANNED_CHECKS))
    || (strCommand.equalsIgnoreCase(RefundCheckJournal.XML_CHECKS)))
{
    Object objBankID = this.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID).getData();
    Object objCheckNo = this.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO).getData();
    Object objCheckDate = this.getScreenRecord().getField(RefundScreenRecord.CHECK_DATE).getData();
    Record record = this.getMainRecord();
    BasePanel parentScreen = this.getParentScreen();

    int iScreen = ArTrx.REFUND_CHECK_POST;
    if (strCommand.equalsIgnoreCase(RefundCheckJournal.CANNED_CHECKS))
        iScreen = ArTrx.REFUND_CHECK_CANNED_PRINT;
    if (strCommand.equalsIgnoreCase(RefundCheckJournal.XML_CHECKS))
        iScreen = ArTrx.REFUND_CHECK_XML_PRINT;
    boolean bSuccess = (this.onForm(record, iScreen, true, iCommandOptions, null) != null);

    if (bSuccess)
    {
        for (int i = 0; i < parentScreen.getSFieldCount(); i++)
        {
            BasePanel screen = (BasePanel)parentScreen.getSField(i);
            if (screen instanceof BaseScreen)
                if (screen.getScreenRecord() instanceof RefundScreenRecord)
            {
                screen.getScreenRecord().getField(RefundScreenRecord.BANK_ACCT_ID).setData(objBankID);
                screen.getScreenRecord().getField(RefundScreenRecord.NEXT_CHECK_NO).setData(objCheckNo);
                screen.getScreenRecord().getField(RefundScreenRecord.CHECK_DATE).setData(objCheckDate);
            }
        }
    }

    return bSuccess;
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3586">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPrint</MethodClassName>
		<LogicSource>return new RefundScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3587">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPrint</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3588">
		<LastChanged>2012-01-23T09:38:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RefundCheckPrint</MethodClassName>
		<LogicSource>return new RefundCheckToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3589">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckPrintScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3590">
		<LastChanged>2012-02-21T00:14:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>layoutPrintControl</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckPrintScreen</MethodClassName>
		<LogicSource><![CDATA[/*
JPanel panel = (JPanel)control;
int x = 0;
int y = 0;
int width = (int)(7.5 * 72);
int height = (int)(3.5 * 72);
panel.setBackground(Color.pink);
panel.setOpaque(true);
panel.setLayout(null);
panel.setBounds(x, y, width, height);

JTextComponent label = (JTextField)((SEditText)this.getScreenRecord().getField(CheckScreenRecord.PAYEE).getComponent(0)).getScreenFieldView().getControl();
height = (int)(0.25 * 72);
this.setupComponent(label, x, y, width, height);

label = (JTextField)((SEditText)this.getScreenRecord().getField(CheckScreenRecord.CHECK_NO).getComponent(0)).getScreenFieldView().getControl();
y = (int)(.5 * 72);
this.setupComponent(label, x, y, width, height);

label = (JTextField)((SEditText)this.getScreenRecord().getField(CheckScreenRecord.CHECK_DATE).getComponent(0)).getScreenFieldView().getControl();
y = (int)(.75 * 72);
this.setupComponent(label, x, y, width, height);

label = (JTextField)((SEditText)this.getScreenRecord().getField(CheckScreenRecord.CHECK_AMOUNT).getComponent(0)).getScreenFieldView().getControl();
y = (int)(1 * 72);
this.setupComponent(label, x, y, width, height);

label = (JTextArea)((SEditText)this.getScreenRecord().getField(CheckScreenRecord.CHECK_AMOUNT_TEXT).getComponent(0)).getScreenFieldView().getControl();
y = (int)(1.5 * 72);
height = (int)(0.5 * 72);
this.setupComponent(label, x, y, width, height);

panel.setLayout(null);
*/]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3599">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileAnalysisScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3600">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileAnalysisScreen</MethodClassName>
		<LogicSource>return new Profile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3601">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileAnalysisScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3602">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileAnalysisScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3603">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileAnalysisField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {NONE, NONE}, 
    {PROFILE_STATUS, PROFILE_STATUS}, 
    {PROFILE_CLASS, PROFILE_CLASS},
    {PROFILE_TYPE, PROFILE_TYPE},
    {CITY_TOWN, CITY_TOWN},
    {STATE_REGION, STATE_REGION},
    {COUNTRY, COUNTRY},
    {AFFILIATION, AFFILIATION},
    {SALESPERSON, SALESPERSON},
    {SALES_REGION, SALES_REGION},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3604">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileAnalysisScreen</MethodClassName>
		<LogicSource>return new ProfileAnalysisScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3605">
		<LastChanged>2012-02-02T19:55:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileAnalysisScreen</MethodClassName>
		<LogicSource><![CDATA[toolScreen.getScreenRecord().getField(ProfileAnalysisScreenRecord.PRIMARY_ANALYSIS_TYPE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(ProfileAnalysisScreenRecord.SECONDARY_ANALYSIS_TYPE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(ProfileAnalysisScreenRecord.THIRD_ANALYSIS_TYPE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(ProfileAnalysisScreenRecord.GROSS_SALES_START_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(ProfileAnalysisScreenRecord.GROSS_SALES_END_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(ProfileAnalysisScreenRecord.TEMPLATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3606">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getMonths</MethodName>
		<LogicDescription>Get the number of months for this code.</LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface/>
		<MethodClassName>PeriodTypeField</MethodClassName>
		<LogicSource><![CDATA[String string = this.getString();
if (SEMIMONTHLY.equalsIgnoreCase(string))
    return 0.5;
if (MONTHLY.equalsIgnoreCase(string))
    return 1;
if (QUARTERLY.equalsIgnoreCase(string))
    return 3;
if (YEARLY.equalsIgnoreCase(string))
    return 12;
return -1;	// Not found]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3607">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getDays</MethodName>
		<LogicDescription>Get the number of days for this code.</LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface/>
		<MethodClassName>PeriodTypeField</MethodClassName>
		<LogicSource><![CDATA[String string = this.getString();
if (DAILY.equalsIgnoreCase(string))
    return 1;
if (WEEKLY.equalsIgnoreCase(string))
    return 7;
if (BIWEEKLY.equalsIgnoreCase(string))
    return 14;
return -1;	// No found]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3608">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileAnalysisHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3609">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileAnalysisScreen</MethodClassName>
		<LogicSource>return new ProfileAnalysisHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3610">
		<LastChanged>2012-02-01T12:31:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>isKeyField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileAnalysisScreen</MethodClassName>
		<LogicSource><![CDATA[int iKeyCount = 0;
for (int iFieldSeq = this.getScreenRecord().getFieldSeq(ProfileAnalysisScreenRecord.PRIMARY_ANALYSIS_TYPE); iFieldSeq <= this.getScreenRecord().getFieldSeq(ProfileAnalysisScreenRecord.THIRD_ANALYSIS_TYPE); iFieldSeq++)
{
    if (!ProfileAnalysisField.NONE.equals(this.getScreenRecord().getField(iFieldSeq)))
        iKeyCount++;
}
if (iSourceFieldSeq < iKeyCount)
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3611">
		<LastChanged>2012-02-01T12:30:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getSourceField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileAnalysisScreen</MethodClassName>
		<LogicSource><![CDATA[BaseField field = super;
if (field.getFieldName().equals(this.getScreenRecord().getField(ProfileAnalysisScreenRecord.GROSS_SALES).getFieldName()))
{
    if ((this.getScreenRecord().getField(ProfileAnalysisScreenRecord.GROSS_SALES_START_DATE).isNull()) && (this.getScreenRecord().getField(ProfileAnalysisScreenRecord.GROSS_SALES_END_DATE).isNull()))
        return null;    // Don't include gross sales
    Record recProfile = this.getBasisRecord();
    if (this.getRecord(Booking.BOOKING_FILE) == null)
    {
        Booking recBooking = new Booking(this);
        BookingLine recBookingLine = new BookingLine(this);

        recProfile.addListener(new RecountOnValidHandler(recBooking));
        recBooking.addListener(new SubFileFilter(recProfile));
//+        recBooking.addListener(new ExtractRangeFilter(Booking.DEP_DATE, this.getScreenRecord().getField(ProfileAnalysisScreenRecord.GROSS_SALES_START_DATE), this.getScreenRecord().getField(ProfileAnalysisScreenRecord.GROSS_SALES_END_DATE), true));

        recBooking.addListener(new RecountOnValidHandler(recBookingLine));
        recBookingLine.addDetailBehaviors(recBooking, null);

        recBooking.addListener(new SubCountHandler(this.getScreenRecord().getField(ProfileAnalysisScreenRecord.GROSS_SALES), Booking.GROSS, true, true));
    }
}
if ((iSeq == 0) || (iSeq == 1) || (iSeq == 2))
{
    String iScreenRecordSeq = ProfileAnalysisScreenRecord.PRIMARY_ANALYSIS_TYPE;
    if (iSeq == 1)
        iScreenRecordSeq = ProfileAnalysisScreenRecord.SECONDARY_ANALYSIS_TYPE;
    if (iSeq == 2)
        iScreenRecordSeq = ProfileAnalysisScreenRecord.THIRD_ANALYSIS_TYPE;

    String strPrimary = this.getScreenRecord().getField(iScreenRecordSeq).toString();
    String iPrimaryField = Profile.PROFILE_TYPE_ID;
    if (ProfileAnalysisField.NONE.equalsIgnoreCase(strPrimary))
        return null;
    else if (ProfileAnalysisField.AFFILIATION.equalsIgnoreCase(strPrimary))
        iPrimaryField = Profile.AFFILIATION_ID;
    else if (ProfileAnalysisField.PROFILE_CLASS.equalsIgnoreCase(strPrimary))
        iPrimaryField = Profile.PROFILE_CLASS_ID;
    else if (ProfileAnalysisField.PROFILE_STATUS.equalsIgnoreCase(strPrimary))
        iPrimaryField = Profile.PROFILE_STATUS_ID;
    else if (ProfileAnalysisField.STATE_REGION.equalsIgnoreCase(strPrimary))
        iPrimaryField = Profile.STATE_OR_REGION;
    else if (ProfileAnalysisField.CITY_TOWN.equalsIgnoreCase(strPrimary))
        iPrimaryField = Profile.CITY_OR_TOWN;
    else if (ProfileAnalysisField.COUNTRY.equalsIgnoreCase(strPrimary))
        iPrimaryField = Profile.COUNTRY;
    else if (ProfileAnalysisField.PROFILE_TYPE.equalsIgnoreCase(strPrimary))
        iPrimaryField = Profile.PROFILE_TYPE_ID;
    else if ((ProfileAnalysisField.SALES_REGION.equalsIgnoreCase(strPrimary))
        || (ProfileAnalysisField.SALESPERSON.equalsIgnoreCase(strPrimary)))
    {
        SCF recSCF = new SCF(this);
        this.getRecord(Profile.PROFILE_FILE).addListener(new MoveOnValidHandler(recSCF.getField(SCF.SCF_FROM), this.getRecord(Profile.PROFILE_FILE).getField(Profile.POSTAL_CODE), null, true, true));
        MainFieldHandler behavior = (MainFieldHandler)recSCF.getField(SCF.SCF_FROM).getListener(ScfFromHandler.class.getName());
        behavior.setReadOnly(true);
        behavior.setRespondsToMode(DBConstants.INIT_MOVE, true);
        if (ProfileAnalysisField.SALESPERSON.equalsIgnoreCase(strPrimary))
            return recSCF.getField(SCF.SALESPERSON_ID);
        return recSCF.getField(SCF.SALES_REGION_ID);
    }
    field = this.getRecord(Profile.PROFILE_FILE).getField(iPrimaryField);
}
return field;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3613">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PeriodTypeField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {DAILY, "Daily"}, 
    {WEEKLY, "Weekly"}, 
    {BIWEEKLY, "Bi-weekly"},
    {SEMIMONTHLY, "Semi-monthly"},
    {MONTHLY, "Monthly"},
    {QUARTERLY, "Quarterly"},
    {YEARLY, "Yearly"},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3614">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PeriodTypeField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3616">
		<LastChanged>2012-02-01T10:22:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addSummary</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashPlanReport</MethodClassName>
		<LogicSource><![CDATA[this.getScreenRecord().getField(CashPlanScreenRecord.FROM_DATE).moveFieldToThis(this.getScreenRecord().getField(CashPlanScreenRecord.DEPOSIT_PERIOD_DATE));
this.getScreenRecord().getField(CashPlanScreenRecord.DEPOSITS).moveFieldToThis(this.getRecord(Booking.BOOKING_FILE).getField(Booking.DEPOSIT));
this.getScreenRecord().getField(CashPlanScreenRecord.RECEIPTS).moveFieldToThis(this.getScreenRecord().getField(CashPlanScreenRecord.DEPOSIT_DUE_BALANCE));
this.getScreenRecord().getField(CashPlanScreenRecord.FINAL_PAYMENTS).initField(true);
this.getScreenRecord().getField(CashPlanScreenRecord.FINAL_RECEIPTS).initField(true);
this.getScreenRecord().getField(CashPlanScreenRecord.BALANCE).initField(true);

super.addSummary(recSummary, mxKeyFields, mxDataFields);

this.getScreenRecord().getField(CashPlanScreenRecord.FROM_DATE).moveFieldToThis(this.getScreenRecord().getField(CashPlanScreenRecord.FINAL_PERIOD_DATE));
this.getScreenRecord().getField(CashPlanScreenRecord.DEPOSITS).initField(true);
this.getScreenRecord().getField(CashPlanScreenRecord.RECEIPTS).initField(true);
this.getScreenRecord().getField(CashPlanScreenRecord.FINAL_PAYMENTS).moveFieldToThis(this.getRecord(Booking.BOOKING_FILE).getField(Booking.FINAL_PAYMENT_DUE_DATE));
this.getScreenRecord().getField(CashPlanScreenRecord.FINAL_RECEIPTS).moveFieldToThis(this.getScreenRecord().getField(CashPlanScreenRecord.FINAL_DUE_LESS_DEPOSIT));
this.getScreenRecord().getField(CashPlanScreenRecord.BALANCE).moveFieldToThis(this.getScreenRecord().getField(CashPlanScreenRecord.FINAL_DUE_LESS_DEP_PYMT));

super.addSummary(recSummary, mxKeyFields, mxDataFields);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3618">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>CalcPlanTotals</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>ScreenRecord recCashPlan</MethodInterface>
		<MethodClassName>CalcPlanTotals</MethodClassName>
		<LogicSource>m_recCashPlan = recCashPlan;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3619">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcPlanTotals</MethodClassName>
		<LogicSource><![CDATA[double mainValue, currentValue;
int iErrorCode = super;   // Initialize the record
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
if (iChangeType == DBConstants.MOVE_NEXT_TYPE)
{
    Record recBooking = this.getOwner();

    double dDeposit = recBooking.getField(Booking.DEPOSIT).getValue();
    double dGross = recBooking.getField(Booking.GROSS).getValue();
    double dNet = recBooking.getField(Booking.NET).getValue();
    double dBalance = Math.max(recBooking.getField(Booking.BALANCE).getValue(), 0);

    double dAmountPaid = dNet - dBalance;

    double dDepositDue = Math.min(dDeposit, Math.max(0, dDeposit - dAmountPaid));

    double dFinalBalanceDue = Math.max(dNet - dDeposit, 0);
    double dCurrentBalanceDue = Math.min(dFinalBalanceDue, dBalance);

    m_recCashPlan.getField(CashPlanScreenRecord.DEPOSIT_DUE_BALANCE).setValue(dDepositDue);
    m_recCashPlan.getField(CashPlanScreenRecord.FINAL_DUE_LESS_DEPOSIT).setValue(dFinalBalanceDue);
    m_recCashPlan.getField(CashPlanScreenRecord.FINAL_DUE_LESS_DEP_PYMT).setValue(dCurrentBalanceDue);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3620">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CalcStartDateHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField fldDestDate, BaseField fldSourceDate, BaseField fldStartDate, BaseField fldPeriodType, BaseField fldPeriodLength</MethodInterface>
		<MethodClassName>CalcStartDateHandler</MethodClassName>
		<LogicSource><![CDATA[m_fldStartDate = (DateTimeField)fldStartDate;
m_fldPeriodType = (PeriodTypeField)fldPeriodType;
m_fldPeriodLength = (NumberField)fldPeriodLength;
m_fldDestDate = (DateTimeField)fldDestDate;
m_fldSourceDate = (DateTimeField)fldSourceDate;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3621">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcStartDateHandler</MethodClassName>
		<LogicSource><![CDATA[super;

Date dateSrc = m_fldSourceDate.getDateTime();

Date dateDest = this.calcDate(dateSrc);

m_fldDestDate.setDateTime(dateDest, bDisplayOption, DBConstants.SCREEN_MOVE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3622">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>calcDate</MethodName>
		<LogicDescription><![CDATA[Given this date, calculate the correct start date.
@param dateSrc The source date.
@return The correct start date.]]></LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>Date dateSrc</MethodInterface>
		<MethodClassName>CalcStartDateHandler</MethodClassName>
		<LogicSource><![CDATA[int iPeriodTypeDays = (int)m_fldPeriodType.getDays();
int iPeriodTypeMonths = (int)m_fldPeriodType.getMonths();

int iPeriodLength = (int)m_fldPeriodLength.getValue();

int iPeriodType = Calendar.DATE;
if (iPeriodTypeDays > 0)
{
    iPeriodLength = iPeriodLength * iPeriodTypeDays;
}
else if (iPeriodTypeMonths > 0)
{
    iPeriodLength = iPeriodLength * iPeriodTypeMonths;
    iPeriodType = Calendar.MONTH;
}
Calendar calSource = m_fldSourceDate.getCalendar();
if (calSource == null)
    return null;
Calendar calBreak = m_fldStartDate.getCalendar();
if (calBreak == null)
    return null;
if (calSource.before(calBreak))
    return null;
for (int i = 0; i < 5000; i++)
{
    Date dateBefore = calBreak.getTime();
    calBreak.add(iPeriodType, iPeriodLength);
    calBreak.getTime();     // Calc
    if (calSource.before(calBreak))
        return dateBefore;
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3623">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SwitchBookingScreenHandler</MethodClassName>
		<LogicSource><![CDATA[BaseField field = this.getOwner();
int iScreenNo = (int)field.getValue();
Record screenRecord = field.getRecord();
BaseScreen screen = (BaseScreen)screenRecord.getRecordOwner();

BasePanel parentScreen = screen.getParentScreen();
boolean bUseSameWindow = true;
ScreenLocation itsLocation = screen.getScreenLocation();

screen.removeRecord(screenRecord);
screen.free();        // Remove this screen
parentScreen.popHistory(1, false);  // Don't go back
this.getSubScreen(screenRecord, itsLocation, parentScreen, null, iScreenNo);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3624">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns>BasePanel</MethodReturns>
		<MethodInterface>Record record, ScreenLocation screenLocation, BasePanel parentScreen, Map properties, int iScreenNo</MethodInterface>
		<MethodClassName>SwitchBookingScreenHandler</MethodClassName>
		<LogicSource><![CDATA[switch(iScreenNo)
{
case DisplayTypeField.BOOKING_DISPLAY:   // Menu
    return new BookingGridScreen(record, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
case DisplayTypeField.TOUR_DISPLAY:  // Pax Maint
    return new TourGridScreen(record, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
case DisplayTypeField.TOUR_HEADER_DISPLAY: // Pax display
    return new TourHeaderGridScreen(record, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
default:
    break;
};
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3625">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
if (record instanceof ScreenRecord)
{
    this.removeRecord(record);
    this.openMainRecord();
    this.addRecord(record, false);
    this.setScreenRecord(record);
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3626">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
if (record != null)
{
    Record mainRecord = null;
    if (record instanceof ScreenRecord)
    {
        mainRecord = this.openMainRecord();
        this.setScreenRecord(record);
    }
    if (Booking.BOOKING_FILE.equalsIgnoreCase(record.getTableNames(false)))
    {
        record.free();
        mainRecord = this.openMainRecord();
    }
    if (mainRecord == null)
        mainRecord = this.getRecord(BookingLookupQuery.BOOKING_LOOKUP_QUERY_FILE);
    this.addRecord(mainRecord, true);    // Make sure this is the main record
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3627">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SwitchBookingScreenHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3628">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarClassField</MethodClassName>
		<LogicSource>return new CarClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3629">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationClassField</MethodClassName>
		<LogicSource>return new TransportationClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3630">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationClassField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), TransportationClass.DESCRIPTION_KEY, TransportationClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3631">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarClassField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), CarClass.DESCRIPTION_KEY, CarClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3632">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseClassField</MethodClassName>
		<LogicSource>return new CruiseClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3633">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseClassField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), CruiseClass.DESCRIPTION_KEY, CruiseClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3634">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirClassField</MethodClassName>
		<LogicSource>return new AirClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3635">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirClassField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), AirClass.DESCRIPTION_KEY, AirClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3636">
		<LastChanged>2012-07-19T14:20:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEntryField</MethodClassName>
		<LogicSource><![CDATA[Record recTour = this.getReferenceRecord();
BaseField fldDepartureDate = recTour.getField(Tour.DEPARTURE_DATE);
//+BaseField fldTourCode = recTour.getField(Tour.TOUR_CODE);
BaseField fldTourDesc = recTour.getField(Tour.DESCRIPTION);
//?fldAcctNo.addListener(new MainReadOnlyHandler(Account.ACCOUNT_NO_KEY));
Converter conv = new FieldDescConverter(fldDepartureDate, this);    // Use the description for this field
conv.setupDefaultView(itsLocation, targetScreen, conv, iDisplayFieldDesc, properties);
//fldTourCode.setupDefaultView(targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);

conv = new FieldLengthConverter(fldTourDesc, 30);
//return this.setupTableLookup(targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, converter, ScreenConstants.DONT_DISPLAY_FIELD_DESC, recTour, -1, Tour.DESCRIPTION, false, false);
this.addListener(new ReadSecondaryHandler(recTour, null, DBConstants.CLOSE_ON_FREE, false, false));
ScreenComponent sfDesc = createScreenComponent(ScreenModel.EDIT_TEXT, targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, conv, ScreenConstants.DONT_DISPLAY_DESC, properties);
sfDesc.setEnabled(false);
return sfDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3637">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setupKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourLookupQuery</MethodClassName>
		<LogicSource><![CDATA[KeyArea keyArea = null;
if (iKeyArea == DBConstants.MAIN_KEY_AREA)
{
	keyArea = this.makeIndex(DBConstants.UNIQUE, "PrimaryKey");
	keyArea.addKeyField(this.getField(Tour.TOUR_FILE, Tour.ID), DBConstants.ASCENDING);
}
return keyArea;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3639">
		<LastChanged>2012-02-01T11:43:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrx</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(ApTrx.TRX_STATUS_ID).addListener(new UpdateActiveTrxStatus(this.getField(ApTrx.ACTIVE_TRX)));
this.getField(ApTrx.DEPARTURE_DATE).addListener(new GetDepartureDateHandler((TourField)this.getField(ApTrx.TOUR_ID)));
this.addListener(new NoDeleteModifyHandler(true, false));
Record recApControl = null;
RecordOwner recordOwner = this.findRecordOwner();
if (recordOwner != null)
    recApControl = (Record)recordOwner.getRecord(ApControl.AP_CONTROL_FILE);
if (recApControl == null)
{
    recApControl = new ApControl(recordOwner);
    this.addListener(new FreeOnFreeHandler(recApControl));
}
if (recApControl.getField(ApControl.AUTO_AP_CODE).getState() == true)
    this.addListener(new MoveIDToCodeHandler((String)null));
this.addListener(new ApTrxStatusHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3640">
		<LastChanged>2013-01-22T05:45:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepEstScreen</MethodClassName>
		<LogicSource><![CDATA[if (MenuConstants.DISPLAY.equalsIgnoreCase(strCommand))
{
    iCommandOptions = ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER;
    boolean bReadCurrentRecord = false;
    int iDocMode = ApTrx.TOUR_AP_SCREEN | ScreenConstants.SELECT_MODE;
    Map<String,Object> properties = new Hashtable<String,Object>();
    properties.put(ApTrxClassField.DISPLAY_TYPE_PARAM, Integer.toString(ApTrxClassField.ALL));
    if (!this.getMainRecord().getField(ApTrx.TOUR_ID).isNull())
        properties.put(DBParams.HEADER_OBJECT_ID, this.getMainRecord().getField(ApTrx.TOUR_ID).toString());

    return (this.onForm(null, iDocMode, bReadCurrentRecord, iCommandOptions, properties) != null);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3641">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setEnabled</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepEstScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call inherrited
for (int i = 0; i < this.getMainRecord().getFieldCount(); i++)
{
    this.getMainRecord().getField(i).setEnabled(bEnable);
}
this.getMainRecord().getField(ApTrx.TRX_STATUS_ID).setEnabled(false);
this.getMainRecord().getField(ApTrx.ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3642">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getComponentAfter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepEstScreen</MethodClassName>
		<LogicSource><![CDATA[if (iSelectField == DBConstants.SELECT_FIRST_FIELD)
{
    if (this.getMainRecord().getField(ApTrx.DESCRIPTION).getComponent(0) != null)
        if (((ScreenField)this.getMainRecord().getField(ApTrx.DESCRIPTION).getComponent(0)).isEnabled())
    {   // The screen is enabled, focus on the vendor code
        return (ScreenField)((ReferenceField)this.getMainRecord().getField(ApTrx.VENDOR_ID)).getReferenceRecord().getField(Vendor.CODE).getComponent(0);
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3648">
		<LastChanged>2012-04-01T10:41:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,150</Sequence>
		<MethodName>getDrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateDepEstHandler</MethodClassName>
		<LogicSource><![CDATA[ProductCategoryModel recProductCat = this.getProductCategory();
if (recProductCat != null)
    return (ReferenceField)recProductCat.getField(ProductCategoryModel.LAND_ACCOUNT_ID);    // Cost of tours
return (ReferenceField)this.getApControl().getField(ApControl.COST_ACCOUNT_ID);    // Rarely]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3649">
		<LastChanged>2012-04-01T10:42:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getCrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateDepEstHandler</MethodClassName>
		<LogicSource><![CDATA[ProductCategoryModel recProductCat = this.getProductCategory();
if (recProductCat != null)
    return (ReferenceField)recProductCat.getField(ProductCategoryModel.UNINV_ACCOUNT_ID);    // Uninvoiced est cost of tours
return null;    // Never?]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3650">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>getTrxAmount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateDepEstHandler</MethodClassName>
		<LogicSource>return this.getOwner().getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL).getValue();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3651">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTypeAutoField</MethodClassName>
		<LogicSource>// Not a reference: return new ProductType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3652">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTypeAutoField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {ProductType.TOUR_CODE, ProductType.TOUR}, 
    {ProductType.AIR_CODE, ProductType.AIR}, 
    {ProductType.HOTEL_CODE, ProductType.HOTEL}, 
    {ProductType.LAND_CODE, ProductType.LAND}, 
    {ProductType.TRANSPORTATION_CODE, ProductType.TRANSPORTATION}, 
    {ProductType.CAR_CODE, ProductType.CAR},
    {ProductType.CRUISE_CODE, ProductType.CRUISE},
    {ProductType.ITEM_CODE, ProductType.ITEM}, 
    {ProductType.UNKNOWN_CODE, ProductType.UNKNOWN}, 
};
return string;  // Never (hopefully)]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3653">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTypeAutoField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3654">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>initField</MethodName>
		<LogicDescription><![CDATA[Initialize this to the actual product type code of this file
(if it isn't already set).]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTypeAutoField</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super.initField(bDisplayOption);
if (iErrorCode == DBConstants.NORMAL_RETURN)
    if (DBConstants.BLANK.equals(this.toString()))
        if (this.getRecord() instanceof Product)
{
    this.getProductType();
    String strProductCode = m_recProductType.getField(ProductType.CODE).toString();
    if (strProductCode != null)
        if (strProductCode.length() > 0)
            this.setString(strProductCode, bDisplayOption, DBConstants.INIT_MOVE);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3655">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTypeAutoField</MethodClassName>
		<LogicSource><![CDATA[m_recProductType = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3656">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>getApControl</MethodName>
		<LogicDescription>Support method for quickly getting the A/P control file.</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UpdateApTrxHandler</MethodClassName>
		<LogicSource><![CDATA[Record recApControl = null;
RecordOwner recordOwner = this.getOwner().findRecordOwner();
if (recordOwner != null)
    recApControl = (Record)recordOwner.getRecord(ApControl.AP_CONTROL_FILE);
if (recApControl == null)
{
    recApControl = m_recApControl = new ApControl(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recApControl);
}
return recApControl;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3657">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateApTrxHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recApControl != null)
    m_recApControl.free();
m_recApControl = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3658">
		<LastChanged>2013-01-22T05:45:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InvoiceScreen</MethodClassName>
		<LogicSource><![CDATA[if (MenuConstants.LOOKUP.equalsIgnoreCase(strCommand))
{
    iCommandOptions = ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER;
    boolean bReadCurrentRecord = false;
    int iDocMode = ApTrx.VENDOR_AP_SCREEN | ScreenConstants.SELECT_MODE;
    Map<String,Object> properties = new Hashtable<String,Object>();
    properties.put(ApTrxClassField.DISPLAY_TYPE_PARAM, Integer.toString(ApTrxClassField.DEPARTURE_ESTIMATES));
    if (!this.getMainRecord().getField(ApTrx.VENDOR_ID).isNull())
        properties.put(DBParams.HEADER_OBJECT_ID, this.getMainRecord().getField(ApTrx.VENDOR_ID).toString());

    return (this.onForm(null, iDocMode, bReadCurrentRecord, iCommandOptions, properties) != null);
}
if (MenuConstants.SUBMIT.equalsIgnoreCase(strCommand))
{   // Special case of submitting a departure estimate with "no" changes
    Record record = this.getMainRecord();
    if (!record.isModified())
    {
        BaseField fldInvoiceAmount = this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.INVOICE_AMOUNT);
        if (!fldInvoiceAmount.isNull())
            fldInvoiceAmount.setModified(true);
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3659">
		<LastChanged>2012-02-01T08:12:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>EnableScreenHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>String fsFieldSeq</MethodInterface>
		<MethodClassName>EnableScreenHandler</MethodClassName>
		<LogicSource>m_fsFieldSeq = fsFieldSeq;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3660">
		<LastChanged>2012-02-01T08:12:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>EnableScreenHandler*2</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>String fsFieldSeq, int iMaxSize</MethodInterface>
		<MethodClassName>EnableScreenHandler</MethodClassName>
		<LogicSource><![CDATA[m_iMaxSize = iMaxSize;
m_fsFieldSeq = fsFieldSeq;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3662">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EnableScreenHandler</MethodClassName>
		<LogicSource><![CDATA[m_rgObject = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3663">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addComparison</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Object objValue</MethodInterface>
		<MethodClassName>EnableScreenHandler</MethodClassName>
		<LogicSource><![CDATA[for (int i = 0; i < m_rgObject.length; i++)
{
    if (m_rgObject[i] == null)
    {
        m_rgObject[i] = objValue;
        return;
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3664">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EnableScreenHandler</MethodClassName>
		<LogicSource><![CDATA[// Only allow fin estimates to be changed
BaseField field = this.getOwner().getField(m_fsFieldSeq);
boolean bEnabled = false;
for (int i = 0; i < m_rgObject.length; i++)
{
    if (m_rgObject[i] != null)
    {
        if (m_rgObject[i].equals(field.getData()))
        {
            bEnabled = true;
            break;
        }
    }
}
this.setEnabled(bEnabled);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3665">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EnableScreenHandler</MethodClassName>
		<LogicSource><![CDATA[this.setEnabled(true);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3666">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setEnabled</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>boolean bEnable</MethodInterface>
		<MethodClassName>EnableScreenHandler</MethodClassName>
		<LogicSource><![CDATA[BasePanel screen = (BasePanel)this.getOwner().getRecordOwner();
screen.setEnabled(bEnable);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3667">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EnableScreenHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (owner != null)
{
    m_rgObject = new Object[m_iMaxSize];
    for (int i = 0; i < m_rgObject.length; i++)
    {
        m_rgObject[i] = null;
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3668">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>setEnabled</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InvoiceScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call inherrited
for (int i = 0; i < this.getMainRecord().getFieldCount(); i++)
{
    this.getMainRecord().getField(i).setEnabled(bEnable);
}
this.getMainRecord().getField(ApTrx.TRX_STATUS_ID).setEnabled(false);
this.getMainRecord().getField(ApTrx.DEPARTURE_ESTIMATE).setEnabled(false);
this.getMainRecord().getField(ApTrx.ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3669">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherDetailGridScreen</MethodClassName>
		<LogicSource>return new BookingDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3670">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getHeaderRecord().getField(ApTrx.ID).addListener(new FieldReSelectHandler(this));

this.setEnabled(false);	// Do not do setEdititing(false) as this will incorrectly optomize the query
this.setAppending(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3671">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>VoucherDetailGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>VoucherDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3672">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherDetailGridScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3674">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record mergeTable = this.getMainRecord();
this.addColumn(new MultipleTableFieldConverter(mergeTable, BookingDetail.STATUS_SUMMARY));

this.addColumn(new MultipleTableFieldConverter(mergeTable, BookingDetail.DETAIL_DATE));
this.addColumn(new ProductDescConverter(mergeTable));
this.addColumn(new MultipleTableFieldConverter(mergeTable, BookingDetail.PRODUCT_STATUS_ID));

this.addColumn(new MultipleTableFieldConverter(mergeTable, BookingDetail.TOTAL_COST_LOCAL));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3675">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherDetailGridScreen</MethodClassName>
		<LogicSource>return new ApTrxHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3677">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
String strPaymentHistory = PaymentHistory.PAYMENT_HISTORY;
strPaymentHistory = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strPaymentHistory);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strPaymentHistory, PaymentHistory.PAYMENT_HISTORY_ICON, PaymentHistory.PAYMENT_HISTORY_FILE, null);

new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);

String strVendor = Vendor.VENDOR_FILE + ' ' + MenuConstants.DISPLAY;
strVendor = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strVendor);
new SButtonBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strVendor, MenuConstants.DISPLAY, Vendor.VENDOR_FILE, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3678">
		<LastChanged>2013-01-22T05:51:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (Vendor.VENDOR_FILE.equalsIgnoreCase(strCommand))
{
    iCommandOptions = ScreenConstants.USE_SAME_WINDOW | DBConstants.PUSH_TO_BROWSER;
    boolean bReadCurrentRecord = false;
    boolean bLinkGridToQuery = false;
    int iDocMode = ApTrx.VENDOR_AP_SCREEN;
    Map<String,Object> properties = new Hashtable<String,Object>();
//?    properties.put(this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE).getFieldName(), this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE).toString());
    if (!this.getMainRecord().getField(ApTrx.VENDOR_ID).isNull())
        properties.put(DBParams.HEADER_OBJECT_ID, this.getMainRecord().getField(ApTrx.VENDOR_ID).toString());

    Record recordMain = this.getMainRecord();
    if (recordMain.getListener(OnSelectHandler.class.getName()) != null)
    {
        OnSelectHandler listener = (OnSelectHandler)recordMain.getListener(OnSelectHandler.class.getName());
        recordMain = listener.getRecordToSync();
        bLinkGridToQuery = true;
        iDocMode = iDocMode | ScreenConstants.SELECT_MODE;
    }
    boolean bSuccess = (this.onForm(recordMain, iDocMode, bReadCurrentRecord, iCommandOptions, bLinkGridToQuery, properties) != null);
    if (bLinkGridToQuery)
        this.free();  // Note: I will get a warning that the remote listener was not removed since the server thinks this is the same listener (ignore)
    return bSuccess;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3679">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();

new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION));

String strPaymentHistory = PaymentHistory.PAYMENT_HISTORY;
strPaymentHistory = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strPaymentHistory);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, PaymentHistory.PAYMENT_HISTORY_ICON, PaymentHistory.PAYMENT_HISTORY_FILE, strPaymentHistory);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3680">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
String strPaymentHistory = PaymentHistory.PAYMENT_HISTORY;
strPaymentHistory = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strPaymentHistory);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(ApTrx.PRODUCT_DETAIL), MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strPaymentHistory, PaymentHistory.PAYMENT_HISTORY_ICON, PaymentHistory.PAYMENT_HISTORY_FILE, null);

if (!this.isContactDisplay())
{
    new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);
    
    String strTour = Tour.TOUR_FILE + ' ' + MenuConstants.DISPLAY;
    strTour = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strTour);
    new SButtonBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strTour, MenuConstants.DISPLAY, Tour.TOUR_FILE, null);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3681">
		<LastChanged>2013-01-22T05:49:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (Tour.TOUR_FILE.equalsIgnoreCase(strCommand))
{
    iCommandOptions = ScreenConstants.USE_SAME_WINDOW | DBConstants.PUSH_TO_BROWSER;
    boolean bReadCurrentRecord = false;
    boolean bLinkGridToQuery = false;
    int iDocMode = ApTrx.TOUR_AP_SCREEN;
    Map<String,Object> properties = new Hashtable<String,Object>();
    properties.put(this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE).getFieldName(), this.getScreenRecord().getField(VendorScreenRecord.DISPLAY_TYPE).toString());
    if (!this.getMainRecord().getField(ApTrx.TOUR_ID).isNull())
        properties.put(DBParams.HEADER_OBJECT_ID, this.getMainRecord().getField(ApTrx.TOUR_ID).toString());

    Record recordMain = this.getMainRecord();
    if (recordMain.getListener(OnSelectHandler.class.getName()) != null)
    {
        OnSelectHandler listener = (OnSelectHandler)recordMain.getListener(OnSelectHandler.class.getName());
        recordMain = listener.getRecordToSync();
        bLinkGridToQuery = true;
        iDocMode = iDocMode | ScreenConstants.SELECT_MODE;
    }
    boolean bSuccess = (this.onForm(recordMain, iDocMode, bReadCurrentRecord, iCommandOptions, bLinkGridToQuery, properties) != null);
    if (bLinkGridToQuery)
        this.free();  // Note: I will get a warning that the remote listener was not removed since the server thinks this is the same listener (ignore)
    return bSuccess;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3682">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();

if (!this.isContactDisplay())
{
    String strTour = Tour.TOUR_FILE + ' ' + MenuConstants.DISPLAY;
    strTour = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strTour);
    new SButtonBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.DISPLAY, Tour.TOUR_FILE, strTour);
    
    new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION));
}

String strPaymentHistory = PaymentHistory.PAYMENT_HISTORY;
strPaymentHistory = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strPaymentHistory);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, PaymentHistory.PAYMENT_HISTORY_ICON, PaymentHistory.PAYMENT_HISTORY_FILE, strPaymentHistory);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(ApTrx.PRODUCT_DETAIL));
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3683">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();

new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(ApTrx.PRODUCT_DETAIL), MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);

String strPaymentHistory = PaymentHistory.PAYMENT_HISTORY;
strPaymentHistory = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strPaymentHistory);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strPaymentHistory, PaymentHistory.PAYMENT_HISTORY_ICON, PaymentHistory.PAYMENT_HISTORY_FILE, null);

strPaymentHistory = PaymentHistory.PAYMENT_DISTRIBUTION;
strPaymentHistory = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strPaymentHistory);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strPaymentHistory, PaymentHistory.PAYMENT_DISTRIBUTION_ICON, PaymentHistory.PAYMENT_DISTRIBUTION, null);

new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);

String strVendor = Vendor.VENDOR_FILE + ' ' + MenuConstants.DISPLAY;
strVendor = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strVendor);
String strTour = Tour.TOUR_FILE + ' ' + MenuConstants.DISPLAY;
strTour = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strTour);
new SButtonBox(toolScreen.getNextLocation(ScreenConstants.FLUSH_LEFT, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strVendor, MenuConstants.DISPLAY, Vendor.VENDOR_FILE, null);
new SButtonBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strTour, MenuConstants.DISPLAY, Tour.TOUR_FILE, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3684">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxScreen</MethodClassName>
		<LogicSource><![CDATA[if (Vendor.VENDOR_FILE.equalsIgnoreCase(strCommand))
    return (this.onForm(null, ApTrx.VENDOR_AP_SCREEN, true, iCommandOptions, null) != null);
if (Tour.TOUR_FILE.equalsIgnoreCase(strCommand))
    return (this.onForm(null, ApTrx.TOUR_AP_SCREEN, true, iCommandOptions, null) != null);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3685">
		<LastChanged>2012-01-18T20:23:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxClassField</MethodClassName>
		<LogicSource><![CDATA[ScreenComponent screenField = null;
for (int iBitPosition = ALL; iBitPosition <= PREPAYMENTS; iBitPosition++)    // Calendar.SUNDAY -> Calendar.SATURDAY
{
    FieldConverter convBit = new RadioConverter((Converter)converter, Integer.toString(iBitPosition), true);
    convBit = new FieldDescConverter(convBit, this.getBitDesc(iBitPosition));
    screenField = createScreenComponent(ScreenModel.RADIO_BUTTON, itsLocation, targetScreen, convBit, iDisplayFieldDesc, properties);
    itsLocation = targetScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR);
}
return screenField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3686">
		<LastChanged>2012-01-31T05:29:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doLocalCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FilterApTrxHandler</MethodClassName>
		<LogicSource><![CDATA[int iValue = ApTrxClassField.ALL;
if (m_fldApTrxClass != null)
    iValue = (int)m_fldApTrxClass.getValue();
if (m_iLastValue != iValue)
{
    this.clearFilter();
    if (iValue == ApTrxClassField.INVOICES)
    {
        this.addTrxStatusID(ApTrx.INVOICE);
        this.addTrxStatusID(ApTrx.INVOICE_NON_TOUR);
    }
    else if (iValue == ApTrxClassField.DEPARTURE_ESTIMATES)
    {
        this.addTrxStatusID(ApTrx.DEPARTURE_EST_MANUAL);
        this.addTrxStatusID(ApTrx.DEP_ESTIMATE);
    }
    else if (iValue == ApTrxClassField.PREPAYMENTS)
    {
        this.addTrxStatusID(ApTrx.PREPAYMENT_REQUEST);
        this.addTrxStatusID(ApTrx.PREPAYMENT);
        this.addTrxStatusID(ApTrx.DEBIT_MEMO);
        this.addTrxStatusID(ApTrx.CREDIT_INVOICE);
        this.addTrxStatusID(ApTrx.CREDIT_INVOICE_NON_TOUR);
    }
    m_iLastValue = iValue;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3687">
		<LastChanged>2012-02-01T14:46:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>FilterApTrxHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null, ApTrx.TRX_STATUS_ID</MethodReturns>
		<MethodInterface>BaseField fldApTrxClass</MethodInterface>
		<MethodClassName>FilterApTrxHandler</MethodClassName>
		<LogicSource>m_fldApTrxClass = fldApTrxClass;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3688">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FilterApTrxHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recTrxStatus != null)
    m_recTrxStatus.free();
m_recTrxStatus = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3689">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getBitDesc</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>int iBitPosition</MethodInterface>
		<MethodClassName>ApTrxClassField</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = null;
if (this.getRecord().getRecordOwner() != null)
    if (this.getRecord().getRecordOwner().getTask() != null)
        application = (BaseApplication)this.getRecord().getRecordOwner().getTask().getApplication();
String string;
switch (iBitPosition)
{
    case ApTrxClassField.ALL:
        string = "All";break;
    case ApTrxClassField.INVOICES:
        string = "Invoices";break;
    case ApTrxClassField.PREPAYMENTS:
        string = "Prepayments";break;
    case ApTrxClassField.DEPARTURE_ESTIMATES:
    default:
        string = "Dep. est."; break;
}
if (application != null)
    string = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(string);
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3690">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>initField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxClassField</MethodClassName>
		<LogicSource>return this.setValue(ApTrxClassField.ALL, bDisplayOption, DBConstants.INIT_MOVE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3691">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentScreen</MethodClassName>
		<LogicSource><![CDATA[if ((MenuConstants.LOOKUP.equalsIgnoreCase(strCommand))
    || (Vendor.VENDOR_FILE.equalsIgnoreCase(strCommand))
    || (Tour.TOUR_FILE.equalsIgnoreCase(strCommand)))
{
    Record recordMain = this.getMainRecord();

    ScreenLocation itsLocation = null;
    BasePanel parentScreen = Screen.makeWindow(this.getTask().getApplication());
    Task task = parentScreen.getTask();//getAppletScreen().getScreenFieldView().getControl();
    task.setProperty("DisplayType", Integer.toString(ApTrxClassField.PREPAYMENTS));
    int iDocMode = ApTrx.TOUR_AP_SCREEN;
    if (strCommand.equalsIgnoreCase(Vendor.VENDOR_FILE))
        iDocMode = ApTrx.VENDOR_AP_SCREEN;
    iDocMode = iDocMode | ScreenConstants.SELECT_MODE;

    boolean bCloneThisQuery = true;
    boolean bReadCurrentRecord = false;
    boolean bUseBaseTable = true;
    boolean bLinkGridToQuery = true;
    this.finalizeThisScreen();  // Validate current control, update record, get ready to close screen.
    ScreenParent screen = recordMain.makeScreen(itsLocation, parentScreen, iDocMode, bCloneThisQuery, bReadCurrentRecord, bUseBaseTable, bLinkGridToQuery, null);
    return true;    // Success
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3692">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setEnabled</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call inherrited
for (int i = 0; i < this.getMainRecord().getFieldCount(); i++)
{
    this.getMainRecord().getField(i).setEnabled(bEnable);
}
this.getMainRecord().getField(ApTrx.ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3693">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
String strVendor = Vendor.VENDOR_FILE + ' ' + MenuConstants.LOOKUP;
strVendor = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strVendor);
String strTour = Tour.TOUR_FILE + ' ' + MenuConstants.LOOKUP;
strTour = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(strTour);
new SButtonBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strVendor, MenuConstants.LOOKUP, Vendor.VENDOR_FILE, null);
new SButtonBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strTour, MenuConstants.LOOKUP, Tour.TOUR_FILE, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3696">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addTrxStatusID</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strApTrxDesc</MethodInterface>
		<MethodClassName>FilterApTrxHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recTrxStatus == null)
{
    RecordOwner recordOwner = this.getOwner().findRecordOwner();
    m_recTrxStatus = new TrxStatus(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recTrxStatus);
}
this.addFilter(new Integer(m_recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, strApTrxDesc)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3697">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateDebitMemoHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    if ((iChangeType == DBConstants.AFTER_UPDATE_TYPE)
        || (iChangeType == DBConstants.AFTER_ADD_TYPE))
{
    try {
        this.getOwner().setHandle(this.getOwner().getHandle(DBConstants.DATA_SOURCE_HANDLE), DBConstants.DATA_SOURCE_HANDLE);
        this.getOwner().edit();
        double dAmount = this.getOwner().getField(ApTrx.INVOICE_AMOUNT).getValue();
        if (dAmount > 0)
            this.getOwner().getField(ApTrx.INVOICE_AMOUNT).setValue(-dAmount);
        double dAmountUSD = this.getOwner().getField(ApTrx.INVOICE_LOCAL).getValue();
        if (dAmountUSD > 0)
            this.getOwner().getField(ApTrx.INVOICE_LOCAL).setValue(-dAmountUSD);
        this.getOwner().getField(ApTrx.ACCOUNT_ID).moveFieldToThis(((Record)this.getOwner().getRecordOwner().getScreenRecord()).getField(DebitMemoScreenRecord.PP_ACCOUNT_ID));
        this.getOwner().set();
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3698">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setState</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorSelectCheckmark</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super.setState(bState, bDisplayOption, iMoveMode);
if (iErrorCode == DBConstants.NORMAL_RETURN)
    if (bState == true) if (this.getState() == false)
        ((BaseField)this.getField()).moveFieldToThis(((BaseField)this.getField()).getRecord().getField(ApTrx.INVOICE_BALANCE));
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3699">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentRequestHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(PaymentRequestScreenRecord.BANK_ACCT_ID).setEnabled(true);
this.getScreenRecord().getField(PaymentRequestScreenRecord.MANUAL_CHECKS).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3700">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GenPaymentDetail</MethodClassName>
		<LogicSource>return this.getRecord(ApTrx.AP_TRX_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3701">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckCanned</MethodClassName>
		<LogicSource>return new PaymentRequest(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3702">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckCanned</MethodClassName>
		<LogicSource><![CDATA[super;
new ApControl(this);
new ApTrx(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3703">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckCanned</MethodClassName>
		<LogicSource>return new PrintCheckScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3704">
		<LastChanged>2012-02-01T03:18:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckCanned</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getProperty(this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).getFieldName()) != null)
    this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getProperty(this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).getFieldName())));
else
    this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.AP_BANK_ACCT_ID)));
Record recBankAcct = ((ReferenceField)this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID)).getReference();  // Make sure this record is referenced

FieldListener listener = new ReadSecondaryHandler(recBankAcct);
this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).addListener(listener);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);

this.getMainRecord().addListener(new SubFileFilter(recBankAcct));
this.getMainRecord().addListener(new CompareFileFilter(PaymentRequest.CHECK_NO, (String)null, "=", null, false));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.REPORT_COUNT), false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.REPORT_TOTAL), PaymentRequest.AMOUNT, false, true));

Record recApTrx = this.getRecord(ApTrx.AP_TRX_FILE);
recApTrx.setKeyArea(ApTrx.VENDOR_ID_KEY);
recApTrx.addListener(new SubFileFilter(this.getMainRecord().getField(PaymentRequest.VENDOR_ID), ApTrx.VENDOR_ID, null, null, null, null));

recBankAcct.addListener(new MoveOnValidHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.NEXT_CHECK_NO), recBankAcct.getField(BankAcct.NEXT_CHECK)));
this.getScreenRecord().getField(PrintCheckScreenRecord.NEXT_CHECK_NO).setSFieldToProperty();
this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_DATE).setSFieldToProperty();
this.getScreenRecord().getField(PrintCheckScreenRecord.CHECKS_TO_PRINT).setSFieldToProperty();

this.getMainRecord().addListener(new BumpCheckNoHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_NO), this.getScreenRecord().getField(PrintCheckScreenRecord.NEXT_CHECK_NO)));

Record recVendor = ((ReferenceField)this.getMainRecord().getField(PaymentRequest.VENDOR_ID)).getReferenceRecord();
this.getMainRecord().getField(PaymentRequest.VENDOR_ID).addListener(new ReadSecondaryHandler(recVendor));
recVendor.addListener(new MoveOnValidHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.PAYEE), recVendor.getField(Vendor.VENDOR_NAME)));
this.getMainRecord().addListener(new MoveOnValidHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_AMOUNT), this.getMainRecord().getField(PaymentRequest.AMOUNT)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3705">
		<LastChanged>2012-01-23T09:38:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckCanned</MethodClassName>
		<LogicSource>return new PrintCheckToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3706">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckCanned</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3707">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckCanned</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.POST))
    || (strCommand.equalsIgnoreCase(PrintCheckJournal.CANNED_CHECKS))
    || (strCommand.equalsIgnoreCase(PrintCheckJournal.XML_CHECKS)))
{
    String strScreen = PrintCheckPost.class.getName();
    if (strCommand.equalsIgnoreCase(PrintCheckJournal.CANNED_CHECKS))
        strScreen = PrintCheckCanned.class.getName();
    if (strCommand.equalsIgnoreCase(PrintCheckJournal.XML_CHECKS))
        strScreen = PrintCheckXML.class.getName();

    strCommand = this.getScreenURL();
    strCommand = this.addScreenParams(this, strCommand);
    this.getParentScreen().popHistory(1, false);
    this.getParentScreen().pushHistory(strCommand, false);

    strCommand = Utility.addURLParam(null, DBParams.SCREEN, strScreen);
    strCommand = this.addScreenParams(this, strCommand);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3708">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>layoutPrintControl</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckCanned</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3709">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckXML</MethodClassName>
		<LogicSource>return new PaymentRequest(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3710">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckXML</MethodClassName>
		<LogicSource><![CDATA[super;
new ApControl(this);
new ApTrx(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3711">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckXML</MethodClassName>
		<LogicSource>return new PrintCheckScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3712">
		<LastChanged>2012-02-01T12:25:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckXML</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getProperty(this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).getFieldName()) != null)
    this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getProperty(this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).getFieldName())));
else
    this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).addListener(new InitFieldHandler(this.getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.AP_BANK_ACCT_ID)));
Record recBankAcct = ((ReferenceField)this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID)).getReference();  // Make sure this record is referenced

FieldListener listener = new ReadSecondaryHandler(recBankAcct);
this.getScreenRecord().getField(PrintCheckScreenRecord.BANK_ACCT_ID).addListener(listener);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);

this.getMainRecord().addListener(new SubFileFilter(recBankAcct));
this.getMainRecord().addListener(new CompareFileFilter(PaymentRequest.CHECK_NO, (String)null, "=", null, false));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.REPORT_COUNT), false, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.REPORT_TOTAL), PaymentRequest.AMOUNT, false, true));

Record recApTrx = this.getRecord(ApTrx.AP_TRX_FILE);
recApTrx.setKeyArea(ApTrx.VENDOR_ID_KEY);
recApTrx.addListener(new SubFileFilter(this.getMainRecord().getField(PaymentRequest.VENDOR_ID), ApTrx.VENDOR_ID, null, null, null, null));

recBankAcct.addListener(new MoveOnValidHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.NEXT_CHECK_NO), recBankAcct.getField(BankAcct.NEXT_CHECK)));
this.getScreenRecord().getField(PrintCheckScreenRecord.NEXT_CHECK_NO).setSFieldToProperty();
this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_DATE).setSFieldToProperty();
this.getScreenRecord().getField(PrintCheckScreenRecord.CHECKS_TO_PRINT).setSFieldToProperty();

this.getMainRecord().addListener(new BumpCheckNoHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_NO), this.getScreenRecord().getField(PrintCheckScreenRecord.NEXT_CHECK_NO)));

Record recVendor = ((ReferenceField)this.getMainRecord().getField(PaymentRequest.VENDOR_ID)).getReferenceRecord(this);
this.getMainRecord().getField(PaymentRequest.VENDOR_ID).addListener(new ReadSecondaryHandler(recVendor));
recVendor.addListener(new MoveOnValidHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.PAYEE), recVendor.getField(Vendor.VENDOR_NAME)));
this.getMainRecord().addListener(new MoveOnValidHandler(this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_AMOUNT), this.getMainRecord().getField(PaymentRequest.AMOUNT)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3713">
		<LastChanged>2012-01-23T09:38:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckXML</MethodClassName>
		<LogicSource>return new PrintCheckXMLToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3714">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckXML</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3715">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckXML</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3716">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckXML</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.POST))
    || (strCommand.equalsIgnoreCase(PrintCheckJournal.CANNED_CHECKS))
    || (strCommand.equalsIgnoreCase(PrintCheckJournal.XML_CHECKS)))
{
    String strScreen = PrintCheckPost.class.getName();
    if (strCommand.equalsIgnoreCase(PrintCheckJournal.CANNED_CHECKS))
        strScreen = PrintCheckCanned.class.getName();
    if (strCommand.equalsIgnoreCase(PrintCheckJournal.XML_CHECKS))
        strScreen = PrintCheckXML.class.getName();

    strCommand = this.getScreenURL();
    strCommand = this.addScreenParams(this, strCommand);
    this.getParentScreen().popHistory(1, false);
    this.getParentScreen().pushHistory(strCommand, false);

    strCommand = Utility.addURLParam(null, DBParams.SCREEN, strScreen);
    strCommand = this.addScreenParams(this, strCommand);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3717">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckDetail</MethodClassName>
		<LogicSource>return this.getRecord(ApTrx.AP_TRX_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3718">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckXMLToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3719">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckXML</MethodClassName>
		<LogicSource>return new PrintCheckDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3720">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3721">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>removeTrxHeader</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource><![CDATA[BumpCheckNoHandler listener = (BumpCheckNoHandler)this.getMainRecord().getListener(BumpCheckNoHandler.class.getName());
if (listener != null)
{
    int iNextCheckNo = listener.getNextCheckNo();
    try {
        BankAcct recBankAcct = (BankAcct)((ReferenceField)this.getRecord(PaymentRequest.PAYMENT_REQUEST_FILE).getField(PaymentRequest.BANK_ACCT_ID)).getReferenceRecord();
        if (recBankAcct != null)
        {
            BankAcct recBankAcct2 = null;
            try {
                recBankAcct2 = (BankAcct)recBankAcct.clone();   // I Do this since recBankAcct is linked to a popup which makes it grid and readonly.
                recBankAcct2.addNew();
                recBankAcct2.getField(BankAcct.ID).moveFieldToThis(this.getRecord(PaymentRequest.PAYMENT_REQUEST_FILE).getField(PaymentRequest.BANK_ACCT_ID));
                if (recBankAcct2.seek(null))
                {   // Always
                    recBankAcct2.edit();
                    recBankAcct2.getField(BankAcct.NEXT_CHECK).setValue(iNextCheckNo);
                    recBankAcct2.set();
                }
            } catch (CloneNotSupportedException ex) {
                ex.printStackTrace();
            } finally {
                recBankAcct2.free();
            }
        }
    } catch (DBException ex)    {
        ex.printStackTrace();
        return false;
    }
}
return true;    // Don't need to call super since there is no batch header]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3722">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getDetailRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource>return this.getRecord(PaymentRequest.PAYMENT_REQUEST_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3723">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getDistRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource>return this.getRecord(ApTrx.AP_TRX_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3724">
		<LastChanged>2012-01-31T10:43:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>getBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource>return (BaseTrx)this.getRecord(PaymentHistory.PAYMENT_HISTORY_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3725">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>checkValidHeader</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource>return true;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3726">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>postBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = true;
// Step 2b - Post the transaction side of the distribution.
BankAcct recBankAcct = (BankAcct)((ReferenceField)this.getRecord(PaymentRequest.PAYMENT_REQUEST_FILE).getField(PaymentRequest.BANK_ACCT_ID)).getReference();
BaseField fldCrAccountID = recBankAcct.getField(BankAcct.ACCOUNT_ID);

Record recPaymentRequest = this.getDetailRecord();
double dAmount = -recPaymentRequest.getField(PaymentRequest.AMOUNT).getValue();

// Now post the total deposit amount
BaseTrx recBankTrx = (BankTrx)this.getRecord(BankTrx.BANK_TRX_FILE);
TrxStatus recTrxStatus = (TrxStatus)this.getRecord(TrxStatus.TRX_STATUS_FILE);
try   {
// Step 2a - Create and write the bank transaction (in BankTrx).
    recBankTrx.addNew();
    recBankTrx.getField(BankTrx.TRX_STATUS_ID).moveFieldToThis(recTransactionType.getField(TransactionType.SOURCE_TRX_STATUS_ID));
    recBankTrx.getField(BankTrx.PAYEE_TRX_DESC_ID).moveFieldToThis(recTransactionType.getField(TransactionType.TRX_DESC_ID));
    recBankTrx.getField(BankTrx.PAYEE_ID).moveFieldToThis(recPaymentRequest.getField(PaymentRequest.VENDOR_ID));
    recBankTrx.getField(BankTrx.PAYEE_NAME).moveFieldToThis(((ReferenceField)recPaymentRequest.getField(PaymentRequest.VENDOR_ID)).getReference().getField(Vendor.VENDOR_NAME));
    recBankTrx.getField(BankTrx.TRX_DATE).moveFieldToThis(this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_DATE));
    recBankTrx.getField(BankTrx.TRX_ENTRY).initField(DBConstants.DONT_DISPLAY);
    if (recPaymentRequest.getField(PaymentRequest.CHECK_NO).isNull())
    {   // Automatic check
        recBankTrx.getField(BankTrx.TRX_NUMBER).moveFieldToThis(this.getScreenRecord().getField(PrintCheckScreenRecord.CHECK_NO));
        recBankTrx.getField(BankTrx.MANUAL).setState(false);
    }
    else
    {   // Manual check
        recBankTrx.getField(BankTrx.TRX_NUMBER).moveFieldToThis(recPaymentRequest.getField(PaymentRequest.CHECK_NO));
        recBankTrx.getField(BankTrx.MANUAL).setState(true);
    }
    recBankTrx.getField(BankTrx.BANK_ACCT_ID).moveFieldToThis(recBankAcct.getField(BankAcct.ID));
    recBankTrx.getField(BankTrx.AMOUNT).setValue(dAmount);
    ((BankTrx)recBankTrx).calcUSDAmounts(true);
    double dAmountUSD = recBankTrx.getField(BankTrx.AMOUNT_LOCAL).getValue();
    recBankTrx.getField(BankTrx.COMMENTS).moveFieldToThis(recPaymentRequest.getField(PaymentRequest.COMMENTS));
    if (recBankTrx.getField(BankTrx.COMMENTS).isNull())
        recBankTrx.getField(BankTrx.COMMENTS).moveFieldToThis(recTrxStatus.getField(TrxStatus.STATUS_DESC));
    // Step 2 - Post it to the G/L
    // Step 2a - Create and write the bank transaction (in BankTrx).
    bSuccess = recBankTrx.onPostTrx();
    if (!bSuccess)
        return bSuccess;
    // Step 2b - Post the transaction side of the distribution.
//+ if (fldCrAccountID == null)
    AcctDetail recAcctDetail = (AcctDetail)this.getRecord(AcctDetail.ACCT_DETAIL_FILE);
    AcctDetailDist recAcctDetailDist = (AcctDetailDist)this.getRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE);
    Period recPeriod = (Period)this.getRecord(Period.PERIOD_FILE);
    bSuccess = recBankTrx.onPostTrxDist(fldCrAccountID, dAmountUSD, recTransactionType, recAcctDetail, recAcctDetailDist, recPeriod);
    if (!bSuccess)
    {       // Back out and void - bad trx.
        recBankTrx.onVoidTrx();
        return false;
    }
} catch (DBException ex) {
    ex.printStackTrace();
    return false;
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3729">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>postDistTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource><![CDATA[PaymentHistory recPaymentHistory = (PaymentHistory)this.getRecord(PaymentHistory.PAYMENT_HISTORY_FILE);
ApTrx recApTrx = (ApTrx)this.getDistRecord();
Record recPaymentRequest = this.getDetailRecord();
BaseField fldVendorID = recPaymentRequest.getField(PaymentRequest.VENDOR_ID);
BankTrx recBankTrx = (BankTrx)this.getRecord(BankTrx.BANK_TRX_FILE);
double dAmountUSD = -recBankTrx.getField(BankTrx.AMOUNT_LOCAL).getValue();  // Must be positive.
BaseField fldTrxID = recBankTrx.getField(BankTrx.ID);
BaseField fldTrxDescID = ((TrxStatusField)recBankTrx.getField(BankTrx.TRX_STATUS_ID)).getReference().getField(TrxStatus.TRX_DESC_ID);
double dAmount = recPaymentRequest.getField(PaymentRequest.AMOUNT).getValue();
return recPaymentHistory.postDistTrx(this, recTransactionType, recApTrx, fldVendorID, fldTrxDescID, fldTrxID, dAmount, dAmountUSD);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3730">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,500</Sequence>
		<MethodName>removeDetailTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource><![CDATA[// Step 3 - Delete the batch (if not recurring)
Record recBankTrxBatchDetail = this.getDetailRecord();
try   {
    recBankTrxBatchDetail.remove();
} catch (DBException ex)    {
    ex.printStackTrace();
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3732">
		<LastChanged>2012-01-31T10:43:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getTrxAccountID</MethodName>
		<LogicDescription><![CDATA[Look at the posting distribution for this transaction and get the
account for this transaction type.
@param fldTrxDescID The Trx desc ID.
@param iTrxStatusID The Trx status ID of the transaction you are looking for.
@param strPostingType The type of posting that you are looking for.
@return The field with the account ID of this transaction type (null = none).]]></LogicDescription>
		<MethodReturns>BaseField</MethodReturns>
		<MethodInterface>BaseField fldTrxDescID, int iTrxStatusID, String strPostingType</MethodInterface>
		<MethodClassName>Trx</MethodClassName>
		<LogicSource><![CDATA[BaseField fldAccountID = null;

AcctDetailDist recAcctDetailDistSearch = this.getDistSearch(fldTrxDescID);

try {
    m_recAcctDetailDistSearch.close();
    while (m_recAcctDetailDistSearch.hasNext())
    {
        m_recAcctDetailDistSearch.next();
        Record recAcctDetail = ((ReferenceField)m_recAcctDetailDistSearch.getField(AcctDetailDist.ACCT_DETAIL_ID)).getReference();
        if (recAcctDetail != null)
            if (!recAcctDetail.isNull())
        {
            Record recTransactionType = ((ReferenceField)recAcctDetail.getField(AcctDetail.TRX_TYPE_ID)).getReference();
            if (recTransactionType != null)
                if (!recTransactionType.isNull())
            {
                if (recTransactionType.getField(TransactionType.SOURCE_TRX_STATUS_ID).getValue() == iTrxStatusID)
                    if ((strPostingType.equalsIgnoreCase(recTransactionType.getField(TransactionType.POSTING_TYPE).toString()))
                        || (strPostingType.equalsIgnoreCase(recTransactionType.getField(TransactionType.TYPE_CODE).toString())))
                {
                    fldAccountID = recAcctDetail.getField(AcctDetail.ACCOUNT_ID);
                    break;
                }
            }
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
return fldAccountID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3733">
		<LastChanged>2012-01-25T17:18:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>checkFiles</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Trx</MethodClassName>
		<LogicSource><![CDATA[RecordOwner recordOwner = this.findRecordOwner();
if (m_recAcctDetail == null)
{
    m_recAcctDetail = new AcctDetail(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recAcctDetail);
}
if (m_recAcctDetailDist == null)
{
    m_recAcctDetailDist = new AcctDetailDist(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recAcctDetailDist);
}
if (m_recTransactionType == null)
{
    m_recTransactionType = new TransactionType(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recTransactionType);
}
if (m_recPeriod == null)
{
    m_recPeriod = new Period(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recPeriod);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3734">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Trx</MethodClassName>
		<LogicSource><![CDATA[if (m_recAcctDetail != null)
    m_recAcctDetail.free();
m_recAcctDetail = null;
if (m_recAcctDetailDist != null)
    m_recAcctDetailDist.free();
m_recAcctDetailDist = null;
if (m_recTransactionType != null)
    m_recTransactionType.free();
m_recTransactionType = null;
if (m_recPeriod != null)
    m_recPeriod.free();
m_recPeriod = null;
if (m_recAcctDetailDistSearch != null)
    m_recAcctDetailDistSearch.free();
m_recAcctDetailDistSearch = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3735">
		<LastChanged>2012-01-31T10:43:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrx</MethodClassName>
		<LogicSource><![CDATA[if (PaymentHistory.PAYMENT_HISTORY_FILE.equalsIgnoreCase(strCommand))
    return ApTrx.PAYMENT_HISTORY;
if (PaymentHistory.PAYMENT_DISTRIBUTION.equalsIgnoreCase(strCommand))
    return ApTrx.PAYMENT_DISTRIBUTION;
if (AcctDetailDist.DIST_DISTRIBUTION.equalsIgnoreCase(strCommand))
    return ApTrx.DISTRIBUTION_SCREEN;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3737">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PaymentHistoryGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>PaymentHistoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3738">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryGridScreen</MethodClassName>
		<LogicSource>return new PaymentHistory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3740">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(PaymentHistory.AP_TRX_ID_KEY);

this.getHeaderRecord().getField(ApTrx.ID).addListener(new FieldReSelectHandler(this));

this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3742">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3743">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, LinkTrx.SOURCE, LinkTrx.SOURCE, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(LinkTrx.SOURCE));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3744">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(LinkTrx.SOURCE), LinkTrx.SOURCE, LinkTrx.SOURCE, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3745">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (LinkTrx.SOURCE.equalsIgnoreCase(strCommand))
{
    LinkTrx recLinkTrx = (LinkTrx)this.getMainRecord();
    strCommand = recLinkTrx.getSourceCommand();
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3746">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryScreen</MethodClassName>
		<LogicSource>return new PaymentHistory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3747">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ApTrx(this);
new BankTrx(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3748">
		<LastChanged>2012-01-31T10:43:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));

this.getMainRecord().getField(PaymentHistory.LINKED_TRX_ID).addListener(new ReadLinkedTrxHandler(this.getRecord(BankTrx.BANK_TRX_FILE)));

this.setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3749">
		<LastChanged>2012-01-31T10:43:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryScreen</MethodClassName>
		<LogicSource>return this.getRecord(ApTrx.AP_TRX_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3750">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(LinkTrx.SOURCE), LinkTrx.SOURCE, LinkTrx.SOURCE, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3751">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3752">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryScreen</MethodClassName>
		<LogicSource><![CDATA[if (LinkTrx.SOURCE.equalsIgnoreCase(strCommand))
{
    LinkTrx recLinkTrx = (LinkTrx)this.getMainRecord();
    strCommand = recLinkTrx.getSourceCommand();
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3753">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryGridScreen</MethodClassName>
		<LogicSource>return new ApTrxHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3754">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryScreen</MethodClassName>
		<LogicSource>return new ApTrxHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3755">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3756">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3758">
		<LastChanged>2012-01-31T11:54:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getTrxType</MethodName>
		<LogicDescription><![CDATA[Get the transaction type.
@param iTrxGroupID The transaction group.
@param strPostingType The posting type.
@return The transaction type record.]]></LogicDescription>
		<MethodReturns>TransactionType</MethodReturns>
		<MethodInterface>int iTrxGroupID, String strPostingType</MethodInterface>
		<MethodClassName>TransactionType</MethodClassName>
		<LogicSource><![CDATA[if (iTrxGroupID == -1)
{
    try {
        this.addNew();
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
    return this;	// None
}
if (m_iCurrentTrxStatus != iTrxGroupID)
{   // Not cached yet
    this.setKeyArea(TransactionType.TRX_GROUP_ID_KEY);
    StringSubFileFilter listener = (StringSubFileFilter)this.getListener(StringSubFileFilter.class.getName());
    if (listener == null)
        this.addListener(listener = new StringSubFileFilter(Integer.toString(iTrxGroupID), TransactionType.TRX_GROUP_ID, null, null, null, null));
    listener.setFirst(Integer.toString(iTrxGroupID));
    m_htTrxStatus = new HashMap<String,Object>();
    try {
        this.close();
        while (this.hasNext())
        {
            this.next();
            this.cacheTransactionType(DBConstants.BLANK, this); // This will set the default to the first one
            this.cacheTransactionType(this.getField(TransactionType.TYPE_CODE).toString(), this);
            this.cacheTransactionType(this.getField(TransactionType.POSTING_TYPE).toString(), this);
            this.cacheTransactionType(this.getField(TransactionType.TYPICAL_BALANCE).toString(), this);
        }
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
    m_iCurrentTrxStatus = iTrxGroupID;
}
Object objBookmark = m_htTrxStatus.get(strPostingType);
if (objBookmark == null)
    objBookmark = m_htTrxStatus.get(DBConstants.BLANK); // Default
try {
    this.setHandle(objBookmark, DBConstants.BOOKMARK_HANDLE);
} catch (DBException ex)    {
    ex.printStackTrace();
}
return this;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3759">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>550</Sequence>
		<MethodName>cacheTransactionType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strKey, TransactionType recTransactionType</MethodInterface>
		<MethodClassName>TransactionType</MethodClassName>
		<LogicSource><![CDATA[try {
    if (m_htTrxStatus.get(strKey) == null)
        m_htTrxStatus.put(strKey, recTransactionType.getHandle(DBConstants.BOOKMARK_HANDLE));
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3760">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,050</Sequence>
		<MethodName>onPostTrxDist*2</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseField fldAccountID, double dTrxAmount, String strPostingType, AcctDetail recAcctDetail, AcctDetailDist recAcctDetailDist, Period recPeriod</MethodInterface>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[int iTrxGroupID = this.getTrxGroupID();
return this.onPostTrxDist(fldAccountID, dTrxAmount, iTrxGroupID, strPostingType, recAcctDetail, recAcctDetailDist, recPeriod);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3762">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3763">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupScreen</MethodClassName>
		<LogicSource>return new TrxGroup(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3764">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3766">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3767">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupGridScreen</MethodClassName>
		<LogicSource>return new TrxGroup(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3768">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new UpdateTrxGroupHandler(null, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3769">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3770">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3772">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupGridScreen</MethodClassName>
		<LogicSource>return new TrxDescHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3773">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupGridScreen</MethodClassName>
		<LogicSource>return new TrxDesc(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3774">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3775">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TrxGroupGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TrxGroupGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3776">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>clone</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxGroupHandler</MethodClassName>
		<LogicSource>return new UpdateTrxGroupHandler(null, m_recTrxDesc);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3777">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxGroupHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.UPDATE_TYPE)
    || (iChangeType == DBConstants.DELETE_TYPE))
{
    Record recTrxGroup = this.getOwner();
    RecordOwner recordOwner = recTrxGroup.findRecordOwner();
    if (m_recTrxType == null)
    {
        m_recTrxType = new TransactionType(recordOwner);
        m_recTrxType.addListener(new SubFileFilter(recTrxGroup));
        if (recordOwner != null)
            recordOwner.removeRecord(m_recTrxType);
    }
    try {
        m_recTrxType.close();
        while (m_recTrxType.hasNext())
        {
            m_recTrxType.next();
            m_recTrxType.edit();
            m_recTrxType.getField(TransactionType.GROUP_CODE).moveFieldToThis(recTrxGroup.getField(TrxGroup.GROUP_CODE));
            m_recTrxType.getField(TransactionType.GROUP_DESC).moveFieldToThis(recTrxGroup.getField(TrxGroup.GROUP_DESC));

            Record recTrxDesc = ((ReferenceField)recTrxGroup.getField(TrxGroup.TRX_DESC_ID)).getReference();
            if (recTrxDesc != null)
            {
                m_recTrxType.getField(TransactionType.DESC_CODE).moveFieldToThis(recTrxDesc.getField(TrxDesc.DESC_CODE));
                m_recTrxType.getField(TransactionType.DESCRIPTION).moveFieldToThis(recTrxDesc.getField(TrxDesc.DESCRIPTION));
                Record recTrxSystem = ((ReferenceField)recTrxDesc.getField(TrxDesc.TRX_SYSTEM_ID)).getReference();
                if (recTrxSystem != null)
                {
                    m_recTrxType.getField(TransactionType.SYSTEM_CODE).moveFieldToThis(recTrxSystem.getField(TrxSystem.SYSTEM_CODE));
                    m_recTrxType.getField(TransactionType.SYSTEM_DESC).moveFieldToThis(recTrxSystem.getField(TrxSystem.SYSTEM_DESC));
                }
            }

            if (iChangeType == DBConstants.UPDATE_TYPE)
                m_recTrxType.set();
            else if (iChangeType == DBConstants.DELETE_TYPE)
                m_recTrxType.remove();
        }
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}
if ((iChangeType == DBConstants.UPDATE_TYPE)
    || (iChangeType == DBConstants.ADD_TYPE))
{
    Record recTrxGroup = this.getOwner();
    if (m_recTrxDesc == null)
    {       // Only update the TrxDesc if you are updating the status record.
        Record recTrxDesc = ((ReferenceField)recTrxGroup.getField(TrxGroup.TRX_DESC_ID)).getReference();
        recTrxGroup.getField(TrxGroup.DESC_CODE).moveFieldToThis(recTrxDesc.getField(TrxDesc.DESC_CODE));

        Record recTrxSystem = ((ReferenceField)recTrxDesc.getField(TrxDesc.TRX_SYSTEM_ID)).getReference();
        recTrxGroup.getField(TrxGroup.TRX_SYSTEM_ID).moveFieldToThis(recTrxSystem.getField(TrxSystem.ID));
        recTrxGroup.getField(TrxGroup.SYSTEM_CODE).moveFieldToThis(recTrxSystem.getField(TrxSystem.SYSTEM_CODE));
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3778">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupField</MethodClassName>
		<LogicSource>return new TrxGroup(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3779">
		<LastChanged>2012-01-31T14:41:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.makeReferenceRecord();  // Get/make the record that describes the referenced class.
return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, null, TrxGroup.GROUP_DESC, false, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3780">
		<LastChanged>2012-03-26T10:02:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroup</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(TransactionType.TRANSACTION_TYPE_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(TRX_GROUP_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = Record.makeNewScreen(TRX_GROUP_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3781">
		<LastChanged>2012-06-15T20:51:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDesc</MethodClassName>
		<LogicSource><![CDATA[if ("Status".equalsIgnoreCase(strCommand))
    return ScreenConstants.DETAIL_MODE | 4096;
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3782">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>clone</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxStatusHandler</MethodClassName>
		<LogicSource>return new UpdateTrxStatusHandler(null, m_recTrxDesc);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3783">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxStatusHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.UPDATE_TYPE)
    || (iChangeType == DBConstants.DELETE_TYPE))
{
    Record recTrxStatus = this.getOwner();
    RecordOwner recordOwner = recTrxStatus.findRecordOwner();
    if (m_recTrxType == null)
    {
        m_recTrxType = new TransactionType(recordOwner);
        m_recTrxType.setKeyArea(TransactionType.SOURCE_TRX_STATUS_ID_KEY);
        m_recTrxType.addListener(new SubFileFilter(recTrxStatus.getField(TrxStatus.ID), TransactionType.SOURCE_TRX_STATUS_ID, null, null, null, null));
        if (recordOwner != null)
            recordOwner.removeRecord(m_recTrxType);
    }
    Record recTrxDesc = m_recTrxDesc;
    if (recTrxDesc == null)
        recTrxDesc = ((ReferenceField)recTrxStatus.getField(TrxStatus.TRX_DESC_ID)).getReference();
    try {
        m_recTrxType.close();
        while (m_recTrxType.hasNext())
        {
            m_recTrxType.next();
            m_recTrxType.edit();
            if (iChangeType == DBConstants.UPDATE_TYPE)
            {
                if (recTrxDesc != null)
                    if (recTrxDesc.getField(TrxDesc.ID).equals(recTrxStatus.getField(TrxStatus.TRX_DESC_ID)))
                        m_recTrxType.getField(TransactionType.SOURCE_FILE).moveFieldToThis(recTrxDesc.getField(TrxDesc.SOURCE_FILE));
                m_recTrxType.getField(TransactionType.SOURCE_PREFERRED_SIGN).moveFieldToThis(recTrxStatus.getField(TrxStatus.PREFERRED_SIGN));
                m_recTrxType.getField(TransactionType.SOURCE_TRX_DESC_ID).moveFieldToThis(recTrxStatus.getField(TrxStatus.TRX_DESC_ID));
            }
            else if (iChangeType == DBConstants.DELETE_TYPE)
            {
                m_recTrxType.getField(TransactionType.SOURCE_TRX_STATUS_ID).setData(null);
                m_recTrxType.getField(TransactionType.SOURCE_PREFERRED_SIGN).setData(null);
                m_recTrxType.getField(TransactionType.SOURCE_FILE).setData(null);
                m_recTrxType.getField(TransactionType.SOURCE_TRX_DESC_ID).setData(null);
            }
            m_recTrxType.set();
        }
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}
if ((iChangeType == DBConstants.UPDATE_TYPE)
    || (iChangeType == DBConstants.ADD_TYPE))
{
    Record recTrxStatus = this.getOwner();
    if (m_recTrxDesc == null)
    {       // Only update the TrxDesc if you are updating the status record.
        Record recTrxDesc = ((ReferenceField)recTrxStatus.getField(TrxStatus.TRX_DESC_ID)).getReference();
        recTrxStatus.getField(TrxStatus.DESC_CODE).moveFieldToThis(recTrxDesc.getField(TrxDesc.DESC_CODE));

        Record recTrxSystem = ((ReferenceField)recTrxDesc.getField(TrxDesc.TRX_SYSTEM_ID)).getReference();
        recTrxStatus.getField(TrxStatus.TRX_SYSTEM_ID).moveFieldToThis(recTrxSystem.getField(TrxSystem.ID));
        recTrxStatus.getField(TrxStatus.SYSTEM_CODE).moveFieldToThis(recTrxSystem.getField(TrxSystem.SYSTEM_CODE));
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3784">
		<LastChanged>2012-01-25T19:48:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>checkFiles</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[RecordOwner recordOwner = this.getOwner().findRecordOwner();
if (m_recAcctDetail == null)
{
    m_recAcctDetail = new AcctDetail(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recAcctDetail);
}
if (m_recAcctDetailDist == null)
{
    m_recAcctDetailDist = new AcctDetailDist(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recAcctDetailDist);
}
if (m_recTransactionType == null)
{
    m_recTransactionType = new TransactionType(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recTransactionType);
}
if (m_recPeriod == null)
{
    m_recPeriod = new Period(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recPeriod);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3785">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusScreen</MethodClassName>
		<LogicSource>return new TrxStatusScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3786">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusGridScreen</MethodClassName>
		<LogicSource>return new TrxStatusScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3787">
		<LastChanged>2012-01-31T14:45:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescStatusHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(TrxStatusScreenRecord.TRX_SYSTEM_ID).setEnabled(true);
this.getScreenRecord().getField(TrxStatusScreenRecord.TRX_DESC_ID).setEnabled(true);

if (this.getScreenRecord().getField(TrxStatusScreenRecord.TRX_DESC_ID).getComponent(0) instanceof SPopupBox)   // Yes
    this.getScreenRecord().getField(TrxStatusScreenRecord.TRX_SYSTEM_ID).addListener(new FieldReSelectHandler((SPopupBox)this.getScreenRecord().getField(TrxStatusScreenRecord.TRX_DESC_ID).getComponent(0)));
Record rec = this.getRecord(TrxDesc.TRX_DESC_FILE);
this.getRecord(TrxDesc.TRX_DESC_FILE).setKeyArea(TrxDesc.TRX_SYSTEM_ID_KEY);
this.getRecord(TrxDesc.TRX_DESC_FILE).addListener(new SubFileFilter(this.getScreenRecord().getField(TrxStatusScreenRecord.TRX_SYSTEM_ID), TrxDesc.TRX_SYSTEM_ID, null, null, null, null, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3788">
		<LastChanged>2012-01-31T10:43:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeScreen</MethodClassName>
		<LogicSource><![CDATA[super;
for (int i = 0; ;i++)
{
    ScreenField sField = (ScreenField)this.getRecord(TransactionType.TRANSACTION_TYPE_FILE).getField(TransactionType.SOURCE_TRX_STATUS_ID).getComponent(i);
    if (sField == null)
        break;
    if (sField instanceof SCannedBox)
    {
        String strCommand = Utility.addURLParam(null, DBParams.COMMAND, ((SCannedBox)sField).getButtonCommand());
        BaseField field = this.getRecord(TransactionType.TRANSACTION_TYPE_FILE).getField(TransactionType.TRX_DESC_ID);
        strCommand = Utility.addURLParam(strCommand, field.getFieldName(), field.toString());
        field = this.getRecord(TransactionType.TRANSACTION_TYPE_FILE).getField(TransactionType.TRX_SYSTEM_ID);
        strCommand = Utility.addURLParam(strCommand, field.getFieldName(), field.toString());
        ((SCannedBox)sField).setButtonCommand(strCommand);
    }
} 

Record recTrxStatus = ((ReferenceField)this.getMainRecord().getField(TransactionType.SOURCE_TRX_STATUS_ID)).getReferenceRecord(this);
this.getMainRecord().getField(TransactionType.SOURCE_TRX_STATUS_ID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(TransactionType.SOURCE_PREFERRED_SIGN), recTrxStatus.getField(TrxStatus.PREFERRED_SIGN)));
this.getMainRecord().getField(TransactionType.SOURCE_TRX_STATUS_ID).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(TransactionType.SOURCE_TRX_DESC_ID), recTrxStatus.getField(TrxStatus.TRX_DESC_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3789">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>getTrxGroupID</MethodName>
		<LogicDescription><![CDATA[Get the transaction group ID for this Trx.
@return The group trx ID.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Trx</MethodClassName>
		<LogicSource><![CDATA[Record recTrxStatus = ((ReferenceField)this.getField(Trx.TRX_STATUS_ID)).getReference();
if (recTrxStatus == null)
    return -1;  // Never
if (m_recTransactionType == null)
{
    m_recTransactionType = new TransactionType(this.findRecordOwner());
    if (m_recTransactionType.getRecordOwner() != null)
        m_recTransactionType.getRecordOwner().removeRecord(m_recTransactionType);
}
m_recTransactionType.getField(TransactionType.SOURCE_TRX_STATUS_ID).moveFieldToThis(recTrxStatus.getField(TrxStatus.ID));
m_recTransactionType.getField(TransactionType.TRX_DESC_ID).moveFieldToThis(recTrxStatus.getField(TrxStatus.TRX_DESC_ID));
try {
    m_recTransactionType.setKeyArea(TransactionType.SOURCE_TRX_STATUS_ID_KEY);
    if (m_recTransactionType.seek("="))
    {
        return (int)m_recTransactionType.getField(TransactionType.TRX_GROUP_ID).getValue();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
return -1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3790">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,050</Sequence>
		<MethodName>onPostTrxDist*1</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseField fldAccountID, double dTrxAmount, int iTrxGroupID, String strPostingType, AcctDetail recAcctDetail, AcctDetailDist recAcctDetailDist, Period recPeriod</MethodInterface>
		<MethodClassName>BaseTrx</MethodClassName>
		<LogicSource><![CDATA[TransactionType recTrxType = m_recTransactionType.getTrxType(iTrxGroupID, strPostingType);
return this.onPostTrxDist(fldAccountID, dTrxAmount, recTrxType, recAcctDetail, recAcctDetailDist, recPeriod);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3791">
		<LastChanged>2012-01-25T17:18:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getTransactionType</MethodName>
		<LogicDescription><![CDATA[Get the cached transaction type record.
@return The transaction type record.]]></LogicDescription>
		<MethodReturns>TransactionType</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Trx</MethodClassName>
		<LogicSource><![CDATA[if (m_recTransactionType == null)
{
    m_recTransactionType = new TransactionType(this.findRecordOwner());
    if (m_recTransactionType.getRecordOwner() != null)
        m_recTransactionType.getRecordOwner().removeRecord(m_recTransactionType);
}
return m_recTransactionType;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3792">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getTrxGroupID</MethodName>
		<LogicDescription><![CDATA[Get the group ID for this detail transaction.
Typically you must override this method to supply the correct group ID.
@param recDetailTrx The current batch record.
@return The group trx id.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Record recDetailTrx</MethodInterface>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[if (recDetailTrx instanceof Trx)
    return ((Trx)recDetailTrx).getTrxGroupID();
return -1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3793">
		<LastChanged>2012-01-31T10:43:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getTrxGroupID</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource><![CDATA[if (m_iTrxGroupID <= 0)
{
    TrxGroup recTrxGroup = (TrxGroup)this.getRecord(TrxGroup.TRX_GROUP_FILE);
    m_iTrxGroupID = recTrxGroup.getTrxGroupID(TransactionType.ACCTPAY, PaymentHistory.PAYMENT_HISTORY_FILE, PaymentHistory.PAYMENT);
}
return m_iTrxGroupID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3794">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getTrxGroupID</MethodName>
		<LogicDescription><![CDATA[Get the group that matches this description.
@param strSystemCode The system.
@param strDescCode The File.
@param strGroupCode The transaction code.
@return The group id (or -1 if not found).]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>String strSystemCode, String strDescCode, String strGroupCode</MethodInterface>
		<MethodClassName>TrxGroup</MethodClassName>
		<LogicSource><![CDATA[int iTrxGroupID = -1;
this.setKeyArea(TrxGroup.SYSTEM_CODE_KEY);
this.getField(TrxGroup.SYSTEM_CODE).setString(strSystemCode);
this.getField(TrxGroup.DESC_CODE).setString(strDescCode);
this.getField(TrxGroup.GROUP_CODE).setString(strGroupCode);
try   {
    boolean bSuccess = this.seek("=");
    if (bSuccess)
        iTrxGroupID = (int)this.getField(TrxGroup.ID).getValue();
} catch (DBException ex)    {
    ex.printStackTrace();
}
return iTrxGroupID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3795">
		<LastChanged>2012-01-31T10:43:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getTrxAccountID*2</MethodName>
		<LogicDescription><![CDATA[Look at the posting distribution for this transaction and get the
account for this transaction type.
@param iTrxStatusID The Trx status ID of the transaction you are looking for.
@param strPostingType The type of posting that you are looking for.
@return The field with the account ID of this transaction type (null = none).
]]></LogicDescription>
		<MethodReturns>BaseField</MethodReturns>
		<MethodInterface>int iTrxStatusID, String strPostingType</MethodInterface>
		<MethodClassName>Trx</MethodClassName>
		<LogicSource><![CDATA[Record recTrxStatus = ((ReferenceField)this.getField(Trx.TRX_STATUS_ID)).getReference();
if (recTrxStatus == null)
    return null;
return this.getTrxAccountID(recTrxStatus.getField(TrxStatus.TRX_DESC_ID), iTrxStatusID, strPostingType);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3796">
		<LastChanged>2012-01-31T10:43:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,050</Sequence>
		<MethodName>postDetailTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrintCheckPost</MethodClassName>
		<LogicSource><![CDATA[AcctDetailDist recAcctDetailDist = (AcctDetailDist)this.getRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE);
recAcctDetailDist.startDistTrx();
boolean bSuccess = super;
recAcctDetailDist.endDistTrx();
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3797">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>setEnabled</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentDistScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call inherrited
for (int i = 0; i < this.getMainRecord().getFieldCount(); i++)
{
    this.getMainRecord().getField(i).setEnabled(bEnable);
}
this.getMainRecord().getField(ApTrx.TRX_STATUS_ID).setEnabled(false);
this.getMainRecord().getField(ApTrx.ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3798">
		<LastChanged>2012-02-01T19:02:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>addPaymentHistory</MethodName>
		<LogicDescription><![CDATA[Add the payment history for this A/P transaction.
@param recPaymentHistory
@param recApTrx
@param iOldTrxStatusID
@param iTrxStatusID
@param recBankTrx
@param iTrxDescID The trx description ID
@param dAmount
@param dAmountUSD
@param fldCurrAccountID
@param strDiffPostingType
@param dCurrencyLoss
@return True if successful.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>RecordOwner recordOwner, ApTrx recApTrx, BaseField fldAccountID, String strPostType, int iTrxStatusID, BaseField fldTrxDescID, BaseField fldTrxID, double dAmount,double dAmountUSD, BaseField fldCurrAccountID, String strDiffPostingType, double dCurrLoss</MethodInterface>
		<MethodClassName>PaymentHistory</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = false;
try {
    this.addNew();
    this.getField(PaymentHistory.AP_TRX_ID).moveFieldToThis(recApTrx.getField(ApTrx.ID));
    this.getField(PaymentHistory.TRX_STATUS_ID).setValue(iTrxStatusID);
    this.getField(PaymentHistory.TRX_DATE).setValue(DateTimeField.todaysDate());
    this.getField(PaymentHistory.AMOUNT_APPLIED).setValue(dAmount);
    this.getField(PaymentHistory.AMOUNT_LOCAL).setValue(dAmountUSD);
    this.getField(PaymentHistory.CURR_LOSS_LOCAL).setValue(dCurrLoss);
    this.getField(PaymentHistory.LINKED_TRX_ID).moveFieldToThis(fldTrxID);
    if (fldTrxDescID != null)
        this.getField(PaymentHistory.LINKED_TRX_DESC_ID).moveFieldToThis(fldTrxDescID);
    this.getField(PaymentHistory.TRX_ENTRY).setValue(DateTimeField.currentTime());
    this.add();
    Object bookmark = this.getLastModified(DBConstants.DATA_SOURCE_HANDLE);
    this.setHandle(bookmark, DBConstants.DATA_SOURCE_HANDLE);
    // Step 2b - Post the transaction side of the distribution.
    AcctDetail recAcctDetail = (AcctDetail)recordOwner.getRecord(AcctDetail.ACCT_DETAIL_FILE);
    AcctDetailDist recAcctDetailDist = (AcctDetailDist)recordOwner.getRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE);
    Period recPeriod = (Period)recordOwner.getRecord(Period.PERIOD_FILE);
    bSuccess = this.onPostTrxDist(fldAccountID, dAmountUSD, strPostType, recAcctDetail, recAcctDetailDist, recPeriod);
    if (!bSuccess)
    {       // Back out and void - bad trx.
//?        this.onVoidTrx();
//?        return false;
    }
    if (dCurrLoss != 0.00)
    {
        bSuccess = this.onPostTrxDist(fldCurrAccountID, dCurrLoss, strDiffPostingType, recAcctDetail, recAcctDetailDist, recPeriod);
        if (!bSuccess)
        {       // Back out and void - bad trx.
    //?        this.onVoidTrx();
    //?        return false;
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3799">
		<LastChanged>2012-04-01T00:08:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>postDistTrx</MethodName>
		<LogicDescription><![CDATA[Post the distribution detail.
Note: This method doesn't really operate directly on the PaymentHistory,
it is here because this is a convient place to share this Payment distribution code.
@param recordOwner
@param recTransactionType
@param recApTrx
@param fldVendorID
@param fldTrxID
@param dCheckBalance Amount of this check.
@param dCheckBalanceUSD Amount of this check in USD
@return true If successful.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>RecordOwner recordOwner, TransactionType recTransactionType, ApTrx recApTrx, BaseField fldVendorID, BaseField fldTrxDescID, BaseField fldTrxID, double dCheckBalance, double dCheckBalanceUSD</MethodInterface>
		<MethodClassName>PaymentHistory</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = true;
double dExchange = 1.0;
if (dCheckBalance != 0)
    dExchange = dCheckBalanceUSD / dCheckBalance;
try   {
    recApTrx.close();
    while (recApTrx.hasNext())
    {
        recApTrx.next();
        if (recApTrx.getField(ApTrx.AMOUNT_SELECTED).getValue() == 0)
            continue; // Not selected
        if (dCheckBalance <= 0)
            break;
        recApTrx.edit();

        double dAmountSelected = recApTrx.getField(ApTrx.AMOUNT_SELECTED).getValue();
        double dInvoiceAmount = recApTrx.getField(ApTrx.INVOICE_AMOUNT).getValue();
        double dInvoiceAmountUSD = recApTrx.getField(ApTrx.INVOICE_LOCAL).getValue();
        double dInvoiceBalance = recApTrx.getField(ApTrx.INVOICE_BALANCE).getValue();
        double dInvoiceBalanceUSD = recApTrx.getField(ApTrx.INVOICE_BALANCE_LOCAL).getValue();

        if (dAmountSelected > dCheckBalance)
            dAmountSelected = dCheckBalance;
        dCheckBalance = dCheckBalance - dAmountSelected;
        double dNewBalance = dInvoiceBalance - dAmountSelected;
        double dExchangeRate = 1;
        if ((dInvoiceAmountUSD == 0) || (dInvoiceAmount == 0))
        {
            dExchangeRate = dExchange;
            recApTrx.getField(ApTrx.INVOICE_LOCAL).setValue((Math.floor(dInvoiceAmount * dExchangeRate * 100 + 0.5)) / 100);
        }
        else
            dExchangeRate = dInvoiceAmountUSD / dInvoiceAmount;
        double dNewBalanceUSD = (Math.floor(dNewBalance * dExchangeRate * 100 + 0.5)) / 100;
        double dAmountSelectedUSD = dInvoiceBalanceUSD - dNewBalanceUSD;

        recApTrx.getField(ApTrx.AMOUNT_SELECTED).setValue(Math.max(0, dNewBalance));    // Don't select P/P
        recApTrx.getField(ApTrx.INVOICE_BALANCE).setValue(dNewBalance);
        recApTrx.getField(ApTrx.INVOICE_BALANCE_LOCAL).setValue(dNewBalanceUSD);
        int iOrigApStatus = (int)recApTrx.getField(ApTrx.TRX_STATUS_ID).getValue();
        if (dNewBalance <= 0)
        {   // Change status to paid
            TrxStatus recTrxStatus = (TrxStatus)((ReferenceField)recApTrx.getField(ApTrx.TRX_STATUS_ID)).getReference();
            if (recTrxStatus != null)
            {
                String strPaidStatus = recTrxStatus.getField(TrxStatus.STATUS_CODE).toString() + ApTrx.PAID;
                int iNewTrxStatus = recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, strPaidStatus);
                if (iNewTrxStatus > 0)
                    recApTrx.getField(ApTrx.TRX_STATUS_ID).setValue(iNewTrxStatus);
            }
        }

        if (!recApTrx.getField(ApTrx.DRAFT_VENDOR_ID).isNull())
        {   // Broker payment draft to distribute.
            int iVendorID = (int)recApTrx.getField(ApTrx.DRAFT_VENDOR_ID).getValue();
            recApTrx.getField(ApTrx.DRAFT_VENDOR_ID).moveFieldToThis(recApTrx.getField(ApTrx.VENDOR_ID));
            recApTrx.getField(ApTrx.VENDOR_ID).setValue(iVendorID);

            dAmountSelected = recApTrx.getField(ApTrx.INVOICE_AMOUNT).getValue();
            dAmountSelectedUSD = recApTrx.getField(ApTrx.INVOICE_LOCAL).getValue();
            recApTrx.getField(ApTrx.AMOUNT_SELECTED).setValue(0);
            recApTrx.getField(ApTrx.INVOICE_BALANCE).setValue(-dAmountSelected);
            recApTrx.getField(ApTrx.INVOICE_BALANCE_LOCAL).setValue(-dAmountSelectedUSD);
        }

        BaseField fldAccountID = recApTrx.getField(ApTrx.ACCOUNT_ID);     // Explicit distribution
        if (fldAccountID.isNull())
            fldAccountID = recApTrx.getTrxAccountID(iOrigApStatus, PostingType.TRX_POST);    //recApTrx.getField(ApTrx.ACCOUNT_ID); // The account that was credited on creation
        if (fldAccountID.isNull())
        {   // Should add some code here?
        }

        double dNewCheckBalanceUSD = (Math.floor(dCheckBalance * dExchange * 100 + 0.5)) / 100;
        double dCheckAmountAppliedUSD = dCheckBalanceUSD - dNewCheckBalanceUSD;
        dCheckBalanceUSD = dCheckBalanceUSD - dCheckAmountAppliedUSD;
        double dCurrencyLoss = dCheckAmountAppliedUSD - dAmountSelectedUSD;
        int iSign = (dCurrencyLoss > 0) ? +1 : -1;
        dCurrencyLoss = (Math.floor(Math.abs(dCurrencyLoss) * 100 + 0.5)) / 100 * iSign;
        BaseField fldCurrAccountID = null;
        if (dCurrencyLoss != 0)
        {
            Record recProductCategory = (Record)recApTrx.getProductCategory();
            if (recProductCategory != null)
                fldCurrAccountID = recProductCategory.getField(ProductCategoryModel.CURR_OU_ACCOUNT_ID);
            if ((fldCurrAccountID == null) || (fldCurrAccountID.isNull()))
            {
                Record recApControl = (Record)recordOwner.getRecord(ApControl.AP_CONTROL_FILE);
                if (recApControl == null)
                    recApControl = new ApControl(recordOwner);
                fldCurrAccountID = recApControl.getField(ApControl.CURR_OU_ACCOUNT_ID);
            }
        }
        this.addPaymentHistory(recordOwner, recApTrx, fldAccountID, PostingType.DIST_POST, (int)recTransactionType.getField(TransactionType.SOURCE_TRX_STATUS_ID).getValue(), fldTrxDescID, fldTrxID, dAmountSelected, dAmountSelectedUSD, fldCurrAccountID, PostingType.DIFFERENCE_POST, dCurrencyLoss);

        FileListener listener = recApTrx.getListener(SubFileFilter.class);
        if (listener != null)
            listener.setEnabledListener(false); // Allow vendorID change
        recApTrx.set();
        if (listener != null)
            listener.setEnabledListener(true);
    }

    if (dCheckBalance != 0)
    { // Amount distributed not equal to selected amount, distribute the balance to a prepayment
        recApTrx.addNew();
        TrxStatus recTrxStatus = (TrxStatus)((ReferenceField)recApTrx.getField(ApTrx.TRX_STATUS_ID)).getReferenceRecord();
        int iPrepaymentTrxStatusID = recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.PREPAYMENT);   // Prepayment
        recApTrx.getField(ApTrx.TRX_STATUS_ID).setValue(iPrepaymentTrxStatusID);
        recApTrx.getField(ApTrx.VENDOR_ID).moveFieldToThis(fldVendorID);
        recApTrx.getField(ApTrx.INVOICE_AMOUNT).setValue(-dCheckBalance);
        recApTrx.getField(ApTrx.INVOICE_LOCAL).setValue(-dCheckBalanceUSD);
        recApTrx.getField(ApTrx.INVOICE_BALANCE).setValue(-dCheckBalance);
        recApTrx.getField(ApTrx.INVOICE_BALANCE_LOCAL).setValue(-dCheckBalanceUSD);
        recApTrx.getField(ApTrx.AMOUNT_SELECTED).setValue(0);
        recApTrx.getField(ApTrx.ACCOUNT_ID).moveFieldToThis(((Record)recordOwner.getRecord(ApControl.AP_CONTROL_FILE)).getField(ApControl.NON_TOUR_PREPAY_ACCOUNT_ID)); // Non-tour P/P
        recApTrx.add();
        Object varBookmark = recApTrx.getLastModified(DBConstants.DATA_SOURCE_HANDLE);
        recApTrx.setHandle(varBookmark, DBConstants.DATA_SOURCE_HANDLE);

        BaseField fldAccountID = recApTrx.getField(ApTrx.ACCOUNT_ID);     // Explicit distribution
        if (fldAccountID.isNull())
            fldAccountID = recApTrx.getTrxAccountID(-1, PostingType.TRX_POST);    //recApTrx.getField(ApTrx.ACCOUNT_ID); // The account that was credited on creation
        this.addPaymentHistory(recordOwner, recApTrx, fldAccountID, PostingType.DIST_POST, (int)recTransactionType.getField(TransactionType.SOURCE_TRX_STATUS_ID).getValue(), fldTrxDescID, fldTrxID, dCheckBalance, dCheckBalanceUSD, null, null, 0);
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3800">
		<LastChanged>2012-01-31T10:43:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Trx</MethodClassName>
		<LogicSource><![CDATA[if (TransactionType.TRANSACTION_TYPE_FILE.equalsIgnoreCase(strFileName))
    if (m_recTransactionType != null)
        return m_recTransactionType;
if (AcctDetail.ACCT_DETAIL_FILE.equalsIgnoreCase(strFileName))
    if (m_recAcctDetail != null)
        return m_recAcctDetail;
if (AcctDetailDist.ACCT_DETAIL_DIST_FILE.equalsIgnoreCase(strFileName))
    if (m_recAcctDetailDist != null)
        return m_recAcctDetailDist;
if (Period.PERIOD_FILE.equalsIgnoreCase(strFileName))
    if (m_recPeriod != null)
        return m_recPeriod;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3802">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistGridScreen</MethodClassName>
		<LogicSource>return new BrokerScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3803">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistScreen</MethodClassName>
		<LogicSource>return new BrokerScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3804">
		<LastChanged>2012-02-01T08:33:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(BrokerScreenRecord.VENDOR_ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3805">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>distribute</MethodName>
		<LogicDescription><![CDATA[Distribute this prepayment to the selected amounts for this vendor.
Note: This is only here in PaymentHistory for access to this shared code.
@param recordOwner
@param recApTrx
@param recSelectApTrx]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>RecordOwner recordOwner, ApTrx recApTrx, ApTrx recSelectApTrx</MethodInterface>
		<MethodClassName>PaymentHistory</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = true;
try {
    recApTrx.edit();
    TrxStatus recTrxStatus = (TrxStatus)((ReferenceField)recApTrx.getField(ApTrx.TRX_STATUS_ID)).getReference();
    String strPaidStatus = PaymentHistory.PREPAYMENT_DIST;
    if (recTrxStatus != null)
        strPaidStatus = recTrxStatus.getField(TrxStatus.STATUS_CODE).toString() + ApTrx.DIST;
    TransactionType recTransactionType = (TransactionType)recordOwner.getRecord(TransactionType.TRANSACTION_TYPE_FILE);
    recTransactionType.getTrxTypeID(TransactionType.ACCTPAY, PaymentHistory.PAYMENT_HISTORY_FILE, strPaidStatus, PaymentHistory.DIST_TYPE);
    BaseField fldVendorID = recApTrx.getField(ApTrx.VENDOR_ID);
    double dExchange = 1;
    if ((recApTrx.getField(ApTrx.INVOICE_LOCAL).getValue() != 0) && (recApTrx.getField(ApTrx.INVOICE_AMOUNT).getValue() != 0))
        dExchange = recApTrx.getField(ApTrx.INVOICE_LOCAL).getValue() / recApTrx.getField(ApTrx.INVOICE_AMOUNT).getValue();
    BaseField fldTrxID = recApTrx.getField(ApTrx.ID);
    double dDistributedAmount = -recordOwner.getRecord(Vendor.VENDOR_FILE).getField(Vendor.AMOUNT_SELECTED).getValue();
    if (-recApTrx.getField(ApTrx.INVOICE_BALANCE).getValue() < -dDistributedAmount)
        dDistributedAmount = recApTrx.getField(ApTrx.INVOICE_BALANCE).getValue();  // Negative

    double dBalance = recApTrx.getField(ApTrx.INVOICE_BALANCE).getValue();  // Negative
    double dStartBalanceUSD = recApTrx.getField(ApTrx.INVOICE_BALANCE_LOCAL).getValue();   // Negative

    dBalance = dBalance - dDistributedAmount;   // Negative balance
    int iSign = (dBalance < 0) ? -1 : +1;
    double dBalanceUSD = Math.floor(Math.abs(dBalance * dExchange * 100 + 0.5)) / 100 * iSign;
    double dDistributedAmountUSD = dStartBalanceUSD - dBalanceUSD;  // Negative amount distributed

    ((AcctDetailDist)recordOwner.getRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE)).startDistTrx();
    bSuccess = this.postDistTrx(recordOwner, recTransactionType, recSelectApTrx, fldVendorID, recTrxStatus.getField(TrxStatus.TRX_DESC_ID), fldTrxID, -dDistributedAmount, -dDistributedAmountUSD);
    int iDistGroupID = (int)recordOwner.getRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE).getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID).getValue();

    if (bSuccess)
    {
        recApTrx.getField(ApTrx.INVOICE_BALANCE).setValue(dBalance);
        recApTrx.getField(ApTrx.INVOICE_BALANCE_LOCAL).setValue(dBalanceUSD);

        int iOrigApStatus = (int)recApTrx.getField(ApTrx.TRX_STATUS_ID).getValue();
        int iNewTrxStatus = -1;
        if (dBalance == 0)
        {   // Change status to paid
            iNewTrxStatus = recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, strPaidStatus);
            if (iNewTrxStatus > 0)
                recApTrx.getField(ApTrx.TRX_STATUS_ID).setValue(iNewTrxStatus);
        }

        Object bookmark = recApTrx.getHandle(DBConstants.DATA_SOURCE_HANDLE);
        recApTrx.set();
        recApTrx.setHandle(bookmark, DBConstants.DATA_SOURCE_HANDLE);

        // Now I need to find the G/L prepayment account that the pp was debited to originally
        BaseField fldAccountID = null;
        this.addNew();
        int iOldKeyArea = this.getDefaultOrder();
        this.setKeyArea(PaymentHistory.AP_TRX_ID_KEY);
        this.getField(PaymentHistory.AP_TRX_ID).moveFieldToThis(recApTrx.getField(ApTrx.ID));
        this.getField(PaymentHistory.TRX_DATE).setToLimit(DBConstants.START_SELECT_KEY);
        this.getField(PaymentHistory.ID).setData(null);
        if (this.seek(">="))
            if (this.getField(PaymentHistory.AP_TRX_ID).equals(recApTrx.getField(ApTrx.ID)))
                fldAccountID = this.getTrxAccountID(PostingType.DIST_POST);
        this.setKeyArea(iOldKeyArea);
        if ((fldAccountID == null) || (fldAccountID.isNull()))
        {       // If not found, just use a default (never?)
            if (((recApTrx.getEditMode() == DBConstants.EDIT_IN_PROGRESS) || (recApTrx.getEditMode() == DBConstants.EDIT_CURRENT)) && (!recApTrx.getField(ApTrx.ACCOUNT_ID).isNull()))
                fldAccountID = recApTrx.getField(ApTrx.ACCOUNT_ID); // Dist account for prepayments and broker payments
            else if (recApTrx.getField(ApTrx.TOUR_ID).isNull())
                fldAccountID = ((Record)recordOwner.getRecord(ApControl.AP_CONTROL_FILE)).getField(ApControl.NON_TOUR_PREPAY_ACCOUNT_ID);
            else
                fldAccountID = ((Record)recordOwner.getRecord(ApControl.AP_CONTROL_FILE)).getField(ApControl.PREPAY_ACCOUNT_ID);
        }
        DateTimeField fldTrxDate = null;
        TransactionType recTrxType = (TransactionType)recordOwner.getRecord(TransactionType.TRANSACTION_TYPE_FILE);
        recTrxType.getTrxTypeID(TransactionType.ACCTPAY, PaymentHistory.PAYMENT_HISTORY_FILE, strPaidStatus, PaymentHistory.TRX_TYPE);
        DateTimeField fldTrxEntryDate = null;
        int iUserID = -1;
        AcctDetailDist recAcctDetailDist = (AcctDetailDist)recordOwner.getRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE);
        AcctDetail recAcctDetail = (AcctDetail)recordOwner.getRecord(AcctDetail.ACCT_DETAIL_FILE);
        Period recPeriod = (Period)recordOwner.getRecord(Period.PERIOD_FILE);

        recAcctDetailDist.getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID).setValue(iDistGroupID);
        bSuccess = recAcctDetailDist.addDetailTrx(fldAccountID, fldTrxDate, fldTrxID, recTrxType, fldTrxEntryDate, dDistributedAmountUSD, iUserID, recAcctDetail, recPeriod);
        ((AcctDetailDist)recordOwner.getRecord(AcctDetailDist.ACCT_DETAIL_DIST_FILE)).endDistTrx();
    }
    else
    {   // Back out the transactions here!
    }
} catch (DBException ex)    {
    ex.printStackTrace();
    bSuccess = false;
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3806">
		<LastChanged>2012-01-31T18:55:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>calcUSDAmounts</MethodName>
		<LogicDescription><![CDATA[Give this amount and trx type, calculate the exchange rate and the
USD amounts, so the G/L postings will be balanced.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>boolean bUpdate</MethodInterface>
		<MethodClassName>BankTrx</MethodClassName>
		<LogicSource><![CDATA[Record recBankAcct = ((ReferenceField)this.getField(BankTrx.BANK_ACCT_ID)).getReference();
if (recBankAcct == null)
    return; // Error - never.
RecordOwner recordOwner = this.findRecordOwner();
Record recAssetDrControl = null;
if (recordOwner != null)
    recAssetDrControl = (Record)recordOwner.getRecord(AssetDrControl.ASSET_DR_CONTROL_FILE);
if (recAssetDrControl == null)
    recAssetDrControl = new AssetDrControl(recordOwner);

double dAmount = this.getField(BankTrx.AMOUNT).getValue();
double dExchange = this.getField(BankTrx.EXCHANGE).getValue();
double dAmountLocal = this.getField(BankTrx.AMOUNT_LOCAL).getValue();
double dInventoryBalance = dAmount;
double dInventoryBalanceLocal = dAmountLocal;
double dTotalAppliedLocal = 0;

if (recBankAcct.getField(BankAcct.CURRENCY_ID).equals(recAssetDrControl.getField(AssetDrControl.CURRENCY_ID)))
{
    dExchange = 1.0;
    dAmountLocal = dAmount;
    dInventoryBalance = 0;
    dInventoryBalanceLocal = 0;
}
else
{
    if (dInventoryBalance < 0)
        dExchange = 0.0;
    else
    {   // Deposits are the only transactions that can specify exchange rates
//      TrxStatus recTrxStatus = ((ReferenceField)this.getField(BankTrx.TRX_STATUS_ID)).getReference();
    }
    if (dExchange == 0)
    {
        dAmountLocal = 0;
        // First check the inventory for balances that must be applied.
        if (m_recBankTrx == null)
        {
            m_recBankTrx = new BankTrx(recordOwner);
            if (recordOwner != null)
                recordOwner.removeRecord(m_recBankTrx);
            this.addListener(new FreeOnFreeHandler(m_recBankTrx));
        }

        BaseField fldBankAcct = this.getField(BankTrx.BANK_ACCT_ID);
        String strSign = PreferredSignField.POSITIVE;
        if (dInventoryBalance > 0)
            strSign = PreferredSignField.NEGATIVE;
        FileListener filter = new StringSubFileFilter(fldBankAcct.toString(), BankTrx.BANK_ACCT_ID, strSign, BankTrx.INV_SIGN, null, null);
        m_recBankTrx.addListener(filter);
        m_recBankTrx.setKeyArea(BankTrx.INV_BALANCE_KEY);
        try {
            m_recBankTrx.close();
            while (m_recBankTrx.hasNext())
            {
                m_recBankTrx.next();
                if (bUpdate)
                    m_recBankTrx.edit();
                double dInvCurrent = m_recBankTrx.getField(BankTrx.INV_BALANCE).getValue();
                double dInvCurrentLocal = m_recBankTrx.getField(BankTrx.INV_BALANCE_LOCAL).getValue();
                if (dInvCurrent != 0)
                    dExchange = dInvCurrentLocal / dInvCurrent;
                else
                    continue;   // Never

                double dApplyAmount = 0;
                if (dInventoryBalance > 0)
                    dApplyAmount = Math.min(-dInvCurrent, dInventoryBalance);
                else
                    dApplyAmount = Math.max(-dInvCurrent, dInventoryBalance);

                dInvCurrent = dInvCurrent + dApplyAmount;    // Opposite signs = (-)
                double dNewInvCurrentLocal = Math.floor(dInvCurrent * dExchange * 100 + 0.5) / 100;

                dInventoryBalance = dInventoryBalance - dApplyAmount;
                double dApplyAmountLocal = dNewInvCurrentLocal - dInvCurrentLocal;
                dTotalAppliedLocal = dTotalAppliedLocal + dApplyAmountLocal;
                dAmountLocal = dAmountLocal + dApplyAmountLocal;

                if (bUpdate)
                {
                    m_recBankTrx.getField(BankTrx.INV_BALANCE).setValue(dInvCurrent);
                    m_recBankTrx.getField(BankTrx.INV_BALANCE_LOCAL).setValue(dNewInvCurrentLocal);
                    if (dNewInvCurrentLocal == 0)
                        m_recBankTrx.getField(BankTrx.INV_SIGN).setData(0);   // Inventory used up.
                    m_recBankTrx.set();
                }
                if (dInventoryBalance == 0)
                    break;
            }
        } catch (DBException ex)    {
            ex.printStackTrace();
        } finally {
            m_recBankTrx.removeListener(filter, true);
        }

        if (dInventoryBalance != 0)
        {
            Record recCurrencys = ((ReferenceField)recBankAcct.getField(BankAcct.CURRENCY_ID)).getReference();
            if (recCurrencys == null)
                dExchange = 1;  // Error
            else
                dExchange = recCurrencys.getField(Currencys.LAST_RATE).getValue();
        }
        dInventoryBalanceLocal = Math.floor(dInventoryBalance * dExchange * 100 + 0.5) / 100;
        dAmountLocal = dAmountLocal + dInventoryBalanceLocal;
    }
}
this.getField(BankTrx.AMOUNT_LOCAL).setValue(dAmountLocal);
this.getField(BankTrx.INV_BALANCE).setValue(dInventoryBalance);
this.getField(BankTrx.INV_BALANCE_LOCAL).setValue(dInventoryBalanceLocal);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3807">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdatePreferredSign</MethodClassName>
		<LogicSource><![CDATA[if (this.getOwner().getValue() > 0)
	m_fldSign.setString(PreferredSignField.POSITIVE);
else if (this.getOwner().getValue() < 0)
	m_fldSign.setString(PreferredSignField.NEGATIVE);
else
	m_fldSign.setString(DBConstants.BLANK);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3808">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdatePreferredSign</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField field, BaseField fldSign</MethodInterface>
		<MethodClassName>UpdatePreferredSign</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3809">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField field, BaseField fldSign</MethodInterface>
		<MethodClassName>UpdatePreferredSign</MethodClassName>
		<LogicSource><![CDATA[super.init(field);
m_fldSign = fldSign;
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3810">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>compareFieldToString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DisableOnSignHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bSign = true;
if (this.getOwner().getValue() < 0)
    bSign = false;
if (DisableOnSignHandler.NEGATIVE.equalsIgnoreCase(m_strSign))
    bSign = !bSign;
return bSign;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3813">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>DisableOnSignHandler</MethodName>
		<LogicDescription><![CDATA[Constructor.
@param fieldToDisable The field to disable when this listener's owner matches the target string.
@param strSign If field is this sign, disable.]]></LogicDescription>
		<MethodReturns>null, fieldToDisable, null, true</MethodReturns>
		<MethodInterface>BaseField fieldToDisable, String strSign</MethodInterface>
		<MethodClassName>DisableOnSignHandler</MethodClassName>
		<LogicSource>m_strSign = strSign;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3814">
		<LastChanged>2012-02-01T08:09:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CheckVendorCurrency</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>String fsVendorCurrency, BaseField fldBankCurrency</MethodInterface>
		<MethodClassName>CheckVendorCurrency</MethodClassName>
		<LogicSource><![CDATA[m_fsVendorCurrency = fsVendorCurrency;
m_fldBankCurrency = fldBankCurrency;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3815">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckVendorCurrency</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
Record recVendor = ((ReferenceField)this.getOwner()).getReference();
if (recVendor != null)
{
    if (!recVendor.getField(m_fsVendorCurrency).equals(m_fldBankCurrency))
    {
        Task task = this.getOwner().getRecord().getRecordOwner().getTask();
        BaseApplication app = (BaseApplication)task.getApplication();
        String strError = app.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString("Vendor currency must match bank currency");
        iErrorCode = task.setLastError(strError);
        this.getOwner().setData(null);
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3816">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getNextCheckNo</MethodName>
		<LogicDescription><![CDATA[Get the next check no.
@return The next check no.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BumpCheckNoHandler</MethodClassName>
		<LogicSource>return m_iLastCheckNo + 1;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3817">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>computeValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ForceSignHandler</MethodClassName>
		<LogicSource><![CDATA[return Math.abs(dSrcValue) * m_iTargetSign;	// Force sign]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3818">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrxDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strGroup = AcctDetailDist.DIST_GROUP;
String strTransaction = AcctDetailDist.DIST_TRANSACTION;
if (this.getTask() != null)
{
    strGroup = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strGroup);
    strTransaction = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strTransaction);
}
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strGroup, AcctDetailDist.DIST_GROUP, AcctDetailDist.DIST_GROUP, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strTransaction, AcctDetailDist.DIST_TRANSACTION, AcctDetailDist.DIST_TRANSACTION, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3819">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrxDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strGroup = AcctDetailDist.DIST_GROUP;
String strTransaction = AcctDetailDist.DIST_TRANSACTION;
if (this.getTask() != null)
{
    strGroup = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strGroup);
    strTransaction = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strTransaction);
}
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, AcctDetailDist.DIST_TRANSACTION, AcctDetailDist.DIST_TRANSACTION, strTransaction);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, AcctDetailDist.DIST_GROUP, AcctDetailDist.DIST_GROUP, strGroup);
super.addNavButtons();  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3820">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrxDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[if(strCommand.equalsIgnoreCase(AcctDetailDist.DIST_GROUP))
    return (this.onForm(this.getMainRecord(), AcctDetailDist.DIST_GROUP_SCREEN, true, iCommandOptions, null) != null);
else if(strCommand.equalsIgnoreCase(AcctDetailDist.DIST_TRANSACTION))
{
    Record recAcctDetail = ((ReferenceField)this.getMainRecord().getField(AcctDetailDist.ACCT_DETAIL_ID)).getReference();
    if (recAcctDetail != null)
        return (this.onForm(recAcctDetail, ScreenConstants.MAINT_MODE, true, iCommandOptions, null) != null);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3821">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGroupGridScreen</MethodClassName>
		<LogicSource><![CDATA[if(strCommand.equalsIgnoreCase(AcctDetailDist.DIST_TRANSACTION))
{
    Record recAcctDetail = ((ReferenceField)this.getMainRecord().getField(AcctDetailDist.ACCT_DETAIL_ID)).getReference();
    if (recAcctDetail != null)
        return (this.onForm(recAcctDetail, ScreenConstants.MAINT_MODE, true, iCommandOptions, null) != null);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3822">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ApTrxDistGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recBaseTrx, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ApTrxDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3823">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxDistGridScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3824">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxDistGridScreen</MethodClassName>
		<LogicSource>return new ApTrxHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3825">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.ID).setEnabled(true);
this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.ID).addListener(new MainReadOnlyHandler(ApTrx.ID_KEY));
this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.CODE).setEnabled(true);
this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.CODE).addListener(new MainReadOnlyHandler(ApTrx.CODE_KEY));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3826">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3827">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PaymentHistoryDistGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recBaseTrx, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>PaymentHistoryDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3828">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryDistGridScreen</MethodClassName>
		<LogicSource>return new PaymentHistory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3831">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryDistGridScreen</MethodClassName>
		<LogicSource>return new PaymentHistoryHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3832">
		<LastChanged>2012-03-27T12:34:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistory</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & PaymentHistory.LINK_DISTRIBUTION_SCREEN) == PaymentHistory.LINK_DISTRIBUTION_SCREEN)
    screen = Record.makeNewScreen(PAYMENT_HISTORY_LINK_TRX_GRID_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if (((iDocMode & ScreenConstants.DETAIL_MODE) == ScreenConstants.DETAIL_MODE)
    || ((iDocMode & PaymentHistory.DISTRIBUTION_SCREEN) == PaymentHistory.DISTRIBUTION_SCREEN))
        screen = Record.makeNewScreen(PAYMENT_HISTORY_DIST_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(PAYMENT_HISTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
    screen = Record.makeNewScreen(PAYMENT_HISTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3833">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistory</MethodClassName>
		<LogicSource><![CDATA[if (AcctDetailDist.DIST_DISTRIBUTION.equalsIgnoreCase(strCommand))
    return PaymentHistory.DISTRIBUTION_SCREEN;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3834">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getTrxAccountID*3</MethodName>
		<LogicDescription><![CDATA[Look at the posting distribution for this transaction and get the
account for this transaction type.
@param strPostingType The type of posting that you are looking for.
@return The field with the account ID of this transaction type (null = none).]]></LogicDescription>
		<MethodReturns>BaseField</MethodReturns>
		<MethodInterface>String strPostingType</MethodInterface>
		<MethodClassName>Trx</MethodClassName>
		<LogicSource><![CDATA[int iTrxStatusID = (int)this.getField(Trx.TRX_STATUS_ID).getValue();
return this.getTrxAccountID(iTrxStatusID, strPostingType);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3835">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getDistSearch</MethodName>
		<LogicDescription><![CDATA[Get the AcctDetailDist file and set it for for a sequential search on
this Trx.
@param fldTrxDescID The TrxDescField for this Trx.
@return The AcctDetailDist file.]]></LogicDescription>
		<MethodReturns>AcctDetailDist</MethodReturns>
		<MethodInterface>BaseField fldTrxDescID</MethodInterface>
		<MethodClassName>Trx</MethodClassName>
		<LogicSource><![CDATA[if (m_recAcctDetailDistSearch == null)
{
    m_recAcctDetailDistSearch = new AcctDetailDist(this.findRecordOwner());
    if (m_recAcctDetailDistSearch.getRecordOwner() != null)
        m_recAcctDetailDistSearch.getRecordOwner().removeRecord(m_recAcctDetailDistSearch);
}
else
    m_recAcctDetailDistSearch.removeListener(m_recAcctDetailDistSearch.getListener(SubFileFilter.class.getName()), true);
m_recAcctDetailDistSearch.setKeyArea(AcctDetailDist.TRX_DESC_ID_KEY);
m_recAcctDetailDistSearch.addListener(new SubFileFilter(fldTrxDescID, AcctDetailDist.TRX_DESC_ID, this.getField(BaseTrx.ID), AcctDetailDist.TRX_ID, null, null));
return m_recAcctDetailDistSearch;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3836">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getDistSearch*2</MethodName>
		<LogicDescription><![CDATA[Get the AcctDetailDist file and set it for for a sequential search on
this Trx.
@return The AcctDetailDist file.]]></LogicDescription>
		<MethodReturns>AcctDetailDist</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Trx</MethodClassName>
		<LogicSource><![CDATA[Record recTrxStatus = ((ReferenceField)this.getField(Trx.TRX_STATUS_ID)).getReference();
if (recTrxStatus == null)
    return null;
return this.getDistSearch(recTrxStatus.getField(TrxStatus.TRX_DESC_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3837">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdateInvoiceVendorHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>ScreenRecord screenRecord</MethodInterface>
		<MethodClassName>UpdateInvoiceVendorHandler</MethodClassName>
		<LogicSource>m_screenRecord = screenRecord;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3838">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateInvoiceVendorHandler</MethodClassName>
		<LogicSource><![CDATA[BaseField fldVendorID = this.getOwner().getField(ApTrx.VENDOR_ID);
BaseField fldLastVendorID = m_screenRecord.getField(InvoiceScreenRecord.LAST_VENDOR_ID);
if (fldVendorID.equals(fldLastVendorID))
    // if (trxStatus = departure est)
{
    this.getOwner().getField(ApTrx.INVOICE_NO).moveFieldToThis(m_screenRecord.getField(InvoiceScreenRecord.LAST_INVOICE_NO), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    this.getOwner().getField(ApTrx.INVOICE_DATE).moveFieldToThis(m_screenRecord.getField(InvoiceScreenRecord.LAST_INVOICE_DATE), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3840">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ArTrxDistGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recBaseTrx, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ArTrxDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3841">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxDistGridScreen</MethodClassName>
		<LogicSource>return new ArTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3842">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxDistGridScreen</MethodClassName>
		<LogicSource>return new ArTrxHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3843">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3844">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3845">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrx</MethodClassName>
		<LogicSource><![CDATA[if (AcctDetailDist.DIST_DISTRIBUTION.equalsIgnoreCase(strCommand))
    return ArTrx.DISTRIBUTION_SCREEN;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3851">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseArPay</MethodClassName>
		<LogicSource><![CDATA[if (AcctDetailDist.DIST_DISTRIBUTION.equalsIgnoreCase(strCommand))
    return BaseArPay.DISTRIBUTION_SCREEN;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3852">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CreditCardDistGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recBaseTrx, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CreditCardDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3853">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardDistGridScreen</MethodClassName>
		<LogicSource>return new CreditCard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3854">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardDistGridScreen</MethodClassName>
		<LogicSource>return new CreditCardHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3855">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3856">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3857">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>McoDistGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recBaseTrx, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>McoDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3858">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoDistGridScreen</MethodClassName>
		<LogicSource>return new Mco(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3859">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoDistGridScreen</MethodClassName>
		<LogicSource>return new McoHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3860">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3861">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3862">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdateActiveTrxStatus</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField fldActiveTrxTarget</MethodInterface>
		<MethodClassName>UpdateActiveTrxStatus</MethodClassName>
		<LogicSource><![CDATA[m_fldActiveTrxTarget  = fldActiveTrxTarget;
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3863">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateActiveTrxStatus</MethodClassName>
		<LogicSource><![CDATA[TrxStatusField fldTrxStatusID = (TrxStatusField)this.getOwner();
if (!fldTrxStatusID.isNull())
{
    TrxStatus recTrxStatus = (TrxStatus)fldTrxStatusID.getReference();
    if (recTrxStatus != null)
    {
        m_fldActiveTrxTarget.moveFieldToThis(recTrxStatus.getField(TrxStatus.ACTIVE_TRX));
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3864">
		<LastChanged>2012-01-31T11:58:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(TrxStatus.TRX_DESC_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(TrxStatusScreenRecord.TRX_DESC_ID), TrxStatus.TRX_DESC_ID, null, null, null, null));

this.getMainRecord().addListener(new UpdateTrxStatusHandler(null, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3865">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeConverter</MethodClassName>
		<LogicSource><![CDATA[String string = DBConstants.BLANK;
Record record = ((BaseField)this.getField()).getRecord();
String strGroup = record.getField(TransactionType.GROUP_DESC).toString();
String strType = record.getField(TransactionType.TYPE_DESC).toString();
String strTrx = record.getField(TransactionType.TYPE_CODE).toString();
if (strTrx.length() == 0)
    string = strType;
else
    string = strGroup + " - " + strType;
//BaseField field = record.getField(TransactionType.TYPICAL_BALANCE);
//String strField = field.convertIndexToDisStr(field.convertFieldToIndex());
//if (strField.length() > 1)
//    string += " [" + strField + "] ";
//else
//    string += "-";
//string += record.getField(TransactionType.DESCRIPTION).toString() + "-" + record.getField(TransactionType.SYSTEM_DESC).toString();
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3866">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>LinkTrxGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>LinkTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3868">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PaymentHistoryLinkTrxGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recTrx, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>PaymentHistoryLinkTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3869">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryLinkTrxGridScreen</MethodClassName>
		<LogicSource>return new PaymentHistory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3870">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryLinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (ApTrx.AP_TRX_FILE.equalsIgnoreCase(this.getProperty(DBParams.HEADER_RECORD)))
    return new ApTrx(this);
else
    return new BankTrx(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3871">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryLinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getHeaderRecord() instanceof ApTrx)
    return new ApTrxHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
else
    return new BankTrxHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3872">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryLinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getHeaderRecord() instanceof BankTrx)
{
    this.getHeaderRecord().setOpenMode(this.getHeaderRecord().getOpenMode() | DBConstants.OPEN_READ_ONLY);
    if (this.getHeaderRecord().getField(BankTrx.BANK_ACCT_ID).isNull())
    {
        ApControl recApControl = new ApControl(this);
        this.getHeaderRecord().getField(BankTrx.BANK_ACCT_ID).moveFieldToThis(recApControl.getField(ApControl.AP_BANK_ACCT_ID));
        this.getHeaderRecord().getField(BankTrx.BANK_ACCT_ID).setModified(false);
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3873">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
TrxDesc recTrxDesc = (TrxDesc)this.getRecord(TrxDesc.TRX_DESC_FILE);
recTrxDesc = ((Trx)m_recHeader).getTrxDesc(recTrxDesc);
LinkTrx recLinkTrx = (LinkTrx)this.getMainRecord();
recLinkTrx.setKeyArea(LinkTrx.LINKED_TRX_ID_KEY);
recLinkTrx.addListener(new SubFileFilter(this.getHeaderRecord().getField(Trx.ID), LinkTrx.LINKED_TRX_ID, recTrxDesc.getField(TrxDesc.ID), LinkTrx.LINKED_TRX_DESC_ID, null, null, true));

this.getHeaderRecord().getField(Trx.ID).addListener(new FieldReSelectHandler(this));

this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3874">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TrxDesc(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3875">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>getTrxDesc</MethodName>
		<LogicDescription><![CDATA[Get the TrxDesc record for this type of record.
@param recTrxDesc An empty TrxDesc record to use.
@return A TrxDesc record with this trx's desc in it.]]></LogicDescription>
		<MethodReturns>TrxDesc</MethodReturns>
		<MethodInterface>TrxDesc recTrxDesc</MethodInterface>
		<MethodClassName>Trx</MethodClassName>
		<LogicSource><![CDATA[if (recTrxDesc == null)
{
    // If there is a valid status, get the Desc from the status
    Record recTrxStatus = ((ReferenceField)this.getField(Trx.TRX_STATUS_ID)).getReference();
    if (recTrxStatus != null)
        return (TrxDesc)((ReferenceField)recTrxStatus.getField(TrxStatus.TRX_DESC_ID)).getReference();
    // Okay, no status. Get the desc from the linked status so TrxDesc will be freed properly
    recTrxStatus =  ((ReferenceField)this.getField(Trx.TRX_STATUS_ID)).getReferenceRecord();
    recTrxDesc = (TrxDesc)((ReferenceField)recTrxStatus.getField(TrxStatus.TRX_DESC_ID)).getReferenceRecord();
}
// Need to read the desc the hard way. Read the code which is the file name.
recTrxDesc.setKeyArea(TrxDesc.DESC_CODE_KEY);
recTrxDesc.getField(TrxDesc.DESC_CODE).setString(this.getTableNames(false));
try {
    if (recTrxDesc.seek("="))
        return recTrxDesc;
} catch (DBException ex) {
    ex.printStackTrace();
}
return null;	// Never;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3876">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryLinkTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3877">
		<LastChanged>2013-01-22T05:51:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[if (MenuConstants.LOOKUP.equalsIgnoreCase(strCommand))
{
    iCommandOptions = ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER;
    boolean bReadCurrentRecord = false;
    int iDocMode = ApTrx.VENDOR_AP_SCREEN | ScreenConstants.SELECT_MODE;
    Map<String,Object> properties = new Hashtable<String,Object>();
    if (!this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.VENDOR_ID).isNull())
        properties.put(DBParams.HEADER_OBJECT_ID, this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.VENDOR_ID).toString());

    return (this.onForm(this.getRecord(ApTrx.AP_TRX_FILE), iDocMode, bReadCurrentRecord, iCommandOptions, properties) != null);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3878">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(LinkTrx.SOURCE), LinkTrx.SOURCE, LinkTrx.SOURCE, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3879">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, LinkTrx.SOURCE, LinkTrx.SOURCE, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(LinkTrx.SOURCE));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3880">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (LinkTrx.SOURCE.equalsIgnoreCase(strCommand))
{
    LinkTrx recLinkTrx = (LinkTrx)this.getMainRecord();
    strCommand = recLinkTrx.getSourceCommand();
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3881">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getSourceCommand</MethodName>
		<LogicDescription>Get the command to display the source transaction</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>LinkTrx</MethodClassName>
		<LogicSource><![CDATA[String strCommand = DBConstants.BLANK;
if ((this.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
    || (this.getEditMode() == DBConstants.EDIT_CURRENT))
{
    String bookmark = this.getField(LinkTrx.LINKED_TRX_ID).toString();
    if ((bookmark != null) && (bookmark.length() > 0))
    {
        TrxDesc recTrxDesc = (TrxDesc)((ReferenceField)this.getField(LinkTrx.LINKED_TRX_DESC_ID)).getReference();
        if (recTrxDesc != null)
        {
            String strRecordSource = recTrxDesc.getField(TrxDesc.SOURCE_FILE).toString();
            if ((strRecordSource != null) && (strRecordSource.length() > 0))
            {
                strCommand = Utility.addURLParam(strCommand, DBParams.RECORD, strRecordSource);
                strCommand = Utility.addURLParam(strCommand, Constants.OBJECT_ID, bookmark.toString());
                strCommand = Utility.addURLParam(strCommand, DBParams.COMMAND, MenuConstants.FORM);
            }
        }
    }
}
return strCommand;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3882">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdateTrxStatusHandler</MethodName>
		<LogicDescription><![CDATA[Constructor.
@param If you know the trxDesc that is changing, supply it here.]]></LogicDescription>
		<MethodReturns>record</MethodReturns>
		<MethodInterface>Record record, TrxDesc recTrxDesc</MethodInterface>
		<MethodClassName>UpdateTrxStatusHandler</MethodClassName>
		<LogicSource>m_recTrxDesc = recTrxDesc;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3883">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdateTrxGroupHandler</MethodName>
		<LogicDescription><![CDATA[Constructor.
@param If you know the trxDesc that is changing, supply it here.]]></LogicDescription>
		<MethodReturns>record</MethodReturns>
		<MethodInterface>Record record, TrxDesc recTrxDesc</MethodInterface>
		<MethodClassName>UpdateTrxGroupHandler</MethodClassName>
		<LogicSource>m_recTrxDesc = recTrxDesc;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3884">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));

this.getMainRecord().addListener(new UpdateTrxGroupHandler(null, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3885">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupScreen</MethodClassName>
		<LogicSource>return new TrxDesc(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3886">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusScreen</MethodClassName>
		<LogicSource>return new TrxDesc(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3887">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryLinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (LinkTrx.SOURCE.equalsIgnoreCase(strCommand))
{
    Record recApTrx = ((ReferenceField)this.getMainRecord().getField(PaymentHistory.AP_TRX_ID)).getReference();
    if (recApTrx != null)
        return (this.onForm(recApTrx, ScreenConstants.MAINT_MODE, true, iCommandOptions, null) != null);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3888">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxField</MethodClassName>
		<LogicSource>return new ApTrx(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3889">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), ApTrx.CODE_KEY, ApTrx.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3890">
		<LastChanged>2012-07-19T16:49:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.makeReferenceRecord();
ScreenComponent screenField = createScreenComponent(ScreenModel.EDIT_TEXT, itsLocation, targetScreen, converter, iDisplayFieldDesc, properties);
screenField.setEnabled(false);
if (record != null)
{
    ReadSecondaryHandler behavior = new ReadSecondaryHandler(record, null, DBConstants.CLOSE_ON_FREE, false, false);
    this.addListener(behavior);
    BaseField conv = record.getField(Trx.TRX_STATUS_ID);
    conv.setupDefaultView(targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, conv, ScreenConstants.DONT_DISPLAY_DESC, properties);
    conv.setEnabled(false);
}
return screenField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3891">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrx</MethodClassName>
		<LogicSource><![CDATA[if (BankTrx.PAYMENT_DISTRIBUTION.equalsIgnoreCase(strCommand))
    return BankTrx.PAYMENT_DISTRIBUTION_SCREEN;
if (AcctDetailDist.DIST_DISTRIBUTION.equalsIgnoreCase(strCommand))
    return BankTrx.DISTRIBUTION_SCREEN;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3892">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ArTrxLinkTrxGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recTrx, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ArTrxLinkTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3893">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxLinkTrxGridScreen</MethodClassName>
		<LogicSource>return new ArTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3894">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxLinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (m_recHeader != null)
    this.addRecord(m_recHeader, false);
else
{
    if (CreditCard.CREDIT_CARD_FILE.equalsIgnoreCase(this.getProperty(DBParams.HEADER_RECORD)))
        m_recHeader = new CreditCard(this);
    else if (Mco.MCO_FILE.equalsIgnoreCase(this.getProperty(DBParams.HEADER_RECORD)))
        m_recHeader = new Mco(this);
    else
        m_recHeader = new BankTrx(this);
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3895">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxLinkTrxGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3896">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxLinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getHeaderRecord() instanceof CreditCard)
    return new CreditCardHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
else if (this.getHeaderRecord() instanceof Mco)
    return new McoHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
else
    return new BankTrxHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3897">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxLinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (LinkTrx.SOURCE.equalsIgnoreCase(strCommand))
{
    Record recBooking = ((ReferenceField)this.getMainRecord().getField(ArTrx.BOOKING_ID)).getReference();
    if (recBooking != null)
        return (this.onForm(recBooking, ScreenConstants.MAINT_MODE, true, iCommandOptions, null) != null);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3898">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxLinkTrxGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3899">
		<LastChanged>2013-01-22T05:46:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[if (MenuConstants.LOOKUP.equalsIgnoreCase(strCommand))
{
    iCommandOptions = ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER;
    boolean bReadCurrentRecord = false;
    int iDocMode = ScreenConstants.DISPLAY_MODE | ScreenConstants.SELECT_MODE;
    Map<String,Object> properties = new Hashtable<String,Object>();
    if (!this.getRecord(BankTrx.BANK_TRX_FILE).getField(BankTrx.BANK_ACCT_ID).isNull())
        properties.put(DBParams.HEADER_OBJECT_ID, this.getRecord(BankTrx.BANK_TRX_FILE).getField(BankTrx.BANK_ACCT_ID).toString());

    return (this.onForm(this.getRecord(BankTrx.BANK_TRX_FILE), iDocMode, bReadCurrentRecord, iCommandOptions, properties) != null);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3900">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqGridScreen</MethodClassName>
		<LogicSource>return new Vendor(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3901">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3902">
		<LastChanged>2012-02-01T08:20:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().setKeyArea(Vendor.CURRENCYS_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(CurrencyReqScreenRecord.CURRENCYS_ID), Vendor.CURRENCYS_ID, null, null, null, null, true));
this.getScreenRecord().getField(CurrencyReqScreenRecord.CURRENCYS_ID).addListener(new FieldReSelectHandler(this));

ApTrx recApTrx = ((Vendor)this.getMainRecord()).addSelectBehaviors();

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(CurrencyReqScreenRecord.BALANCE_TOTAL), Vendor.VENDOR_BALANCE, true, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(CurrencyReqScreenRecord.TOTAL_TOTAL), Vendor.AMOUNT_SELECTED, true, true));

this.setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3903">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqGridScreen</MethodClassName>
		<LogicSource>return new CurrencyReqScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3904">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3905">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqGridScreen</MethodClassName>
		<LogicSource>return new CurrencyReqHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3906">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(CurrencyReqScreenRecord.CURRENCYS_ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3907">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3908">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournal</MethodClassName>
		<LogicSource>return new ApJournalDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3909">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournalDetail</MethodClassName>
		<LogicSource>return this.getRecord(ApTrx.AP_TRX_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3910">
		<LastChanged>2012-02-01T04:44:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ApTrxFilter</MethodName>
		<LogicDescription/>
		<MethodReturns>null, fsTarget</MethodReturns>
		<MethodInterface>String fsTarget, ScreenRecord screenRecord</MethodInterface>
		<MethodClassName>ApTrxFilter</MethodClassName>
		<LogicSource>m_screenRecord = screenRecord;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3935">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailBreakFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3936">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailDetail</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3937">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailDetail</MethodClassName>
		<LogicSource>return this.getRecord(ApTrx.AP_TRX_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3939">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailDetail</MethodClassName>
		<LogicSource>return new TourDetailBreakFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3940">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailReport</MethodClassName>
		<LogicSource>return new TourDetailDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3945">
		<LastChanged>2012-02-01T12:51:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addSummary</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyReqReport</MethodClassName>
		<LogicSource><![CDATA[this.getScreenRecord().getField(CurrencyReqScreenRecord.SUMMARY_CURRENCY_DESC).moveFieldToThis(this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.DESCRIPTION));
this.getScreenRecord().getField(CurrencyReqScreenRecord.DEPARTURE_TOTAL).moveFieldToThis(this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.DEPARTURE_ESTIMATE));
this.getScreenRecord().getField(CurrencyReqScreenRecord.BALANCE_TOTAL).moveFieldToThis(this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.INVOICE_BALANCE));
double dEstimate = this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.DEPARTURE_ESTIMATE).getValue();
double dBalance = this.getRecord(ApTrx.AP_TRX_FILE).getField(ApTrx.INVOICE_BALANCE).getValue();
double dTotal = dBalance;
if (dTotal == 0.00)
    dTotal = dEstimate;
this.getScreenRecord().getField(CurrencyReqScreenRecord.TOTAL_TOTAL).setValue(dTotal);
double dTotalUSD = dTotal * this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.LAST_RATE).getValue();
this.getScreenRecord().getField(CurrencyReqScreenRecord.TOTAL_USD).setValue(dTotalUSD);

// Add totals:
this.getScreenRecord().getField(CurrencyReqScreenRecord.USD_TOTAL).setValue(this.getScreenRecord().getField(CurrencyReqScreenRecord.USD_TOTAL).getValue() + this.getScreenRecord().getField(CurrencyReqScreenRecord.TOTAL_USD).getValue());

super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3947">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getNextGridRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffReport</MethodClassName>
		<LogicSource><![CDATA[Record recApTrx = null;
while (recApTrx == null)
{
    recApTrx = super;
    bFirstTime = false;
    if (recApTrx == null)
        return recApTrx;    // EOF
    else
    { // Exclude those tours after the cutoff date.
        Record recTour = ((ReferenceField)recApTrx.getField(ApTrx.TOUR_ID)).getReference();
        if (recTour == null)
            recApTrx = null;    // Skip this one.
        else
        {
            if (!this.getScreenRecord().getField(ApCutoffScreenRecord.CUTOFF_DATE).isNull())
                if (recTour.getField(Tour.DEPARTURE_DATE).compareTo(this.getScreenRecord().getField(ApCutoffScreenRecord.CUTOFF_DATE)) > 0)
                    recApTrx = null;    // Skip this one (past the cutoff date).
        }
    }
}
// Now calculate the Invoice balance at the cutoff date
Record recPaymentHistory = this.getRecord(PaymentHistory.PAYMENT_HISTORY_FILE);
recPaymentHistory.close();
while (recPaymentHistory.hasNext())
{
    recPaymentHistory.next();   // The listeners do all the work.
}
return recApTrx;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3948">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApBaseCutoffReport</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3949">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApBaseCutoffReport</MethodClassName>
		<LogicSource><![CDATA[super;
new Currencys(this);
new Vendor(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3950">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApBaseCutoffReport</MethodClassName>
		<LogicSource><![CDATA[super;
Record recApTrx = this.getMainRecord();
Record recVendor = this.getRecord(Vendor.VENDOR_FILE);
Record recCurrencys = this.getRecord(Currencys.CURRENCYS_FILE);
recVendor.addListener(new SubFileFilter(recCurrencys));
recApTrx.addListener(new SubFileFilter(recVendor));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3951">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getNextGridRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApBaseCutoffReport</MethodClassName>
		<LogicSource><![CDATA[Record recApTrx = null;
while (recApTrx == null)
{
    if (!bFirstTime)
        recApTrx = super;
    if (recApTrx == null)
    {
        Record recVendor = null;
        while (recVendor == null)
        {
            if (!bFirstTime)
                recVendor = this.getRecord(Vendor.VENDOR_FILE).next();
            if (recVendor == null)
            {
                if (bFirstTime)
                    this.getRecord(Currencys.CURRENCYS_FILE).close();
                bFirstTime = false;
                Record recCurrencys = this.getRecord(Currencys.CURRENCYS_FILE).next();
                if (recCurrencys == null)
                    return null;    // EOF
                this.getRecord(Vendor.VENDOR_FILE).close();
            }
        }
        this.getRecord(ApTrx.AP_TRX_FILE).close();
    }
}
return recApTrx;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3952">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApBaseCutoffReport</MethodClassName>
		<LogicSource><![CDATA[return new ApReportScreenRecord(this);	// Probably override this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3953">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApBaseCutoffReport</MethodClassName>
		<LogicSource><![CDATA[return super;	// Override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3954">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApBaseCutoffReport</MethodClassName>
		<LogicSource><![CDATA[return super;	// Override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3955">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxBaseFilter</MethodClassName>
		<LogicSource><![CDATA[if (m_recTrxStatus != null)
    m_recTrxStatus.free();
m_recTrxStatus = null;
if (m_recTrxDesc != null)
    m_recTrxDesc.free();
m_recTrxDesc = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3956">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>isFilterChange</MethodName>
		<LogicDescription><![CDATA[Has the filter changed from the last time this was used?
If yes, return true and change your compare values for next time.
Usually Override this (default logic returns true on first time).
@return True if filter has changed.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ApTrxBaseFilter</MethodClassName>
		<LogicSource><![CDATA[if (m_bFirstTime)
{
    m_bFirstTime = false;
    return true;
}
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3957">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>scanNewFilter</MethodName>
		<LogicDescription>Scan the Status file and add any status that go with this filter.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxBaseFilter</MethodClassName>
		<LogicSource><![CDATA[TrxStatus recTrxStatus = this.getTrxStatus();
try {
    recTrxStatus.close();
    while (recTrxStatus.hasNext())
    {
        recTrxStatus.next();
        if (this.checkTrxStatus(recTrxStatus))
            this.addTrxStatusID(recTrxStatus);
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3958">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>checkTrxStatus</MethodName>
		<LogicDescription><![CDATA[Should I add this Status to the filter?
Override this!
@return true if status is valid.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>TrxStatus recTrxStatus</MethodInterface>
		<MethodClassName>ApTrxBaseFilter</MethodClassName>
		<LogicSource>return true;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3959">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doLocalCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxBaseFilter</MethodClassName>
		<LogicSource><![CDATA[if (this.isFilterChange())
{
    this.clearFilter();

    this.scanNewFilter();
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3960">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getTrxStatus</MethodName>
		<LogicDescription><![CDATA[Return the TrxStatus file.
@return The TrxStatus file.]]></LogicDescription>
		<MethodReturns>TrxStatus</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ApTrxBaseFilter</MethodClassName>
		<LogicSource><![CDATA[if (m_recTrxStatus == null)
{
    RecordOwner recordOwner = this.getOwner().findRecordOwner();
    m_recTrxStatus = new TrxStatus(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recTrxStatus);
    m_recTrxDesc = new TrxDesc(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recTrxDesc);
    m_recTrxDesc.getKeyArea(TrxDesc.DESC_CODE_KEY);
    m_recTrxDesc.getField(TrxDesc.DESC_CODE).setString(ApTrx.AP_TRX_FILE);
    try {
        if (m_recTrxDesc.seek("="))
        {
            m_recTrxStatus.addListener(new SubFileFilter(m_recTrxDesc));
        }
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
}
return m_recTrxStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3961">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>addTrxStatusID</MethodName>
		<LogicDescription>Add this TrxStatus to the filter.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>TrxStatus recTrxStatus</MethodInterface>
		<MethodClassName>ApTrxBaseFilter</MethodClassName>
		<LogicSource>this.addFilter(new Integer((int)recTrxStatus.getField(TrxStatus.ID).getValue()));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3962">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>isFilterChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxFilter</MethodClassName>
		<LogicSource><![CDATA[if ((m_screenRecord.getField(ApReportScreenRecord.VOUCHERS).getState() != m_bVouchers)
    || (m_screenRecord.getField(ApReportScreenRecord.DEP_ESTIMATES).getState() != m_bDepEst)
    || (m_screenRecord.getField(ApReportScreenRecord.OPEN_ITEMS).getState() != m_bOpenItems)
    || (m_screenRecord.getField(ApReportScreenRecord.SHOW_PAID).getState() != m_bPaidItems))
{
    m_bVouchers = m_screenRecord.getField(ApReportScreenRecord.VOUCHERS).getState();
    m_bDepEst = m_screenRecord.getField(ApReportScreenRecord.DEP_ESTIMATES).getState();
    m_bOpenItems = m_screenRecord.getField(ApReportScreenRecord.OPEN_ITEMS).getState();
    m_bPaidItems = m_screenRecord.getField(ApReportScreenRecord.SHOW_PAID).getState();
    return true;
}
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3963">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>checkTrxStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxFilter</MethodClassName>
		<LogicSource><![CDATA[if (recTrxStatus.getField(TrxStatus.STATUS_CODE).toString().indexOf(ApTrx.VOUCHER) != -1)
    return m_bVouchers;
else if (recTrxStatus.getField(TrxStatus.STATUS_CODE).toString().indexOf(ApTrx.DEP_ESTIMATE.substring(0, 6)) != -1)
    return m_bDepEst;
else if (recTrxStatus.getField(TrxStatus.ACTIVE_TRX).getState() == false)
    return m_bPaidItems;
else
    return m_bOpenItems;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3964">
		<LastChanged>2012-02-01T04:44:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ApTrxBaseFilter</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>null, fsTarget</MethodReturns>
		<MethodInterface>String fsTarget</MethodInterface>
		<MethodClassName>ApTrxBaseFilter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3965">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffVenFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3966">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffCurrFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3969">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffCurrHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3970">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffVendorHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3971">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getBreakValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffCurrHeading</MethodClassName>
		<LogicSource>return this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID).getData();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3972">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getBreakValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffCurrFooting</MethodClassName>
		<LogicSource>return this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID).getData();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3973">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getBreakValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffVenFooting</MethodClassName>
		<LogicSource>return this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID).getData();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3974">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getBreakValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApCutoffVendorHeading</MethodClassName>
		<LogicSource>return this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID).getData();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3975">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getBreakValue</MethodName>
		<LogicDescription><![CDATA[Get the value to break on.
@return the break value.]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface/>
		<MethodClassName>DetailHeadingScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3976">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getNextGridRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffReport</MethodClassName>
		<LogicSource><![CDATA[Record recApTrx = null;
while (recApTrx == null)
{
    recApTrx = super;
    bFirstTime = false;
    if (recApTrx == null)
        return recApTrx;    // EOF
    else
    { // Exclude those prepayments after the cutoff date.
        if (!this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.CUTOFF_DATE).isNull())
            if (recApTrx.getField(ApTrx.INVOICE_DATE).compareTo(this.getScreenRecord().getField(PrepaymentCutoffScreenRecord.CUTOFF_DATE)) > 0)
                recApTrx = null;    // Skip this one (past the cutoff date).
    }
}
// Now calculate the Invoice balance at the cutoff date
double dInvoiceBalance = Math.abs(recApTrx.getField(ApTrx.INVOICE_AMOUNT).getValue());
double dInvoiceBalanceLocal = Math.abs(recApTrx.getField(ApTrx.INVOICE_LOCAL).getValue());
recApTrx.getField(ApTrx.INVOICE_AMOUNT).setValue(dInvoiceBalance);  // Make sure these are positive
recApTrx.getField(ApTrx.INVOICE_LOCAL).setValue(dInvoiceBalanceLocal);

Record recPaymentHistory = this.getRecord(PaymentHistory.PAYMENT_HISTORY_FILE);
recPaymentHistory.close();
while (recPaymentHistory.hasNext())
{
    recPaymentHistory.next();
    dInvoiceBalance = dInvoiceBalance - recPaymentHistory.getField(PaymentHistory.AMOUNT_APPLIED).getValue();   // I manually zero these
    dInvoiceBalanceLocal = dInvoiceBalanceLocal - recPaymentHistory.getField(PaymentHistory.AMOUNT_LOCAL).getValue();
}
recApTrx.getField(ApTrx.INVOICE_BALANCE).setValue(dInvoiceBalance);
recApTrx.getField(ApTrx.INVOICE_BALANCE_LOCAL).setValue(dInvoiceBalanceLocal);
return recApTrx;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3977">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffVenFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3978">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getBreakValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffVenFooting</MethodClassName>
		<LogicSource>return this.getRecord(Vendor.VENDOR_FILE).getField(Vendor.ID).getData();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3979">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffCurrFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3980">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getBreakValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PrepaymentCutoffCurrFooting</MethodClassName>
		<LogicSource>return this.getRecord(Currencys.CURRENCYS_FILE).getField(Currencys.ID).getData();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3984">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysisVenFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3986">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorCostAnalysisVenHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3987">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysisTourHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3988">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourCostAnalysisTourFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3989">
		<LastChanged>2012-02-02T22:49:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getServletPath</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Report</MethodClassName>
		<LogicSource><![CDATA[if (!this.getScreenRecord().getField(ApReportScreenRecord.TEMPLATE).isNull())
    strServletParam = DBParams.XHTMLSERVLET; // Use cocoon
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3990">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getNextGridRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Ten99Report</MethodClassName>
		<LogicSource><![CDATA[Record record = null;
while (record == null)
{
    record = super;
    bFirstTime = false;
    if (record == null)
        return null;    // EOF
    Record recBankTrx = this.getRecord(BankTrx.BANK_TRX_FILE);
    recBankTrx.close();
    while (recBankTrx.hasNext())
    {
        recBankTrx.next();  // Listener will add to total
    }
    if (Math.abs(record.getField(Vendor.VENDOR_BALANCE).getValue()) < this.getScreenRecord().getField(ApReportScreenRecord.EXCLUDE_AMOUNT).getValue())
        record = null;  // Skip this vendor
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3991">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getTrxDesc</MethodName>
		<LogicDescription/>
		<MethodReturns>TrxDesc</MethodReturns>
		<MethodInterface>String strSystemCode, String strDescCode</MethodInterface>
		<MethodClassName>TrxDesc</MethodClassName>
		<LogicSource><![CDATA[TrxSystem recTrxSystem = new TrxSystem(this.findRecordOwner());
// TODO - Move the SystemCode to this file.
try {
    recTrxSystem.setKeyArea(TrxSystem.SYSTEM_CODE_KEY);
    recTrxSystem.getField(TrxSystem.SYSTEM_CODE).setString(strSystemCode);
    if (!recTrxSystem.seek("="))
        return null;	// System code not found;
    this.setKeyArea(TrxDesc.TRX_SYSTEM_ID_KEY);
    this.getField(TrxDesc.TRX_SYSTEM_ID).moveFieldToThis(recTrxSystem.getField(TrxSystem.ID));
    this.getField(TrxDesc.DESC_CODE).setString(strDescCode);
    if (!this.seek("="))
        return null;
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    recTrxSystem.free();
}
return this;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3992">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PayTypeField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {HOURLY, "Hourly"}, 
    {SALARIED, "Salaried"},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3993">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MaritalStatusField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {SINGLE, "Single"},
    {MARRIED, "Married"},
    {HEAD_OF_HOUSEHOLD, "Head of Household"},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3994">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepartmentField</MethodClassName>
		<LogicSource>return new Department(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3995">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepartmentField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Department.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3996">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DistField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {AMOUNT, "Amount"},
    {HOURLY, "Hourly"},
    {PERCENTAGE, "Percentage"},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3997">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TaxRateGridScreen</MethodClassName>
		<LogicSource>return new TaxRate(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3998">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TaxRateGridScreen</MethodClassName>
		<LogicSource>return new TaxRateScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3999">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TaxRateGridScreen</MethodClassName>
		<LogicSource>return new TaxRateHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4000">
		<LastChanged>2012-01-31T20:53:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TaxRateGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().setKeyArea(TaxRate.TAX_CODE_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(TaxRateScreenRecord.TAX_CODE), TaxRate.TAX_CODE, this.getScreenRecord().getField(TaxRateScreenRecord.MARITAL_STATUS), TaxRate.MARITAL_STATUS, null, null));
this.getScreenRecord().getField(TaxRateScreenRecord.TAX_CODE).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(TaxRateScreenRecord.MARITAL_STATUS).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4001">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TaxRateHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4002">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TaxRateHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(TaxRateScreenRecord.TAX_CODE).setEnabled(true);
this.getScreenRecord().getField(TaxRateScreenRecord.MARITAL_STATUS).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4003">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EmployeeGridScreen</MethodClassName>
		<LogicSource>return new Employee(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4004">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTermsGridScreen</MethodClassName>
		<LogicSource>return new ProductTerms(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4005">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTermsScreen</MethodClassName>
		<LogicSource>return new ProductTerms(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4006">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MealPlanScreen</MethodClassName>
		<LogicSource>return new MealPlan(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4007">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegionScreen</MethodClassName>
		<LogicSource>return new Region(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4008">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegionGridScreen</MethodClassName>
		<LogicSource>return new Region(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4009">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegionGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4011">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VariesByField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {AUTO_PER_PERSON, "Per person (auto)"}, 
    {AUTO_PER_ROOM, "Per room (auto)"}, 
    {AUTO_FIXED, "Fixed (auto)"}, 
    {MANUAL_PER_PERSON, "Per person (manual)"}, 
    {MANUAL_PER_ROOM, "Per room (manual)"}, 
    {MANUAL_FIXED, "Fixed (manual)"}, 
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4013">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandVariesGridScreen</MethodClassName>
		<LogicSource>return new LandVaries(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4014">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandVariesScreen</MethodClassName>
		<LogicSource>return new LandVaries(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4015">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingOrTourField</MethodClassName>
		<LogicSource><![CDATA[String[][] string = {
    {BOOKING, "Booking"},
    {TOUR, "Tour"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4016">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClassSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), TourClass.CLASS_NAME_KEY, TourClass.CLASS_NAME, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4017">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelFreeField</MethodClassName>
		<LogicSource><![CDATA[String[][] string = {
    {SINGLE_ROOM, "Single room"},
    {TWIN_SHARE, "Twin share"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4018">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandTypeField</MethodClassName>
		<LogicSource><![CDATA[String[][] string = {
    {DBConstants.BLANK, DBConstants.BLANK},
    {SIGHTSEEING, "Sightseeing"},
    {TRANSFER, "Transfer"},
    {ENTERTAINMENT, "Entertainment"},
    {ITINERARY, "Itinerary only"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4019">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaxCategorySelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), PaxCategory.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4020">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), TourEvent.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4021">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventField</MethodClassName>
		<LogicSource>return new TourEvent(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4024">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProductInventoryGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProductInventoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4026">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProductDetailGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProductDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4028">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProductPricingGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProductPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4030">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Inventory</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(Inventory.BLOCKED).addListener(new CalcBalanceHandler(this.getField(Inventory.AVAILABLE), this.getField(Inventory.BLOCKED), this.getField(Inventory.USED), CalcBalanceHandler.MINUS, false));
this.getField(Inventory.USED).addListener(new CalcBalanceHandler(this.getField(Inventory.AVAILABLE), this.getField(Inventory.BLOCKED), this.getField(Inventory.USED), CalcBalanceHandler.MINUS, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4031">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Inventory</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(Inventory.USED).setEnabled(false);
this.getField(Inventory.AVAILABLE).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4032">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>HotelInventoryScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHotel, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>HotelInventoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4033">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>LandInventoryScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHotel, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>LandInventoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4034">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProductInventoryScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHotel, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProductInventoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4035">
		<LastChanged>2012-02-01T03:25:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
SubFileFilter listener = null;
this.getMainRecord().addListener(listener = new SubFileFilter(this.getScreenRecord().getField(ProductScreenRecord.START_DATE), Inventory.INV_DATE, null, null, null, null));
listener.setEndKey(false);
this.getScreenRecord().getField(ProductScreenRecord.START_DATE).addListener(new FieldReSelectHandler(this));
if (Boolean.TRUE.toString().equalsIgnoreCase(this.getProperty(this.getScreenRecord().getField(ProductScreenRecord.READ_ONLY).getFieldName())))
{
    this.setAppending(false);
    this.setEditing(false);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4036">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
String strDesc = ProductInventoryGridScreen.RANGE_ADJUSTMENTS;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
strDesc = application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(strDesc);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strDesc, Booking.BUTTON_LOCATION + "Inventory", ProductInventoryGridScreen.RANGE_ADJUSTMENTS, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4037">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTypeField</MethodClassName>
		<LogicSource>return new ProductType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4038">
		<LastChanged>2012-01-31T10:43:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTypeField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), ProductType.DESCRIPTION, false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4039">
		<LastChanged>2012-03-27T17:33:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Inventory</MethodClassName>
		<LogicSource><![CDATA[ProductType recProductType = (ProductType)((ReferenceField)this.getField(Inventory.PRODUCT_TYPE_ID)).getReference();
ScreenParent screen = null;
if (recProductType != null)
{
    if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    {
        if (ProductType.HOTEL_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(HotelInventory.HOTEL_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.LAND_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(LandInventory.LAND_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.TRANSPORTATION_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(TransportationInventory.TRANSPORTATION_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.CAR_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(CarInventory.CAR_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.CRUISE_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(CruiseInventory.CRUISE_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.AIR_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(AirInventory.AIR_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.TOUR_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(TourHeaderInventory.TOUR_HEADER_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.ITEM_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(ItemInventory.ITEM_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
    }
    else if ((iDocMode & ScreenConstants.DETAIL_MODE) == ScreenConstants.DETAIL_MODE)
    {
        screen = Record.makeNewScreen(InventoryDetail.INVENTORY_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
    }
    else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    {
        if (ProductType.HOTEL_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(HotelInventory.HOTEL_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.LAND_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(LandInventory.LAND_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.TRANSPORTATION_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(TransportationInventory.TRANSPORTATION_INVENTORY_GRID_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.CAR_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(CarInventory.CAR_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.CRUISE_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(CruiseInventory.CRUISE_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.AIR_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(AirInventory.AIR_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.TOUR_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(TourHeaderInventory.TOUR_HEADER_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
        else if (ProductType.ITEM_CODE.equalsIgnoreCase(recProductType.getField(ProductType.CODE).toString()))
            screen = Record.makeNewScreen(ItemInventory.ITEM_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
    }
}
if (screen == null)
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4042">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricingScreen</MethodClassName>
		<LogicSource>return new HotelScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4043">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingGridScreen</MethodClassName>
		<LogicSource>return new HotelScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4044">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMealPricingScreen</MethodClassName>
		<LogicSource>return new HotelScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4045">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4046">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryScreen</MethodClassName>
		<LogicSource><![CDATA[return super;	// Override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4047">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryScreen</MethodClassName>
		<LogicSource><![CDATA[super;
// Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(HotelScreenRecord.PRODUCT_ID)).syncReference(this.getHeaderRecord());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4049">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryScreen</MethodClassName>
		<LogicSource>return new HotelScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4050">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryScreen</MethodClassName>
		<LogicSource>return new Hotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4051">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryScreen</MethodClassName>
		<LogicSource>return new HotelInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4052">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryScreen</MethodClassName>
		<LogicSource>return new HotelHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4053">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4054">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryScreen</MethodClassName>
		<LogicSource>return new Inventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4055">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryGridScreen</MethodClassName>
		<LogicSource>return new Inventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4056">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingScreen</MethodClassName>
		<LogicSource>return new LandScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4059">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryScreen</MethodClassName>
		<LogicSource>return new Land(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4060">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryScreen</MethodClassName>
		<LogicSource>return new LandScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4064">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryScreen</MethodClassName>
		<LogicSource>return new LandHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4068">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationScreen</MethodClassName>
		<LogicSource>return new Transportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4069">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationGridScreen</MethodClassName>
		<LogicSource>return new Transportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4070">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarScreen</MethodClassName>
		<LogicSource>return new Car(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4071">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarGridScreen</MethodClassName>
		<LogicSource>return new Car(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4072">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseScreen</MethodClassName>
		<LogicSource>return new Cruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4073">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseGridScreen</MethodClassName>
		<LogicSource>return new Cruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4075">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new LandScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4076">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryRangeAdjust</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4079">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryRangeAdjust</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4080">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new Inventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4081">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryRangeAdjust</MethodClassName>
		<LogicSource><![CDATA[if (ADJUST_RANGE.equalsIgnoreCase(strCommand))
    return this.doUpdateRange();
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4082">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>doUpdateRange</MethodName>
		<LogicDescription>Update the current Inventory range.</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductInventoryRangeAdjust</MethodClassName>
		<LogicSource><![CDATA[Record recInventory = this.getMainRecord();
try {
    this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE).moveFieldToThis(this.getScreenRecord().getField(ProductScreenRecord.START_DATE));
    while (true)
    {
        if (this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE).compareTo(this.getScreenRecord().getField(ProductScreenRecord.END_DATE)) > 0)
            break;  // End of range
        recInventory.addNew();  // This will set the product and product type fields.
        this.setInvKey(recInventory, this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE));
        boolean bSuccess = recInventory.seek("=");
        if (bSuccess)
        {   // Modify the current inventory
            if (recInventory.edit() != DBConstants.NORMAL_RETURN)
            {   // Locked, process error
            }
            if (!this.getScreenRecord().getField(ProductScreenRecord.BLOCKED).isNull())
                recInventory.getField(Inventory.BLOCKED).moveFieldToThis(this.getScreenRecord().getField(ProductScreenRecord.BLOCKED));
            if (!this.getScreenRecord().getField(ProductScreenRecord.OVERSELL).isNull())
                recInventory.getField(Inventory.OVERSELL).moveFieldToThis(this.getScreenRecord().getField(ProductScreenRecord.OVERSELL));
            if (this.getScreenRecord().getField(ProductScreenRecord.CLOSED).getState())
                recInventory.getField(Inventory.CLOSED).moveFieldToThis(this.getScreenRecord().getField(ProductScreenRecord.CLOSED));
            if (this.getScreenRecord().getField(ProductScreenRecord.DELETE).getState())
                recInventory.remove();
            else
                recInventory.set();
        }
        else
        {   // Add New inventory
            recInventory.addNew();  // This will set the product and product type fields.
            this.setInvKey(recInventory, this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE));

            recInventory.getField(Inventory.USED).setValue(0);
            recInventory.getField(Inventory.BLOCKED).moveFieldToThis(this.getScreenRecord().getField(ProductScreenRecord.BLOCKED));
            recInventory.getField(Inventory.OVERSELL).moveFieldToThis(this.getScreenRecord().getField(ProductScreenRecord.OVERSELL));
            recInventory.getField(Inventory.CLOSED).moveFieldToThis(this.getScreenRecord().getField(ProductScreenRecord.CLOSED));

            if (!this.getScreenRecord().getField(ProductScreenRecord.DELETE).getState())
                recInventory.add();
        }

        Calendar calTarget = ((DateField)this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE)).getCalendar();
        calTarget.add(Calendar.DATE, 1);    // Next day.
        ((DateField)this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE)).setDate(calTarget.getTime(), true, DBConstants.INIT_MOVE);
    }
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}
return true;	// Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4083">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryRangeAdjust</MethodClassName>
		<LogicSource><![CDATA[BaseApplication app = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, app.getResources(ResourceConstants.ASSETDR_RESOURCE, true).getString(ADJUST_RANGE), MenuConstants.POST, ADJUST_RANGE, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4084">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryRangeAdjust</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4085">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(ProductInventoryGridScreen.RANGE_ADJUSTMENTS))
    return (this.onForm(this.getHeaderRecord(), Product.RANGE_ADJUST_SCREEN, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4086">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
String strDesc = ProductInventoryGridScreen.RANGE_ADJUSTMENTS;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
strDesc = application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(strDesc);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strDesc, Booking.BUTTON_LOCATION + "Inventory", ProductInventoryGridScreen.RANGE_ADJUSTMENTS, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4087">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(ProductInventoryGridScreen.RANGE_ADJUSTMENTS))
    return (this.onForm(this.getHeaderRecord(), Product.RANGE_ADJUST_SCREEN, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4088">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProductInventoryRangeAdjust*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProductInventoryRangeAdjust</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4089">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>LandInventoryRangeAdjust*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>LandInventoryRangeAdjust</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4090">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new Land(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4092">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryRangeAdjust</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4093">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>HotelInventoryRangeAdjust*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>HotelInventoryRangeAdjust</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4094">
		<LastChanged>2012-01-23T09:38:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new MenuToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4095">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>setInvKey</MethodName>
		<LogicDescription><![CDATA[Setup the key for the inventory record.
Note: The product ID and type should already be set by SubFilter.
@param recInventory The inv record.
@param fldTargetDate The date to set.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recInventory, BaseField fldTargetDate</MethodInterface>
		<MethodClassName>ProductInventoryRangeAdjust</MethodClassName>
		<LogicSource><![CDATA[recInventory.getField(Inventory.INV_DATE).moveFieldToThis(fldTargetDate);
recInventory.getField(Inventory.RATE_ID).initField(true);
recInventory.getField(Inventory.CLASS_ID).initField(true);
recInventory.getField(Inventory.OTHER_ID).initField(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4096">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryRangeAdjust</MethodClassName>
		<LogicSource><![CDATA[return new ProductScreenRecord(this);	// Override this if you need more]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4097">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new HotelScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4098">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryRangeAdjust</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4099">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setInvKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryRangeAdjust</MethodClassName>
		<LogicSource><![CDATA[recInventory.getField(Inventory.INV_DATE).moveFieldToThis(fldTargetDate);
recInventory.getField(Inventory.RATE_ID).moveFieldToThis(this.getScreenRecord().getField(HotelScreenRecord.RATE_ID));
recInventory.getField(Inventory.CLASS_ID).moveFieldToThis(this.getScreenRecord().getField(HotelScreenRecord.CLASS_ID));
recInventory.getField(Inventory.OTHER_ID).moveFieldToThis(this.getScreenRecord().getField(HotelScreenRecord.PAX_CATEGORY_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4100">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TransportationPricingGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TransportationPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4101">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationPricingGridScreen</MethodClassName>
		<LogicSource>return new TransportationPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4102">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationPricingGridScreen</MethodClassName>
		<LogicSource>return new Transportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4104">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductPricingGridScreen</MethodClassName>
		<LogicSource><![CDATA[return new ProductScreenRecord(this);	// Override this if you need more]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4105">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductPricingGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
// Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_ID)).syncReference(this.getHeaderRecord());
// Sub file stuff
FileListener subFileBehavior = new SubFileFilter(this.getHeaderRecord());
this.getMainRecord().addListener(subFileBehavior);
this.getHeaderRecord().getField(Product.ID).addListener(new FieldReSelectHandler(this)); 

this.getMainRecord().addListener(new CompareFileFilter(ProductPricing.END_DATE, this.getScreenRecord().getField(ProductScreenRecord.START_DATE), FileFilter.GREATER_THAN_EQUAL, null, true));
this.getScreenRecord().getField(ProductScreenRecord.START_DATE).addListener(new FieldReSelectHandler(this));
if (Boolean.TRUE.toString().equalsIgnoreCase(this.getProperty(this.getScreenRecord().getField(ProductScreenRecord.READ_ONLY).getFieldName())))
{
    this.setAppending(false);
    this.setEditing(false);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4106">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4107">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.PRICING_DETAIL), BookingConstants.BUTTON_LOCATION + Product.PRICING_DETAIL, Product.PRICING_DETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.INVENTORY_DETAIL), BookingConstants.BUTTON_LOCATION + Product.INVENTORY_DETAIL, Product.INVENTORY_DETAIL, null); ]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4108">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, BookingConstants.BUTTON_LOCATION + Product.INVENTORY_DETAIL, Product.INVENTORY_DETAIL, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.INVENTORY_DETAIL));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, BookingConstants.BUTTON_LOCATION + Product.PRICING_DETAIL, Product.PRICING_DETAIL, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.PRICING_DETAIL));
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4109">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((MenuConstants.FORM.equalsIgnoreCase(strCommand)) || (MenuConstants.FORMLINK.equalsIgnoreCase(strCommand)))
{   // Add the header field to this screen, so on return the same sub records will display
    BasePanel parentScreen = this.getParentScreen();
    if (parentScreen != null)
    {
        parentScreen.popHistory(1, false);
        parentScreen.pushHistory(this.getScreenURL(), false);  // Push this screen onto history stack
    }
}
if (strCommand.equalsIgnoreCase(Product.PRICING_DETAIL))
    return (this.onForm(null, Product.PRICING_GRID_SCREEN, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(Product.INVENTORY_DETAIL))
    return (this.onForm(null, Product.INVENTORY_GRID_SCREEN, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4110">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Hotel.MEAL_DETAIL), BookingConstants.BUTTON_LOCATION + Hotel.MEAL_DETAIL, Hotel.MEAL_DETAIL, null);

this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.CITY_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.REMOTE_QUERY_ENABLED).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4111">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4112">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4113">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.PRICING_DETAIL), BookingConstants.BUTTON_LOCATION + Product.PRICING_DETAIL, Product.PRICING_DETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.INVENTORY_DETAIL), BookingConstants.BUTTON_LOCATION + Product.INVENTORY_DETAIL, Product.INVENTORY_DETAIL, null); 
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.BOOKING_DETAIL), BookingConstants.BUTTON_LOCATION + Product.BOOKING_DETAIL, Product.BOOKING_DETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, Product.MESSAGE_DETAIL_SCREEN, MenuConstants.FORMDETAIL, Product.MESSAGE_DETAIL_SCREEN, null); 
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.PRODUCT_SEARCH_DETAIL), BookingConstants.BUTTON_LOCATION + MenuConstants.LOOKUP, Product.PRODUCT_SEARCH_DETAIL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4114">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(Product.PRICING_DETAIL))
    return (this.onForm(null, Product.PRICING_GRID_SCREEN, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(Product.INVENTORY_DETAIL))
    return (this.onForm(null, Product.INVENTORY_GRID_SCREEN, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(Product.BOOKING_DETAIL))
    return (this.onForm(null, Product.BOOKING_DETAIL_GRID_SCREEN, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(Product.PRODUCT_SEARCH_DETAIL))
    return (this.onForm(null, Product.PRODUCT_SEARCH_DETAIL_GRID_SCREEN, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4115">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4116">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
Record recVendor = ((ReferenceField)this.getMainRecord().getField(Product.VENDOR_ID)).getReferenceRecord(this);
recVendor.getField(Vendor.CURRENCYS_ID).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4118">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.CITY_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.PAX).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.REMOTE_QUERY_ENABLED).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4119">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));
this.getMainRecord().addListener(new CompareFileFilter(Product.CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.CITY_ID), "=", null, true));
this.getMainRecord().addListener(new CompareFileFilter(Product.VENDOR_ID, this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID), "=", null, true));

this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4120">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4121">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
Record recVendor = ((ReferenceField)this.getMainRecord().getField(Product.VENDOR_ID)).getReferenceRecord(this);
recVendor.getField(Vendor.CURRENCYS_ID).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4122">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.CITY_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.REMOTE_QUERY_ENABLED).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4123">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));
this.getMainRecord().addListener(new CompareFileFilter(Product.CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.CITY_ID), "=", null, true));
this.getMainRecord().addListener(new CompareFileFilter(Product.VENDOR_ID, this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID), "=", null, true));

this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4124">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.CITY_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.REMOTE_QUERY_ENABLED).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4125">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));
this.getMainRecord().addListener(new CompareFileFilter(Product.CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.CITY_ID), "=", null, true));
this.getMainRecord().addListener(new CompareFileFilter(Product.VENDOR_ID, this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID), "=", null, true));

this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4126">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4127">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
Record recVendor = ((ReferenceField)this.getMainRecord().getField(Product.VENDOR_ID)).getReferenceRecord(this);
recVendor.getField(Vendor.CURRENCYS_ID).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4128">
		<LastChanged>2012-04-07T09:46:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Transportation</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & Product.PRICING_GRID_SCREEN) == Product.PRICING_GRID_SCREEN)
    screen = Record.makeNewScreen(TransportationPricing.TRANSPORTATION_PRICING_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_GRID_SCREEN) == Product.INVENTORY_GRID_SCREEN)
    screen = Record.makeNewScreen(TransportationInventoryModel.TRANSPORTATION_INVENTORY_GRID_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_SCREEN) == Product.INVENTORY_SCREEN)
    screen = Record.makeNewScreen(TransportationInventoryModel.TRANSPORTATION_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.RANGE_ADJUST_SCREEN) == Product.RANGE_ADJUST_SCREEN)
    screen = Record.makeNewScreen(TRANSPORTATION_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(TRANSPORTATION_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    screen = Record.makeNewScreen(TRANSPORTATION_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4129">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TransportationInventoryGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TransportationInventoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4130">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TransportationInventoryRangeAdjust*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TransportationInventoryRangeAdjust</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4131">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TransportationInventoryScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TransportationInventoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4132">
		<LastChanged>2012-04-07T12:27:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Car</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & Product.PRICING_GRID_SCREEN) == Product.PRICING_GRID_SCREEN)
    screen = Record.makeNewScreen(CarPricing.CAR_PRICING_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_GRID_SCREEN) == Product.INVENTORY_GRID_SCREEN)
    screen = Record.makeNewScreen(CarInventoryModel.CAR_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_SCREEN) == Product.INVENTORY_SCREEN)
    screen = Record.makeNewScreen(CarInventoryModel.CAR_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.RANGE_ADJUST_SCREEN) == Product.RANGE_ADJUST_SCREEN)
    screen = Record.makeNewScreen(CarInventoryModel.CAR_INVENTORY_RANGE_ADJUST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(CAR_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    screen = Record.makeNewScreen(CAR_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4133">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CarInventoryGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CarInventoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4134">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CarInventoryRangeAdjust*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CarInventoryRangeAdjust</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4135">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CarPricingGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CarPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4136">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CarInventoryScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CarInventoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4137">
		<LastChanged>2012-07-01T00:18:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Cruise</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & Product.PRICING_GRID_SCREEN) == Product.PRICING_GRID_SCREEN)
    screen = Record.makeNewScreen(CruisePricing.CRUISE_PRICING_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_GRID_SCREEN) == Product.INVENTORY_GRID_SCREEN)
    screen = Record.makeNewScreen(CruiseInventoryModel.CRUISE_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_SCREEN) == Product.INVENTORY_SCREEN)
    screen = Record.makeNewScreen(CruiseInventoryModel.CRUISE_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.RANGE_ADJUST_SCREEN) == Product.RANGE_ADJUST_SCREEN)
    screen = Record.makeNewScreen(CruiseInventoryModel.CRUISE_INVENTORY_RANGE_ADJUST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(CRUISE_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    screen = Record.makeNewScreen(CRUISE_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4138">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CruisePricingGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CruisePricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4139">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CruiseInventoryScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CruiseInventoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4140">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CruiseInventoryGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CruiseInventoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4141">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CruiseInventoryRangeAdjust*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CruiseInventoryRangeAdjust</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4142">
		<LastChanged>2012-04-07T12:26:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Air</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & Product.PRICING_GRID_SCREEN) == Product.PRICING_GRID_SCREEN)
    screen = Record.makeNewScreen(AirPricing.AIR_PRICING_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_GRID_SCREEN) == Product.INVENTORY_GRID_SCREEN)
    screen = Record.makeNewScreen(AirInventoryModel.AIR_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_SCREEN) == Product.INVENTORY_SCREEN)
    screen = Record.makeNewScreen(AirInventoryModel.AIR_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.RANGE_ADJUST_SCREEN) == Product.RANGE_ADJUST_SCREEN)
    screen = Record.makeNewScreen(AirInventoryModel.AIR_INVENTORY_RANGE_ADJUST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(AIR_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    screen = Record.makeNewScreen(AIR_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4143">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>AirPricingGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AirPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4144">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>AirInventoryScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AirInventoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4145">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>AirInventoryGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AirInventoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4146">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>AirInventoryRangeAdjust*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AirInventoryRangeAdjust</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4147">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4148">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
Record recVendor = ((ReferenceField)this.getMainRecord().getField(Product.VENDOR_ID)).getReferenceRecord(this);
recVendor.getField(Vendor.CURRENCYS_ID).setEnabled(false);

Record recAir = this.getMainRecord();
Record recAirline = ((ReferenceField)recAir.getField(Air.AIRLINE_ID)).getReferenceRecord();
recAir.getField(Air.AIRLINE_ID).addListener(new MoveOnChangeHandler(recAir.getField(Air.VENDOR_ID), recAirline.getField(Airline.VENDOR_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4149">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirScreen</MethodClassName>
		<LogicSource>return new AirScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4150">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorSelect</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), Vendor.CODE_KEY, Vendor.VENDOR_NAME, false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4151">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetFlightDescHandler</MethodClassName>
		<LogicSource><![CDATA[String strProductDesc = DBConstants.BLANK;
Record recAir = this.getOwner().getRecord();
Record recAirline = ((ReferenceField)recAir.getField(Air.AIRLINE_ID)).getReference();
if (recAirline != null)
    strProductDesc += recAirline.getField(Airline.AIRLINE_CODE).toString();
strProductDesc += recAir.getField(Air.FLIGHT_NO).toString() + ' ';
strProductDesc += recAir.getField(Air.CITY_CODE).toString() + '/' + recAir.getField(Air.TO_CITY_CODE).toString() + ' ';
strProductDesc += recAir.getField(Air.ETD).toString() + '-' + recAir.getField(Air.ARRIVE_TIME).toString();
if (!recAir.getField(Air.ADD_DAYS).isNull())
    strProductDesc += " " + recAir.getField(Air.ADD_DAYS).toString();
recAir.getField(Air.DESCRIPTION).setString(strProductDesc, bDisplayOption, iMoveMode);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4152">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetFlightDescHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4153">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CityGridScreen</MethodClassName>
		<LogicSource>return new CityScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4154">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CityGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolScreen = super;

this.getScreenRecord().getField(CityScreenRecord.DESCRIPTION).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(CityScreenRecord.COUNTRY_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(CityScreenRecord.STATE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

return toolScreen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4155">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CityGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new ExtractRangeFilter(City.DESCRIPTION, this.getScreenRecord().getField(CityScreenRecord.DESCRIPTION)));
this.getMainRecord().addListener(new CompareFileFilter(City.STATE_ID, this.getScreenRecord().getField(CityScreenRecord.STATE_ID), "=", null, true));
this.getMainRecord().addListener(new CompareFileFilter(City.COUNTRY_ID, this.getScreenRecord().getField(CityScreenRecord.COUNTRY_ID), "=", null, true));

this.getScreenRecord().getField(CityScreenRecord.DESCRIPTION).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(CityScreenRecord.STATE_ID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(CityScreenRecord.COUNTRY_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4156">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4157">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationPricingGridScreen</MethodClassName>
		<LogicSource>return new TransportationHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4158">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4159">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationPricingScreen</MethodClassName>
		<LogicSource>return new TransportationPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4160">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationPricingScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Transportation(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4161">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationPricingScreen</MethodClassName>
		<LogicSource>return this.getRecord(Transportation.TRANSPORTATION_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4162">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationPricingScreen</MethodClassName>
		<LogicSource>return new TransportationHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4163">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationPricingScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4164">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductPricingScreen</MethodClassName>
		<LogicSource><![CDATA[return new ProductScreenRecord(this);	// Override this if you have more fields]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4165">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductPricingScreen</MethodClassName>
		<LogicSource><![CDATA[super;
// Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_ID)).syncReference(this.getHeaderRecord());
// Sub file stuff
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4167">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarPricingGridScreen</MethodClassName>
		<LogicSource>return new CarPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4168">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarPricingGridScreen</MethodClassName>
		<LogicSource>return new Car(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4169">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4170">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruisePricingGridScreen</MethodClassName>
		<LogicSource>return new CruisePricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4171">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruisePricingGridScreen</MethodClassName>
		<LogicSource>return new Cruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4172">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruisePricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4173">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirPricingGridScreen</MethodClassName>
		<LogicSource>return new AirPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4174">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirPricingGridScreen</MethodClassName>
		<LogicSource>return new Air(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4175">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4176">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarPricingScreen</MethodClassName>
		<LogicSource>return new Car(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4177">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarPricingScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Car(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4178">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarPricingScreen</MethodClassName>
		<LogicSource>return this.getRecord(Car.CAR_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4179">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarPricingScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4180">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4181">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductPricingGridScreen</MethodClassName>
		<LogicSource>return new ProductHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4182">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductPricingScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4183">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductPricingScreen</MethodClassName>
		<LogicSource>return new ProductHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4184">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruisePricingScreen</MethodClassName>
		<LogicSource>return new CruisePricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4185">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruisePricingScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Cruise(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4186">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruisePricingScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4187">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruisePricingScreen</MethodClassName>
		<LogicSource>return this.getRecord(Cruise.CRUISE_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4188">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirPricingScreen</MethodClassName>
		<LogicSource>return new AirPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4189">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirPricingScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Air(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4190">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirPricingScreen</MethodClassName>
		<LogicSource>return this.getRecord(Air.AIR_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4191">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirPricingScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4192">
		<LastChanged>2012-01-31T21:11:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_ID).setEnabled(true);
this.getScreenRecord().getField(ProductScreenRecord.START_DATE).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4193">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Air</MethodClassName>
		<LogicSource><![CDATA[super;

this.getField(Air.AIRLINE_ID).addListener(new SetFlightDescHandler(null));
this.getField(Air.FLIGHT_NO).addListener(new SetFlightDescHandler(null));
this.getField(Air.CITY_CODE).addListener(new SetFlightDescHandler(null));
this.getField(Air.TO_CITY_CODE).addListener(new SetFlightDescHandler(null));
this.getField(Air.ETD).addListener(new SetFlightDescHandler(null));
this.getField(Air.ARRIVE_TIME).addListener(new SetFlightDescHandler(null));
this.getField(Air.ADD_DAYS).addListener(new SetFlightDescHandler(null));

this.getField(Air.AIRLINE_ID).addListener(new SetFlightCodeHandler(null));
this.getField(Air.FLIGHT_NO).addListener(new SetFlightCodeHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4194">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetFlightCodeHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4195">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetFlightCodeHandler</MethodClassName>
		<LogicSource><![CDATA[String strProductDesc = DBConstants.BLANK;
Record recAir = this.getOwner().getRecord();
Record recAirline = ((ReferenceField)recAir.getField(Air.AIRLINE_ID)).getReference();
if (recAirline != null)
    strProductDesc += recAirline.getField(Airline.AIRLINE_CODE).toString();
strProductDesc += recAir.getField(Air.FLIGHT_NO).toString() + ' ';
recAir.getField(Air.CODE).setString(strProductDesc, bDisplayOption, iMoveMode);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4196">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseClassField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.makeReferenceRecord();
if (record != null)
    return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, BaseClass.DESCRIPTION_KEY, BaseClass.DESCRIPTION, true, true);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4197">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseRateField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.makeReferenceRecord();
if (record != null)
    return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, BaseRate.DESCRIPTION_KEY, BaseRate.DESCRIPTION, true, true);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4198">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemGridScreen</MethodClassName>
		<LogicSource>return new Item(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4199">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4200">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemScreen</MethodClassName>
		<LogicSource>return new Item(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4201">
		<LastChanged>2012-04-07T12:33:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Item</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & Product.PRICING_GRID_SCREEN) == Product.PRICING_GRID_SCREEN)
    screen = Record.makeNewScreen(ItemPricing.ITEM_PRICING_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_GRID_SCREEN) == Product.INVENTORY_GRID_SCREEN)
    screen = Record.makeNewScreen(ItemInventoryModel.ITEM_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_SCREEN) == Product.INVENTORY_SCREEN)
    screen = Record.makeNewScreen(ItemInventoryModel.ITEM_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.RANGE_ADJUST_SCREEN) == Product.RANGE_ADJUST_SCREEN)
    screen = Record.makeNewScreen(ItemInventoryModel.ITEM_INVENTORY_RANGE_ADJUST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(ITEM_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    screen = Record.makeNewScreen(ITEM_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4202">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ItemPricingGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ItemPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4203">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemPricingGridScreen</MethodClassName>
		<LogicSource>return new ItemPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4204">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemPricingGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4205">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemPricingGridScreen</MethodClassName>
		<LogicSource>return new Item(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4206">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemPricingScreen</MethodClassName>
		<LogicSource>return new ItemPricing(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4207">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemPricingScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Item(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4208">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemPricingScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4209">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemPricingScreen</MethodClassName>
		<LogicSource>return this.getRecord(Item.ITEM_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4210">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ItemInventoryScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ItemInventoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4211">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemInventoryScreen</MethodClassName>
		<LogicSource>return new Item(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4214">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ItemInventoryRangeAdjust*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ItemInventoryRangeAdjust</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4215">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new Item(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4217">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ItemInventoryGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ItemInventoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4218">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemInventoryGridScreen</MethodClassName>
		<LogicSource>return new Item(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4221">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4222">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
Record recVendor = ((ReferenceField)this.getMainRecord().getField(Product.VENDOR_ID)).getReferenceRecord(this);
recVendor.getField(Vendor.CURRENCYS_ID).setEnabled(false);
Record recCurrency = ((ReferenceField)recVendor.getField(Vendor.CURRENCYS_ID)).getReferenceRecord(this);
recCurrency.getField(Currencys.COSTING_RATE).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4223">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4224">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4225">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryScreen</MethodClassName>
		<LogicSource>return new ProductScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4226">
		<LastChanged>2011-08-05T15:59:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryGridScreen</MethodClassName>
		<LogicSource>return new ProductScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4227">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationInventoryGridScreen</MethodClassName>
		<LogicSource>return new Transportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4228">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationInventoryScreen</MethodClassName>
		<LogicSource>return new Transportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4230">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarInventoryGridScreen</MethodClassName>
		<LogicSource>return new Car(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4231">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarInventoryScreen</MethodClassName>
		<LogicSource>return new Car(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4233">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new Car(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4235">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new Transportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4236">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new Cruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4237">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseInventoryGridScreen</MethodClassName>
		<LogicSource>return new Cruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4238">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseInventoryScreen</MethodClassName>
		<LogicSource>return new Cruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4240">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirInventoryScreen</MethodClassName>
		<LogicSource>return new Air(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4242">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirInventoryGridScreen</MethodClassName>
		<LogicSource>return new Air(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4243">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new Air(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4244">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryGridScreen</MethodClassName>
		<LogicSource>return new ProductHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4245">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryScreen</MethodClassName>
		<LogicSource>return new ProductHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4246">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new ProductHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4247">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandClassField</MethodClassName>
		<LogicSource>return new LandClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4248">
		<LastChanged>2012-01-31T10:43:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>95</Sequence>
		<MethodName>addScreenListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportProduct</MethodClassName>
		<LogicSource><![CDATA[super;

Record recCity = ((ReferenceField)this.getField(TransportProduct.CITY_ID)).getReferenceRecord();
recCity.getField(City.CITY_CODE).addListener(new MainReadOnlyHandler(City.CITY_CODE_KEY));
this.getField(TransportProduct.CITY_ID).addListener(new MoveOnChangeHandler(this.getField(TransportProduct.CITY_CODE), recCity.getField(City.CITY_CODE)));
this.getField(TransportProduct.CITY_CODE).addListener(new MoveOnChangeHandler(recCity.getField(City.CITY_CODE), this.getField(TransportProduct.CITY_CODE)));

recCity = ((ReferenceField)this.getField(TransportProduct.TO_CITY_ID)).getReferenceRecord();
recCity.getField(City.CITY_CODE).addListener(new MainReadOnlyHandler(City.CITY_CODE_KEY));
this.getField(TransportProduct.TO_CITY_ID).addListener(new MoveOnChangeHandler(this.getField(TransportProduct.TO_CITY_CODE), recCity.getField(City.CITY_CODE)));
this.getField(TransportProduct.TO_CITY_CODE).addListener(new MoveOnChangeHandler(recCity.getField(City.CITY_CODE), this.getField(TransportProduct.TO_CITY_CODE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4249">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourProductGridScreen</MethodClassName>
		<LogicSource>return new TourHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4250">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

TourHeader recTourHeader = (TourHeader)this.getRecord(TourHeader.TOUR_HEADER_FILE);
Record screenRecord = this.getScreenRecord();

if (((NumberField)screenRecord.getField(TourHeaderScreenRecord.KEY_ORDER)).getValue() > 3)
    ((NumberField)screenRecord.getField(TourHeaderScreenRecord.KEY_ORDER)).setValue(0);
FieldListener behCheckRange = new CheckRangeHandler(0, 2);
screenRecord.getField(TourHeaderScreenRecord.KEY_ORDER).addListener(behCheckRange);
recTourHeader.addListener(new FileRemoveBOnCloseHandler(behCheckRange));

KeyArea tempKeyStart = recTourHeader.makeIndex(DBConstants.NOT_UNIQUE, null);  // Add temp key
tempKeyStart.addKeyField(TourHeader.START_DATE, DBConstants.ASCENDING);
KeyArea tempKeyEnd = recTourHeader.makeIndex(DBConstants.NOT_UNIQUE, null);
tempKeyEnd.addKeyField(TourHeader.END_DATE, DBConstants.ASCENDING);
SortOrderHandler behQueryKeyHandler = new SortOrderHandler(this);
behQueryKeyHandler.setGridTable(TourHeader.DESC_SORT, recTourHeader, 0);
behQueryKeyHandler.setGridTable(tempKeyStart.getKeyName(), recTourHeader, 1);
behQueryKeyHandler.setGridTable(tempKeyEnd.getKeyName(), recTourHeader, 2);
//behQueryKeyHandler.setGridTable(TourHeader.ID, recTourHeader, 3);
screenRecord.getField(TourHeaderScreenRecord.KEY_ORDER).addListener(behQueryKeyHandler);

recTourHeader.addListener(new CompareFileFilter(TourHeader.BROCHURE_ID, screenRecord.getField(TourHeaderScreenRecord.BROCHURE_ID), "=", null, true));
screenRecord.getField(TourHeaderScreenRecord.BROCHURE_ID).addListener(new FieldReSelectHandler(this));
BitFileFilter filter = new BitFileFilter(TourHeader.TOUR_TYPE, screenRecord.getField(TourHeaderScreenRecord.TOUR_TYPE));
filter.setNoFilterIfNone(true);
recTourHeader.addListener(filter);
screenRecord.getField(TourHeaderScreenRecord.TOUR_TYPE).addListener(new FieldReSelectHandler(this));
recTourHeader.addListener(new CompareFileFilter(TourHeader.AIRLINE_ID, screenRecord.getField(TourHeaderScreenRecord.AIRLINE_ID), "=", null, true));
screenRecord.getField(TourHeaderScreenRecord.AIRLINE_ID).addListener(new FieldReSelectHandler(this));
recTourHeader.addListener(new CompareFileFilter(TourHeader.END_DATE, screenRecord.getField(TourHeaderScreenRecord.START_DEPARTURE_DATE), ">=", null, true));
screenRecord.getField(TourHeaderScreenRecord.START_DEPARTURE_DATE).addListener(new FieldReSelectHandler(this));
recTourHeader.addListener(new CompareFileFilter(TourHeader.START_DATE, screenRecord.getField(TourHeaderScreenRecord.END_DEPARTURE_DATE), "<=", null, true));
screenRecord.getField(TourHeaderScreenRecord.END_DEPARTURE_DATE).addListener(new FieldReSelectHandler(this));
recTourHeader.addListener(new CompareFileFilter(TourHeader.REGION_ID, screenRecord.getField(TourHeaderScreenRecord.REGION_ID), "=", null, true));
screenRecord.getField(TourHeaderScreenRecord.REGION_ID).addListener(new FieldReSelectHandler(this));
recTourHeader.addListener(new CompareFileFilter(TourHeader.VENDOR_ID, screenRecord.getField(TourHeaderScreenRecord.VENDOR_ID), "=", null, true));
screenRecord.getField(TourHeaderScreenRecord.VENDOR_ID).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));
screenRecord.getField(TourHeaderScreenRecord.DESCRIPTION).addListener(new FieldReSelectHandler(this));
FieldListener behInitOnChange = new InitOnChangeHandler(screenRecord.getField(TourHeaderScreenRecord.DESCRIPTION));
screenRecord.getField(TourHeaderScreenRecord.KEY_ORDER).addListener(behInitOnChange);
recTourHeader.addListener(new FileRemoveBOnCloseHandler(behInitOnChange));

this.getScreenRecord().getField(TourHeaderScreenRecord.DISPLAY_TYPE).setValue(DisplayTypeField.TOUR_HEADER_DISPLAY, DBConstants.DISPLAY, DBConstants.INIT_MOVE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4251">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call super
BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(BookingScreenHandler.OPTIONS), Booking.BUTTON_LOCATION + BookingScreenHandler.OPTIONS, Product.PRICING_DETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.INVENTORY_DETAIL), Booking.BUTTON_LOCATION + BookingScreenHandler.INVENTORY, Product.INVENTORY_DETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(BookingScreenHandler.TOUR_SERIES), Booking.BUTTON_LOCATION + BookingScreenHandler.TOUR, TourHeader.TOUR_DETAIL, null);

this.getScreenRecord().getField(TourHeaderScreenRecord.DISPLAY_TYPE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(TourHeaderScreenRecord.DESCRIPTION).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(TourHeaderScreenRecord.START_DEPARTURE_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

this.getScreenRecord().getField(TourHeaderScreenRecord.BROCHURE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(TourHeaderScreenRecord.AIRLINE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

this.getScreenRecord().getField(TourHeaderScreenRecord.TOUR_TYPE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(TourHeaderScreenRecord.END_DEPARTURE_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

this.getScreenRecord().getField(ProductScreenRecord.VENDOR_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(TourHeaderScreenRecord.REGION_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.REMOTE_QUERY_ENABLED).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4252">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourProductGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4253">
		<LastChanged>2011-08-05T15:00:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourProductGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4254">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4255">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderScreen</MethodClassName>
		<LogicSource>return new TourHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4256">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderInventoryGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderInventoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4257">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderInventoryGridScreen</MethodClassName>
		<LogicSource>return new TourHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4258">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderInventoryScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderInventoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4259">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderInventoryScreen</MethodClassName>
		<LogicSource>return new TourHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4261">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new TourHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4262">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderInventoryRangeAdjust*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderInventoryRangeAdjust</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4263">
		<LastChanged>2012-04-07T11:32:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & Product.PRICING_GRID_SCREEN) == Product.PRICING_GRID_SCREEN)
    screen = Record.makeNewScreen(TourHeaderOption.TOUR_HEADER_OPTION_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & TourHeader.TOUR_DETAIL_SCREEN) == TourHeader.TOUR_DETAIL_SCREEN)
    screen = Record.makeNewScreen(TourHeaderTour.TOUR_HEADER_TOUR_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_GRID_SCREEN) == Product.INVENTORY_GRID_SCREEN)
    screen = Record.makeNewScreen(TourHeaderInventoryModel.TOUR_HEADER_INVENTORY_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.INVENTORY_SCREEN) == Product.INVENTORY_SCREEN)
    screen = Record.makeNewScreen(TourHeaderInventoryModel.TOUR_HEADER_INVENTORY_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.RANGE_ADJUST_SCREEN) == Product.RANGE_ADJUST_SCREEN)
    screen = Record.makeNewScreen(TourHeaderInventoryModel.TOUR_HEADER_INVENTORY_RANGE_ADJUST_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(TOUR_HEADER_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    screen = Record.makeNewScreen(TOUR_PRODUCT_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4264">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderOptionGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderOptionGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4265">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderOption(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4266">
		<LastChanged>2012-03-28T08:29:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
if (m_recHeader != null)
    this.addRecord(m_recHeader, false);
else
{
    String strType = this.getProperty(TourHeaderOption.TOUR_OR_OPTION);
    if (TourHeaderOption.OPTION.equals(strType))
        m_recHeader = new TourHeaderOption(this);
    else
        m_recHeader = new TourHeader(this);
}
((ReferenceField)this.getMainRecord().getField(TourHeaderOption.TOUR_OR_OPTION_ID)).setReferenceRecord(m_recHeader);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4268">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4269">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionScreen</MethodClassName>
		<LogicSource>return new TourHeaderOption(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4270">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

((TourHeaderOption)this.getMainRecord()).addSubFileIntegrityHandlers();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4271">
		<LastChanged>2012-06-30T21:27:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOption</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & TourHeaderOption.PRICING_GRID_SCREEN) == TourHeaderOption.PRICING_GRID_SCREEN)
    screen = Record.makeNewScreen(TourHeaderLineModel.TOUR_HEADER_LINE_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & TourHeaderOption.HOTEL_GRID_SCREEN) == TourHeaderOption.HOTEL_GRID_SCREEN)
    screen = Record.makeNewScreen(TourHeaderHotelModel.TOUR_HEADER_HOTEL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & TourHeaderOption.LAND_GRID_SCREEN) == TourHeaderOption.LAND_GRID_SCREEN)
    screen = Record.makeNewScreen(TourHeaderLandModel.TOUR_HEADER_LAND_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & TourHeaderOption.TRANSPORTATION_GRID_SCREEN) == TourHeaderOption.TRANSPORTATION_GRID_SCREEN)
    screen = Record.makeNewScreen(TourHeaderTransportationModel.TOUR_HEADER_TRANSPORTATION_GRID_SCREEN_C, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & TourHeaderOption.CAR_GRID_SCREEN) == TourHeaderOption.CAR_GRID_SCREEN)
    screen = Record.makeNewScreen(TourHeaderCarModel.TOUR_HEADER_CAR_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & TourHeaderOption.CRUISE_GRID_SCREEN) == TourHeaderOption.CRUISE_GRID_SCREEN)
    screen = Record.makeNewScreen(TourHeaderCruiseModel.TOUR_HEADER_CRUISE_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & TourHeaderOption.TOUR_GRID_SCREEN) == TourHeaderOption.TOUR_GRID_SCREEN)
    screen = Record.makeNewScreen(TourHeaderTourModel.TOUR_HEADER_TOUR_HEADER_GRID_SCREEN_CLAS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & TourHeaderOption.AIR_GRID_SCREEN) == TourHeaderOption.AIR_GRID_SCREEN)
    screen = Record.makeNewScreen(TourHeaderAirModel.TOUR_HEADER_AIR_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & TourHeaderOption.AIR_HEADER_GRID_SCREEN) == TourHeaderOption.AIR_HEADER_GRID_SCREEN)
    screen = Record.makeNewScreen(TourHeaderAirHeaderModel.TOUR_HEADER_AIR_HEADER_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & TourHeaderOption.ITEM_GRID_SCREEN) == TourHeaderOption.ITEM_GRID_SCREEN)
    screen = Record.makeNewScreen(TourHeaderItemModel.TOUR_HEADER_ITEM_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(TOUR_HEADER_OPTION_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
    screen = Record.makeNewScreen(TOUR_HEADER_OPTION_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4272">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4273">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getHeaderRecord() instanceof TourHeader)
    return new ProductHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
else
    return new TourHeaderOptionHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4274">
		<LastChanged>2012-03-28T08:26:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionScreen</MethodClassName>
		<LogicSource><![CDATA[String strOption = this.getMainRecord().getField(TourHeaderOption.TOUR_OR_OPTION).toString();
StringField fldTourOrOption = new StringField(null, "TourOrOption", 1, null, null);
fldTourOrOption.setString(strOption);
if (TourHeaderOption.TOUR.equals(strOption))
    m_recHeader = new TourHeader(this);
else
{
    String strType = this.getProperty(TourHeaderOption.TOUR_OR_OPTION);
    if (strType == null)
        strType = strOption;
    if (TourHeaderOption.OPTION.equals(strType))
        m_recHeader = new TourHeaderOption(this);
    else
        m_recHeader = new TourHeader(this);
}
Object objHandle = this.getMainRecord().getField(TourHeaderOption.TOUR_OR_OPTION_ID).getData();
try {
    m_recHeader.setHandle(objHandle, DBConstants.BOOKMARK_HANDLE);
} catch (DBException ex) {
    ex.printStackTrace();
}
this.getMainRecord().addListener(new FreeOnFreeHandler(fldTourOrOption));
this.getMainRecord().addListener(new SubFileFilter(fldTourOrOption, TourHeaderOption.TOUR_OR_OPTION, (BaseField)this.getHeaderRecord().getCounterField(), TourHeaderOption.TOUR_OR_OPTION_ID, null, null));
super;	// Added]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4275">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4276">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4277">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionScreen</MethodClassName>
		<LogicSource>return new TourHeaderScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4278">
		<LastChanged>2012-03-28T08:28:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(TourHeaderOption.TOUR_OR_OPTION_KEY);
StringField fldTourOrOption = new StringField(null, TourHeaderOption.TOUR_OR_OPTION, 1, null, null);
if (this.getHeaderRecord() instanceof TourHeader)
    fldTourOrOption.setString(TourHeaderOption.TOUR);
else
{
    fldTourOrOption.setString(TourHeaderOption.OPTION);
    this.getMainRecord().addListener(new SubCountHandler(this.getHeaderRecord().getField(TourHeaderOption.DETAIL_OPTION_COUNT), false, true));
}
((ReferenceField)this.getMainRecord().getField(TourHeaderOption.TOUR_OR_OPTION_ID)).setReferenceRecord(m_recHeader);

this.getMainRecord().addListener(new FreeOnFreeHandler(fldTourOrOption));
this.getMainRecord().addListener(new SubFileFilter(fldTourOrOption, TourHeaderOption.TOUR_OR_OPTION, (BaseField)this.getHeaderRecord().getCounterField(), TourHeaderOption.TOUR_OR_OPTION_ID, null, null));

((TourHeaderOption)this.getMainRecord()).addSubFileIntegrityHandlers();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4279">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getHeaderRecord() instanceof TourHeader)
    return new ProductHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
else
    return new TourHeaderOptionHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4280">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOption</MethodClassName>
		<LogicSource><![CDATA[int iDocMode = ScreenConstants.MAINT_MODE;
if (Product.PRICING_DETAIL.equalsIgnoreCase(strCommand))
    iDocMode = TourHeaderOption.PRICING_GRID_SCREEN;
else if (ProductType.HOTEL.equalsIgnoreCase(strCommand))
    iDocMode = TourHeaderOption.HOTEL_GRID_SCREEN;
else if (ProductType.LAND.equalsIgnoreCase(strCommand))
    iDocMode = TourHeaderOption.LAND_GRID_SCREEN;
else if (ProductType.TRANSPORTATION.equalsIgnoreCase(strCommand))
    iDocMode = TourHeaderOption.TRANSPORTATION_GRID_SCREEN;
else if (ProductType.CAR.equalsIgnoreCase(strCommand))
    iDocMode = TourHeaderOption.CAR_GRID_SCREEN;
else if (ProductType.CRUISE.equalsIgnoreCase(strCommand))
    iDocMode = TourHeaderOption.CRUISE_GRID_SCREEN;
else if (ProductType.AIR.equalsIgnoreCase(strCommand))
    iDocMode = TourHeaderOption.AIR_GRID_SCREEN;
else if ((ProductType.AIR + "Header").equalsIgnoreCase(strCommand))
    iDocMode = TourHeaderOption.AIR_HEADER_GRID_SCREEN;
else if (ProductType.ITEM.equalsIgnoreCase(strCommand))
    iDocMode = TourHeaderOption.ITEM_GRID_SCREEN;
else if (ProductType.TOUR.equalsIgnoreCase(strCommand))
    iDocMode = TourHeaderOption.TOUR_GRID_SCREEN;
else
    iDocMode = super;
return iDocMode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4281">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderLineGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recTourHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderLineGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4282">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourDetailGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4283">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderHotelGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recTourHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderHotelGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4284">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderLandGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recTourHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderLandGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4285">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderTransportationGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recTourHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderTransportationGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4286">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderCarGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recTourHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderCarGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4287">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderCruiseGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recTourHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderCruiseGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4288">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderAirGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recTourHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderAirGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4289">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderItemGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recTourHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderItemGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4290">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BaseApplication application = (BaseApplication)this.getTask().getApplication();

new SCannedBox(toolScreen.getNextLocation(ScreenConstants.FLUSH_LEFT, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.PRICING_DETAIL), Booking.BUTTON_LOCATION + "Price", Product.PRICING_DETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.TOUR), Booking.BUTTON_LOCATION + ProductType.TOUR, ProductType.TOUR, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.AIR + "Header"), Booking.BUTTON_LOCATION + ProductType.AIR + "Header", ProductType.AIR + "Header", null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.AIR), Booking.BUTTON_LOCATION + ProductType.AIR, ProductType.AIR, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.HOTEL), Booking.BUTTON_LOCATION + ProductType.HOTEL, ProductType.HOTEL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.LAND), Booking.BUTTON_LOCATION + ProductType.LAND, ProductType.LAND, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.CAR), Booking.BUTTON_LOCATION + ProductType.CAR, ProductType.CAR, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.TRANSPORTATION), Booking.BUTTON_LOCATION + ProductType.TRANSPORTATION, ProductType.TRANSPORTATION, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.CRUISE), Booking.BUTTON_LOCATION + ProductType.CRUISE, ProductType.CRUISE, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.ITEM), Booking.BUTTON_LOCATION + ProductType.ITEM, ProductType.ITEM, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4291">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + ProductType.ITEM, ProductType.ITEM, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.ITEM));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + ProductType.CRUISE, ProductType.CRUISE, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.CRUISE));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + ProductType.TRANSPORTATION, ProductType.TRANSPORTATION, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.TRANSPORTATION));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + ProductType.CAR, ProductType.CAR, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.CAR));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + ProductType.LAND, ProductType.LAND, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.LAND));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + ProductType.HOTEL, ProductType.HOTEL, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.HOTEL));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + ProductType.AIR, ProductType.AIR, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.AIR));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + ProductType.AIR + "Header", ProductType.AIR + "Header", application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.AIR + "Header"));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + ProductType.TOUR, ProductType.TOUR, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.TOUR)); 
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + "Price", Product.PRICING_DETAIL, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.PRICING_DETAIL));
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4292">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.FLUSH_LEFT, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.PRICING_DETAIL), Booking.BUTTON_LOCATION + "Price", Product.PRICING_DETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.TOUR), Booking.BUTTON_LOCATION + ProductType.TOUR, ProductType.TOUR, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.AIR + "Header"), Booking.BUTTON_LOCATION + ProductType.AIR + "Header", ProductType.AIR + "Header", null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.AIR), Booking.BUTTON_LOCATION + ProductType.AIR, ProductType.AIR, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.HOTEL), Booking.BUTTON_LOCATION + ProductType.HOTEL, ProductType.HOTEL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.LAND), Booking.BUTTON_LOCATION + ProductType.LAND, ProductType.LAND, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.CAR), Booking.BUTTON_LOCATION + ProductType.CAR, ProductType.CAR, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.TRANSPORTATION), Booking.BUTTON_LOCATION + ProductType.TRANSPORTATION, ProductType.TRANSPORTATION, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.CRUISE), Booking.BUTTON_LOCATION + ProductType.CRUISE, ProductType.CRUISE, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(ProductType.ITEM), Booking.BUTTON_LOCATION + ProductType.ITEM, ProductType.ITEM, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4293">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call super
BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(BookingScreenHandler.OPTIONS), Booking.BUTTON_LOCATION + BookingScreenHandler.OPTIONS, Product.PRICING_DETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.INVENTORY_DETAIL), Booking.BUTTON_LOCATION + BookingScreenHandler.INVENTORY, Product.INVENTORY_DETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.BOOKING_DETAIL), Booking.BUTTON_LOCATION + Product.BOOKING_DETAIL, Product.BOOKING_DETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(BookingScreenHandler.TOUR_SERIES), Booking.BUTTON_LOCATION + BookingScreenHandler.TOUR, TourHeader.TOUR_DETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, Product.MESSAGE_DETAIL_SCREEN, MenuConstants.FORMDETAIL, Product.MESSAGE_DETAIL_SCREEN, null);
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4294">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + "Tour", TourHeader.TOUR_DETAIL, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString("(Series) Tours"));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + "Inventory", Product.INVENTORY_DETAIL, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(Product.INVENTORY_DETAIL));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + "Options", Product.PRICING_DETAIL, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString("Options"));
// Don't call super
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORM, MenuConstants.FORMLINK, null);
if ((m_iDisplayFieldDesc & ScreenConstants.SELECT_MODE) == ScreenConstants.SELECT_MODE)
    new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.SELECT, MenuConstants.SELECT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4295">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[int iDocMode = ScreenConstants.MAINT_MODE;
if (TourHeader.TOUR_DETAIL.equalsIgnoreCase(strCommand))
    iDocMode = TourHeader.TOUR_DETAIL_SCREEN;
else
    iDocMode = super;
return iDocMode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4296">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourEventScheduleGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourEventScheduleGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4297">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderTourGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderTourGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4298">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderHotelGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderHotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4300">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderHotelGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4301">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderHotelScreen</MethodClassName>
		<LogicSource>return new TourHeaderHotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4304">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>TourDetailGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderOption(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4311">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ModifyCodeField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {ModifyCodeField.ADD, "Add"},
    {ModifyCodeField.DELETE, MenuConstants.DELETE},
    {ModifyCodeField.REPLACE, "Replace"},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4312">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PayAtField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {PayAtField.FINAL_PAY_DATE, "Final payment date"},
    {PayAtField.DEPOSIT_DATE, "Deposit date"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4313">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionField</MethodClassName>
		<LogicSource>return new TourHeaderOption(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4314">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderOptionHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4320">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailScreen</MethodClassName>
		<LogicSource>return new TourHeaderOption(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4323">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailScreen</MethodClassName>
		<LogicSource>return new TourHeaderOptionHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4324">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderHotelScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4325">
		<LastChanged>2012-02-01T03:19:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), null, TourHeaderOption.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4326">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getDateString</MethodName>
		<LogicDescription><![CDATA[Convert this data to a string (using the supplied format).
@param dateTarget The date to convert to a string.
@param iDateFormat The format for the date.
@return The date as a string.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Date dateTarget, int iDateFormat</MethodInterface>
		<MethodClassName>DaysOfWeekField</MethodClassName>
		<LogicSource><![CDATA[m_sb.setLength(0);
FieldPosition fieldPosition = new FieldPosition(iDateFormat);
String string = null;
string = m_df.format(dateTarget, m_sb, fieldPosition).toString();
int iBegin = fieldPosition.getBeginIndex();
int iEnd = fieldPosition.getEndIndex();
string = string.substring(iBegin, iEnd);
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4327">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailScreen</MethodClassName>
		<LogicSource>return this.getRecord(TourHeaderOption.TOUR_HEADER_OPTION_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4328">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderLandScreen</MethodClassName>
		<LogicSource>return new TourHeaderLand(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4330">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[// Override this for other fields.
this.getMainRecord().getField(TourHeaderDetail.DAY).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(TourHeaderDetail.PRODUCT_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4331">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderLandGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderLand(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4332">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderLandScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4333">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTransportationGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderTransportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4334">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTransportationScreen</MethodClassName>
		<LogicSource>return new TourHeaderTransportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4335">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTransportationScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4336">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderCarScreen</MethodClassName>
		<LogicSource>return new TourHeaderCar(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4337">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderCarScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4338">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderCarGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderCar(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4339">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderCruiseScreen</MethodClassName>
		<LogicSource>return new TourHeaderCruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4340">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderCruiseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4341">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderCruiseGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderCruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4342">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderAirGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderAir(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4343">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderAirScreen</MethodClassName>
		<LogicSource>return new TourHeaderAir(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4344">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderAirScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4345">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderItemScreen</MethodClassName>
		<LogicSource>return new TourHeaderItem(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4346">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderItemScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4347">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderItemGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderItem(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4348">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirField</MethodClassName>
		<LogicSource>return new Air(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4349">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemField</MethodClassName>
		<LogicSource>return new Item(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4350">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderItemGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4351">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderAirGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4352">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addScreenListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTransport</MethodClassName>
		<LogicSource><![CDATA[super;

Record recCity = ((ReferenceField)this.getField(TourHeaderTransport.CITY_ID)).getReferenceRecord();
recCity.getField(City.CITY_CODE).addListener(new MainReadOnlyHandler(City.CITY_CODE_KEY));
this.getField(TourHeaderTransport.CITY_ID).addListener(new MoveOnChangeHandler(this.getField(TourHeaderTransport.CITY_CODE), recCity.getField(City.CITY_CODE)));
this.getField(TourHeaderTransport.CITY_CODE).addListener(new MoveOnChangeHandler(recCity.getField(City.CITY_CODE), this.getField(TourHeaderTransport.CITY_CODE)));

recCity = ((ReferenceField)this.getField(TourHeaderTransport.TO_CITY_ID)).getReferenceRecord();
recCity.getField(City.CITY_CODE).addListener(new MainReadOnlyHandler(City.CITY_CODE_KEY));
this.getField(TourHeaderTransport.TO_CITY_ID).addListener(new MoveOnChangeHandler(this.getField(TourHeaderTransport.TO_CITY_CODE), recCity.getField(City.CITY_CODE)));
this.getField(TourHeaderTransport.TO_CITY_CODE).addListener(new MoveOnChangeHandler(recCity.getField(City.CITY_CODE), this.getField(TourHeaderTransport.TO_CITY_CODE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4353">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderLineGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderLine(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4354">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderLineGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4355">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderLineScreen</MethodClassName>
		<LogicSource>return new TourHeaderLine(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4356">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderLineScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4357">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClassGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(TourEventSchedule.EVENTS), Booking.BUTTON_LOCATION + "Document", MenuConstants.FORMDETAIL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4358">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClassGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, Booking.BUTTON_LOCATION + "Document", MenuConstants.FORMDETAIL, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(TourEventSchedule.EVENTS));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4359">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClassGridScreen</MethodClassName>
		<LogicSource>return new TourClass(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4360">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClassScreen</MethodClassName>
		<LogicSource>return new TourClass(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4361">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleScreen</MethodClassName>
		<LogicSource>return new TourEventSchedule(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4362">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleGridScreen</MethodClassName>
		<LogicSource>return new TourEventSchedule(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4363">
		<LastChanged>2012-03-27T13:20:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClass</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DETAIL_MODE) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(TourEventSchedule.TOUR_EVENT_SCHEDULE_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(TOUR_CLASS_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
    screen = Record.makeNewScreen(TOUR_CLASS_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4364">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4365">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleGridScreen</MethodClassName>
		<LogicSource>return new TourClassHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4366">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClassHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4367">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleScreen</MethodClassName>
		<LogicSource>return this.getRecord(TourClass.TOUR_CLASS_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4368">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleScreen</MethodClassName>
		<LogicSource>return new TourClass(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4369">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleGridScreen</MethodClassName>
		<LogicSource>return new TourClass(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4371">
		<LastChanged>2012-01-23T08:57:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleScreen</MethodClassName>
		<LogicSource>return new TourClassHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4374">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTourGridScreen</MethodClassName>
		<LogicSource>return new Tour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4375">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTourGridScreen</MethodClassName>
		<LogicSource>return new TourHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4376">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTourGridScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call super
BaseApplication application = (BaseApplication)this.getTask().getApplication();

this.getScreenRecord().getField(TourHeaderScreenRecord.DISPLAY_TYPE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(TourHeaderScreenRecord.DESCRIPTION).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(TourHeaderScreenRecord.START_DEPARTURE_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

this.getScreenRecord().getField(TourHeaderScreenRecord.TOUR_TYPE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(TourHeaderScreenRecord.END_DEPARTURE_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

//this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
//this.getScreenRecord().getField(ProductScreenRecord.REMOTE_QUERY_ENABLED).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4377">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTourGridScreen</MethodClassName>
		<LogicSource><![CDATA[Converter converter = this.getMainRecord().getField(Tour.TOUR_FILE, Tour.DESCRIPTION);
converter = new FieldLengthConverter(converter, 30);
this.addColumn(converter);
this.getRecord(Tour.TOUR_FILE).getField(Tour.DEPARTURE_DATE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
//converter = this.getRecord(TourHeader.TOUR_HEADER_FILE).getField(TourHeader.TOUR_HEADER_FILE, TourHeader.DESCRIPTION);
//converter = new FieldLengthConverter(converter, 30);
//converter = new FieldDescConverter(converter, "Header Tour Desc");
//this.addColumn(converter);
//this.getRecord(Inventory.INVENTORY_FILE).getField(Inventory.BLOCKED).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
//this.getRecord(Inventory.INVENTORY_FILE).getField(Inventory.AVAILABLE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(Tour.TOUR_FILE).getField(Tour.TOUR_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4378">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTourGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4379">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTourGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
// Note: Use the booking tour header display is most cases.
// Eventually merge with some of this code.
Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
Record screenQuery = this.getScreenRecord();

if (((NumberField)screenQuery.getField(TourHeaderScreenRecord.KEY_ORDER)).getValue() > 2)
    ((NumberField)screenQuery.getField(TourHeaderScreenRecord.KEY_ORDER)).setValue(0);
FieldListener behCheckRange = new CheckRangeHandler(0, 2);
screenQuery.getField(TourHeaderScreenRecord.KEY_ORDER).addListener(behCheckRange);
recTour.addListener(new FileRemoveBOnCloseHandler(behCheckRange));

SortOrderHandler behQueryKeyHandler = new SortOrderHandler(this);
behQueryKeyHandler.setGridTable(Tour.DESCRIPTION_KEY, recTour, -1);
behQueryKeyHandler.setGridTable(Tour.DEPARTURE_DATE_KEY, recTour, -1);
screenQuery.getField(TourHeaderScreenRecord.KEY_ORDER).addListener(behQueryKeyHandler);

this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.DEPARTURE_DATE), screenQuery.getField(TourHeaderScreenRecord.START_DEPARTURE_DATE), ">=", null, true));
screenQuery.getField(TourHeaderScreenRecord.START_DEPARTURE_DATE).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.DEPARTURE_DATE), screenQuery.getField(TourHeaderScreenRecord.END_DEPARTURE_DATE), "<=", null, true));
screenQuery.getField(TourHeaderScreenRecord.END_DEPARTURE_DATE).addListener(new FieldReSelectHandler(this));

TourHeader recTourHeader = (TourHeader)this.getRecord(TourHeader.TOUR_HEADER_FILE);
this.getMainRecord().addListener(new BitFileFilter(recTourHeader.getField(TourHeader.TOUR_TYPE), screenQuery.getField(TourHeaderScreenRecord.TOUR_TYPE)));
screenQuery.getField(TourHeaderScreenRecord.TOUR_TYPE).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new CompareFileFilter(TourHeader.DESCRIPTION, screenQuery.getField(TourHeaderScreenRecord.DESCRIPTION), ">=", null, true));
screenQuery.getField(TourHeaderScreenRecord.DESCRIPTION).addListener(new FieldReSelectHandler(this));
FieldListener behInitOnChange = new InitOnChangeHandler(screenQuery.getField(TourHeaderScreenRecord.DESCRIPTION));
screenQuery.getField(TourHeaderScreenRecord.KEY_ORDER).addListener(behInitOnChange);
recTour.addListener(new FileRemoveBOnCloseHandler(behInitOnChange));

this.getScreenRecord().getField(TourHeaderScreenRecord.DISPLAY_TYPE).setValue(DisplayTypeField.TOUR_DISPLAY, DBConstants.DISPLAY, DBConstants.INIT_MOVE);

screenQuery.getField(TourHeaderScreenRecord.PRODUCT_ID).addListener(new FieldReSelectHandler(this));

this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4389">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseSharedFileHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>int iTypeField, int iTargetValue</MethodInterface>
		<MethodClassName>BaseSharedFileHandler</MethodClassName>
		<LogicSource><![CDATA[m_iTypeField = iTypeField;
m_iTargetValue = iTargetValue;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4398">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LocationSearchSession</MethodClassName>
		<LogicSource>return new Continent(this);     // Top-level search</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4399">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LocationSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
new Region(this);
new Country(this);
new State(this);
new City(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4400">
		<LastChanged>2012-02-01T12:57:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LocationSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(Region.REGION_FILE).setKeyArea(Region.CONTINENT_ID_KEY);
this.getRecord(Region.REGION_FILE).addListener(new StringSubFileFilter(null, Region.CONTINENT_ID, null, null, null, null));
this.getRecord(Country.COUNTRY_FILE).setKeyArea(Country.REGION_ID_KEY);
this.getRecord(Country.COUNTRY_FILE).addListener(new StringSubFileFilter(null, Country.REGION_ID, null, null, null, null));
this.getRecord(State.STATE_FILE).setKeyArea(State.COUNTRY_ID_KEY);
this.getRecord(State.STATE_FILE).addListener(new StringSubFileFilter(null, State.COUNTRY_ID, null, null, null, null));
this.getRecord(City.CITY_FILE).setKeyArea(City.COUNTRY_ID_KEY);
this.getRecord(City.CITY_FILE).addListener(new StringSubFileFilter(null, City.COUNTRY_ID, null, null, null, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4401">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LocationSearchSession</MethodClassName>
		<LogicSource><![CDATA[if (strCommand != null)
    if (strCommand.equalsIgnoreCase("requery"))
        if (properties != null)
{
    Record record = null;
    String strRecordName = (String)properties.get("record");
    if (strRecordName != null)
        record = this.getRecord(strRecordName);
    if (record == null)
    {
        strRecordName = (String)properties.get("description");
        if (strRecordName != null)
        {
            if (strRecordName.indexOf("All ") == 0)
                strRecordName = strRecordName.substring(4);
            if (strRecordName.length() > 3)
                if (strRecordName.substring(strRecordName.length() - 3, strRecordName.length()).equals("ies"))
                    strRecordName = strRecordName.substring(strRecordName.length() - 2, strRecordName.length()) + 'y';
            if (strRecordName.charAt(strRecordName.length() - 1) == 's')
                strRecordName = strRecordName.substring(0, strRecordName.length() - 1);
            record = this.getRecord(strRecordName);
        }
    }
    if (record == null)
        record = this.getMainRecord();
    StringSubFileFilter listener = (StringSubFileFilter)record.getListener("StringSubFileFilter");
    String strID = (String)properties.get("id");
    if (listener != null)
        listener.setFirst(strID);
    record.close();
    // Now, set the new parameters
    {
    }
    return Boolean.TRUE;    // Handled!
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4402">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>610</Sequence>
		<MethodName>selectGridFields</MethodName>
		<LogicDescription>Select the fields required for the grid screen.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();

record.setSelected(false);
record.getField(Product.ID).setSelected(true);
record.getField(Product.DESCRIPTION).setSelected(true);
record.getField(Product.PRODUCT_TYPE).setSelected(true);
record.getField(Product.DISPLAY_COST_STATUS_ID).setSelected(true);
record.getField(Product.PRODUCT_COST).setSelected(true);
record.getField(Product.PRODUCT_COST_LOCAL).setSelected(true);
record.getField(Product.PRODUCT_PRICE_LOCAL).setSelected(true);
record.getField(Product.PP_PRICE_LOCAL).setSelected(true);
record.getField(Product.INVENTORY_AVAILABILITY).setSelected(true);
record.getField(Product.DISPLAY_INVENTORY_STATUS_ID).setSelected(true);
record.getField(Product.VENDOR_ID).setSelected(true);
record.getField(Product.CURRENCY_CODE).setSelected(true);
record.getField(Product.CURRENCY_CODE_LOCAL).setSelected(true);
record.getField(Product.VENDOR_NAME).setSelected(true);

GetProductCostHandler listener = (GetProductCostHandler)record.getListener(GetProductCostHandler.class, false);
if (listener != null)
    listener.clearCache();
GetProductAvailabilityHandler listener2 = (GetProductAvailabilityHandler)record.getListener(GetProductAvailabilityHandler.class, false);
if (listener2 != null)
    listener2.clearCache();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4403">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>620</Sequence>
		<MethodName>selectMaintFields</MethodName>
		<LogicDescription>Select the fields for the maint screen.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();

record.setSelected(true);
record.getField(Product.DESC_SORT).setSelected(false);
record.getField(Product.ITINERARY_DESC).setSelected(false);

GetProductCostHandler listener = (GetProductCostHandler)record.getListener(GetProductCostHandler.class, false);
if (listener != null)
    listener.clearCache();
GetProductAvailabilityHandler listener2 = (GetProductAvailabilityHandler)record.getListener(GetProductAvailabilityHandler.class, false);
if (listener2 != null)
    listener2.clearCache();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4404">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>selectGridFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();

record.getField(Hotel.SINGLE_COST).setSelected(true);
record.getField(Hotel.DOUBLE_COST).setSelected(true);
record.getField(Hotel.TRIPLE_COST).setSelected(true);
record.getField(Hotel.QUAD_COST).setSelected(true);
record.getField(Hotel.SINGLE_COST_LOCAL).setSelected(true);
record.getField(Hotel.DOUBLE_COST_LOCAL).setSelected(true);
record.getField(Hotel.TRIPLE_COST_LOCAL).setSelected(true);
record.getField(Hotel.QUAD_COST_LOCAL).setSelected(true);
record.getField(Hotel.SINGLE_PRICE_LOCAL).setSelected(true);
record.getField(Hotel.DOUBLE_PRICE_LOCAL).setSelected(true);
record.getField(Hotel.TRIPLE_PRICE_LOCAL).setSelected(true);
record.getField(Hotel.QUAD_PRICE_LOCAL).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4405">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));
this.getMainRecord().addListener(new CompareFileFilter(Product.CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.CITY_ID), DBConstants.EQUALS, null, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4406">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;

((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID)).getReferenceRecord(this);
((ReferenceField)this.getScreenRecord().getField(AirScreenRecord.AIRLINE_ID)).getReferenceRecord(this); 

this.getMainRecord().addListener(new CompareFileFilter(Air.AIRLINE_ID, this.getScreenRecord().getField(AirScreenRecord.AIRLINE_ID), DBConstants.EQUALS, null, true));
this.getMainRecord().addListener(new CompareFileFilter(TransportProduct.CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.CITY_ID), DBConstants.EQUALS, null, true));
this.getMainRecord().addListener(new CompareFileFilter(TransportProduct.TO_CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.TO_CITY_ID), DBConstants.EQUALS, null, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4407">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarSearchSession</MethodClassName>
		<LogicSource><![CDATA[super; 

((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID)).getReferenceRecord(this);

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));
this.getMainRecord().addListener(new CompareFileFilter(TransportProduct.CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.CITY_ID), DBConstants.EQUALS, null, true));
this.getMainRecord().addListener(new CompareFileFilter(TransportProduct.TO_CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.TO_CITY_ID), DBConstants.EQUALS, null, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4408">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseSearchSession</MethodClassName>
		<LogicSource><![CDATA[super; 

((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID)).getReferenceRecord(this);

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));
this.getMainRecord().addListener(new CompareFileFilter(TransportProduct.CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.CITY_ID), DBConstants.EQUALS, null, true));
this.getMainRecord().addListener(new CompareFileFilter(TransportProduct.TO_CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.TO_CITY_ID), DBConstants.EQUALS, null, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4409">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemSearchSession</MethodClassName>
		<LogicSource><![CDATA[super; 

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4410">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getScreenRecord().getField(TourHeaderScreenRecord.TOUR_TYPE).isNull())
    this.getScreenRecord().getField(TourHeaderScreenRecord.TOUR_TYPE).moveFieldToThis(this.getRecord(BookingControl.BOOKING_CONTROL_FILE).getField(BookingControl.THIN_TOUR_TYPE));

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));
this.getMainRecord().addListener(new BitFileFilter(TourHeader.TOUR_TYPE, this.getScreenRecord().getField(TourHeaderScreenRecord.TOUR_TYPE)));

this.getMainRecord().addListener(new CompareFileFilter(TourHeader.END_DATE, this.getScreenRecord().getField(TourHeaderScreenRecord.START_DEPARTURE_DATE), FileFilter.GREATER_THAN_EQUAL, null, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4411">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationSearchSession</MethodClassName>
		<LogicSource><![CDATA[super; 

((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID)).getReferenceRecord(this);

this.getMainRecord().addListener(new ExtractRangeFilter(Product.DESC_SORT, this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION)));
this.getMainRecord().addListener(new CompareFileFilter(TransportProduct.CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.CITY_ID), DBConstants.EQUALS, null, true));
this.getMainRecord().addListener(new CompareFileFilter(TransportProduct.TO_CITY_ID, this.getScreenRecord().getField(ProductScreenRecord.TO_CITY_ID), DBConstants.EQUALS, null, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4412">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>selectMaintFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
if (this.getMainRecord().getField(Hotel.SINGLE_COST).getListener(CalcProductAmountHome.class) == null)
{
    this.getMainRecord().getField(Hotel.SINGLE_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Hotel.SINGLE_COST_LOCAL)));
    this.getMainRecord().getField(Hotel.TRIPLE_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Hotel.TRIPLE_COST_LOCAL)));
    this.getMainRecord().getField(Hotel.QUAD_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Hotel.QUAD_COST_LOCAL)));
    this.getMainRecord().getField(Hotel.ROOM_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Hotel.ROOM_COST_LOCAL)));
    this.getMainRecord().getField(Hotel.MEAL_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Hotel.MEAL_COST_LOCAL)));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4413">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>selectMaintFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4414">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>selectMaintFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4415">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>selectMaintFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4416">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>selectMaintFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4417">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>selectMaintFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4418">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>selectMaintFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4419">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>selectMaintFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4427">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Vendor</MethodClassName>
		<LogicSource><![CDATA[if (Vendor.MESSAGE_DETAIL_SCREEN.equalsIgnoreCase(strCommand))
    return Vendor.MESSAGE_DETAIL_MODE;
if (Vendor.MESSAGE_LOG_SCREEN.equalsIgnoreCase(strCommand))
    return Vendor.MESSAGE_LOG_MODE;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4453">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,200</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription><![CDATA[Get the message properties for this vendor.
@param strMessageName The message name.
@return A map with the message properties.]]></LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>Vendor</MethodClassName>
		<LogicSource>return trxMessageHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4454">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,200</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription><![CDATA[Get the properties for this kind of message
@param strMessageName The message name.
@return The properties for this message.]]></LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>Profile</MethodClassName>
		<LogicSource>return trxMessageHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4457">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Vendor</MethodClassName>
		<LogicSource><![CDATA[m_recApControl = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4458">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Profile</MethodClassName>
		<LogicSource><![CDATA[if (m_recProfileControl != null)
    m_recProfileControl.free();
m_recProfileControl = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4461">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequestMessageOutProcessor</MethodClassName>
		<LogicSource><![CDATA[TrxMessageHeader messageHeader = (TrxMessageHeader)internalMessage.getMessageHeader();
//if (messageHeader.get(TrxMessageHeader.MESSAGE_CODE) == null)
//    messageHeader.put(TrxMessageHeader.MESSAGE_CODE, HotelRateRequestMessageOutProcessor.MESSAGE_CODE);    // External operation name
//if (messageHeader.get(TrxMessageHeader.MESSAGE_RESPONSE_CODE) == null)  // For email transport, need to know who processes the returned message
//    messageHeader.put(TrxMessageHeader.MESSAGE_RESPONSE_CODE, com.tourgeek.tour.product.hotel.message.in.HotelRateResponseSOAPMsgReplyOut.MESSAGE_CODE);    // External operation name
return null;	// No return from a message out]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4479">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Contact</MethodClassName>
		<LogicSource><![CDATA[super;

CopyFieldHandler copyName = (CopyFieldHandler)this.getField(Contact.NAME).getListener(CopyFieldHandler.class.getName());
this.getField(Contact.NAME).removeListener(copyName, true);
copyName = new CopyFieldHandler(Contact.NAME_SORT)
{
    public int moveIt(boolean bDisplayOption, int iMoveMode)
    {
        BaseField fldContact = getOwner().getRecord().getField(Contact.CONTACT);
        BaseField fldName = getOwner();
        if ((fldName.isNull()) && (!fldContact.isNull()))
        {
            return fldContact.handleFieldChanged(bDisplayOption, iMoveMode);
        }
        return super.moveIt(bDisplayOption, iMoveMode);
    }
};
this.getField(Contact.NAME).addListener(copyName);

CopyFieldHandler copyLast = new CopyLastHandler(Contact.NAME_SORT)
{
    public int moveIt(boolean bDisplayOption, int iMoveMode)
    {
        BaseField fldName = getOwner().getRecord().getField(Contact.NAME);
        if (!fldName.isNull())
            return DBConstants.NORMAL_RETURN;   // Don't wipe the name
        return super.moveIt(bDisplayOption, iMoveMode);
    }
};
this.getField(Contact.CONTACT).addListener(copyLast);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4483">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4484">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4494">
		<LastChanged>2012-04-12T10:09:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>260</Sequence>
		<MethodName>processCostRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequest = (ProductRequest)((BaseMessage)messageIn).getMessageDataDesc(null);
String NO_ROOM_RATE = "No room rate";
BaseApplication application = null;
if (this.getRecordOwner() != null)
    if (this.getRecordOwner().getTask() != null)
        application = (BaseApplication)this.getRecordOwner().getTask().getApplication();
if (application == null)
    application = (BaseApplication)BaseApplet.getSharedInstance().getApplication();
int iCostStatus = BaseStatus.VALID;
String strErrorMessage = DBConstants.BLANK;
HotelMessageData productMessageData = (HotelMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
PassengerMessageData passengerMessageData  = (PassengerMessageData)productRequest.getMessageDataDesc(ProductRequest.PASSENGER_MESSAGE);

Date dateTarget = productMessageData.getTargetDate();
int iRateType = productMessageData.getRateTypeID();
int iRateClass = productMessageData.getRateClassID();
short sNights = productMessageData.getNights();

HotelRateResponse responseMessage = null;
if (messageReply == null)
{
    messageReply = new TreeMessage(null, null);
    responseMessage =  new HotelRateResponse((BaseMessage)messageReply, null);
}
else
    responseMessage = (HotelRateResponse)((BaseMessage)messageReply).getMessageDataDesc(null);
responseMessage.moveRequestInfoToReply(messageIn);
HotelRateResponseMessageData responseMessageData = (HotelRateResponseMessageData)responseMessage.getMessageDataDesc(ProductRateResponse.PRODUCT_RESPONSE_MESSAGE);

// First, calculate the room cost
double dTotalRoomCost = 0;
double dTotalLocalRoomPrice = 0;
for (int iRoomCategory = PaxCategory.SINGLE_ID, iFieldSeq = this.getFieldSeq(Hotel.SINGLE_COST), iPriceFieldSeq = this.getFieldSeq(Hotel.SINGLE_PRICE_LOCAL); iRoomCategory <= PaxCategory.CHILD_ID; iRoomCategory++, iFieldSeq++, iPriceFieldSeq++)
{
    double dRoomCost = this.getHotelCost(dateTarget, iRateType, iRateClass, (short)1, iRoomCategory, false);
    responseMessageData.setRoomCost(iRoomCategory, dRoomCost);
    dRoomCost = this.getHotelCost(dateTarget, iRateType, iRateClass, sNights, iRoomCategory, false);
    double dRoomPriceLocal = this.getHotelCost(dateTarget, iRateType, iRateClass, sNights, iRoomCategory, true);
    if (iFieldSeq <= this.getFieldSeq(Hotel.QUAD_COST))
    {
        this.getField(iFieldSeq).setValue(dRoomCost);
        this.getField(iPriceFieldSeq).setValue(dRoomPriceLocal);
    }
    int iPaxInRoom = passengerMessageData.getPaxInRoom(iRoomCategory);
    int iRoomCapacity = iRoomCategory;
    if (iRoomCategory == PaxCategory.CHILD_ID)
        iRoomCapacity = 1;
    if ((iPaxInRoom > 0) && (dRoomCost == 0))
    {
        iCostStatus = BaseStatus.NOT_VALID;
        strErrorMessage = NO_ROOM_RATE;
        if (application != null)
            strErrorMessage = application.getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(NO_ROOM_RATE);
    }
    dTotalRoomCost += dRoomCost * iPaxInRoom / iRoomCapacity;
    dTotalLocalRoomPrice += dRoomPriceLocal * iPaxInRoom / iRoomCapacity;
}
responseMessageData.setTotalRoomCost(dTotalRoomCost);

short iTotalPax = passengerMessageData.getTargetPax();
// Now, calculate the meal costs
double dTotalMealCost = 0;
double dTotalMealPriceLocal = 0;
for (int iFieldSeq = 1; iFieldSeq <= 4; iFieldSeq++)
{
    int iMealPlanID = productMessageData.getMealPlanID(iFieldSeq);
    if (iMealPlanID > 0)
    {
        int iMeals = productMessageData.getMealQuantity(iFieldSeq);
        int iMealDays = productMessageData.getMealDays(iFieldSeq);
        Date dateMeal = new Date(dateTarget.getTime());
        for (int iDay = 0; ; iDay++)
        {
            dateMeal.setTime(dateMeal.getTime() + (iDay * DBConstants.KMS_IN_A_DAY));    // Next day
            if (iMeals == 0)
                break;  // All done
            if (iMealDays == 0)
                iMeals--;
            else
            {
                if (((1 << iDay) & iMealDays) == 0)
                    iMeals--;
                else
                    continue;
                iMealDays = (~(1 << iDay)) & iMealDays;
            }
            double dMealCost = this.getMealCost(dateMeal, iMealPlanID, false);
            double dMealPriceLocal = this.getMealCost(dateMeal, iMealPlanID, true);
            if (dMealCost == 0)
            {
                iCostStatus = BaseStatus.NOT_VALID;
                String NO_MEAL_RATE = "No meal";
                strErrorMessage = NO_MEAL_RATE;
                if (application != null)
                    strErrorMessage = MessageFormat.format(application.getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(NO_MEAL_RATE), iFieldSeq);
            }
            dTotalMealCost += dMealCost * iTotalPax;
            dTotalMealPriceLocal += dMealPriceLocal * iTotalPax;
        }
    }
}
responseMessageData.setTotalMealCost(dTotalMealCost);

double dTotalCost = dTotalRoomCost + dTotalMealCost;
double dTotalPriceLocal = dTotalLocalRoomPrice + dTotalMealPriceLocal;
dTotalCost = Math.floor(dTotalCost * 100.00 + 0.5) / 100.00;

this.getField(Product.PRODUCT_COST).setValue(dTotalCost);
this.getField(Product.PRODUCT_PRICE_LOCAL).setValue(dTotalPriceLocal);
responseMessageData.setProductCost(dTotalCost);

if (dTotalCost == 0)
{
    iCostStatus = BaseStatus.NOT_VALID;
    strErrorMessage = NO_ROOM_RATE;
    if (application != null)
        strErrorMessage = application.getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(NO_ROOM_RATE);
}
this.getField(Product.DISPLAY_COST_STATUS_ID).setValue(iCostStatus);
responseMessage.setMessageDataStatus(iCostStatus);
if (iCostStatus != BaseStatus.VALID)
    responseMessage.setMessageDataError(strErrorMessage);
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4509">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupCacheField</MethodName>
		<LogicDescription><![CDATA[Setup the target field's value.
Override this method.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>boolean bDisplayOption</MethodInterface>
		<MethodClassName>FieldCacheHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4510">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetHotelCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>recProductVars, intRegistryID</MethodReturns>
		<MethodInterface>Record recProductVars, Integer intRegistryID</MethodInterface>
		<MethodClassName>GetHotelCostHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4514">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>950</Sequence>
		<MethodName>setupScreenStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetHotelCostHandler</MethodClassName>
		<LogicSource><![CDATA[if (iStatus == CostStatus.VALID)
{   // The returned cost is the double cost
    double dProductCost = recProduct.getField(Product.PRODUCT_COST).getValue();
    recProduct.getField(Hotel.DOUBLE_COST).setValue(dProductCost);
}
else
    recProduct.getField(Hotel.DOUBLE_COST).setData(null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4515">
		<LastChanged>2012-01-25T16:47:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>handleMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductRateMessageListener</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
if (m_record != null)
{
    RecordOwner recordOwner = m_record.getRecordOwner();
    if (recordOwner != null)
    {
        Record screenRecord = (Record)recordOwner.getScreenRecord();
        if (screenRecord instanceof ProductScreenRecord)
        {   // Always
            if (!((ProductScreenRecord)screenRecord).checkPriceProperties(message, (Product)m_record))
                return DBConstants.NORMAL_RETURN;   // The user is not looking for these prices anymore, don't display
        }
    }
    this.fixMessageMap(message);
    iErrorCode = super.handleMessage(message);  // Owner is a GridScreen, so the AutoRecord logic
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4516">
		<LastChanged>2012-04-07T08:29:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>fixMessageMap</MethodName>
		<LogicDescription><![CDATA[Convert this message map to the message map AutoRecordMessageListener
is expecting, so the correct fields will be updated.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseMessage message</MethodInterface>
		<MethodClassName>ProductRateMessageListener</MethodClassName>
		<LogicSource><![CDATA[ProductRateResponse productRateResponse = this.addMessageDesc(message);
ProductRateResponseMessageData messageData = (ProductRateResponseMessageData)productRateResponse.getMessageDataDesc(BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);

message.put(DBParams.FIELD, MULTIPLE_FIELDS);
String strProductCostParam = m_record.getField(Product.PRODUCT_COST).getFieldName();
Double dblProductCost = (Double)messageData.get(BookingDetailModel.TOTAL_COST);
if (dblProductCost == null)
    dblProductCost = DoubleField.ZERO;
message.put(strProductCostParam, dblProductCost.toString());
String strCostStatusParam = m_record.getField(Product.DISPLAY_COST_STATUS_ID).getFieldName();
Integer intProductStatus = (Integer)productRateResponse.get(BaseDataStatus.DATA_STATUS);
if (intProductStatus == null)
    intProductStatus = BaseStatus.VALID;
message.put(strCostStatusParam, intProductStatus.toString());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4517">
		<LastChanged>2012-01-31T21:13:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addMapProperty</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>MessageRecordDesc map, String strKey, Record record, String iFieldSeq</MethodInterface>
		<MethodClassName>ProductScreenRecord</MethodClassName>
		<LogicSource><![CDATA[if (record.getField(iFieldSeq).getData() != null)
    map.put(strKey, record.getField(iFieldSeq).getData());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4518">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addRateMessageListeners</MethodName>
		<LogicDescription><![CDATA[Add the listeners and message queues for rate lookups.
(todo - Don't set this up until they are required)]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Product recProduct, ProductScreenRecord screenRecord</MethodInterface>
		<MethodClassName>ProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[// Override this to add the listeners and message queues (remember to call super)
this.getMainRecord().getField(Product.PRODUCT_COST).setSelected(true);	// Now you can calc the USD amount (since you have this local amount)
this.getMainRecord().getField(Product.PRODUCT_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Product.PRODUCT_COST_LOCAL)));
this.getMainRecord().getField(Product.PP_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Product.PP_COST_LOCAL)));
// Create a private messageReceiver and listen for changes
MessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
Integer intRegistryID = null;
if (messageManager != null)
{
    Object source = this;
    BaseMessageFilter messageFilter = new BaseMessageFilter(MessageConstants.TRX_RETURN_QUEUE, MessageConstants.INTERNET_QUEUE, source, null);
    messageManager.addMessageFilter(messageFilter);
    this.addProductRateMessageFilter(recProduct, messageFilter);
    recProduct.addListener(new FreeOnFreeHandler(messageFilter));
    intRegistryID = messageFilter.getRegistryID();
    recProduct.addListener(this.getProductCostHandler(screenRecord, intRegistryID));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4519">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addRateMessageListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(Land.SIC_COST).setSelected(true);  // Now you can calc the USD amount (since you have this local amount)
this.getMainRecord().getField(Land.SIC_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Land.SIC_COST_HOME)));
this.getMainRecord().getField(Land.PMC_COST).setSelected(true);  // Now you can calc the USD amount (since you have this local amount)
this.getMainRecord().getField(Land.PMC_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Land.PMC_COST_HOME)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4520">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addRateMessageListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(Hotel.DOUBLE_COST).setSelected(true);	// Now you can calc the USD amount (since you have this local amount)
this.getMainRecord().getField(Hotel.DOUBLE_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Hotel.DOUBLE_COST_LOCAL)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4522">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addRateMessageListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4523">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addRateMessageListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4524">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addRateMessageListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4525">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addRateMessageListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4526">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4527">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addRateMessageListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4529">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,050</Sequence>
		<MethodName>addRateMessageListeners</MethodName>
		<LogicDescription>Add the listeners and message queues for rate lookups.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Product recProduct, ProductScreenRecord screenRecord</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[// Override this to add the listeners and message queues (remember to call super)
this.getMainRecord().getField(Product.PRODUCT_COST).setSelected(true);  // Now you can calc the USD amount (since you have this local amount)
this.getMainRecord().getField(Product.PRODUCT_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Product.PRODUCT_COST_LOCAL)));
this.getMainRecord().getField(Product.PP_COST).setSelected(true);  // Now you can calc the USD amount (since you have this local amount)
this.getMainRecord().getField(Product.PP_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Product.PP_COST_LOCAL)));
// Create a private messageReceiver and listen for changes
MessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
Integer intRegistryID = null;
if (messageManager != null)
{
    Object source = this;
    BaseMessageFilter messageFilter = new BaseMessageFilter(MessageConstants.TRX_RETURN_QUEUE, MessageConstants.INTERNET_QUEUE, source, null);
    messageManager.addMessageFilter(messageFilter);
    this.addProductRateMessageFilter(recProduct, messageFilter);
    recProduct.addListener(new FreeOnFreeHandler(messageFilter));
    intRegistryID = messageFilter.getRegistryID();
    recProduct.addListener(this.getProductCostHandler(screenRecord, intRegistryID));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4531">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>210</Sequence>
		<MethodName>doAddAction</MethodName>
		<LogicDescription>Do the add product action</LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
TourHeader recTourHeader = (TourHeader)((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReference();

String strProductType = (String)properties.get(SearchConstants.PRODUCT_TYPE);
Object objProductID = properties.get(Constants.OBJECT_ID);
Date date = (Date)Utility.getAs(properties, SearchConstants.DATE, Date.class);
Object objectID = null;

boolean bAddDetail = true;
if (ProductType.TOUR.equals(strProductType))
{   // Tour Header
    bAddDetail = false; // This is (probably) the tour header
    if ((recTourHeader.getEditMode() == DBConstants.EDIT_ADD) || (recTourHeader.getEditMode() == DBConstants.EDIT_NONE))
    {       // Should not be set yet
        try {
            // Note there is a special case... If the detail session just wants me to create a blank booking, it passes a blank tourID.
            if ((!(objProductID instanceof String)) || (!Constants.BLANK.equalsIgnoreCase((String)objProductID)))
                if (recTourHeader.setHandle(objProductID, DBConstants.OBJECT_ID_HANDLE) != null)
            {
                int iHeaderTourType = (int)this.getRecord(BookingControl.BOOKING_CONTROL_FILE).getField(BookingControl.TOUR_HEADER_TOUR_TYPE).getValue();
                TourTypeField fldTourType = (TourTypeField)(RecordReferenceField)recTourHeader.getField(TourHeader.TOUR_TYPE);
                int iTourTypeMask = fldTourType.getBitsToCheck();
                if ((iHeaderTourType & (int)recTourHeader.getField(TourHeader.TOUR_TYPE).getValue() & iTourTypeMask) == 0)
                    bAddDetail = true;  // This is a module
            }
            if (bAddDetail == false)
            {   // Set up the tour header (and the booking)
                if (date != null)
                {
                    ((DateField)recTour.getField(Tour.DEPARTURE_DATE)).setDate(date, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
                    if (recBooking.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
                        recBooking.writeAndRefresh();
                }
            }
        } catch (DBException ex)    {
            ex.printStackTrace();
            throw new RemoteException(ex.getMessage());
        }
    }
    else
    {
        throw new RemoteException("Can't select a tour header, when you already have one selected");
    }
}
objectID = recBooking.getCounterField().getData();

if (bAddDetail)
{   // Product detail
    int errorCode = this.addDetailProduct(properties);
    if (errorCode != DBConstants.NORMAL_RETURN)
        throw new RemoteException(this.getTask().getLastError(errorCode));
    if (objectID == null)	// New booking
        objectID = recBooking.getCounterField().getData();
    else
    	objectID = Boolean.TRUE;	// Success
}
return objectID;]]></LogicSource>
		<LogicThrows>RemoteException, DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4539">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.PAX_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4540">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(DBParams.MENU, "booking");
parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.MENU_SCREEN));
if (!(parentScreen instanceof BookingHeaderScreen))
{
    Record recMain = null;
    if (record instanceof Booking)
    {
        recMain = record;
        record = null;
    }
    parentScreen = new BookingHeaderScreen(recMain, itsLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    itsLocation = parentScreen.getNextLocation(ScreenConstants.FLUSH_LEFT, ScreenConstants.FILL_REMAINDER);
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4541">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuScreen</MethodClassName>
		<LogicSource><![CDATA[if (MenuConstants.GRID.equals(strCommand))
{
    BasePanel parentScreen = this.getParentScreen();
    return (parentScreen.onForm(null, ScreenConstants.DISPLAY_MODE, false, iCommandOptions, null) != null);
}
else
{
    Map<String,Object> properties = new Hashtable<String,Object>();
    Utility.parseArgs(properties, strCommand);
    String strItem = (String)properties.get("item");
    if (strItem != null)
    { // Let the screen listener change the screen.
        this.getScreenRecord().getField(BookingScreenRecord.BK_SUB_SCREEN).setString(strItem);
        return true;
    }
}
return false; // Don't call inherited]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4542">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAgencyScreen</MethodClassName>
		<LogicSource><![CDATA[Record recProfile = this.getRecord(Profile.PROFILE_FILE);
if (strCommand.equalsIgnoreCase(MenuConstants.LOOKUP))
{
    BasePanel parentScreen = Screen.makeWindow(this.getTask().getApplication());
    GridScreen screen = (GridScreen)recProfile.makeScreen(null, parentScreen, ScreenConstants.SELECT_MODE, true, true, true, true, null);
    //x if (recProfile.getScreen() == null)
        screen.setSelectQuery(recProfile, false); // Since this record isn't linked to the screen, manually link it.
    return true;
}
else if (strCommand.equalsIgnoreCase(MenuConstants.FORM))
{
    BasePanel parentScreen = Screen.makeWindow(this.getTask().getApplication());
    recProfile.makeScreen(null, parentScreen, ScreenConstants.MAINT_MODE, true, true, true, true, null);
    return true;
}
else if (strCommand.equalsIgnoreCase(ScreenModel.CLEAR))
{
    for (int i = 0; i < this.getSFieldCount(); i++)
    {
        ScreenField sField = this.getSField(i);
        Convert field = sField.getConverter();
        if (field != null)
            if (field.getField() != null)
                field.getField().initField(true);
    }
    return true;
}

return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4543">
		<LastChanged>2012-01-23T09:38:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAgencyScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = new EmptyToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
toolbar.setupStartSFields();   // Back button
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON_WITH_GAP, ScreenConstants.SET_ANCHOR), toolbar, null, ScreenConstants.DEFAULT_DISPLAY, MenuConstants.LOOKUP);
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON_WITH_GAP, ScreenConstants.SET_ANCHOR), toolbar, null, ScreenConstants.DEFAULT_DISPLAY, MenuConstants.FORM);
new SCannedBox(toolbar.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolbar, null, ScreenConstants.DEFAULT_DISPLAY, MenuConstants.RESET);
toolbar.setupEndSFields();   // Back button

((BookingHeaderScreen)this.getParentScreen()).addHeaderToolbars(this);

return toolbar;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4544">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(BOOKING_ENTRY), Booking.BUTTON_LOCATION + "Booking", BOOKING_ENTRY, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4545">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItineraryReportScreen</MethodClassName>
		<LogicSource>return new Booking(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4546">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItineraryReportScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Tour(this);

new BookingDetail(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4547">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItineraryReportScreen</MethodClassName>
		<LogicSource><![CDATA[super;

Record recBooking = ((ReferenceField)this.getScreenRecord().getField(ItineraryScreenRecord.BOOKING_ID)).getReferenceRecord();
MoveOnValidHandler moveHandler = new MoveOnValidHandler(this.getScreenRecord().getField(ItineraryScreenRecord.TOUR_ID), recBooking.getField(Booking.TOUR_ID));
recBooking.addListener(moveHandler);

((ReferenceField)this.getScreenRecord().getField(ItineraryScreenRecord.TOUR_ID)).addListener(new ReadSecondaryHandler(this.getRecord(Tour.TOUR_FILE)));

this.getRecord(Booking.BOOKING_FILE).addListener(new SubFileFilter(this.getRecord(Tour.TOUR_FILE)));
this.getRecord(Booking.BOOKING_FILE).addListener(new CompareFileFilter(this.getRecord(Booking.BOOKING_FILE).getField(Booking.ID), this.getScreenRecord().getField(ItineraryScreenRecord.BOOKING_ID), DBConstants.EQUALS));

this.getRecord(BookingDetail.BOOKING_DETAIL_FILE).addListener(new SubFileFilter(this.getRecord(Booking.BOOKING_FILE)));
this.getRecord(BookingDetail.BOOKING_DETAIL_FILE).setKeyArea(BookingDetail.BOOKING_ID_KEY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4548">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItineraryReportScreen</MethodClassName>
		<LogicSource><![CDATA[Record recBooking = this.getRecord(Booking.BOOKING_FILE);
for (int iFieldSeq = 0; iFieldSeq < recBooking.getFieldCount(); iFieldSeq++)
{
    BaseField field = recBooking.getField(iFieldSeq);
    this.addColumn(field);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4549">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItineraryReportScreen</MethodClassName>
		<LogicSource><![CDATA[//      Booking detail record
return new OtherItineraryReportDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | HtmlConstants.HEADING_SCREEN, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4550">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItineraryReportScreen</MethodClassName>
		<LogicSource><![CDATA[// Tour record
return new TourReportScreen(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | HtmlConstants.HEADING_SCREEN, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4551">
		<LastChanged>2012-01-23T09:38:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItineraryReportScreen</MethodClassName>
		<LogicSource>return new ItineraryToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4552">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItineraryReportScreen</MethodClassName>
		<LogicSource>return new ItineraryScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4553">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getServletPath</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItineraryReportScreen</MethodClassName>
		<LogicSource>return super.getServletPath(DBParams.XHTMLSERVLET); // Use cocoon</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4554">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItineraryToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4555">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailReportScreen</MethodClassName>
		<LogicSource>return this.getRecord(BookingDetail.BOOKING_DETAIL_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4556">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailReportScreen</MethodClassName>
		<LogicSource><![CDATA[Record recBookingDetail = this.getRecord(BookingDetail.BOOKING_DETAIL_FILE);
for (int iFieldSeq = 0; iFieldSeq < recBookingDetail.getFieldCount(); iFieldSeq++)
{
    this.addDetailXMLColumn(recBookingDetail, iFieldSeq);
}
new ProductReportDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | HtmlConstants.HEADING_SCREEN, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4557">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourReportScreen</MethodClassName>
		<LogicSource>return this.getRecord(Tour.TOUR_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4558">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourReportScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4559">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAir</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(BookingDetail.PRODUCT_TYPE_ID, ProductType.AIR_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4560">
		<LastChanged>2012-03-27T16:23:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
{
    Object objObjectID = null;
    try {
        objObjectID = this.getHandle(DBConstants.OBJECT_ID_HANDLE);
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
    if ((this.getEditMode() == DBConstants.EDIT_ADD) || (this.getEditMode() == DBConstants.EDIT_NONE))
        if (this.getField(BookingDetail.PRODUCT_TYPE_ID).isNull())
            if (properties != null)
                if (properties.get(DBConstants.OBJECT_ID) != null)
    {   // The only way to figure out the product type is to read the record
        String strObjectID = properties.get(DBConstants.OBJECT_ID).toString();
        try {
            this.setHandle(strObjectID, DBConstants.OBJECT_ID_HANDLE);
        } catch (DBException ex) {
            ex.printStackTrace();
        }
    }
    Record record = this.getTable().getCurrentTable().getRecord();
    if (record != null)
        if (record != this) // Record should be the concrete class
            return record.makeScreen(itsLocation, parentScreen, iDocMode, properties);
    if (objObjectID != null)
        parentScreen.setProperty(DBConstants.STRING_OBJECT_ID_HANDLE, objObjectID.toString());
    if (this.getField(BookingDetail.PRODUCT_TYPE_ID).getValue() == ProductType.HOTEL_ID)
        screen = Record.makeNewScreen(BookingHotel.BOOKING_HOTEL_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
    else //if (this.getField(BookingDetail.PRODUCT_TYPE_ID).getValue() == ProductType.LAND_ID)
        screen = Record.makeNewScreen(BookingLand.BOOKING_LAND_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
}
else //if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
    screen = Record.makeNewScreen(BOOKING_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4570">
		<LastChanged>2012-01-31T10:43:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>52</Sequence>
		<MethodName>getSharedRecordTypeKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>return this.getField(BookingDetail.PRODUCT_TYPE_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4571">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>55</Sequence>
		<MethodName>createSharedRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[try {
    int iProductType = (Integer) Converter.convertObjectToDatatype(objKey, Integer.class, 0);
    if (iProductType == ProductType.HOTEL_ID)
        return new BookingHotel(recordOwner);
    if (iProductType == ProductType.LAND_ID)
        return new BookingLand(recordOwner);
    if (iProductType == ProductType.AIR_ID)
        return new BookingAir(recordOwner);
    if (iProductType == ProductType.CAR_ID)
        return new BookingCar(recordOwner);
    if (iProductType == ProductType.CRUISE_ID)
        return new BookingCruise(recordOwner);
    if (iProductType == ProductType.ITEM_ID)
        return new BookingItem(recordOwner);
    if (iProductType == ProductType.TOUR_ID)
        return new BookingTour(recordOwner);
    if (iProductType == ProductType.TRANSPORTATION_ID)
        return new BookingTransportation(recordOwner);
} catch (Exception ex) {
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4573">
		<LastChanged>2012-01-31T10:43:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>850</Sequence>
		<MethodName>moveTourClassInfo</MethodName>
		<LogicDescription>Move this tour class information to this tour.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>TourClass recTourClass</MethodInterface>
		<MethodClassName>Tour</MethodClassName>
		<LogicSource><![CDATA[this.getField(Tour.TOUR_STATUS_ID).moveFieldToThis(recTourClass.getField(TourClass.INITIAL_TOUR_STATUS_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.AIR_RATE_ID).moveFieldToThis(recTourClass.getField(TourClass.AIR_RATE_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.AIR_CLASS_ID).moveFieldToThis(recTourClass.getField(TourClass.AIR_CLASS_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.HOTEL_RATE_ID).moveFieldToThis(recTourClass.getField(TourClass.HOTEL_RATE_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.HOTEL_CLASS_ID).moveFieldToThis(recTourClass.getField(TourClass.HOTEL_CLASS_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.LAND_RATE_ID).moveFieldToThis(recTourClass.getField(TourClass.LAND_RATE_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.LAND_CLASS_ID).moveFieldToThis(recTourClass.getField(TourClass.LAND_CLASS_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.PMC_CUTOFF).moveFieldToThis(recTourClass.getField(TourClass.PMC_CUTOFF), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.CAR_RATE_ID).moveFieldToThis(recTourClass.getField(TourClass.CAR_RATE_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.CAR_CLASS_ID).moveFieldToThis(recTourClass.getField(TourClass.CAR_CLASS_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.TRANSPORTATION_RATE_ID).moveFieldToThis(recTourClass.getField(TourClass.TRANSPORTATION_RATE_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.TRANSPORTATION_CLASS_ID).moveFieldToThis(recTourClass.getField(TourClass.TRANSPORTATION_CLASS_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.CRUISE_RATE_ID).moveFieldToThis(recTourClass.getField(TourClass.CRUISE_RATE_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.CRUISE_CLASS_ID).moveFieldToThis(recTourClass.getField(TourClass.CRUISE_CLASS_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.ITEM_RATE_ID).moveFieldToThis(recTourClass.getField(TourClass.ITEM_RATE_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(Tour.ITEM_CLASS_ID).moveFieldToThis(recTourClass.getField(TourClass.ITEM_CLASS_ID), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4574">
		<LastChanged>2012-01-31T10:43:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourScreen</MethodClassName>
		<LogicSource><![CDATA[boolean bHandled = false;
if (MenuConstants.LOOKUP.equals(strCommand))
{
	for (int i = 0; i < this.getSFieldCount(); i++)
	{
		ScreenField screenField = this.getSField(i);
		if (screenField instanceof SSelectBox)
		{
			if (((SSelectBox)screenField).getButtonCommand().indexOf(MenuConstants.LOOKUP) != -1)
				return ((SSelectBox)screenField).doCommand(((SSelectBox)screenField).getButtonCommand(), screenField, 0);
		}
	}
}
if (ScreenModel.CLEAR.equalsIgnoreCase(strCommand))
{
    Record recBooking = this.getMainRecord();
    if (!recBooking.getField(Booking.TOUR_ID).isNull())
    {
        Record recTour = ((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
        if ((recTour.getEditMode() != DBConstants.EDIT_CURRENT)
            && (recTour.getEditMode() != DBConstants.EDIT_IN_PROGRESS))
                bHandled = true;    // Nothing to clear
        else if ((recTour.getField(Tour.TOUR_STATUS_ID).getValue() == TourStatus.OKAY)
            || (recBooking.getField(Booking.BOOKING_STATUS_ID).getValue() == BookingStatus.OKAY))
        {
            String strError = "Can't change a live tour - cancel and rebook";
            strError = this.getTask().getApplication().getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(strError);
            this.getTask().setStatusText(strError, DBConstants.WARNING);
            bHandled = true;
        }
        else
        {
            recBooking.getField(Booking.CODE).setData(null, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
            recBooking.getField(Booking.DESCRIPTION).setData(null, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
            try {
                recTour.edit();
                recTour.getField(Tour.TOUR_STATUS_ID).setValue(TourStatus.NOT_VALID);
                recTour.set();
                recTour.addNew();
            } catch (DBException ex) {
                ex.printStackTrace();
            }
            recBooking.getField(Booking.TOUR_ID).setData(null, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
            bHandled = true;
        }
    }
}
else if (BookingScreenHandler.OPTIONS.equalsIgnoreCase(strCommand))
{
    RecordOwner recordOwner = this.getRecord(Booking.BOOKING_FILE).getRecordOwner();
    recordOwner.getScreenRecord().getField(BookingScreenRecord.BK_SUB_SCREEN).setValue(BookingScreenHandler.OPTIONS_SCREEN); // Switch to the options screen
    bHandled = true;
}
if (!bHandled)
    bHandled = super; // This will send the command to my view
return bHandled;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4576">
		<LastChanged>2012-01-31T10:43:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getSharedRecordTypeKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderDetail</MethodClassName>
		<LogicSource>return this.getField(TourHeaderDetail.PRODUCT_TYPE_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4577">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createSharedRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderDetail</MethodClassName>
		<LogicSource><![CDATA[try {
    int iProductType = (Integer) Converter.convertObjectToDatatype(objKey, Integer.class, 0);
    if (iProductType == ProductType.HOTEL_ID)
        return new TourHeaderHotel(recordOwner);
    if (iProductType == ProductType.LAND_ID)
        return new TourHeaderLand(recordOwner);
    if (iProductType == ProductType.AIR_ID)
        return new TourHeaderAir(recordOwner);
    if (iProductType == ProductType.CAR_ID)
        return new TourHeaderCar(recordOwner);
    if (iProductType == ProductType.CRUISE_ID)
        return new TourHeaderCruise(recordOwner);
    if (iProductType == ProductType.ITEM_ID)
        return new TourHeaderItem(recordOwner);
    if (iProductType == ProductType.TOUR_ID)
        return new TourHeaderTour(recordOwner);
    if (iProductType == ProductType.TRANSPORTATION_ID)
        return new TourHeaderTransportation(recordOwner);
} catch (Exception ex) {
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4583">
		<LastChanged>2012-01-31T10:43:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderCar</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(TourHeaderDetail.PRODUCT_TYPE_ID, ProductType.CAR_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4586">
		<LastChanged>2012-04-07T08:48:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>isValid</MethodName>
		<LogicDescription>Does this option apply to this booking/pax/date?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BookingModel recBooking, BaseField fldPaxCategory, Date dateStart</MethodInterface>
		<MethodClassName>TourHeaderOption</MethodClassName>
		<LogicSource><![CDATA[if (!this.getField(TourHeaderOption.START_DATE).isNull())
    if (this.getField(TourHeaderOption.START_DATE).compareTo(dateStart) > 0)
        return false;   // departure date is before start date.
if (!this.getField(TourHeaderOption.END_DATE).isNull())
    if (this.getField(TourHeaderOption.END_DATE).compareTo(dateStart) < 0)
        return false;   // departure date is after end date.
if (!((DaysOfWeekField)this.getField(TourHeaderOption.DAYS_OF_WEEK)).isValidDate(dateStart))
    return false;
if (!this.getField(TourHeaderOption.GATEWAY).isNull())
{
    if (recBooking != null)
        if (!this.getField(TourHeaderOption.GATEWAY).equals(recBooking.getField(BookingModel.GATEWAY)))
            return false;
}
if (!this.getField(TourHeaderOption.PAX_CATEGORY_ID).isNull())
{
    if (fldPaxCategory != null)
        if (!this.getField(TourHeaderOption.PAX_CATEGORY_ID).equals(fldPaxCategory))
            return false;
}
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4587">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupAnswerDetail</MethodName>
		<LogicDescription><![CDATA[Add all the valid answers to my option list.
@param strTourOrOption Tour or Option to scan (since this is recursive).
@param fldTourOrOptionID Tour or option to scan the detail of.
@param fldTourHeaderID The Module/Tour Header
@param recBooking The booking
@param recBookingPax The booking pax that this applies to (or null if all pax)
@param dateStart The module start date
@param bSelect Set the select state of these records to (if they are not questions).]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>String strTourOrOption, BaseField fldTourOrOptionID, BaseField fldTourHeaderID, Booking recBooking, BookingPax recBookingPax, Date dateStart, BaseField fldAskForAnswer, boolean bSelect</MethodInterface>
		<MethodClassName>BookingAnswer</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
TourHeaderOption recTourHeaderOption = new TourHeaderOption(this.findRecordOwner());
try   {
    recTourHeaderOption.setKeyArea(TourHeaderOption.TOUR_OR_OPTION_KEY);
    recTourHeaderOption.addListener(new StringSubFileFilter(strTourOrOption, TourHeaderOption.TOUR_OR_OPTION, fldTourOrOptionID.getData().toString(), TourHeaderOption.TOUR_OR_OPTION_ID, null, null));
    recTourHeaderOption.close();
    while (recTourHeaderOption.hasNext())
    {
        recTourHeaderOption.next();
        BaseField fldPaxClass = null;
        if (recBookingPax != null)
            if ((recBookingPax.getEditMode() == DBConstants.EDIT_CURRENT) || (recBookingPax.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
                fldPaxClass = recBookingPax.getField(BookingPax.PAX_CATEGORY_ID);
        if (recTourHeaderOption.isValid(recBooking, fldPaxClass, dateStart))
        {
            this.addNew();
            this.getField(BookingAnswer.BOOKING_ID).moveFieldToThis(recBooking.getField(Booking.ID));
            if (recBookingPax != null)
                this.getField(BookingAnswer.BOOKING_PAX_ID).moveFieldToThis(recBookingPax.getField(BookingPax.ID));
            if (this.getField(BookingAnswer.BOOKING_PAX_ID).isNull())
                this.getField(BookingAnswer.BOOKING_PAX_ID).setValue(0);
            this.getField(BookingAnswer.MODULE_ID).moveFieldToThis(fldTourHeaderID);
            this.getField(BookingAnswer.TOUR_HEADER_OPTION_ID).moveFieldToThis(recTourHeaderOption.getField(TourHeaderOption.ID));
            if (recTourHeaderOption.getField(TourHeaderOption.USE_TOUR_HEADER_OPTION_ID).getValue() != 0)
                this.getField(BookingAnswer.TOUR_HEADER_OPTION_ID).moveFieldToThis(recTourHeaderOption.getField(TourHeaderOption.USE_TOUR_HEADER_OPTION_ID));
            this.getField(BookingAnswer.TOUR_OR_OPTION).moveFieldToThis(recTourHeaderOption.getField(TourHeaderOption.TOUR_OR_OPTION));
            this.getField(BookingAnswer.TOUR_OR_OPTION_ID).moveFieldToThis(recTourHeaderOption.getField(TourHeaderOption.TOUR_OR_OPTION_ID));
            this.getField(BookingAnswer.SEQUENCE).moveFieldToThis(recTourHeaderOption.getField(TourHeaderOption.SEQUENCE));
            ((DateTimeField)this.getField(BookingAnswer.MODULE_START_DATE)).setDateTime(dateStart, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
            this.getField(BookingAnswer.DESCRIPTION).moveFieldToThis(recTourHeaderOption.getField(TourHeaderOption.DESCRIPTION));
            this.getField(BookingAnswer.ALWAYS_RESOLVE).moveFieldToThis(recTourHeaderOption.getField(TourHeaderOption.ALWAYS_RESOLVE));
            this.getField(BookingAnswer.ASK_FOR_ANSWER).moveFieldToThis(recTourHeaderOption.getField(TourHeaderOption.ASK_FOR_ANSWER));
            if (this.getField(BookingAnswer.ASK_FOR_ANSWER).getState())
            {   // If there are answers to be resolved, let the booking know
                if (fldAskForAnswer == null)
                    fldAskForAnswer = recBooking.getField(Booking.ASK_FOR_ANSWER);
                fldAskForAnswer.setState(true);
                if (this.getField(BookingAnswer.ALWAYS_RESOLVE).getState())
                        recBooking.getField(Booking.ALWAYS_RESOLVE).setState(true);
            }
            if (recTourHeaderOption.getField(TourHeaderOption.DETAIL_OPTION_COUNT).getValue() > 0)
                this.getField(BookingAnswer.DETAIL_OPTION_EXISTS).setState(true);
            if (recTourHeaderOption.getField(TourHeaderOption.DETAIL_PRICE_COUNT).getValue() > 0)
                this.getField(BookingAnswer.DETAIL_PRICE_EXISTS).setState(true);
            if (recTourHeaderOption.getField(TourHeaderOption.DETAIL_AIR_HEADER_COUNT).getValue() > 0)
                this.getField(BookingAnswer.DETAIL_AIR_HEADER_EXISTS).setState(true);
            if (recTourHeaderOption.getField(TourHeaderOption.DETAIL_TOUR_DETAIL_COUNT).getValue() > 0)
                this.getField(BookingAnswer.TOUR_DETAIL_EXISTS).setState(true);
            boolean bSetSelected = bSelect;
            if (this.getField(BookingAnswer.ASK_FOR_ANSWER).getState() == true)
                bSetSelected = false; // Can't add this until user selects it.
            this.getField(BookingAnswer.SELECTED).setState(bSetSelected);
            this.getField(BookingAnswer.DETAIL_ADDED).setState(false);
            try {
                this.add();
            } catch (DBException ex)    {
                if (ex.getErrorCode() != DBConstants.DUPLICATE_KEY)   // If it was there already, use it.
                    throw ex;   // Else do the error.
                int iOldOrder = this.getDefaultOrder();
                this.setKeyArea(BookingAnswer.BOOKING_ID_KEY);
                if (this.seek(DBConstants.EQUALS))
                {   // Always - Use the old answer, but in this order (Note: Expensive, but rarely used)
                    VectorBuffer buffer = new VectorBuffer(null);
                    buffer.fieldsToBuffer(this);
                    this.remove();
                    this.addNew();
                    buffer.bufferToFields(this, DBConstants.DONT_DISPLAY, DBConstants.READ_MOVE);
                    this.add();
                    buffer.free();
                }
                this.setKeyArea(iOldOrder);
            }
            if (recTourHeaderOption.getField(TourHeaderOption.DETAIL_OPTION_COUNT).getValue() > 0)
            {
                iErrorCode = this.setupAnswerDetail(TourHeaderOption.OPTION, recTourHeaderOption.getField(TourHeaderOption.ID), fldTourHeaderID, recBooking, recBookingPax, dateStart, fldAskForAnswer, bSetSelected);
                if (iErrorCode != DBConstants.NORMAL_RETURN)
                    return iErrorCode;
            }
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    recTourHeaderOption.free();
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4588">
		<LastChanged>2012-01-31T10:43:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>addSubListeners</MethodName>
		<LogicDescription>Add the listeners that require the booking (main) record.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Booking recBooking</MethodInterface>
		<MethodClassName>BookingLine</MethodClassName>
		<LogicSource><![CDATA[if (this.getListener(HistoryHandler.class.getName()) == null)
{
    this.addListener(new SequenceHandler(this.getField(BookingLine.SEQUENCE), recBooking.getField(Booking.NEXT_LINE_SEQUENCE)));

    this.getField(BookingLine.QUANTITY).addListener(new InitFieldHandler(recBooking.getField(Booking.PAX)));
    this.getField(BookingLine.COMMISSION_RATE).addListener(new InitFieldHandler(recBooking.getField(Booking.STD_COMMISSION)));
    this.getField(BookingLine.GROSS).setEnabled(false);
    this.getField(BookingLine.COMMISSION).setEnabled(false);
    this.getField(BookingLine.NET).setEnabled(false);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4589">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerGridScreen</MethodClassName>
		<LogicSource>return new BookingAnswer(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4590">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(BookingAnswer.DESCRIPTION).setEnabled(false);

Record recTourHeader = this.getRecord(TourHeader.TOUR_HEADER_FILE);
Record recBooking = this.getRecord(Booking.BOOKING_FILE);
m_fldModuleStart.setString(m_strModuleStartDate);

this.getMainRecord().setKeyArea(BookingAnswer.BOOKING_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(recBooking.getField(Booking.ID), BookingAnswer.BOOKING_ID, m_recBookingPax.getField(BookingPax.ID), BookingAnswer.BOOKING_PAX_ID, recTourHeader.getField(TourHeader.ID), BookingAnswer.MODULE_ID));
this.getMainRecord().addListener(new StringSubFileFilter(m_strTourOrOption, BookingAnswer.TOUR_OR_OPTION, m_strTourOrOptionID, BookingAnswer.TOUR_OR_OPTION_ID, null, null));
this.getMainRecord().addListener(new SubFileFilter(m_fldModuleStart, BookingAnswer.MODULE_START_DATE, null, null, null, null));
BooleanField fldTrue = new BooleanField(null, DBConstants.BLANK, DBConstants.DEFAULT_FIELD_LENGTH, DBConstants.BLANK, null);
fldTrue.setState(true);
this.getMainRecord().addListener(new FreeOnFreeHandler(fldTrue));
this.getMainRecord().addListener(new CompareFileFilter(BookingAnswer.ASK_FOR_ANSWER, fldTrue, DBConstants.EQUALS, null, false));

this.setAppending(false);

this.getMainRecord().getField(BookingAnswer.SELECTED).addListener(new BookingAnswerSelectHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4591">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4592">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addAnswerDetail</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Booking recBooking, Tour recTour, BookingPax recBookingPax, BaseField fldTourModuleID, Date dateStart</MethodInterface>
		<MethodClassName>BookingAnswer</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
if (this.getField(BookingAnswer.SELECTED).getState() == false)
    return DBConstants.NORMAL_RETURN;   // Don't add if not selected for add.
if (this.getField(BookingAnswer.DETAIL_ADDED).getState() == true)
    return DBConstants.NORMAL_RETURN;   // already added.
this.edit();
if (this.getField(BookingAnswer.DETAIL_AIR_HEADER_EXISTS).getState() == true)
{
    if (m_recBookingAirHeader == null)
    {
        m_recBookingAirHeader = new BookingAirHeader(this.findRecordOwner());
        m_recBookingAirHeader.addDetailBehaviors(recBooking, recTour);
        m_recTourHeaderAirHeader = new TourHeaderAirHeader(this.findRecordOwner());
    }
    iErrorCode = m_recBookingAirHeader.setupAllDetail(m_recTourHeaderAirHeader, recBooking, recTour, recBookingPax.getField(BookingPax.ID), this.getField(BookingAnswer.TOUR_HEADER_OPTION_ID), fldTourModuleID, dateStart);
    if (iErrorCode != DBConstants.NORMAL_RETURN)
        return iErrorCode;
}
if (this.getField(BookingAnswer.DETAIL_PRICE_EXISTS).getState() == true)
{
    int iTourPricingType = recBooking.getTourPricingType(recTour, fldTourModuleID, dateStart);
    if ((iTourPricingType & PricingType.OPTION_PRICING) != 0)
    {       // Use the option pricing (otherwise, I use the component pricing or markup the cost for a price)
        if (m_recBookingLine == null)
        {
            m_recBookingLine = new BookingLine(this.findRecordOwner());
            m_recBookingLine.addDetailBehaviors(recBooking, recTour);
            m_recTourHeaderPricing = new TourHeaderLine(this.findRecordOwner());
        }
        iErrorCode = m_recBookingLine.setupAllDetail(m_recTourHeaderPricing, recBooking, recTour, recBookingPax.getField(BookingPax.ID), this.getField(BookingAnswer.TOUR_HEADER_OPTION_ID), fldTourModuleID, dateStart);
        if (iErrorCode != DBConstants.NORMAL_RETURN)
            return iErrorCode;
    }
}
if (this.getField(BookingAnswer.TOUR_DETAIL_EXISTS).getState() == true)
{
    if (m_recBookingDetail == null)
    {
        m_recBookingDetail = new BookingDetail(this.findRecordOwner());
        m_recBookingDetail.addDetailBehaviors(recBooking, recTour);
        m_recTourHeaderDetail = new TourHeaderDetail(this.findRecordOwner());
    }
    iErrorCode = m_recBookingDetail.setupAllDetail(m_recTourHeaderDetail, recBooking, recTour, recBookingPax.getField(BookingPax.ID), this.getField(BookingAnswer.TOUR_HEADER_OPTION_ID), fldTourModuleID, dateStart);
    if (iErrorCode != DBConstants.NORMAL_RETURN)
        return iErrorCode;
}
this.getField(BookingAnswer.SELECTED).setState(true);  // Being careful.
this.getField(BookingAnswer.DETAIL_ADDED).setState(true);
this.set();
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4593">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswer</MethodClassName>
		<LogicSource><![CDATA[    if (m_recBookingDetail != null)
    {
        m_recBookingDetail.free();
        m_recBookingDetail = null;
        m_recTourHeaderDetail.free();
        m_recTourHeaderDetail = null;
    }
    if (m_recBookingAirHeader != null)
    {
        m_recBookingAirHeader.free();
        m_recBookingAirHeader = null;
        m_recTourHeaderAirHeader.free();
        m_recTourHeaderAirHeader = null;
    }
    if (m_recBookingLine != null)
    {
        m_recBookingLine.free();
        m_recBookingLine = null;
        m_recTourHeaderPricing.free();
        m_recTourHeaderPricing = null;
    }
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4594">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerSelectHandler</MethodClassName>
		<LogicSource><![CDATA[BookingAnswer recBookingAnswer = (BookingAnswer)this.getOwner().getRecord();
RecordOwner recordOwner = recBookingAnswer.getRecordOwner();
Booking recBooking = (Booking)recordOwner.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)recordOwner.getRecord(Tour.TOUR_FILE);
BookingPax recBookingPax = (BookingPax)((ReferenceField)recBookingAnswer.getField(BookingAnswer.BOOKING_PAX_ID)).getReference();
if (recBookingPax.getField(BookingPax.ID).isNull())
    recBookingPax.getField(BookingPax.ID).moveFieldToThis(recBookingAnswer.getField(BookingAnswer.BOOKING_PAX_ID));
BaseField fldTourModuleID = recBookingAnswer.getField(BookingAnswer.MODULE_ID);
Date dateStart = ((DateTimeField)recBookingAnswer.getField(BookingAnswer.MODULE_START_DATE)).getDateTime();
if (this.getOwner().getState() == true)
{    // This item was selected, add the detail.
    try {
        int iErrorCode = recBookingAnswer.addAnswerDetail(recBooking, recTour, recBookingPax, fldTourModuleID, dateStart);
        if (iErrorCode != DBConstants.NORMAL_RETURN)
            return iErrorCode;
    } catch (DBException ex) {
        ex.printStackTrace();
        return ex.getErrorCode();
    }
}
else
{    // Item de-selected, delete and restore previous
    // todo(don) Need to figure this out.
    return this.getOwner().getRecord().getRecordOwner().getTask().setLastError("Can't se-select options");
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4595">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>BookingAnswerGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>record, itsLocation, parentScreen, fieldConv, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>BookingPax recBookingPax, String strModID, String strTourOrOpt, String strTourOrOptID, String strModStartDate, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConv, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BookingAnswerGridScreen</MethodClassName>
		<LogicSource><![CDATA[m_recBookingPax = recBookingPax;
m_strModuleID = strModID;
m_strModuleStartDate = strModStartDate;
m_strTourOrOption = strTourOrOpt;
m_strTourOrOptionID = strTourOrOptID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4596">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4597">
		<LastChanged>2012-01-31T10:43:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerGridScreen</MethodClassName>
		<LogicSource><![CDATA[m_fldModuleStart = new DateTimeField(null, BookingAnswerGridScreen.MODULE_START_DATE, Constants.DEFAULT_FIELD_LENGTH, this.getMainRecord().getString(BookingAnswerGridScreen.MODULE_START_DATE), null);

new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
TourHeader recTourHeader = this.restoreTheProperties();
if (recTourHeader.getRecordOwner() == this)
{
    recTourHeader.getField(TourHeader.DESCRIPTION).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
    recTourHeader.getField(TourHeader.DESCRIPTION).setEnabled(false);
    m_fldModuleStart.setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
    m_fldModuleStart.setEnabled(false);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4598">
		<LastChanged>2012-01-31T10:43:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
{
    BasePanel parentScreen = this.getParentScreen();
    ScreenLocation itsLocation = null;
    if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_SAME_WINDOW)	// Use same window
        itsLocation = this.getScreenLocation();
    else
        parentScreen = Screen.makeWindow(this.getTask().getApplication());

    Record record = this.getMainRecord();
    if ((record.getEditMode() != Constants.EDIT_CURRENT) && (record.getEditMode() != Constants.EDIT_IN_PROGRESS))
        return false;

    BookingPax recBookingPax = m_recBookingPax;
    if (m_recBookingPax.getRecordOwner() == this)
        this.removeRecord(m_recBookingPax);
    if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_SAME_WINDOW)	// Use same window
        m_recBookingPax = null;
    String strModuleID = record.getField(BookingAnswer.MODULE_ID).toString();
    String strDateModuleStart = record.getField(BookingAnswer.MODULE_START_DATE).toString();
    String strTourOrOption = TourHeaderOption.OPTION;
    String strTourOrOptionID = record.getField(BookingAnswer.TOUR_HEADER_OPTION_ID).toString();
    Converter fieldConverter = null;
    int iDisplayFieldDesc = ScreenConstants.DISPLAY_MODE | ScreenConstants.DONT_DISPLAY_FIELD_DESC;
    if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_SAME_WINDOW)	// Use same window
        this.free();
    new BookingAnswerGridScreen(recBookingPax, strModuleID, strTourOrOption, strTourOrOptionID, strDateModuleStart, null, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, null);
    return true;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4599">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>7</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (m_fldModuleStart != null)
    m_fldModuleStart.free();
m_fldModuleStart = null;
if (m_recBookingPax != null)
    if (m_recBookingPax.getRecordOwner() != this)
{
    m_recBookingPax.free();
    m_recBookingPax = null;
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4600">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerSelectHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.READ_MOVE, false);
this.setRespondsToMode(DBConstants.INIT_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4601">
		<LastChanged>2012-06-30T16:29:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UseTourHeaderOptionField</MethodClassName>
		<LogicSource><![CDATA[ScreenComponent sField = super.setupDefaultView(itsLocation, targetScreen, converter, iDisplayFieldDesc, properties);
ScreenComponent sfTemp = BaseField.createScreenComponent(ScreenModel.CANNED_BOX, targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, null, ScreenConstants.DEFAULT_DISPLAY, properties);
for (int i = 0; ; i++)
{
    ScreenComponent screenField = this.getComponent(i);
    if (screenField == null)
        break;  // Just being careful.
    if (screenField.getClass().isAssignableFrom(sfTemp.getClass()))
    {
        screenField.free();
        Record record = this.getReferenceRecord();
        properties = new HashMap<String,Object>();
        properties.put(ScreenModel.RECORD, record);
        properties.put(ScreenModel.COMMAND, ThinMenuConstants.LOOKUP);
        properties.put(ScreenModel.IMAGE, ThinMenuConstants.LOOKUP);
        screenField = createScreenComponent(TourHeaderOption.USE_TOUR_HEADER_OPTION_SFIELD_CLASS, targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, converter, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
        break;
    }
}
sfTemp.free();
return sField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4602">
		<LastChanged>2012-02-01T03:24:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
String iFieldSeq = TourHeaderOption.DETAIL_TOUR_DETAIL_COUNT;
if (TourHeaderLine.TOUR_HEADER_LINE_FILE.equals(this.getMainRecord().getTableNames(false)))
    iFieldSeq = TourHeaderOption.DETAIL_PRICE_COUNT;
if (TourHeaderAirHeader.TOUR_HEADER_AIR_HEADER_FILE.equals(this.getMainRecord().getTableNames(false)))
    iFieldSeq = TourHeaderOption.DETAIL_AIR_HEADER_COUNT;
this.getMainRecord().addListener(new SubCountHandler(this.getHeaderRecord().getField(iFieldSeq), false, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4603">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderAirHeaderGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recTourHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderAirHeaderGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4604">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderAirHeaderGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderAirHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4605">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderAirHeaderGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4606">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderAirHeaderScreen</MethodClassName>
		<LogicSource>return new TourHeaderAirHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4607">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderAirHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4608">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ModifyTourSubField</MethodClassName>
		<LogicSource><![CDATA[try {
    return (Record)this.getRecord().clone();
} catch (CloneNotSupportedException ex) {
    ex.printStackTrace();
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4609">
		<LastChanged>2012-06-30T16:30:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ModifyTourSubField</MethodClassName>
		<LogicSource><![CDATA[ScreenComponent sField = null;
Record record = this.makeReferenceRecord();
int fsField = record.getFieldSeq(TourHeaderLine.DESCRIPTION);
if (record instanceof TourHeaderAirHeader)
    fsField = record.getFieldSeq(TourHeaderAirHeader.AIRLINE_DESC);
if (record instanceof TourHeaderDetail)
{
    Record recProduct = ((ReferenceField)record.getField(TourHeaderDetail.PRODUCT_ID)).getReferenceRecord();
    if (recProduct != null)
    {
        fsField = record.getFieldCount();   // This will be the sequence of the new field
        BaseField field = new StringField(record, "Description", 30, null, null);
        field.setVirtual(true);     // Just being careful
        record.getField(TourHeaderDetail.PRODUCT_ID).addListener(new ReadSecondaryHandler(recProduct));
        BaseField fldProductDesc = recProduct.getField(Product.DESCRIPTION);
        recProduct.addListener(new MoveOnValidHandler(field, fldProductDesc));
    }
    else
        fsField = record.getFieldSeq(TourHeaderDetail.DAY);    // Never (just in case)
}
sField = this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, -1, fsField, true, false);
ScreenComponent sfTemp = BaseField.createScreenComponent(ScreenModel.CANNED_BOX, targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, null, ScreenConstants.DEFAULT_DISPLAY, properties);
for (int i = 0; ; i++)
{
    ScreenComponent screenField = this.getComponent(i);
    if (screenField == null)
        break;  // Just being careful.
    if (screenField.getClass().isAssignableFrom(sfTemp.getClass()))
    {
        screenField.free();
        properties = new HashMap<String,Object>();
        properties.put(ScreenModel.RECORD, record);
        properties.put(ScreenModel.COMMAND, ThinMenuConstants.LOOKUP);
        properties.put(ScreenModel.IMAGE, ThinMenuConstants.LOOKUP);
        screenField = createScreenComponent(TourSub.MODIFY_TOUR_SUB_SCREEN_FIELD_CLASS, targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, converter, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
        break;
    }
}
sfTemp.free();
return sField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4610">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>onForm</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strMessage = this.getProperty(MessageConstants.QUEUE_NAME);
if (strMessage != null)
{
    if (properties == null)
        properties = new Hashtable<String,Object>();
    properties.put(MessageConstants.QUEUE_NAME, strMessage);
    if (this.getProperty(RecordMessageConstants.TABLE_NAME) != null)
        properties.put(RecordMessageConstants.TABLE_NAME, this.getProperty(RecordMessageConstants.TABLE_NAME));
}

return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4611">
		<LastChanged>2012-01-25T22:49:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
String strMessage = this.getProperty(MessageConstants.QUEUE_NAME);
String strTableName = this.getProperty(RecordMessageConstants.TABLE_NAME);
if (strMessage != null)
    if ((strTableName != null) && (strTableName.equals(this.getMainRecord().getTableNames(false))))
{
    new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.SELECT, MenuConstants.CLOSE, null)
    {
        public boolean doCommand(String strCommand, ScreenField sourceSField, int iCommandOptions)
        {
            Task task = getTask();
            Application application = (Application)task.getApplication();
            String strQueueName = getProperty(MessageConstants.QUEUE_NAME);
            MessageManager messageManager = application.getMessageManager();
            Map<String,Object> propHeader = new Hashtable<String,Object>();
            Map<String,Object> propMessage = new Hashtable<String,Object>();
            Record record = getParentScreen().getMainRecord();
            if ((record.getEditMode() == DBConstants.EDIT_CURRENT) || (record.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
            {
                String bookmark = null;
                try {
                    bookmark = record.getHandle(DBConstants.OBJECT_ID_HANDLE).toString();
                } catch (DBException ex) {
                    ex.printStackTrace();
                }
                propMessage.put(RecordMessageConstants.TABLE_NAME, record.getTableNames(false));
                propMessage.put(DBConstants.STRING_OBJECT_ID_HANDLE, bookmark);
                BaseMessageHeader messageHeader = new BaseMessageHeader(strQueueName, MessageConstants.INTRANET_QUEUE, this, propHeader);
                BaseMessage message = new MapMessage(messageHeader, propMessage);
                messageManager.sendMessage(message);
            }
            return super.doCommand(strCommand, sourceSField, iCommandOptions);
        }
    };
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4612">
		<LastChanged>2012-01-31T10:43:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>handleMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailScreen</MethodClassName>
		<LogicSource><![CDATA[if (ModifyTourSubField.SELECT_QUEUE.equals(message.getMessageHeader().getQueueName()))
{
    String strRecord = (String)message.get(RecordMessageConstants.TABLE_NAME);
    Record recordToSync = ((ReferenceField)this.getMainRecord().getField(TourHeaderDetail.MODIFY_ID)).getReferenceRecord();
    if ((strRecord != null) && (strRecord.equals(recordToSync.getTableNames(false))))
    {
        String bookmark = (String)message.get(DBConstants.STRING_OBJECT_ID_HANDLE);
        int iRecordMessageType = DBConstants.SELECT_TYPE;
        Record source = recordToSync; //????
        RecordMessageHeader messageHeader = new RecordMessageHeader(source, bookmark, null, iRecordMessageType, null);
        RecordMessage recordMessage = new RecordMessage(messageHeader);
        boolean bUpdateOnSelect = false;
        recordMessage.put(RecordMessageHeader.UPDATE_ON_SELECT, new Boolean(bUpdateOnSelect));
        recordMessage.put(RecordMessageHeader.RECORD_TO_UPDATE, recordToSync);
        ((ScreenField)recordToSync.getRecordOwner()).getScreenFieldView().handleMessage(recordMessage);
        return DBConstants.NORMAL_RETURN; // Handled
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4613">
		<LastChanged>2012-01-31T10:43:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addHeaderToolbars</MethodName>
		<LogicDescription><![CDATA[Add the header toolbars to the sub-screen.
@param screen The sub-screen to add the toolbars to.
@return The created toolbar.]]></LogicDescription>
		<MethodReturns>ToolScreen</MethodReturns>
		<MethodInterface>BasePanel screen</MethodInterface>
		<MethodClassName>BookingHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = new EmptyToolbar(null, screen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);

ResourceBundle resources = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.BOOKING_RESOURCE, true);

BaseField field = this.getScreenRecord().getField(BookingScreenRecord.BK_SUB_SCREEN);
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, resources.getString(BookingScreenHandler.MENU), Booking.BUTTON_LOCATION + BookingScreenHandler.MENU, Integer.toString(BookingScreenHandler.MENU_SCREEN), null);
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + BookingScreenHandler.SUMMARY, Integer.toString(BookingScreenHandler.SUMMARY_SCREEN), resources.getString(BookingScreenHandler.SUMMARY));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + BookingScreenHandler.AGENCY, Integer.toString(BookingScreenHandler.AGENCY_SCREEN), resources.getString(BookingScreenHandler.AGENCY));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + BookingScreenHandler.PASSENGER, Integer.toString(BookingScreenHandler.PAX_SCREEN), resources.getString(BookingScreenHandler.PASSENGER));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + BookingScreenHandler.TOUR, Integer.toString(BookingScreenHandler.TOUR_SCREEN), resources.getString(BookingScreenHandler.TOUR));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + BookingScreenHandler.PRICE, Integer.toString(BookingScreenHandler.LINE_SCREEN), resources.getString(BookingScreenHandler.PRICE));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + BookingScreenHandler.LINE, Integer.toString(BookingScreenHandler.AR_TRX_SCREEN), resources.getString(BookingScreenHandler.LINE));

new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + BookingScreenHandler.OPTIONS, Integer.toString(BookingScreenHandler.OPTIONS_SCREEN), resources.getString(BookingScreenHandler.OPTIONS));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON_WITH_GAP, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + BookingScreenHandler.CALENDAR, Integer.toString(BookingScreenHandler.CALENDAR_SCREEN), resources.getString(BookingScreenHandler.CALENDAR));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + BookingScreenHandler.DETAIL, Integer.toString(BookingScreenHandler.FIT_SCREEN), resources.getString(BookingScreenHandler.DETAIL));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + BookingScreenHandler.ITINERARY, Integer.toString(BookingScreenHandler.ITIN_SCREEN), resources.getString(BookingScreenHandler.ITINERARY));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + BookingScreenHandler.STATUS, Integer.toString(BookingScreenHandler.VOUCHER_SCREEN), resources.getString(BookingScreenHandler.STATUS));


new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON_WITH_GAP, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.TOUR, Integer.toString(BookingScreenHandler.TOUR_DETAIL_SCREEN), resources.getString(ProductType.TOUR));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.AIR, Integer.toString(BookingScreenHandler.AIR_SCREEN), resources.getString(ProductType.AIR));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.HOTEL, Integer.toString(BookingScreenHandler.HOTEL_SCREEN), resources.getString(ProductType.HOTEL));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.LAND, Integer.toString(BookingScreenHandler.LAND_SCREEN), resources.getString(ProductType.LAND));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.CAR, Integer.toString(BookingScreenHandler.CAR_SCREEN), resources.getString(ProductType.CAR));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.TRANSPORTATION, Integer.toString(BookingScreenHandler.TRANSPORTATION_SCREEN), resources.getString(ProductType.TRANSPORTATION));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.CRUISE, Integer.toString(BookingScreenHandler.CRUISE_SCREEN), resources.getString(ProductType.CRUISE));
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.ITEM, Integer.toString(BookingScreenHandler.ITEM_SCREEN), resources.getString(ProductType.ITEM));

Converter converter = new AltFieldConverter(this.getRecord(Booking.BOOKING_FILE).getField(Booking.DESCRIPTION), this.getRecord(Tour.TOUR_FILE).getField(Tour.DESCRIPTION));
converter.setupDefaultView(toolbar.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolbar, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(Tour.TOUR_FILE).getField(Tour.TOUR_STATUS_ID).setupDefaultView(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, ScreenConstants.DONT_DISPLAY_DESC);
if (((TourStatusField)this.getRecord(Tour.TOUR_FILE).getField(Tour.TOUR_STATUS_ID)).getIconField(null) != null)
    if (((TourStatusField)this.getRecord(Tour.TOUR_FILE).getField(Tour.TOUR_STATUS_ID)).getIconField(null).getListener(TourStatusUpdateHandler.class) == null)
        ((TourStatusField)this.getRecord(Tour.TOUR_FILE).getField(Tour.TOUR_STATUS_ID)).getIconField(null).addListener(new TourStatusUpdateHandler(null));   // Hack
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON_WITH_GAP, ScreenConstants.DONT_SET_ANCHOR), toolbar, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.LOOKUP, BookingScreenHandler.BOOKING_LOOKUP, resources.getString(BookingScreenHandler.BOOKING_LOOKUP));

return toolbar;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4614">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSubScreen</MethodClassName>
		<LogicSource><![CDATA[if (!(parentScreen instanceof BookingHeaderScreen))
{
    Record recMain = null;
    if (record instanceof Booking)
    {
        recMain = record;
        record = null;
    }
    parentScreen = new BookingHeaderScreen(recMain, itsLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    itsLocation = parentScreen.getNextLocation(ScreenConstants.FLUSH_LEFT, ScreenConstants.FILL_REMAINDER);
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4615">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSubScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = super;
((BookingHeaderScreen)this.getParentScreen()).addHeaderToolbars(this);
return toolbar;    // No toolbar (not even the default toolbars]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4616">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSubGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (!(parentScreen instanceof BookingHeaderScreen))
{
    Record recMain = null;
    if (record instanceof Booking)
    {
        recMain = record;
        record = null;
    }
    parentScreen = new BookingHeaderScreen(recMain, itsLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    itsLocation = parentScreen.getNextLocation(ScreenConstants.FLUSH_LEFT, ScreenConstants.FILL_REMAINDER);
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4617">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSubGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = super;
((BookingHeaderScreen)this.getParentScreen()).addHeaderToolbars(this);
return toolbar;    // No toolbar (not even the default toolbars]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4618">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = super;
((BookingHeaderScreen)this.getParentScreen()).addHeaderToolbars(this);
return toolbar;    // No toolbar (not even the default toolbars]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4619">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAgencyScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.AGENCY_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4620">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSummaryScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.SUMMARY_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4621">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.PAX_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4622">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.TOUR_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4623">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.LINE_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4624">
		<LastChanged>2012-01-31T10:43:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getRecord(BookingLine.BOOKING_LINE_FILE) != null)
    return this.getRecord(BookingLine.BOOKING_LINE_FILE);
return new BookingLine(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4625">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4626">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.LINE_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4627">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.AR_TRX_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4628">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.HOTEL_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4629">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.HOTEL_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4630">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.LAND_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4631">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.LAND_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4632">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.AIR_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4633">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.AIR_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4634">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportationGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.TRANSPORTATION_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4635">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportationScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.TRANSPORTATION_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4636">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.CAR_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4637">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.CAR_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4638">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.CRUISE_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4639">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.CRUISE_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4640">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.OPTIONS_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4641">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.FIT_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4643">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.CALENDAR_SCREEN));
if (!(parentScreen instanceof BookingHeaderScreen))
{
    Record recMain = null;
    if (record instanceof Booking)
    {
        recMain = record;
        record = null;
    }
    parentScreen = new BookingHeaderScreen(recMain, itsLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    itsLocation = parentScreen.getNextLocation(ScreenConstants.FLUSH_LEFT, ScreenConstants.FILL_REMAINDER);
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4644">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = super;
((BookingHeaderScreen)this.getParentScreen()).addHeaderToolbars(this);
return toolbar;    // No toolbar (not even the default toolbars]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4645">
		<LastChanged>2012-01-31T10:43:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailSubGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BookingDetail recBookingDetail = (BookingDetail)this.getMainRecord();
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
recBookingDetail.addDetailBehaviors(recBooking, recTour);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4646">
		<LastChanged>2012-01-31T10:43:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailSubScreen</MethodClassName>
		<LogicSource><![CDATA[super;

BookingDetail recBookingDetail = (BookingDetail)this.getMainRecord();
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
recBookingDetail.addDetailBehaviors(recBooking, recTour);
// Make sure you have a valid handle before performing any price etc lookups.
recBookingDetail.setOpenMode(recBookingDetail.getOpenMode() | DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);

this.setEnabled(false);
recBookingDetail.getField(BookingDetail.PRODUCT_ID).setEnabled(true);
recBookingDetail.getField(BookingDetail.DETAIL_DATE).setEnabled(true);
recBookingDetail.getField(BookingDetail.RATE_ID).setEnabled(true);
recBookingDetail.getField(BookingDetail.CLASS_ID).setEnabled(true);
recBookingDetail.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).setEnabled(true);
recBookingDetail.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID).setEnabled(true);
recBookingDetail.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID).setEnabled(true);
recBookingDetail.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID).setEnabled(true);
recBookingDetail.getField(BookingDetail.ACK_DAYS).setEnabled(true);
recBookingDetail.getField(BookingDetail.DESCRIPTION).setEnabled(true);

Record recProduct =((ReferenceField)recBookingDetail.getField(BookingDetail.PRODUCT_ID)).getReferenceRecord();
for (int i = 0; i < this.getSFieldCount(); i++)
{
    ScreenField sField = this.getSField(i);
    if (sField instanceof SCannedBox)
    {
        String strCommand = ((SCannedBox)sField).getButtonCommand();
        if ((Product.INVENTORY_DETAIL.equals(strCommand))
            || (Product.PRICING_DETAIL.equals(strCommand)))
                recProduct.addListener(new EnableOnValidHandler(sField, true, false));
        if (MessageLog.MESSAGE_LOG_FILE.equals(strCommand))
            recProduct.addListener(new EnableOnValidHandler(sField, true, false));
    }
}

((BaseStatusField)recBookingDetail.getField(BookingDetail.INFO_STATUS_ID)).getIconField(null).addListener(new BookingDetailStatusUpdateHandler(null));
((BaseStatusField)recBookingDetail.getField(BookingDetail.INVENTORY_STATUS_ID)).getIconField(null).addListener(new BookingDetailStatusUpdateHandler(null));
((BaseStatusField)recBookingDetail.getField(BookingDetail.COST_STATUS_ID)).getIconField(null).addListener(new BookingDetailStatusUpdateHandler(null));
((BaseStatusField)recBookingDetail.getField(BookingDetail.PRODUCT_STATUS_ID)).getIconField(null).addListener(new BookingDetailStatusUpdateHandler(null));

recBookingDetail.getField(BookingDetail.COST_STATUS_ID).addListener(new DisableOnFieldHandler(recBookingDetail.getField(BookingDetail.MARKUP_FROM_LAST), Integer.toString(BaseStatus.NOT_VALID), false)
{
    public boolean compareFieldToString()
    {
        boolean bMatch = super.compareFieldToString();
        if (!bMatch)
            if (!this.getOwner().getRecord().getField(BookingDetail.MARKUP_FROM_LAST).isNull())
                bMatch = true;
        return bMatch;
    }
});

String strManualTransportID = Integer.toString(((ReferenceField)recBookingDetail.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID)).getIDFromCode(MessageTransport.MANUAL));

CheckConverter convCheckMark = new CheckConverter(recBookingDetail.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID), strManualTransportID, null, true);
recBookingDetail.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(convCheckMark));
recBookingDetail.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new CopyStringHandler(recBookingDetail.getField(BookingDetail.INFO_STATUS_ID), Integer.toString(BaseStatus.VALID), convCheckMark));

recBookingDetail.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new CopyStringHandler(recBookingDetail.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID), strManualTransportID, convCheckMark));
recBookingDetail.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new CopyStringHandler(recBookingDetail.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID), strManualTransportID, convCheckMark));
recBookingDetail.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new CopyStringHandler(recBookingDetail.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID), strManualTransportID, convCheckMark));

convCheckMark = new CheckConverter(recBookingDetail.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID), strManualTransportID, null, true);
recBookingDetail.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(convCheckMark));
recBookingDetail.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID).addListener(new CopyStringHandler(recBookingDetail.getField(BookingDetail.INVENTORY_STATUS_ID), Integer.toString(BaseStatus.VALID), convCheckMark));
convCheckMark = new CheckConverter(recBookingDetail.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID), strManualTransportID, null, true);
recBookingDetail.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(convCheckMark));
recBookingDetail.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID).addListener(new CopyStringHandler(recBookingDetail.getField(BookingDetail.COST_STATUS_ID), Integer.toString(BaseStatus.VALID), convCheckMark));
convCheckMark = new CheckConverter(recBookingDetail.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID), strManualTransportID, null, true);
recBookingDetail.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(convCheckMark));
recBookingDetail.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID).addListener(new CopyStringHandler(recBookingDetail.getField(BookingDetail.PRODUCT_STATUS_ID), Integer.toString(BaseStatus.NO_STATUS), convCheckMark));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4647">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirGridScreen</MethodClassName>
		<LogicSource>return new BookingAir(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4648">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirScreen</MethodClassName>
		<LogicSource>return new BookingAir(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4649">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarScreen</MethodClassName>
		<LogicSource>return new BookingCar(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4650">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarGridScreen</MethodClassName>
		<LogicSource>return new BookingCar(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4651">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseScreen</MethodClassName>
		<LogicSource>return new BookingCruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4652">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseGridScreen</MethodClassName>
		<LogicSource>return new BookingCruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4653">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.ITEM_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4654">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemGridScreen</MethodClassName>
		<LogicSource>return new BookingItem(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4655">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.ITEM_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4656">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemScreen</MethodClassName>
		<LogicSource>return new BookingItem(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4657">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportationScreen</MethodClassName>
		<LogicSource>return new BookingTransportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4658">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportationGridScreen</MethodClassName>
		<LogicSource>return new BookingTransportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4659">
		<LastChanged>2012-02-01T19:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getProductTypeIDFromName</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>String string</MethodInterface>
		<MethodClassName>ProductType</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = false;
if (this.getEditMode() == DBConstants.EDIT_CURRENT)
	if (string.equals(this.getField(ProductType.DESCRIPTION).toString()))
		bSuccess = true;	// Already current
this.getField(ProductType.DESCRIPTION).setString(string);
this.setKeyArea(ProductType.DESCRIPTION_KEY);
try   {
	if (bSuccess == false)
		bSuccess = this.seek("=");
} catch (DBException ex)    {
    bSuccess = false;
}
if (bSuccess)
    return (int)this.getField(ProductType.ID).getValue();
else
    return -1;  // Not found???]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4660">
		<LastChanged>2012-01-31T10:43:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>215</Sequence>
		<MethodName>addDetailProduct</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[String strProductType = (String)properties.get(SearchConstants.PRODUCT_TYPE);
Object objProductID = properties.get(Constants.OBJECT_ID);
Date date = (Date)Utility.getAs(properties, SearchConstants.DATE, Date.class);

BookingDetail recBookingDetail = (BookingDetail)this.getRecord(BookingDetail.BOOKING_DETAIL_FILE);
try {
    ProductType recProductType = (ProductType)((ReferenceField)recBookingDetail.getField(BookingDetail.PRODUCT_TYPE_ID)).getReferenceRecord();
    int iProductType = recProductType.getProductTypeIDFromName(strProductType);
    if (iProductType == -1)
        return this.getTask().setLastError("Unknown product type"); //Never
    int iOldOpenMode = recBookingDetail.getOpenMode();
    recBookingDetail.setOpenMode(recBookingDetail.getOpenMode() & ~DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);  // Turn this off for a sec.
    recBookingDetail.getField(BookingDetail.PRODUCT_TYPE_ID).setValue(iProductType);
    recBookingDetail.addNew();
    recBookingDetail.setOpenMode(iOldOpenMode);
    recBookingDetail = (BookingDetail)recBookingDetail.getTable().getCurrentTable().getRecord();

    recBookingDetail.setDetailProductInfo(properties, null, null, null, null, null, null);

    ((DateTimeField)recBookingDetail.getField(BookingDetail.DETAIL_DATE)).setDateTime(date, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
    recBookingDetail.getField(BookingDetail.PRODUCT_ID).setString(objProductID.toString());

    if (recBookingDetail.getEditMode() == DBConstants.EDIT_ADD)
        recBookingDetail.add(); // Never
    else
        recBookingDetail.set(); // Maybe
} catch (DBException ex)    {
    ex.printStackTrace();
}

return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4661">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>clone</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InitBookingDetailHandler</MethodClassName>
		<LogicSource>return new InitBookingDetailHandler(m_recBooking, m_recTour);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4662">
		<LastChanged>2012-01-31T10:43:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addLookupListeners</MethodName>
		<LogicDescription><![CDATA[Add the listeners to do the price and inventory lookups.
Typically these are only done in the concrete classes.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[BaseField fldExchange = this.getField(BookingDetail.EXCHANGE);
this.getField(BookingDetail.TOTAL_COST).addListener(new CalcBalanceHandler(this.getField(BookingDetail.TOTAL_COST_LOCAL), this.getField(BookingDetail.TOTAL_COST), fldExchange, CalcBalanceHandler.MULTIPLY, false));

String strManualTransportID = Integer.toString(((ReferenceField)this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID)).getIDFromCode(MessageTransport.MANUAL));

Converter converterNotInfoManualTransport = new CheckConverter(this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID), strManualTransportID, null, false);
this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(converterNotInfoManualTransport));
Converter converterNotCostManualTransport = new CheckConverter(this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID), strManualTransportID, null, false);
this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(converterNotCostManualTransport));
Converter converterNotInventoryManualTransport = new CheckConverter(this.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID), strManualTransportID, null, false);
this.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(converterNotInventoryManualTransport));
Converter converterNotProductManualTransport = new CheckConverter(this.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID), strManualTransportID, null, false);
this.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(converterNotProductManualTransport));

this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new DisableOnFieldHandler(this.getField(BookingDetail.INFO_STATUS_ID), strManualTransportID, false));
this.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID).addListener(new DisableOnFieldHandler(this.getField(BookingDetail.INVENTORY_STATUS_ID), strManualTransportID, false));
this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID).addListener(new DisableOnFieldHandler(this.getField(BookingDetail.COST_STATUS_ID), strManualTransportID, false));
this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID).addListener(new DisableOnFieldHandler(this.getField(BookingDetail.TOTAL_COST), strManualTransportID, false));
this.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID).addListener(new DisableOnFieldHandler(this.getField(BookingDetail.PRODUCT_STATUS_ID), strManualTransportID, false));

Boolean boolRequestRequiredFlag = Boolean.TRUE;
InitOnChangeHandler listener = null;
this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(listener = new InitOnChangeHandler(this.getField(BookingDetail.INFO_REQUEST_KEY)));
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.INFO_STATUS_REQUEST), boolRequestRequiredFlag, null));
this.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID).addListener(listener = new InitOnChangeHandler(this.getField(BookingDetail.INVENTORY_REQUEST_KEY)));
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.INVENTORY_STATUS_REQUEST), boolRequestRequiredFlag, null));
this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID).addListener(listener = new InitOnChangeHandler(this.getField(BookingDetail.COST_REQUEST_KEY)));
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.COST_STATUS_REQUEST), boolRequestRequiredFlag, null));
this.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID).addListener(listener = new InitOnChangeHandler(this.getField(BookingDetail.PRODUCT_REQUEST_KEY)));
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, null));

// First, handle new information lookups
this.getField(BookingDetail.PRODUCT_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.INFO_STATUS_REQUEST), boolRequestRequiredFlag, converterNotInfoManualTransport));
this.getField(BookingDetail.DETAIL_DATE).addListener(new FieldDataScratchHandler(null, false));	// Don't change on refresh
this.getField(BookingDetail.DETAIL_DATE).addListener(new CopyDataHandler(this.getField(BookingDetail.INFO_STATUS_REQUEST), boolRequestRequiredFlag, converterNotInfoManualTransport));
this.getField(BookingDetail.INFO_STATUS_REQUEST).addListener(new CheckRequestRequiredHandler(BookingDetail.INFO_STATUS_ID));

// If any of these values change, you will have to re-lookup the price.
this.getField(BookingDetail.PRODUCT_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.COST_STATUS_REQUEST), boolRequestRequiredFlag, converterNotCostManualTransport));
this.getField(BookingDetail.DETAIL_DATE).addListener(new CopyDataHandler(this.getField(BookingDetail.COST_STATUS_REQUEST), boolRequestRequiredFlag, converterNotCostManualTransport));
this.getField(BookingDetail.DETAIL_END_DATE).addListener(new FieldListener(null)
{ // If the end data changes call this setEndDate method
    public int fieldChanged(boolean bDisplayOption, int iMoveMode)
    { // Override to do something!
        int iReturnCode = super.fieldChanged(bDisplayOption, iMoveMode);
        
        if (iMoveMode == DBConstants.SCREEN_MOVE)
        setEndDate(((DateTimeField)getOwner()).getDateTime());
        
        return iReturnCode;
    }
});
this.getField(BookingDetail.RATE_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.COST_STATUS_REQUEST), boolRequestRequiredFlag, converterNotCostManualTransport));
this.getField(BookingDetail.CLASS_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.COST_STATUS_REQUEST), boolRequestRequiredFlag, converterNotCostManualTransport));
// If the info changes from valid AND the transport is not manual, change the info status to request required.
FieldConverter convIfCostStatusTrueAndNotManual = new AltFieldConverter(new RadioConverter(this.getField(BookingDetail.INFO_STATUS_ID), new Integer(CostStatus.VALID), true), converterNotCostManualTransport, Integer.toString(CostStatus.VALID));
this.getField(BookingDetail.INFO_STATUS_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.COST_STATUS_REQUEST), boolRequestRequiredFlag, convIfCostStatusTrueAndNotManual));
// If when you update this record a Lookup is requested, set to schedule lookup and schedule the lookup.
this.getField(BookingDetail.COST_STATUS_REQUEST).addListener(new CheckRequestRequiredHandler(BookingDetail.COST_STATUS_ID));

// If any of these values change, you will have to re-lookup the inventory.
this.getField(BookingDetail.PRODUCT_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.INVENTORY_STATUS_REQUEST), boolRequestRequiredFlag, converterNotInventoryManualTransport));
this.getField(BookingDetail.DETAIL_DATE).addListener(new CopyDataHandler(this.getField(BookingDetail.INVENTORY_STATUS_REQUEST), boolRequestRequiredFlag, converterNotInventoryManualTransport));
this.getField(BookingDetail.RATE_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.INVENTORY_STATUS_REQUEST), boolRequestRequiredFlag, converterNotInventoryManualTransport));
this.getField(BookingDetail.CLASS_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.INVENTORY_STATUS_REQUEST), boolRequestRequiredFlag, converterNotInventoryManualTransport));
// If the info changes from valid AND the transport is not manual, change the info status to request required.
FieldConverter convIfInventoryStatusTrueAndNotManual = new AltFieldConverter(new RadioConverter(this.getField(BookingDetail.INFO_STATUS_ID), new Integer(CostStatus.VALID), true), converterNotInventoryManualTransport, Integer.toString(CostStatus.VALID));
this.getField(BookingDetail.INFO_STATUS_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.INVENTORY_STATUS_REQUEST), boolRequestRequiredFlag, convIfInventoryStatusTrueAndNotManual));
// If when you update this record a Lookup is requested, set to schedule lookup and schedule the lookup.
this.getField(BookingDetail.INVENTORY_STATUS_REQUEST).addListener(new CheckRequestRequiredHandler(BookingDetail.INVENTORY_STATUS_ID));
// If these change, re-request the booking
this.getField(BookingDetail.PRODUCT_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, converterNotProductManualTransport));
this.getField(BookingDetail.DETAIL_DATE).addListener(new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, converterNotProductManualTransport));
this.getField(BookingDetail.RATE_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, converterNotProductManualTransport));
this.getField(BookingDetail.CLASS_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, converterNotProductManualTransport));
this.getField(BookingDetail.DELETED).addListener(new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, converterNotProductManualTransport));
// If the info changes from valid AND the transport is not manual, change the info status to request required.
FieldConverter convIfProductStatusTrueAndNotManual = new AltFieldConverter(new RadioConverter(this.getField(BookingDetail.INFO_STATUS_ID), new Integer(CostStatus.VALID), true), converterNotProductManualTransport, Integer.toString(CostStatus.VALID));
this.getField(BookingDetail.INFO_STATUS_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, convIfProductStatusTrueAndNotManual));
this.getField(BookingDetail.INVENTORY_STATUS_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, convIfProductStatusTrueAndNotManual));
this.getField(BookingDetail.COST_STATUS_ID).addListener(new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, convIfProductStatusTrueAndNotManual));
// When a product booking is requested, this listener will set up the message
this.getField(BookingDetail.PRODUCT_STATUS_REQUEST).addListener(new CheckRequestRequiredHandler(BookingDetail.PRODUCT_STATUS_ID));

this.getField(BookingDetail.MARKUP_FROM_LAST).addListener(new CopyDataHandler(this.getField(BookingDetail.COST_STATUS_REQUEST), boolRequestRequiredFlag, converterNotCostManualTransport));
FieldDataScratchHandler fieldListener = null;
this.getField(BookingDetail.MARKUP_FROM_LAST).addListener(fieldListener = new FieldDataScratchHandler(null)
{
    public int fieldChanged(boolean bDisplayOption, int iMoveMode)
    {
        if (iMoveMode == DBConstants.SCREEN_MOVE)   // This is necessary if an override changes the repondsTo.
        {
            Object data = this.getOriginalData();
            float fOrig = 0;
            if (data instanceof Float)
                fOrig = ((Float)data).floatValue();
            float fCurrent = (float)this.getOwner().getValue();
            if (fCurrent != 0)
                if (fCurrent != fOrig)
            {
                double dCost = this.getOwner().getRecord().getField(BookingDetail.TOTAL_COST).getValue();
                dCost = Math.floor((dCost / (1 + fOrig)) * (1 + fCurrent) * 100 + 0.5) / 100;
                this.getOwner().getRecord().getField(BookingDetail.TOTAL_COST).setValue(dCost);
            }
            this.setOriginalData(this.getOwner().getData());
        }
        return super.fieldChanged(bDisplayOption, iMoveMode);
    }
});
fieldListener.setRespondsToMode(DBConstants.SCREEN_MOVE, true);

this.addListener(new UpdateTourStatusHandler(BookingDetail.INFO_STATUS_ID));
this.addListener(new UpdateTourStatusHandler(BookingDetail.INVENTORY_STATUS_ID));
this.addListener(new UpdateTourStatusHandler(BookingDetail.COST_STATUS_ID));
this.addListener(new UpdateTourStatusHandler(BookingDetail.PRODUCT_STATUS_ID));

this.addListener(new BookingDetailPriceChangeHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4663">
		<LastChanged>2012-02-01T10:03:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addLookupListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotel</MethodClassName>
		<LogicSource><![CDATA[super;

FieldListener dependentStateListener = this.getField(BookingDetail.PRODUCT_ID).getListener(CopyDataHandler.class);
BaseField fldExchange = this.getField(BookingDetail.EXCHANGE);
FieldListener fieldListener = null;
this.getField(BookingHotel.ROOM_COST).addListener(fieldListener = new CalcBalanceHandler(this.getField(BookingHotel.ROOM_COST_LOCAL), this.getField(BookingHotel.ROOM_COST), fldExchange, CalcBalanceHandler.MULTIPLY, false));
fieldListener.setRespondsToMode(DBConstants.READ_MOVE, true);
fieldListener.setDependentStateListener(dependentStateListener);
this.getField(BookingHotel.MEAL_COST).addListener(fieldListener = new CalcBalanceHandler(this.getField(BookingHotel.MEAL_COST_LOCAL), this.getField(BookingHotel.MEAL_COST), fldExchange, CalcBalanceHandler.MULTIPLY, false));
fieldListener.setRespondsToMode(DBConstants.READ_MOVE, true);
fieldListener.setDependentStateListener(dependentStateListener);

Boolean boolRequestRequiredFlag = Boolean.TRUE;

String strManualTransportID = Integer.toString(((ReferenceField)this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID)).getIDFromCode(MessageTransport.MANUAL));

Converter converterNotInfoManualTransport = new CheckConverter(this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID), strManualTransportID, null, false);
this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(converterNotInfoManualTransport));
Converter converterNotCostManualTransport = new CheckConverter(this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID), strManualTransportID, null, false);
this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(converterNotCostManualTransport));
Converter converterNotInventoryManualTransport = new CheckConverter(this.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID), strManualTransportID, null, false);
this.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(converterNotInventoryManualTransport));
Converter converterNotProductManualTransport = new CheckConverter(this.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID), strManualTransportID, null, false);
this.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(converterNotProductManualTransport));

// If any of these values change, you will have to re-lookup the price.
this.getField(BookingHotel.NIGHTS).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.INFO_STATUS_REQUEST), boolRequestRequiredFlag, converterNotInfoManualTransport));
fieldListener.setDependentStateListener(dependentStateListener);
this.getField(BookingHotel.NIGHTS).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.COST_STATUS_REQUEST), boolRequestRequiredFlag, converterNotCostManualTransport));
fieldListener.setDependentStateListener(dependentStateListener);
this.getField(BookingHotel.NIGHTS).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.INVENTORY_STATUS_REQUEST), boolRequestRequiredFlag, converterNotInventoryManualTransport));
fieldListener.setDependentStateListener(dependentStateListener);
// If this changes, re-request the booking
this.getField(BookingHotel.NIGHTS).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, converterNotProductManualTransport));
fieldListener.setDependentStateListener(dependentStateListener);

int mealPlan1 = this.getFieldSeq(BookingHotel.MEAL_PLAN_1ID);
int mealDays4 = this.getFieldSeq(BookingHotel.MEAL_PLAN_4_DAYS);
for (int iFieldSeq = mealPlan1; iFieldSeq <= mealDays4; iFieldSeq++)
{
    // If any of these values change, you will have to re-lookup the price.
    this.getField(iFieldSeq).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.COST_STATUS_REQUEST), boolRequestRequiredFlag, converterNotCostManualTransport));
    fieldListener.setDependentStateListener(dependentStateListener);
// No need to re-request the inventory on meal change
    // If this changes, re-request the booking
    this.getField(iFieldSeq).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, converterNotProductManualTransport));
    fieldListener.setDependentStateListener(dependentStateListener);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4664">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLand</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(BookingDetail.PRODUCT_TYPE_ID, ProductType.LAND_ID)); ]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4684">
		<LastChanged>2012-03-27T15:45:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription>Add the booking toolbar buttons to sync the profile records.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>ComponentParent toolbar, Record recProfile</MethodInterface>
		<MethodClassName>BookingPax</MethodClassName>
		<LogicSource><![CDATA[ResourceBundle resources = ((BaseApplication)recProfile.getRecordOwner().getTask().getApplication()).getResources(ResourceConstants.BOOKING_RESOURCE, true);
String strKey = "Select Passengers";
Converter converter = null;

String strCommand = Utility.addURLParam(null, DBParams.COMMAND, MenuConstants.LOOKUP);
ReferenceField fldProfileTypeID = (ReferenceField)recProfile.getField(Profile.PROFILE_TYPE_ID);
String strFieldName = fldProfileTypeID.getFieldName();
String strValue = Integer.toString(fldProfileTypeID.getIDFromCode("Contact"));
if (strValue != null)
    strCommand = Utility.addURLParam(strCommand, strFieldName, strValue);
Map<String,Object> properties = new HashMap<String,Object>();
properties.put(ScreenModel.DESC, resources.getString(strKey));
properties.put(ScreenModel.IMAGE, MenuConstants.LOOKUP);
properties.put(ScreenModel.COMMAND, strCommand);
properties.put(ScreenModel.TOOLTIP, resources.getString(strKey + "Tip"));
properties.put(ScreenModel.RECORD, recProfile);
BaseField.createScreenComponent(ScreenModel.CANNED_BOX, toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.ANCHOR_DEFAULT), toolbar, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);

strKey = "Add to Profile";
converter = new AddPaPaxConverter(null);
properties = new HashMap<String,Object>();
properties.put(ScreenModel.DESC, resources.getString(strKey));
properties.put(ScreenModel.IMAGE, Booking.BUTTON_LOCATION + "Passenger");
properties.put(ScreenModel.TOOLTIP, resources.getString(strKey + "Tip"));
BaseField.createScreenComponent(ScreenModel.BUTTON_BOX, toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.ANCHOR_DEFAULT), toolbar, converter, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4685">
		<LastChanged>2012-03-27T15:47:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarFields</MethodName>
		<LogicDescription>Add the pax count screen fields to this toolbar</LogicDescription>
		<MethodReturns/>
		<MethodInterface>ComponentParent toolbar, Record recBooking</MethodInterface>
		<MethodClassName>BookingPax</MethodClassName>
		<LogicSource><![CDATA[Converter converter = null;
converter = recBooking.getField(Booking.PAX);
ScreenComponent sField = converter.setupDefaultView(toolbar.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolbar, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = recBooking.getField(Booking.SINGLE_PAX);
sField = converter.setupDefaultView(toolbar.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = new RoomConverter(recBooking.getField(Booking.DOUBLE_PAX), (short)2);
sField = converter.setupDefaultView(toolbar.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = new RoomConverter(recBooking.getField(Booking.TRIPLE_PAX), (short)3);
sField = converter.setupDefaultView(toolbar.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = new RoomConverter(recBooking.getField(Booking.QUAD_PAX), (short)4);
sField = converter.setupDefaultView(toolbar.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = recBooking.getField(Booking.CHILDREN);
sField = converter.setupDefaultView(toolbar.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4686">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BookingPax recBookingPax = (BookingPax)this.getRecord(BookingPax.BOOKING_PAX_FILE);
recBookingPax.addToolbarButtons(toolScreen, this.getRecord(Profile.PROFILE_FILE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4687">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BookingPax recBookingPax = (BookingPax)this.getRecord(BookingPax.BOOKING_PAX_FILE);
recBookingPax.addToolbarButtons(toolScreen, this.getRecord(Profile.PROFILE_FILE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4688">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = super;

ToolScreen toolbar2 = new EmptyToolbar(this.getNextLocation(ScreenConstants.LAST_LOCATION, ScreenConstants.DONT_SET_ANCHOR), this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
BaseField converter = null;
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.GROSS);
ScreenComponent sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.NET);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.PRICING_STATUS_ID);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);

return toolbar;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4689">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportation</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(BookingDetail.PRODUCT_TYPE_ID, ProductType.TRANSPORTATION_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4690">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeader</MethodClassName>
		<LogicSource><![CDATA[super;

// Add code here]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4708">
		<LastChanged>2012-04-07T08:08:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getProductType</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>StatusSummaryField</MethodClassName>
		<LogicSource><![CDATA[BookingDetailModel recCustSaleDetail = (BookingDetailModel)((BaseField)this.getField()).getRecord();
String strProductType = recCustSaleDetail.getField(BookingDetailModel.PRODUCT_TYPE).toString();
if ((strProductType == null) || (strProductType.length() == 0))
    strProductType = ProductType.ITEM;
return strProductType;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4709">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getMaxLength</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatusDescConverter</MethodClassName>
		<LogicSource>return 30;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4710">
		<LastChanged>2013-07-03T16:33:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatusDescConverter</MethodClassName>
		<LogicSource><![CDATA[ResourceBundle resources = null;
if ((((BaseField)this.getField()).getRecord().getRecordOwner()) != null)
       if ((((BaseField)this.getField()).getRecord().getRecordOwner().getTask()) != null)
               if ((((BaseField)this.getField()).getRecord().getRecordOwner().getTask().getApplication()) != null)
       resources = ((BaseApplication)((BaseField)this.getField()).getRecord().getRecordOwner().getTask().getApplication()).getResources(ResourceConstants.BOOKING_RESOURCE, true);
String strProductType = this.getProductType();
if (resources != null)
       strProductType = resources.getString(this.getProductType());
int iStatus = (int)this.getValue();
boolean bNormalStatus = true;
if ((iStatus & (1 << BookingConstants.INFO_LOOKUP)) != 0)
{
    strProductType += ' ' + resources.getString(BookingConstants.INFO);
    bNormalStatus = false;
}
if ((iStatus & (1 << BookingConstants.COST_LOOKUP)) != 0)
{
    strProductType += ' ' + resources.getString(BookingConstants.COST);
    bNormalStatus = false;
}
if ((iStatus & (1 << BookingConstants.INVENTORY_LOOKUP)) != 0)
{
    strProductType += ' ' + resources.getString(BookingConstants.INVENTORY);
    bNormalStatus = false;
}
if ((iStatus & (1 << BookingConstants.PRODUCT_LOOKUP)) != 0)
{
    strProductType += ' ' + resources.getString(BookingConstants.PRODUCT);
    bNormalStatus = false;
}
if (!bNormalStatus)
    strProductType += ' ' + resources.getString("Pending");
return strProductType;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4711">
		<LastChanged>2012-04-06T22:56:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getProductType</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>StatusDescConverter</MethodClassName>
		<LogicSource><![CDATA[BookingDetailModel recCustSaleDetail = (BookingDetailModel)((BaseField)this.getField()).getRecord();
String strProductType = recCustSaleDetail.getField(BookingDetailModel.PRODUCT_TYPE).toString();
if ((strProductType == null) || (strProductType.length() == 0))
    strProductType = ProductType.ITEM;
return strProductType;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4712">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>WriteOnMatchHandler</MethodName>
		<LogicDescription>Write the record if this field is changed to match this data.</LogicDescription>
		<MethodReturns>null, bRefreshAfterWrite</MethodReturns>
		<MethodInterface>Object objToMatch, boolean bRefreshAfterWrite</MethodInterface>
		<MethodClassName>WriteOnMatchHandler</MethodClassName>
		<LogicSource>m_objToMatch = objToMatch;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4713">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>WriteOnMatchHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bMatch = false;
if (this.getOwner().getData() == null)
{
    if (m_objToMatch == null)
        bMatch = true;
}
else if (this.getOwner().getData().equals(m_objToMatch))
    bMatch = true;
if (bMatch)
    return super;
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4758">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>isQueryComplete</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetProductCostHandler</MethodClassName>
		<LogicSource><![CDATA[if (!m_recProductVars.getField(ProductScreenRecord.DETAIL_DATE).isNull())
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4760">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setLookupProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetProductCostHandler</MethodClassName>
		<LogicSource>((ProductScreenRecord)screenRecord).setPriceProperties(map, (Product)recProduct);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4762">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setupScreenStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetProductCostHandler</MethodClassName>
		<LogicSource><![CDATA[if (iStatus == CostStatus.VALID)
{
//    double dProductCost = recProduct.getField(Product.PRODUCT_COST).getValue();
//    recProduct.getField(Product.PRODUCT_COST).setValue(dProductCost);
}
else
    recProduct.getField(Product.PRODUCT_COST).setData(null);
recProduct.getField(Product.DISPLAY_COST_STATUS_ID).setValue(iStatus);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4773">
		<LastChanged>2012-03-27T21:02:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MealsHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getOwner() != null)
{
    RecordOwner screen = this.getOwner().getRecord().getRecordOwner();
    if (screen != null) if (screen instanceof GridScreenParent)
    {
        this.getOwner().setSelected(false);
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4774">
		<LastChanged>2012-04-12T11:24:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductMessageDesc</MethodClassName>
		<LogicSource><![CDATA[if (this.getMessage().getMessageHeader() != null)
    if (this.getMessage().getMessageHeader().get(MessageTransport.INITIAL_MESSAGE_DATA_STATUS) != null)
    {
        try {
            return ((Integer)Converter.convertObjectToDatatype(this.getMessage().getMessageHeader().get(MessageTransport.INITIAL_MESSAGE_DATA_STATUS), Integer.class, new Integer(BaseDataStatusModel.DATA_VALID))).intValue();
        } catch (Exception ex) {
            return BaseDataStatusModel.DATA_VALID;    // Never
        }
    }
return super;    // So far, the data is valid]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4775">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription><![CDATA[Initialize the fields in this record to prepare for this message.
Also, do any other preparation needed before sending this message.
@param record The record to initialize
@return An error code if there were any problems]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>BaseProductMessageDesc</MethodClassName>
		<LogicSource><![CDATA[return DBConstants.NORMAL_RETURN;	// Override this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4777">
		<LastChanged>2012-04-12T06:41:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>checkRequestRequired</MethodName>
		<LogicDescription><![CDATA[Check if this request is required and process the message.
Then update the status to reflect the new status of the update.
Note: Usually you don't call this method directly, the best way to check
for a request is to set the corresponding flag (ie., InfoStatusRequest) to true.
@param iStatusType The status field to update.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>String iStatusType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[String iFieldSeq = this.checkRequiredParams(iStatusType);  // Quickly check the fields to keep from building a message every time
if (iFieldSeq != null)
{
    this.getField(iStatusType).setValue(BaseDataStatus.DATA_REQUIRED, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    String strError = "Data required in the {0} field";
    if (this.getTask() != null)
        if (this.getTask().getApplication() != null)
            strError = this.getTask().getApplication().getResources(ThinResourceConstants.ERROR_RESOURCE, true).getString(strError);
    strError = MessageFormat.format(strError, this.getField(iFieldSeq).getFieldDesc());
    this.setErrorMessage(iStatusType, strError);
    return;   // Don't even start, we still need some basic information.
}
if (iStatusType == BookingDetail.INFO_STATUS_ID)
    if (this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).isNull())
{
    int iDefaultInfoTransport = ((ReferenceField)this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID)).getIDFromCode(MessageTransport.DEFAULT);
    this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).setValue(iDefaultInfoTransport);
}
BaseProductMessageDesc message = (BaseProductMessageDesc)this.checkMessageRequired(iStatusType);
if (message == null)
    return;
int iStatus = (int)this.getField(iStatusType).getValue();

int iErrorCode = message.initForMessage(this);
if (iErrorCode != DBConstants.NORMAL_RETURN)  // Clear the product cost info
{ // Handle error in initialization.
    String strErrorMessage = "Error on message initialization";
    if (this.getRecordOwner() != null)
        if (this.getRecordOwner().getTask() != null)
            strErrorMessage = this.getRecordOwner().getTask().getLastError(iErrorCode);
    ((ProductMessageData)message.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE)).setRecordDataStatus(this, iStatusType, BaseDataStatus.NOT_VALID);
    this.setErrorMessage(iStatusType, strErrorMessage);
    return;   // Don't even start, error initializing.
}
TrxMessageHeader trxMessageHeader = (TrxMessageHeader)message.getMessage().getMessageHeader();
if (MessageTransport.MANUAL.equalsIgnoreCase((String)trxMessageHeader.get(MessageTransport.SEND_MESSAGE_BY_PARAM)))
{
    // Manually sent messages are not changed. The user sets the message status manually.
}
else
{
    if (MessageTransportTypeField.MANUAL_RESPONSE.equals(trxMessageHeader.get(MessageTransport.TRANSPORT_TYPE_PARAM)))
    {   // If you are looking for a manual lookup, make sure I specifically say it is okay.
        iStatus = BaseDataStatus.MANUAL_REQUEST_REQUIRED; // Can't do a manual lookup by default (takes too long).
        if (DBConstants.TRUE.equals(trxMessageHeader.get(MessageTransport.MANUAL_RESPONSE_PARAM)))
            iStatus = BaseDataStatus.MANUAL_REQUEST_SENT; // Unless you specifically ask for it.
    }
    else
        iStatus = BaseDataStatus.REQUEST_SENT;
    ((ProductMessageData)message.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE)).setRecordDataStatus(this, iStatusType, iStatus);
    if ((iStatus == BaseDataStatus.MANUAL_REQUEST_SENT) || (iStatus == BaseDataStatus.REQUEST_SENT))
    {   // Only lookup if automatic
        try {
            this.addListener(new SendMessageAfterUpdateHandler(message.getMessage()));
            Record recTour = ((ReferenceField)this.getBooking(true).getField(Booking.TOUR_ID)).getReference();
            recTour.writeAndRefresh();
            ((Booking)this.getBooking(true)).writeAndRefresh();
            this.writeAndRefresh();
            if (this.getListener(SendMessageAfterUpdateHandler.class) != null) // Just in case write and refresh didn't need to write this (also frees listener)
                this.getListener(SendMessageAfterUpdateHandler.class).doRecordChange(null, DBConstants.AFTER_UPDATE_TYPE, DBConstants.DISPLAY);
        } catch (DBException ex) {
            ex.printStackTrace();
        } finally {
            if (this.getListener(SendMessageAfterUpdateHandler.class) != null) // Just in case
                this.removeListener(this.getListener(SendMessageAfterUpdateHandler.class), true);
        }
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4781">
		<LastChanged>2012-05-27T06:30:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckRequestRequiredHandler</MethodClassName>
		<LogicSource><![CDATA[if (iMoveMode == DBConstants.SCREEN_MOVE)
	if (this.getOwner().getState() == true)
{ // Call on screen moves only
    BookingDetail recBookingDetail = (BookingDetail)this.getOwner().getRecord();
    recBookingDetail.checkRequestRequired(m_fieldTypeToCheck);
    recBookingDetail.getField(recBookingDetail.getFieldSeq(m_fieldTypeToCheck) + BookingHotel.MESSAGE_REQUEST_OFFSET).setState(false);	// Reset flag
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4785">
		<LastChanged>2012-05-26T23:54:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductResponseMsgReplyInProcessor</MethodClassName>
		<LogicSource><![CDATA[BaseMessage messageOrig = this.getOriginalMessage(internalMessage);
BaseProductMessageDesc message = (BaseProductMessageDesc)internalMessage.getMessageDataDesc(null);
if (messageOrig != null)
{
    if (messageOrig.getMessageDataDesc(null) != null)
        if (messageOrig.getMessageDataDesc(null).getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE) instanceof ProductMessageData)
    {   // Always
        boolean bSuccess = false;
        for (int index = 1; ; index++)
        {
            ProductMessageData productRequest = (ProductMessageData)messageOrig.getMessageDataDesc(null).getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
            productRequest.setDataIndex(index, null);
            if ((productRequest.get(BookingDetail.PRODUCT_ID) == null) && (productRequest.get(Product.CODE) == null))
                break;  // End of product descriptions
            ProductResponseMessageData productResponse = (ProductResponseMessageData)message.getMessageDataDesc(null).getMessageDataDesc(BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);
            productResponse.setDataIndex(index, null);  // This is where the response to that message is.
            
            String strRecord = (String)productRequest.get(DBParams.RECORD);
            if ((strRecord == null)
                || (!strRecord.equals(this.getMainRecord().getTableNames(false))))
                    return null;     // ERROR
            String strObjectID = (String)productRequest.get(DBConstants.STRING_OBJECT_ID_HANDLE);
            String strSentMessageKey = productRequest.getMessageKey(null).toString();
            Record record = this.getRecord(strRecord);
            try   {
                if ((record.getOpenMode() & (DBConstants.LOCK_TYPE_MASK | DBConstants.LOCK_STRATEGY_MASK)) == 0)
                    if (this.getTask() != null)
                        record.setOpenMode(record.getOpenMode() | this.getTask().getDefaultLockType(record.getDatabaseType()));  // Never
                record = record.setHandle(strObjectID, DBConstants.OBJECT_ID_HANDLE);
                if (record != null)
                {   // This will also notify anyone listening for this change.
                    String strOrigMessageKey = record.getField(record.getFieldSeq(this.getStatusFieldName()) + BookingDetail.MESSAGE_KEY_OFFSET).toString();
                    int iCurrentStatus = (int)record.getField(this.getStatusFieldName()).getValue();
                    if (strSentMessageKey != null)
                        if (strSentMessageKey.equals(strOrigMessageKey))
                        {
                            if ((iCurrentStatus == BaseStatus.REQUEST_SENT) || (iCurrentStatus == BaseStatus.MANUAL_REQUEST_SENT))
                            {
                                record.edit();
                                int iErrorCode = message.getRawRecordData(record);
                                if (iErrorCode == DBConstants.NORMAL_RETURN)
                                {   // Always
                                    int iStatus = productResponse.getMessageDataStatus();
                                    if (iStatus == BaseDataStatus.NO_STATUS)
                                        iStatus = ((BaseProductResponse)message.getMessageDataDesc(null)).getMessageDataStatus();   // Use the message status
                                    String iFieldSeq = this.getStatusFieldName();
                                    iErrorCode = this.setRecordDataStatus(record, iFieldSeq, iStatus, productRequest);  // Make sure all the detail has this status
                                    if (record.getEditMode() == DBConstants.EDIT_IN_PROGRESS) // Previous action could have u/d record
                                        record.set();
                                }
                                bSuccess = true;
                            }
                            else
                                Utility.getLogger().warning("Message already handled, status = " + iCurrentStatus);
                        }
                        else
                            Utility.getLogger().warning("Message already handled, strSentMessageKey= "+ strSentMessageKey + " strOrigMessageKey= " + strOrigMessageKey);
                    this.updateLogFiles(internalMessage, bSuccess);  // Need to change log status to SENTOK (also associate return message log trx ID) (todo)
                }
            } catch (DBException ex)    {
                ex.printStackTrace();
            }
        }
    }
}
return null;    // No reply from a reply]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4787">
		<LastChanged>2012-04-11T10:09:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandMessageData</MethodClassName>
		<LogicSource><![CDATA[super;
this.removeMessageDataDesc(BookingDetailModel.RATE_ID);
this.removeMessageDataDesc(BookingDetailModel.CLASS_ID);
this.addMessageFieldDesc(BookingDetailModel.RATE_ID, Integer.class, MessageFieldDesc.OPTIONAL, null);
this.addMessageFieldDesc(BookingDetailModel.CLASS_ID, Integer.class, MessageFieldDesc.OPTIONAL, null);
this.addMessageFieldDesc(ProductModel.ROOM_TYPE_PARAM, Short.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.COMPOUND_PARAM | PaxCategoryModel.CHILD_ID, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4790">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandMessageData</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4793">
		<LastChanged>2012-04-11T00:10:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
((Record)record).getField(BookingLandModel.PP_COST).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
((Record)record).getField(BookingLandModel.VARIES_CODE).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
((Record)record).getField(BookingLandModel.VARIES_QTY).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
((Record)record).getField(BookingLandModel.VARIES_COST).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
((Record)record).getField(BookingLandModel.PMC_CUTOFF).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
((Record)record).getField(BookingLandModel.PMC_COST).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
((Record)record).getField(BookingLandModel.SIC_COST).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4794">
		<LastChanged>2012-04-11T10:09:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
BookingLandModel recBookingLand = (BookingLandModel)record;
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4804">
		<LastChanged>2012-04-12T07:47:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>250</Sequence>
		<MethodName>setDetailProductInfo</MethodName>
		<LogicDescription><![CDATA[Set-up the current product info.
If properties are supplied, look in the properties for new values.
Else, if the target values are not already set, use the default values
supplied in the tour and booking records.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Map&lt;String,Object&gt; properties, TourSubModel recTourHeaderDetail, BookingModel recBooking, TourModel recTour, Field fldPaxID, Field fldQaID, Field fldModID</MethodInterface>
		<MethodClassName>BookingSub</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = this.setDetailProductFields((TourSub)recTourHeaderDetail, (Booking)recBooking, (Tour)recTour, (BaseField)fldPaxID, (BaseField)fldQaID, (BaseField)fldModID);
if (iErrorCode == DBConstants.NORMAL_RETURN)
    if (properties != null)
        iErrorCode = this.setDetailProductProperties(properties);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="4805">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>setDetailProductProperties</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BookingSub</MethodClassName>
		<LogicSource><![CDATA[// Do something in the concrete classes
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4809">
		<LastChanged>2012-05-27T06:30:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CheckRequestRequiredHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>String fieldTypeToCheck</MethodInterface>
		<MethodClassName>CheckRequestRequiredHandler</MethodClassName>
		<LogicSource><![CDATA[super;
m_fieldTypeToCheck = fieldTypeToCheck;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4810">
		<LastChanged>2012-04-12T10:49:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductRateRequestMessageInProcessor</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequestInMessage = (ProductRequest)internalMessage.getMessageDataDesc(null);

Product recProduct = (Product)this.getMainRecord();
if (recProduct == null)
    recProduct = this.getProductRecord();
ProductMessageData productMessageDesc = (ProductMessageData)productRequestInMessage.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
BaseMessage messageReply = null;
if (productMessageDesc != null)
{
    for (int index = 1; ;index++)
    {
        productMessageDesc.setNodeIndex(index, null);
        if ((productMessageDesc.get(BookingDetail.PRODUCT_ID) == null) && (productMessageDesc.get(Product.CODE) == null))
            break;  // End of product descriptions
        if (!(productMessageDesc.getProduct(recProduct)))
        {   // Error, product not found
            // pend(don)
        }
        messageReply = (BaseMessage)recProduct.processCostRequestInMessage(internalMessage, messageReply);
    }
}
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4811">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription><![CDATA[Create the product record.
Override in the concrete classes]]></LogicDescription>
		<MethodReturns>Product</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductRateRequestMessageInProcessor</MethodClassName>
		<LogicSource>return null;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4812">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Hotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4813">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Land(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4816">
		<LastChanged>2012-04-11T16:00:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequest</MethodClassName>
		<LogicSource><![CDATA[record.getField(BookingDetailModel.TOTAL_COST).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
record.getField(BookingDetailModel.TOTAL_COST_LOCAL).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4817">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateRequest</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4818">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription><![CDATA[Create the product record.
Override in the concrete classes.]]></LogicDescription>
		<MethodReturns>Product</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductAvailRequestMessageInProcessor</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4819">
		<LastChanged>2012-04-12T10:49:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductAvailRequestMessageInProcessor</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequestInMessage = (ProductRequest)internalMessage.getMessageDataDesc(null);

Product recProduct = (Product)this.getMainRecord();
if (recProduct == null)
    recProduct = this.getProductRecord();
ProductMessageData productMessageDesc = (ProductMessageData)productRequestInMessage.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
BaseMessage messageReply = null;
if (productMessageDesc != null)
{
    for (int index = 1; ;index++)
    {
        productMessageDesc.setNodeIndex(index, null);
        if ((productMessageDesc.get(BookingDetail.PRODUCT_ID) == null) && (productMessageDesc.get(Product.CODE) == null))
            break;  // End of product descriptions
        if (!(productMessageDesc.getProduct(recProduct)))
        {   // Error, product not found
            // pend(don)
        }
        messageReply = (BaseMessage)recProduct.processAvailabilityRequestInMessage(internalMessage, messageReply, null);
    }
}
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4820">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandAvailRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Land(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4821">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Hotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4822">
		<LastChanged>2012-04-12T09:07:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>280</Sequence>
		<MethodName>processAvailabilityRequestInMessage</MethodName>
		<LogicDescription><![CDATA[Check the inventory for this detail.
@param message Contains all the update data for this check
@param fldTrxID If null, just check the inventory, if not null, update the inventory using this BookingDetail trxID]]></LogicDescription>
		<MethodReturns>Message</MethodReturns>
		<MethodInterface>Message messageIn, Message messageReply, Field fldTrxID</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequest = (ProductRequest)((BaseMessage)messageIn).getMessageDataDesc(null);
ProductMessageData messageData = (ProductMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
PassengerMessageData bookingMessageData = (PassengerMessageData)productRequest.getMessageDataDesc(ProductRequest.PASSENGER_MESSAGE);
Date dateTarget = messageData.getTargetDate();
int iTargetAmount = bookingMessageData.getTargetPax();
if (productRequest instanceof CancelRequest)    // CancelRequest (then pax = 0)
    iTargetAmount = 0;
if (RequestType.BOOKING_CANCEL.equalsIgnoreCase(productRequest.getRequestType()))
    iTargetAmount = 0;
int iRateID = messageData.getRateTypeID();
int iClassID = messageData.getRateClassID();
Object objOtherID = messageData.get(Product.OTHER_ID_PARAM);
if (objOtherID == null)
    objOtherID = InventoryModel.NO_OTHER;
int iOtherID = Integer.parseInt(objOtherID.toString());

BaseProductResponse responseMessage = null;
if (messageReply == null)
    messageReply = (BaseMessage)this.getMessageProcessInfo().createReplyMessage((BaseMessage)messageData.getMessage());
responseMessage = (BaseProductResponse)((BaseMessage)messageReply).getMessageDataDesc(null);
responseMessage.moveRequestInfoToReply(messageIn);

// First, calculate the room cost
InventoryModel recInventory = this.getInventory().getAvailability(this, dateTarget, iRateID, iClassID, iOtherID);
int iAvailability = InventoryModel.NO_INVENTORY;
if (recInventory != null)
    iAvailability = (int)recInventory.getField(InventoryModel.AVAILABLE).getValue();
if (responseMessage instanceof ProductAvailabilityResponse)
{
    ProductResponseMessageData responseMessageData = (ProductResponseMessageData)responseMessage.getMessageDataDesc(ProductAvailabilityResponse.PRODUCT_RESPONSE_MESSAGE);
    responseMessageData.setAvailability(iAvailability);
}

int iInventoryStatus = InventoryStatus.VALID;
String strErrorMessage = null;
if (iAvailability < iTargetAmount)
{
    strErrorMessage = InventoryStatus.NO_INVENTORY_ERROR_MESSAGE;
    if (this.getRecordOwner() != null)
        if (this.getRecordOwner().getTask() != null)
    {
        strErrorMessage = this.getRecordOwner().getTask().getApplication().getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(strErrorMessage);
        strErrorMessage = MessageFormat.format(strErrorMessage, iAvailability, dateTarget);
    }
    iInventoryStatus = InventoryStatus.NOT_VALID;
}
else if (iAvailability == InventoryModel.NO_INVENTORY)
{
    strErrorMessage = InventoryStatus.LOOKUP_ERROR_MESSAGE;
    if (this.getRecordOwner() != null)
        if (this.getRecordOwner().getTask() != null)
            strErrorMessage = this.getRecordOwner().getTask().getApplication().getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(strErrorMessage);
    iInventoryStatus = InventoryStatus.ERROR;
}
else
{ // Okay
    if (fldTrxID != null) // If in update mode, update the availability
    {
        boolean bIsDeleted = false;   // todo (don) Fix this.
        int iErrorCode = recInventory.updateAvailability(iTargetAmount, fldTrxID, 0, bIsDeleted, null);
        if (iErrorCode != DBConstants.NORMAL_RETURN)
        {
            iInventoryStatus = BaseDataStatus.NOT_VALID;
            if ((this.getRecordOwner() != null)
                && (this.getRecordOwner().getTask() != null))
                    strErrorMessage = this.getRecordOwner().getTask().getLastError(iErrorCode);
            else
                strErrorMessage = "Inventory not available";
        }
    }
        
}
this.getField(Product.DISPLAY_INVENTORY_STATUS_ID).setValue(iInventoryStatus);
responseMessage.setMessageDataStatus(iInventoryStatus);
if (strErrorMessage != null)
    responseMessage.setMessageDataError(strErrorMessage);

ProductResponseMessageData responseMessageData = (ProductResponseMessageData)responseMessage.getMessageDataDesc(ProductRateResponse.PRODUCT_RESPONSE_MESSAGE);
responseMessageData.put(BookingDetailModel.PRODUCT_ID, messageData.get(BookingDetailModel.PRODUCT_ID));
responseMessageData.setMessageDataStatus(iInventoryStatus);   // Status for this segment
if (strErrorMessage != null)
    responseMessageData.setMessageDataError(strErrorMessage);

return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="4823">
		<LastChanged>2012-02-01T03:28:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getStatusFieldName</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductResponseMsgReplyInProcessor</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4826">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelAvailMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingHotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4828">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandAvailMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingLand(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4832">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StatusHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getOwner() != null)
{
    Record recCustSaleDetail = this.getOwner().getRecord();
    recCustSaleDetail.getField(BookingDetail.COST_STATUS_ID).addListener(new InitOnChangeHandler(this.getOwner()));
    recCustSaleDetail.getField(BookingDetail.INVENTORY_STATUS_ID).addListener(new InitOnChangeHandler(this.getOwner()));
    recCustSaleDetail.getField(BookingDetail.INFO_STATUS_ID).addListener(new InitOnChangeHandler(this.getOwner()));
    recCustSaleDetail.getField(BookingDetail.PRODUCT_STATUS_ID).addListener(new InitOnChangeHandler(this.getOwner()));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4837">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CompanyInfo</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new ControlFileHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4849">
		<LastChanged>2012-04-12T10:49:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingRequestMessageInProcessor</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequestInMessage = (ProductRequest)internalMessage.getMessageDataDesc(null);

Product recProduct = (Product)this.getMainRecord();
if (recProduct == null)
    recProduct = this.getProductRecord();
ProductMessageData productMessageDesc = (ProductMessageData)productRequestInMessage.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
BaseMessage messageReply = null;
if (productMessageDesc != null)
{
    for (int index = 1; ;index++)
    {
        productMessageDesc.setNodeIndex(index, null);
        if ((productMessageDesc.get(BookingDetail.PRODUCT_ID) == null) && (productMessageDesc.get(Product.CODE) == null))
            break;  // End of product descriptions
        if (!(productMessageDesc.getProduct(recProduct)))
        {   // Error, product not found
            // pend(don)
        }
        messageReply = (BaseMessage)recProduct.processBookingRequestInMessage(internalMessage, messageReply);
    }
}
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4850">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>Product</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductBookingRequestMessageInProcessor</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4851">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Hotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4852">
		<LastChanged>2012-04-12T09:13:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>290</Sequence>
		<MethodName>processBookingRequestInMessage</MethodName>
		<LogicDescription><![CDATA[This is for products that can be externally booked.
@return the booking reply message with the proper params.]]></LogicDescription>
		<MethodReturns>Message</MethodReturns>
		<MethodInterface>Message messageIn, Message messageReply</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequest = (ProductRequest)((BaseMessage)messageIn).getMessageDataDesc(null);
RecordOwner recordOwner = this.findRecordOwner();
ProductMessageData messageData = (ProductMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
ProductBookingResponse responseMessage = null;

if (messageData.getProduct(this))
{
    String strBookingNo = null;
    int iMessageStatus = BaseDataStatus.OKAY;
    String strErrorMessage = null;

    Date dateTarget = messageData.getTargetDate();
    DateField fldDepDate = new DateField(null, "TargetDate", DBConstants.DEFAULT_FIELD_LENGTH, DBConstants.BLANK, null);
    fldDepDate.setDate(dateTarget, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    dateTarget = fldDepDate.getDateTime();  // Make sure module date matches departure date.

    if (messageReply == null)
    {
        messageReply = new TreeMessage(null, null);
        responseMessage = this.getProductBookingResponse(productRequest.getRequestType(), messageReply, null);
    }
    else
        responseMessage = (ProductBookingResponse)((BaseMessage)messageReply).getMessageDataDesc(null);
    responseMessage.moveRequestInfoToReply(messageIn);

    String strMessageTransportID = null;
    if (productRequest.getMessage().getMessageHeader() != null)
        strMessageTransportID = (String)productRequest.getMessage().getMessageHeader().get(MessageTransport.TRANSPORT_ID_PARAM);
    BookingDetailModel recBookingDetail = this.getBookingDetail(this.findRecordOwner());
    MessageTransport recMessageTransport = new MessageTransport(this.findRecordOwner());
    boolean bIsDirectTransport = true;
    if (strMessageTransportID != null)
        if (recMessageTransport.getMessageTransport(strMessageTransportID) != null)
            bIsDirectTransport = recMessageTransport.isDirectTransport();
    recMessageTransport.free();
    if (bIsDirectTransport)
    { // If direct DO NOT create a new booking (this detail is already part of a booking), Just reduce the inventory and return ok
        iMessageStatus = BaseDataStatus.OKAY;
        if (RequestType.BOOKING_CANCEL.equalsIgnoreCase(productRequest.getRequestType()))
            iMessageStatus = BaseDataStatus.CANCELED;
    }
    else
    { 
        // Now create a new booking from the data passed in
        BookingModel recBooking = (BookingModel)Record.makeRecordFromClassName(BookingModel.THICK_CLASS, recordOwner);
        TourModel recTour = (TourModel)Record.makeRecordFromClassName(TourModel.THICK_CLASS, recordOwner);
        BookingControl recBookingControl = new BookingControl(recordOwner);
        ProfileControl recProfileControl = new ProfileControl(recordOwner);
        recBooking.addControlDefaults(recBookingControl, recProfileControl);
    
        recBookingDetail.addDetailBehaviors(recBooking, recTour);

        try {
            if (RequestType.BOOKING_ADD.equalsIgnoreCase(productRequest.getRequestType()))
            {
                recBooking.getTable().addNew();
        
                TourHeader recTourHeader = this.getBookingTourHeader(recBookingControl);
                recBooking.setupDefaultDesc(recTourHeader, fldDepDate);
                int iErrorCode = recTour.setupTourFromHeader(recTourHeader, fldDepDate, recBooking.getField(BookingModel.CODE).toString(), recBooking.getField(BookingModel.DESCRIPTION).toString());
                if (iErrorCode != DBConstants.NORMAL_RETURN)
                    return null;
                ((BaseField)recBooking.getField(BookingModel.TOUR_ID)).addListener(new CalcBookingDatesHandler((Record)recTour, recTourHeader));
                ((BaseField)recBooking.getField(BookingModel.TOUR_ID)).moveFieldToThis((BaseField)recTour.getField(TourModel.ID));
        
                recBooking.getTable().add(recBooking);
                strBookingNo = recBooking.getTable().getLastModified(DBConstants.OBJECT_ID_HANDLE).toString();
                recBooking.getTable().setHandle(strBookingNo, DBConstants.OBJECT_ID_HANDLE);
                recBooking.getTable().edit();
                
                BookingAnswerModel recBookingAnswer = null;  // This causes addTourDetail to resolve the answers automatically
                BookingPaxModel recBookingPax = null;
                iErrorCode = ((BookingModel)recBooking).addTourDetail(recTour, recTourHeader, recBookingPax, recBookingAnswer, dateTarget, recBooking.getField(BookingModel.ASK_FOR_ANSWER));
                if (iErrorCode != DBConstants.NORMAL_RETURN)
                    return null;

                this.addMessageBookingDetail(recBookingDetail, recBooking, recTour, strMessageTransportID, productRequest);

                recBooking.getField(BookingModel.BOOKING_STATUS_ID).setValue(BookingStatus.OKAY); // Make sure all downline components are ordered
                recTour.refreshToCurrent(DBConstants.AFTER_UPDATE_TYPE, false);  // Make sure I have the latest copy
                recTour.getField(TourModel.ORDER_COMPONENTS).setState(true);     // Book = Order Components! (just in case the previous line didn't do this)
            }
            else
            {
                strBookingNo = (String)messageData.get(BookingDetailModel.REMOTE_BOOKING_NO);
                if ((strBookingNo == null) || (strBookingNo.length() == 0))
                {   
                    iMessageStatus = BaseDataStatus.NOT_VALID;
                    strErrorMessage = "No booking number supplied";
                }
                else
                {
                    recBooking.getField(BookingModel.ID).setString(strBookingNo);
                    int iOldKeyArea = recBooking.getDefaultOrder();
                    recBooking.setKeyArea(BookingModel.ID_KEY);
                    if (!recBooking.getTable().seek(null))
                    {
                        iMessageStatus = BaseDataStatus.NOT_VALID;
                        strErrorMessage = "Invalid booking number supplied";
                    }
                    else
                    {
                        recTour = (TourModel)((ReferenceField)recBooking.getField(BookingModel.TOUR_ID)).getReference();
                        if ((recTour == null) ||
                                ((recTour.getEditMode() != DBConstants.EDIT_CURRENT) && (recTour.getEditMode() != DBConstants.EDIT_IN_PROGRESS)))
                        {   // Never
                            iMessageStatus = BaseDataStatus.NOT_VALID;
                            strErrorMessage = "No tour associated with this booking";
                        }
                    }
                    ((Record)recBooking).setKeyArea(iOldKeyArea);
                    
                    if (iMessageStatus == BaseDataStatus.OKAY)
                    {
                        if (RequestType.BOOKING_CHANGE.equalsIgnoreCase(productRequest.getRequestType()))
                        {
                            this.changeMessageBookingDetail(recBookingDetail, recBooking, recTour, strMessageTransportID, productRequest);
                        }
                        else // if (RequestType.BOOKING_CANCEL.equalsIgnoreCase(message.getRequestType()))
                        {
                            int iCancelledStatusID = ((ReferenceField)recBooking.getField(BookingModel.BOOKING_STATUS_ID)).getIDFromCode(BookingStatus.CANCELLED_CODE);
                            recBooking.getField(BookingModel.BOOKING_STATUS_ID).setValue(iCancelledStatusID);
                        }
                    }
                }
            }

            if (iMessageStatus == BaseDataStatus.OKAY)
            {
                // Return the confirmation number
                ProductResponseMessageData responseMessageData = (ProductResponseMessageData)responseMessage.getMessageDataDesc(ProductRateResponse.PRODUCT_RESPONSE_MESSAGE);
                recBookingDetail.refreshToCurrent(DBConstants.AFTER_UPDATE_TYPE, false);
                responseMessageData.handlePutRawRecordData(recBookingDetail);

                responseMessageData.setRemoteBookingNo(strBookingNo);
                iMessageStatus = (int)recTour.getField(TourModel.TOUR_STATUS_ID).getValue();
                long iTimeoutMS = (long)recBookingControl.getField(BookingControl.REMOTE_WAIT_TIME).getValue() * 1000;
                if (BaseStatus.isWaiting(iMessageStatus))
                {
                    // Setup tour status listener
                    WaitForFieldChangeHandler listener = new WaitForFieldChangeHandler(iTimeoutMS);
                    ((BaseField)recTour.getField(TourModel.TOUR_STATUS_ID)).addListener(listener);
                    recTour.refreshToCurrent(DBConstants.AFTER_UPDATE_TYPE, false); // Start with the most recent version
                    iMessageStatus = (int)recTour.getField(TourModel.TOUR_STATUS_ID).getValue();
                // Wait for the status to change (or timeout)
                    int iErrorCode = DBConstants.NORMAL_RETURN;
                    while (BaseStatus.isWaiting(iMessageStatus))
                    {
                        iErrorCode = listener.waitForChange();
                        if (iErrorCode == WaitForFieldChangeHandler.TIMEOUT_ERROR)
                            break;
                        iMessageStatus = (int)recTour.getField(TourModel.TOUR_STATUS_ID).getValue();
                    }
                    if (BaseStatus.isWaiting(iMessageStatus))
                    {
                        strErrorMessage = null;
                        if (recBookingDetail != null)
                            if ((recBookingDetail.getEditMode() == DBConstants.EDIT_CURRENT) || (recBookingDetail.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
                                strErrorMessage = recBookingDetail.getErrorMessage(BookingDetailModel.PRODUCT_STATUS_ID);
                        if ((strErrorMessage == null) || (strErrorMessage.length() == 0))
                            strErrorMessage = ((ReferenceField)recTour.getField(TourModel.TOUR_STATUS_ID)).getReference().getField(BaseDataStatus.DESCRIPTION).toString();
                    }
                }
                // Don't need to transfer the cost since you got it on the costing lookup
                // todo(don) may want to transfer cost and line items for client comparison later
                //msgBookingRateResponse.setProductCost(recBooking.getField(Booking.GROSS).getValue());
                //msgBookingRateResponse.putRawLineItemData(recBooking);
        
                if (recTour.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
                    recTour.getTable().set(recTour);
                if (recBooking.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
                    recBooking.getTable().set(recBooking);
            }
        } catch (DBException ex) {
            ex.printStackTrace();
        } finally {
            recProfileControl.free();
            recBookingControl.free();
            recTour.free();
            recBooking.free();
            fldDepDate.free();
        }
    }
    responseMessage.setMessageDataStatus(iMessageStatus);
    if (strErrorMessage != null)
        responseMessage.setMessageDataError(strErrorMessage);

    ProductResponseMessageData responseMessageData = (ProductResponseMessageData)responseMessage.getMessageDataDesc(ProductRateResponse.PRODUCT_RESPONSE_MESSAGE);
    responseMessageData.put(BookingDetailModel.PRODUCT_ID, messageData.get(BookingDetailModel.PRODUCT_ID));
    responseMessageData.setMessageDataStatus(iMessageStatus);   // Status for this segment
    if (strErrorMessage != null)
        responseMessageData.setMessageDataError(strErrorMessage);
    
    recBookingDetail.free();
}
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4853">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelBookingMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingHotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4855">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelBookingMsgReplyInProcessor</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4856">
		<LastChanged>2012-04-12T12:16:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
if (iStatus == BaseDataStatusModel.DATA_VALID)
    iStatus = this.checkBookingRequestParams((Record)record);
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4857">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>280</Sequence>
		<MethodName>processBookingRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4858">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OperationTypeField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4859">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OperationTypeField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {ALL_TOGETHER_CODE, "All products on one tour order"}, 
    {LIKE_TOGETHER_CODE, "Like products on one tour order"}, 
    {INDIVIDUALLY_CODE, "All products individually"},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4860">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OperationTypeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = ALL_TOGETHER_CODE;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4865">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>moveMessageParamsToScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4868">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>moveScreenParamsToMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4892">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4893">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailResponseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4894">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>moveMessageParamsToScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4895">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>moveScreenParamsToMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4898">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandBookingMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingLand(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4899">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelInfoMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingHotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4901">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandInfoMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingLand(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4903">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getStatusFieldName</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailInfoMsgReplyInProcessor</MethodClassName>
		<LogicSource>return BookingDetail.INFO_STATUS_ID;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4904">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getStatusFieldName</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailAvailMsgReplyInProcessor</MethodClassName>
		<LogicSource>return BookingDetail.INVENTORY_STATUS_ID;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4905">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getStatusFieldName</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailBookingMsgReplyInProcessor</MethodClassName>
		<LogicSource>return BookingDetail.PRODUCT_STATUS_ID;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4906">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getStatusFieldName</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailRateMsgReplyInProcessor</MethodClassName>
		<LogicSource>return BookingDetail.COST_STATUS_ID;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4908">
		<LastChanged>2012-04-12T12:20:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailabilityResponse</MethodClassName>
		<LogicSource><![CDATA[int iInfoStatus = super.getRawRecordData(record);
BookingHotelModel recBookingHotel = (BookingHotelModel)record;
return iInfoStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4909">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductAvailabilityResponse</MethodClassName>
		<LogicSource><![CDATA[int iInfoStatus = super;

return iInfoStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4912">
		<LastChanged>2012-04-12T11:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductResponse</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = Constants.NORMAL_RETURN;
{
    MessageRecordDesc messageData = (MessageRecordDesc)this.getMessageDataDesc(PRODUCT_RESPONSE_MESSAGE);
    if (messageData != null)
        iErrorCode = messageData.getRawRecordData(record);
    if (iErrorCode != Constants.NORMAL_RETURN)
        return iErrorCode;
}
// DO NOT call inherited
BookingDetailModel recBookingDetail = (BookingDetailModel)record;
int iInfoStatus = BaseDataStatusModel.VALID;
if (this.getMessage().get(BaseDataStatusModel.DATA_STATUS) != null)
    iInfoStatus = this.getMessageDataStatus();
if (iInfoStatus != BaseDataStatusModel.VALID)
    recBookingDetail.setErrorMessage(this, this.getMessageDataError());
else
    recBookingDetail.setErrorMessage(this, null);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4913">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductResponseScreen</MethodClassName>
		<LogicSource>return new ProductInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4914">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateAvailResponseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4915">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateAvailResponseScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getScreenRecord().getField(HotelInfoScreenRecord.TOTAL_COST).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4916">
		<LastChanged>2012-02-01T15:55:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>moveScreenParamsToMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateAvailResponseScreen</MethodClassName>
		<LogicSource><![CDATA[super;
ProductResponseMessageData messageData = (ProductResponseMessageData)message.getMessageDataDesc(BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);
Double dblHotelCost = (Double)this.getScreenRecord().getField(HotelInfoScreenRecord.TOTAL_COST).getData();
messageData.put(BookingDetail.TOTAL_COST, dblHotelCost);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4922">
		<LastChanged>2012-04-12T10:53:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateAvailRequestMessageInProcessor</MethodClassName>
		<LogicSource><![CDATA[ProductRequest msgProductAvailRequestIn = (ProductRequest)internalMessage.getMessageDataDesc(null);

Product recProduct = (Product)this.getMainRecord();
if (recProduct == null)
    recProduct = this.getProductRecord();
if (!((ProductMessageData)msgProductAvailRequestIn.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE)).getProduct(recProduct))
{   // Error, hotel not found
    // pend(don)
}
BaseProductResponse productAvailResponseOut = (BaseProductResponse)((BaseMessage)recProduct.processAvailabilityRequestInMessage((BaseMessage)msgProductAvailRequestIn.getMessage(), null, null)).getMessageDataDesc(null);
//        ProductAvailabilityResponse
BaseProductResponse productRateResponseOut = (BaseProductResponse)((BaseMessage)recProduct.processCostRequestInMessage((BaseMessage)msgProductAvailRequestIn.getMessage(), null)).getMessageDataDesc(null);

TrxMessageHeader messageHeader = (TrxMessageHeader)productAvailResponseOut.getMessage().getMessageHeader();
//?Map<String,Object> mapMessage = productAvailResponseOut.getMap();
//?Map<String,Object> mapMessage2 = productRateResponseOut.getMap();
//?mapMessage.putAll(mapMessage2);
BaseMessage response = null;//?new BaseMessage(messageHeader, new HotelRateAvailResponse(null, mapMessage));

return response;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4924">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4925">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingResponseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4926">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>moveMessageParamsToScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4927">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>moveScreenParamsToMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4928">
		<LastChanged>2012-04-12T11:29:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FreeSellMessage</MethodClassName>
		<LogicSource><![CDATA[return BaseDataStatusModel.VALID;	// Status is always valid for free-sells]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4930">
		<LastChanged>2012-04-11T00:10:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>450</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandMessageData</MethodClassName>
		<LogicSource><![CDATA[this.put(BookingDetailModel.RATE_ID, propertyOwner.getProperty(BookingDetailModel.RATE_ID));
this.put(BookingDetailModel.CLASS_ID, propertyOwner.getProperty(BookingDetailModel.CLASS_ID));
this.put(BookingDetailModel.DETAIL_DATE, propertyOwner.getProperty(BookingDetailModel.DETAIL_DATE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4933">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>processAvailabilityRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Land</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4935">
		<LastChanged>2012-04-02T10:35:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & Product.MESSAGE_DETAIL_MODE) == Product.MESSAGE_DETAIL_MODE)
    screen = Record.makeNewScreen(MessageDetail.MESSAGE_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.BOOKING_DETAIL_GRID_SCREEN) == Product.BOOKING_DETAIL_GRID_SCREEN)
    screen = Record.makeNewScreen(BookingModel.PRODUCT_BOOKING_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & Product.PRODUCT_SEARCH_DETAIL_GRID_SCREEN) == Product.PRODUCT_SEARCH_DETAIL_GRID_SCREEN)
    screen = Record.makeNewScreen(PRODUCT_SEARCH_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4936">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[if (Product.MESSAGE_DETAIL_SCREEN.equalsIgnoreCase(strCommand))
    return Product.MESSAGE_DETAIL_MODE;
if (Product.PRODUCT_SEARCH_DETAIL.equalsIgnoreCase(strCommand))
    return Product.PRODUCT_SEARCH_DETAIL_GRID_SCREEN;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4937">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>240</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription><![CDATA[Get the message properties for this product.
@param strMessageName The message name.
@return A map with the message properties.]]></LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource>return trxMessageHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4938">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailSubScreen</MethodClassName>
		<LogicSource>return new BookingDetailScreenRecord(this); // Typically this is overidden by a screen specific override of this screen record</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4939">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailSubScreen</MethodClassName>
		<LogicSource><![CDATA[// This is usually overidden
this.getMainRecord().getField(BookingDetail.DETAIL_DATE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(BookingDetail.PRODUCT_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(BookingDetail.PRODUCT_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4940">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportationGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4941">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4942">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4943">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4944">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationClassSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), TransportationClass.DESCRIPTION_KEY, TransportationClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4945">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseClassSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), CruiseClass.DESCRIPTION_KEY, CruiseClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4946">
		<LastChanged>2012-01-31T10:43:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarClassSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), CarClass.DESCRIPTION_KEY, CarClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4947">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportationScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4948">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItinerary</MethodClassName>
		<LogicSource>return new BookingItineraryScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4949">
		<LastChanged>2012-02-03T19:58:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItinerary</MethodClassName>
		<LogicSource><![CDATA[ScreenLocation itsLocation = null;
itsLocation = this.getNextLocation(ScreenConstants.FLUSH_LEFT, ScreenConstants.FILL_REMAINDER);
// NOTE NOTE NOTE. fieldConverter is only used to create the control, since the actual text is created from reading the URL
BaseField fieldConverter = this.getScreenRecord().getField(BookingItineraryScreenRecord.ITINERARY_TEXT);
m_sHtmlView = new SHtmlView(itsLocation, this, fieldConverter, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
ScreenFieldView sView = m_sHtmlView.getScreenFieldView();
if (sView instanceof org.jbundle.base.screen.view.swing.VScreenField)
{   // Swing - get rid of scrollers and make transparent and get rid of the border.
    javax.swing.JEditorPane htmlPane = (javax.swing.JEditorPane)sView.getControl();
    htmlPane.setEditable(false);
    ((org.jbundle.base.screen.view.swing.VHtmlView)sView).setupHyperLinkListener(this);
    htmlPane.setOpaque(false);

    java.awt.Component component = (java.awt.Component)sView.getControl(DBConstants.CONTROL_TOP);
    ((javax.swing.JScrollPane)component).setBorder(null);
    ((javax.swing.JScrollPane)component).setOpaque(false);
    ((javax.swing.JScrollPane)component).getViewport().setOpaque(false);
}
fieldConverter.removeComponent(m_sHtmlView);
m_sHtmlView.setConverter(null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4950">
		<LastChanged>2012-02-01T19:02:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItinerary</MethodClassName>
		<LogicSource><![CDATA[super;

ReferenceField fldMessageProcessInfoID = (ReferenceField)this.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_PROCESS_INFO_ID);
Record recMessageProcessInfo = fldMessageProcessInfoID.getReferenceRecord();
fldMessageProcessInfoID.addListener(new MoveOnChangeHandler(this.getScreenRecord().getField(BookingItineraryScreenRecord.ITINERARY_STYLE_SHEET), recMessageProcessInfo.getField(MessageProcessInfo.PROPERTIES), false, true)
{   // Special logic to move the "template" property to the stylesheet field
    /**
     * Do the physical move operation.
     */
    public int moveSourceToDest(boolean bDisplayOption, int iMoveMode)
    {
        String strTemplate = ((PropertiesField)m_fldSource).getProperty(DBParams.TEMPLATE);
        if ((strTemplate == null) || (strTemplate.length() == 0))
            return DBConstants.NORMAL_RETURN;
        return m_fldDest.setString(strTemplate, bDisplayOption, iMoveMode);   // Move dependent field to here
    }
});

fldMessageProcessInfoID.addListener(new MoveOnChangeHandler(this.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_TRANSPORT_ID), recMessageProcessInfo.getField(MessageProcessInfo.DEFAULT_MESSAGE_TRANSPORT_ID), false, true));

this.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_TRANSPORT_ID).addListener(new ItineraryActionHandler(null));

if (this.getRecord(Booking.BOOKING_FILE) != null)
{   // Set up initial default message transport.
    Profile recProfile = (Profile)((ReferenceField)this.getRecord(Booking.BOOKING_FILE).getField(Booking.PROFILE_ID)).getReference();
    if (recProfile != null)
    {
        this.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_TRANSPORT_ID).moveFieldToThis(recProfile.getField(Profile.MESSAGE_TRANSPORT_ID));
        if (this.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_TRANSPORT_ID).isNull())
        {
            MessageDetailTarget recMessageDetailTarget = recProfile.getNextMessageDetailTarget();
            if (recMessageDetailTarget != null)
            {
                MessageTransport recMessageTransport = recMessageDetailTarget.getMessageTransport(null);
                if (recMessageTransport != null)
                    this.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_TRANSPORT_ID).moveFieldToThis(recMessageTransport.getField(MessageTransport.ID));
            }
        }
    }
    
}
this.refreshText(null);

if (!ScreenConstants.HTML_SCREEN_TYPE.equalsIgnoreCase(this.getViewFactory().getViewSubpackage()))
    this.getRecord(Tour.TOUR_FILE).setupRecordListener(this, false, false);   // I need to listen for record changes]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4951">
		<LastChanged>2012-02-01T10:39:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>refreshText</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Date timeUpdateRequested</MethodInterface>
		<MethodClassName>BookingItinerary</MethodClassName>
		<LogicSource><![CDATA[if (timeUpdateRequested == null)
    timeUpdateRequested = new Date();
if (m_timeLastUpdateDisplayed != null)
    if (timeUpdateRequested.before(m_timeLastUpdateDisplayed))
        return;  // Already showing the current itinerary
m_timeLastUpdateDisplayed = new Date();
Record recBooking = this.getRecord(Booking.BOOKING_FILE);
String strBookingID = recBooking.getCounterField().toString();

if ((strBookingID == null)
    || (strBookingID.length() == 0))
{
    String strText = null;
    ResourceBundle resources = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.BOOKING_RESOURCE, true);
    strText = resources.getString(ITIN_DESC);
    if ((strText == null)
        || (strText.length() == 0)
        || (strText.equals(ITIN_DESC)))
            strText = DEFAULT_TEXT;
        BaseField fieldConverter = this.getScreenRecord().getField(BookingItineraryScreenRecord.ITINERARY_TEXT);
        fieldConverter.addComponent(m_sHtmlView);
        m_sHtmlView.setConverter(fieldConverter);
        m_sHtmlView.setSFieldValue(strText, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
        fieldConverter.removeComponent(m_sHtmlView);
        m_sHtmlView.setConverter(null);
}
else
{            
    String strTemplate = this.getScreenRecord().getField(BookingItineraryScreenRecord.ITINERARY_STYLE_SHEET).toString();

    String strURL = this.getDisplayURL(strBookingID, null, strTemplate, null, null, null);
    
    ScreenFieldView sView = m_sHtmlView.getScreenFieldView();
    if (sView instanceof org.jbundle.base.screen.view.swing.VScreenField)
    {   // Swing - Display new link
        org.jbundle.base.screen.view.swing.VHtmlView sHtml = (org.jbundle.base.screen.view.swing.VHtmlView)sView;
        sHtml.setControlValue(WAIT_TEXT);
        sHtml.linkActivated(this.getURLFromPath(strURL, true));
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4952">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getURLFromPath</MethodName>
		<LogicDescription><![CDATA[Get the URL from the path.
@param The resource path.
@return The URL.]]></LogicDescription>
		<MethodReturns>URL</MethodReturns>
		<MethodInterface>String path, boolean bAddBaseURL</MethodInterface>
		<MethodClassName>BookingItinerary</MethodClassName>
		<LogicSource><![CDATA[URL url = null;
try {
    if ((url == null) && (path != null))
        url = new URL(path);
} catch (MalformedURLException ex) {
    BaseApplet applet = (BaseApplet)this.getAppletScreen().getScreenFieldView().getControl();
    BaseApplication app = (BaseApplication)this.getRootScreen().getTask().getApplication();
    if ((url == null) && (path != null))
        url = app.getResourceURL(path, applet);
    else
        ex.printStackTrace();
}
if (bAddBaseURL)
{
    String strURL = url.toString();
    if (strURL.indexOf(path) > 0)   // Make sure the xsl processor creates all the links with a full URL (since emails, etc probably need full URLs)
        path = strURL.substring(0, strURL.indexOf(path));
    else
        path = null;
    if (path != null)
        strURL = Utility.addURLParam(strURL, DBParams.BASE_URL, path);
    try {
        url = new URL(strURL);
    } catch (MalformedURLException e) {
        // Ignore - Leave URL alone
    }
}
return url;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4953">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItinerary</MethodClassName>
		<LogicSource><![CDATA[Record recBooking = this.getRecord(Booking.BOOKING_FILE);
String strBookingID = recBooking.getCounterField().toString();
String strTourID = null;    // For now
String strTemplate = this.getScreenRecord().getField(BookingItineraryScreenRecord.ITINERARY_STYLE_SHEET).toString();

if (MessageProcessInfoManualField.LOOKUP_WITH_PARAMS.equalsIgnoreCase(strCommand))
{
    if (this.getTask() != null)
        if (this.getTask().getApplication() != null)
    {
        App application = this.getTask().getApplication();
        BasePanel parentScreen = Screen.makeWindow(application);
        Map<String,Object> properties = new Hashtable<String,Object>();
        ReferenceField fldRequestTypeID = (ReferenceField)this.getScreenRecord().getField(BookingItineraryScreenRecord.REQUEST_TYPE_ID);
        properties.put(fldRequestTypeID.getFieldName(), Integer.toString(fldRequestTypeID.getIDFromCode(RequestType.MANUAL)));
        ReferenceField fldContactTypeID = (ReferenceField)this.getScreenRecord().getField(BookingItineraryScreenRecord.CONTACT_TYPE_ID);
        properties.put(fldContactTypeID.getFieldName(), Integer.toString(fldContactTypeID.getIDFromCode(Profile.PROFILE_FILE)));
        Record record = ((ReferenceField)this.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_PROCESS_INFO_ID)).getReferenceRecord();
        GridScreen screen = (GridScreen)record.makeScreen(null, parentScreen, ScreenConstants.SELECT_MODE, true, true, true, true, properties);
        //x if (record.getScreen() == null)
            screen.setSelectQuery(record, false); // Since this record isn't linked to the screen, manually link it.
        return true;    // Handled
    }
}

if ((MenuConstants.REFRESH.equalsIgnoreCase(strCommand))
        || (MenuConstants.PRINT.equalsIgnoreCase(strCommand)))
{
    this.refreshText(null);
    if (MenuConstants.PRINT.equalsIgnoreCase(strCommand))
    {
        return super.doCommand(MenuConstants.PRINT, m_sHtmlView, iCommandOptions);
    }
    return true;    // Handled
}
if (MenuConstants.DISPLAY.equalsIgnoreCase(strCommand))
{
    String strURL = this.getDisplayURL(strBookingID, strTourID, strTemplate, null, null, null);
    URL url = this.getURLFromPath(strURL, true);
    if (url != null)
        strURL = url.toString();
    ((Application)this.getTask().getApplication()).showTheDocument(strURL, (BaseApplet)this.getAppletScreen().getTask(), ScreenConstants.USE_NEW_WINDOW);
    return true;    // Handled
}
if (SAVE.equalsIgnoreCase(strCommand))
{
    String strFilename = this.getScreenRecord().getField(BookingItineraryScreenRecord.ACTION_TARGET).toString();

    String strURL = this.getDisplayURL(strBookingID, strTourID, strTemplate, null, null, strFilename);
    URL url = this.getTask().getApplication().getResourceURL(strURL, (BaseApplet)this.getAppletScreen().getTask());
    strURL = url.toString();

    // Now, transfer the URL data to the file or this string.
    String strMessage = Utility.transferURLStream(strURL, strFilename);
    return true;
}
if (SEND.equalsIgnoreCase(strCommand))
{
    MessageProcessInfo recMessageProcessInfo = (MessageProcessInfo)((ReferenceField)this.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_PROCESS_INFO_ID)).getReference();
    Record recMessageTransport = ((ReferenceField)this.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_TRANSPORT_ID)).getReference();
    if ((recMessageTransport == null) || (recMessageTransport.getEditMode() != DBConstants.EDIT_CURRENT))
        if ((recMessageProcessInfo != null) && (recMessageProcessInfo.getEditMode() == DBConstants.EDIT_CURRENT))
            recMessageTransport = ((ReferenceField)recMessageProcessInfo.getField(MessageProcessInfo.DEFAULT_MESSAGE_TRANSPORT_ID)).getReference();
    String strMessageTransport = null;
    if ((recMessageTransport != null) && (recMessageTransport.getEditMode() == DBConstants.EDIT_CURRENT))
        strMessageTransport = recMessageTransport.getField(MessageTransport.CODE).toString();
    if ((strMessageTransport == null) || (strMessageTransport.length() == 0))
        return false;    // Error
    if (!MessageTransport.SCREEN.equalsIgnoreCase(strMessageTransport))
    {
        String strDestination = this.getScreenRecord().getField(BookingItineraryScreenRecord.ACTION_TARGET).toString();
        
        String strURL = this.getDisplayURL(strBookingID, strTourID, strTemplate, strMessageTransport, strDestination, null);
        {   // Note: properties include SEND_BY and DESTINATION
            // First see if the use specifies a specific message
            if (recMessageProcessInfo == null)
                recMessageProcessInfo = (MessageProcessInfo)((ReferenceField)this.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_PROCESS_INFO_ID)).getReferenceRecord();
            Profile recProfile = (Profile)((ReferenceField)this.getRecord(Booking.BOOKING_FILE).getField(Booking.PROFILE_ID)).getReference();
            Map<String,Object> properties =  new Hashtable<String, Object>();
            properties.put(TrxMessageHeader.REFERENCE_TYPE, recBooking.getTableNames(false));
            properties.put(TrxMessageHeader.REFERENCE_CLASS, recBooking.getClass().getName());
            properties.put(TrxMessageHeader.REFERENCE_ID, recBooking.getCounterField().toString());
            recMessageProcessInfo.createAndSendURLMessage(strMessageTransport, recProfile, strURL, properties);
        }
        return true;
    }
    else
    {
        if (strCommand.indexOf('?') != -1)
        {
            Map<String,Object> properties = new Hashtable<String,Object>();
            Utility.parseArgs(properties, strCommand);
            String strObjectID = (String)properties.get(DBConstants.OBJECT_ID);
            if ((strObjectID != null) && (strObjectID.length() > 0))
            {
                BookingDetail recBookingDetail = new BookingDetail(this);
                this.removeRecord(recBookingDetail);    // Since I free this screen before I'm done with this record
                try {
                    Record record = recBookingDetail.setHandle(strObjectID, DBConstants.OBJECT_ID_HANDLE);
                    if (record != null)
                    {   // Switch screens
                        ScreenLocation screenLocation = this.getScreenLocation();
                        if (screenLocation == null)
                            screenLocation = m_screenParent.getNextLocation(ScreenConstants.FLUSH_LEFT, ScreenConstants.FILL_REMAINDER);
                        BasePanel screenParent = this.getParentScreen();
                        this.free();
                        int iDocMode = ScreenConstants.MAINT_MODE;
                        boolean bCloneThisQuery = true;
                        boolean bReadCurrentRecord = true;
                        boolean bUseBaseTable = false;
                        boolean bLinkGridToQuery = false;
                        record.makeScreen(screenLocation, screenParent, iDocMode, bCloneThisQuery, bReadCurrentRecord, bUseBaseTable, bLinkGridToQuery, null);
                        return true;    // Done!
                    }
                    else
                        return false;   // Not handled?
                } catch (DBException ex)    {
                    ex.printStackTrace();
                } finally {
                    recBookingDetail.free();
                }
            }
            return true;    // Handled
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4954">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4955">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4956">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BookingCar recBookingCar = (BookingCar)this.getMainRecord();

recBookingCar.getField(BookingCar.DAYS).setEnabled(true);
recBookingCar.getField(BookingCar.QUANTITY).setEnabled(true);
recBookingCar.getField(BookingCar.DETAIL_END_DATE).setEnabled(true);

this.getRecord(BookingDetail.BOOKING_DETAIL_FILE).getField(BookingDetail.MARKUP_FROM_LAST).setEnabled(true);

// Display the USD equivalents
BaseField fldExchange = recBookingCar.getField(BookingCar.EXCHANGE);
Record recBookingDetailScreenRecord = this.getScreenRecord();
FieldListener fieldListener = null;
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4957">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4962">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getCalendarItem</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource>return new BookingCalendarItem(this, -1, 0, 1, 2, -1);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4966">
		<LastChanged>2012-04-13T00:52:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getDisplayURL</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strBookingID, String strTourID, String strTemplate, String strSendBy, String strDestination, String strFileOut</MethodInterface>
		<MethodClassName>BookingItinerary</MethodClassName>
		<LogicSource><![CDATA[String strURL = Constants.DEFAULT_XHTML_SERVLET;
strURL = Utility.addURLParam(strURL, DBParams.SCREEN, ITINERARY_REPORT_SCREEN);
strURL = Utility.addURLParam(strURL, "forms", "display");
if ((strTemplate == null) || (strTemplate.length() == 0))
    strTemplate = "itinerary";
strURL = Utility.addURLParam(strURL, DBParams.TEMPLATE, strTemplate);
strURL = Utility.addURLParam(strURL, DBParams.COMMAND, "Submit");
if ((strBookingID != null) && (strBookingID.length() > 0))
    strURL = Utility.addURLParam(strURL, "BookingID", strBookingID);
if ((strTourID != null) && (strTourID.length() > 0))
    strURL = Utility.addURLParam(strURL, "TourID", strTourID); // TourID is the screenfield on the itin report
strURL = Utility.addURLParam(strURL, "makeUnique", Double.toString(Math.random()));	// Hack, force editor to display new URL
if (this.getTask() != null)
    if (this.getTask().getApplication() != null)
        strURL = this.getTask().getApplication().addUserParamsToURL(strURL);

// For now, these are handled on the client.
//if ((strSendBy != null) && (strSendBy.length() > 0))
//    strURL = Utility.addURLParam(strURL, MessageTransport.SEND_MESSAGE_BY_PARAM, strSendBy);
//if ((strDestination != null) && (strDestination.length() > 0))
//    strURL = Utility.addURLParam(strURL, TrxMessageHeader.DESTINATION_PARAM, strDestination);
//if ((strFileOut != null) && (strFileOut.length() > 0))
//    strURL = Utility.addURLParam(strURL, DBParams.FILEOUT, strFileOut);
return strURL;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4967">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItinerary</MethodClassName>
		<LogicSource><![CDATA[ResourceBundle resources = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.BOOKING_RESOURCE, true);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null, resources.getString(MenuConstants.REFRESH), MenuConstants.REFRESH, MenuConstants.REFRESH, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null, resources.getString(SEND), SEND, SEND, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null, resources.getString(MenuConstants.DISPLAY), MenuConstants.DISPLAY, MenuConstants.DISPLAY, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null, resources.getString(MenuConstants.PRINT), MenuConstants.PRINT, MenuConstants.PRINT, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null, resources.getString(SAVE), SAVE, SAVE, null);

this.getScreenRecord().getField(BookingItineraryScreenRecord.ITINERARY_STYLE_SHEET).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null, null, MenuConstants.REFRESH, MenuConstants.REFRESH, resources.getString(MenuConstants.REFRESH));
this.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_PROCESS_INFO_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DONT_DISPLAY_DESC);

this.getScreenRecord().getField(BookingItineraryScreenRecord.ACTION_TARGET).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null, null, SEND, SEND, resources.getString(SEND));
this.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_TRANSPORT_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DONT_DISPLAY_DESC);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4968">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource><![CDATA[// This is not used as get item is implemented, but this is needed for propert toolbar alignment
this.getMainRecord().getField(BookingDetail.DETAIL_DATE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(BookingDetail.DETAIL_END_DATE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(BookingDetail.PRODUCT_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(BookingDetail.PRODUCT_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);

if (this.getScreenFieldView().getControl() instanceof CalendarPanel)
{   // Always
    CalendarPanel calpanel = (CalendarPanel)this.getScreenFieldView().getControl();
    BaseApplet applet = (BaseApplet)this.getAppletScreen().getScreenFieldView().getControl();
    calpanel.setPopupComponent(new JPopupPanel(applet, (VScreenField)this.getScreenFieldView()));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5023">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.TOUR_DETAIL_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5024">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDetailGridScreen</MethodClassName>
		<LogicSource>return new BookingTour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5025">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getRecord(BookingControl.BOOKING_CONTROL_FILE) == null)
    new BookingControl(this);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5026">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDetailGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5027">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5028">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDetailScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.TOUR_DETAIL_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5029">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDetailScreen</MethodClassName>
		<LogicSource>return new BookingTour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5030">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDetailScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getRecord(BookingControl.BOOKING_CONTROL_FILE) == null)
    new BookingControl(this);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5031">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDetailScreen</MethodClassName>
		<LogicSource>return new BookingDetailScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5032">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;
FieldListener fieldBehavior = null;
Record record = this.getMainRecord();
record.getField(BookingTour.PRICING_TYPE_ID).setEnabled(true);
record.getField(BookingTour.ASK_FOR_ANSWER).addListener(fieldBehavior = new DisableOnFieldHandler(record.getField(BookingTour.ASK_FOR_ANSWER), BooleanField.YES, false));
this.getRecord(Booking.BOOKING_FILE).getField(Booking.ALWAYS_RESOLVE).addListener(fieldBehavior = new DisableOnFieldHandler(this.getRecord(Booking.BOOKING_FILE).getField(Booking.ALWAYS_RESOLVE), BooleanField.YES, false));
record.addListener(new FileRemoveBOnCloseHandler(fieldBehavior));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5033">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5034">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportationScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5035">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportationScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5036">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5037">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5038">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5039">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5040">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5041">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5042">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record recBookingAir = this.getMainRecord();
recBookingAir.getField(BookingAir.BOOKING_AIR_HEADER_ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5043">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5044">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>getBitmap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>return BookingConstants.BUTTON_LOCATION + this.getField(BookingDetail.PRODUCT_TYPE).toString();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5045">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getEndIcon</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCar</MethodClassName>
		<LogicSource>return this.getStartIcon();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5052">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addLookupListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCar</MethodClassName>
		<LogicSource><![CDATA[super;

Boolean boolRequestRequiredFlag = Boolean.TRUE;
String strManualTransportID = Integer.toString(((ReferenceField)this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID)).getIDFromCode(MessageTransport.MANUAL));
Converter converterNotInfoManualTransport = new CheckConverter(this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID), strManualTransportID, null, false);
Converter converterNotCostManualTransport = new CheckConverter(this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID), strManualTransportID, null, false);
Converter converterNotInventoryManualTransport = new CheckConverter(this.getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID), strManualTransportID, null, false);
Converter converterNotProductManualTransport = new CheckConverter(this.getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID), strManualTransportID, null, false);

FieldListener dependentStateListener = this.getField(BookingDetail.PRODUCT_ID).getListener(CopyDataHandler.class);
FieldListener fieldListener = null;
this.getField(BookingCar.DAYS).addListener(fieldListener = new CalcCarReturnDate(null));
fieldListener.setDependentStateListener(dependentStateListener);

// If any of these values change, you will have to re-lookup the price.
this.getField(BookingCar.DAYS).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.INFO_STATUS_REQUEST), boolRequestRequiredFlag, converterNotInfoManualTransport));
fieldListener.setDependentStateListener(dependentStateListener);
this.getField(BookingCar.DAYS).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.COST_STATUS_REQUEST), boolRequestRequiredFlag, converterNotCostManualTransport));
fieldListener.setDependentStateListener(dependentStateListener);
this.getField(BookingCar.DAYS).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.INVENTORY_STATUS_REQUEST), boolRequestRequiredFlag, converterNotInventoryManualTransport));
fieldListener.setDependentStateListener(dependentStateListener);
// If this changes, re-request the booking
this.getField(BookingCar.DAYS).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, converterNotProductManualTransport));
fieldListener.setDependentStateListener(dependentStateListener);

// If any of these values change, you will have to re-lookup the price.
this.getField(BookingCar.QUANTITY).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.INFO_STATUS_REQUEST), boolRequestRequiredFlag, converterNotInfoManualTransport));
fieldListener.setDependentStateListener(dependentStateListener);
this.getField(BookingCar.QUANTITY).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.COST_STATUS_REQUEST), boolRequestRequiredFlag, converterNotCostManualTransport));
fieldListener.setDependentStateListener(dependentStateListener);
this.getField(BookingCar.QUANTITY).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.INVENTORY_STATUS_REQUEST), boolRequestRequiredFlag, converterNotInventoryManualTransport));
fieldListener.setDependentStateListener(dependentStateListener);
// If this changes, re-request the booking
this.getField(BookingCar.QUANTITY).addListener(fieldListener = new CopyDataHandler(this.getField(BookingDetail.PRODUCT_STATUS_REQUEST), boolRequestRequiredFlag, converterNotProductManualTransport));
fieldListener.setDependentStateListener(dependentStateListener);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5053">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>91</Sequence>
		<MethodName>setupEndDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCar</MethodClassName>
		<LogicSource><![CDATA[Date dateStart = this.getStartDate();
if (dateStart == null)
    return dateStart;
float fDays = (float)this.getField(BookingCar.DAYS).getValue();
Date dateEnd = new Date(dateStart.getTime() + (long)(fDays * DBConstants.KMS_IN_A_DAY));
Calendar calendar = DateTimeField.m_calendar;

calendar.setTime(dateEnd);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);
dateEnd = calendar.getTime();
return dateEnd;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5054">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>92</Sequence>
		<MethodName>setEndDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCar</MethodClassName>
		<LogicSource><![CDATA[// First get the number of nights
Calendar startDate = ((DateTimeField)this.getField(BookingCar.DETAIL_DATE)).getCalendar();
if (startDate != null)
{
    boolean[] rgbEnabled = this.getField(BookingHotel.DETAIL_END_DATE).setEnableListeners(false);  // No echos

    startDate.set(Calendar.SECOND, 0);
    startDate.set(Calendar.MILLISECOND, 0);
    long lStartDate = startDate.getTime().getTime();
    startDate.setTime(time);
    startDate.set(Calendar.SECOND, 0);
    startDate.set(Calendar.MILLISECOND, 0);
    long lEndDate = startDate.getTime().getTime();
    float fDays = (float)((lEndDate - lStartDate) / DBConstants.KMS_IN_A_DAY);

    if (fDays > 0)
    {
        float fOldDays = (float)this.getField(BookingCar.DAYS).getValue();
        int iErrorCode = this.getField(BookingCar.DAYS).setValue(fDays);
    }

    this.getField(BookingHotel.DETAIL_END_DATE).setEnableListeners(rgbEnabled);  // Restore state
}
return this.getEndDate();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5055">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>94</Sequence>
		<MethodName>setupProductDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCar</MethodClassName>
		<LogicSource><![CDATA[String string = super;
if (string != null)
    if (string.length() > 0)
        if (!this.getField(BookingCar.DAYS).isNull())
{
    string += " - ";
    String tempString = this.getField(BookingCar.DAYS).toString();
    int i = 0;
    for (i = tempString.length() - 1; i >= 0; i--)
    {
        if (tempString.charAt(i) == '0')
            tempString = tempString.substring(0, i);
        else
            break;
    }
    if (tempString.charAt(i) == '.')
        tempString = tempString.substring(0, i);
    string += tempString;
    string += " day";
    if (this.getField(BookingCar.DAYS).getValue() != 1)
        string += "s";
}
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5056">
		<LastChanged>2012-04-12T08:31:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>99</Sequence>
		<MethodName>initBookingDetailFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCar</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingCar.DAYS).isNull()))
    this.getField(BookingCar.DAYS).setValue(1, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingCar.RATE_ID).isNull()))
    this.getField(BookingCar.RATE_ID).moveFieldToThis((BaseField)recTour.getField(Tour.CAR_RATE_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingCar.CLASS_ID).isNull()))
    this.getField(BookingCar.CLASS_ID).moveFieldToThis((BaseField)recTour.getField(Tour.CAR_CLASS_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5057">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarRateField</MethodClassName>
		<LogicSource>return new CarRate(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5058">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarRateField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), CarRate.DESCRIPTION_KEY, CarRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5059">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>moveTourHeaderFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCar</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (recTourHeaderDetail != null)
{
    this.getField(BookingCar.DAYS).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderCar.DAYS));
    if (recTourHeaderDetail.getField(TourHeaderCar.DAYS).getLength() != 0)
        this.getField(BookingCar.DAYS).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderCar.DAYS));
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5060">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>setDetailProductProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCar</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
float fDays = ((Float)Utility.getAs(properties, BookingCar.DAYS, Float.class, FloatField.ZERO)).intValue();
int iRateTypeID = ((Integer)Utility.getAs(properties, BookingCar.RATE_ID, Integer.class, IntegerField.ZERO)).intValue();
int iRateClassID = ((Integer)Utility.getAs(properties, BookingCar.CLASS_ID, Integer.class, IntegerField.ZERO)).intValue();
if ((this.getField(BookingCar.DAYS).getValue() == 0) || (fDays > 0))
{
    if (fDays == 0)
        fDays = 1;
    this.getField(BookingCar.DAYS).setValue(fDays);
}
Record recBooking = null;
if (!this.getField(BookingDetail.BOOKING_ID).isNull())
    recBooking = ((ReferenceField)this.getField(BookingDetail.BOOKING_ID)).getReference();
Record recTour = null;
if (recBooking != null)
    recTour = ((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
if ((this.getField(BookingCar.RATE_ID).getValue() == 0) || (iRateTypeID != 0))
{
    if (iRateTypeID == 0)
        if (recTour != null)
            iRateTypeID = (int)recTour.getField(Tour.CAR_RATE_ID).getValue();
if (iRateTypeID != 0)
    this.getField(BookingCar.RATE_ID).setValue(iRateTypeID);
}
if ((this.getField(BookingCar.CLASS_ID).getValue() == 0) || (iRateClassID != 0))
{
    if (iRateClassID == 0)
        if (recTour != null)
            iRateClassID = (int)recTour.getField(Tour.CAR_CLASS_ID).getValue();
    if (iRateClassID != 0)
        this.getField(BookingCar.CLASS_ID).setValue(iRateClassID);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5062">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarAvailMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingCar(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5063">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarBookingMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingCar(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5064">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarRateMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingCar(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5065">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarInfoMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingCar(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5066">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5067">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarScreen</MethodClassName>
		<LogicSource>return new BookingDetailScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5068">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarRateSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), CarRate.DESCRIPTION_KEY, CarRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5069">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcCarReturnDate</MethodClassName>
		<LogicSource><![CDATA[BaseField fldDays = this.getOwner();
BookingCar recBookingCar = (BookingCar)fldDays.getRecord();
DateTimeField fldStartDate = (DateTimeField)recBookingCar.getField(BookingCar.DETAIL_DATE);
if ((!fldStartDate.isNull())
    && (fldDays.getValue() > 0))
{
    Date dateStart = fldStartDate.getDateTime();
    float fDays = (float)fldDays.getValue();
    Date dateEnd = new Date(dateStart.getTime() + (long)(fDays * DBConstants.KMS_IN_A_DAY));
    Calendar calendar = DateTimeField.m_calendar;

    calendar.setTime(dateEnd);
    calendar.set(Calendar.SECOND, 0);
    calendar.set(Calendar.MILLISECOND, 0);
    dateEnd = calendar.getTime();
    
    DateTimeField fldEndDate = (DateTimeField)recBookingCar.getField(BookingCar.DETAIL_END_DATE);
    return fldEndDate.setDateTime(dateEnd, bDisplayOption, iMoveMode);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5070">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcCarReturnDate</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.READ_MOVE, false);
this.setRespondsToMode(DBConstants.INIT_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5071">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseAvailMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingCruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5072">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseBookingMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingCruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5073">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseInfoMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingCruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5074">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseRateMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingCruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5075">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransAvailMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingTransportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5076">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransBookingMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingTransportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5077">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransInfoMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingTransportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5078">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransRateMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingTransportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5079">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirAvailMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingAir(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5080">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirBookingMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingAir(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5081">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirInfoMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingAir(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5082">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirRateMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingAir(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5083">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemAvailMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingItem(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5084">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemBookingMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingItem(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5085">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemInfoMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingItem(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5086">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemRateMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingItem(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5087">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourAvailMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingTour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5088">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourBookingMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingTour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5089">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourInfoMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingTour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5090">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourRateMsgReplyInProcessor</MethodClassName>
		<LogicSource>return new BookingTour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5092">
		<LastChanged>2012-04-12T07:48:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>91</Sequence>
		<MethodName>setupEndDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportation</MethodClassName>
		<LogicSource><![CDATA[Date startDate = this.getStartDate();
Calendar calendar = DateTimeField.m_calendar;
ProductModel recTransportation = this.getProduct();
if (recTransportation != null)
{
	short hours = (short)recTransportation.getField(Transportation.HOURS).getValue();
	calendar.setTime(startDate);
	calendar.add(Calendar.HOUR_OF_DAY, hours);
	startDate = calendar.getTime();
}
return startDate;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5093">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>94</Sequence>
		<MethodName>setupProductDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportation</MethodClassName>
		<LogicSource><![CDATA[String string = super;
if (string != null)
    if (string.length() > 0)
{
    Record recTransportationClass = ((ReferenceField)this.getField(BookingTransportation.CLASS_ID)).getReference();
    if (recTransportationClass != null)
        string += " - " + recTransportationClass.getField(TransportationClass.DESCRIPTION).toString();
}
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5094">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>96</Sequence>
		<MethodName>getMealDescFromCount</MethodName>
		<LogicDescription>Get the meal description from these meal counts</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Date dateTarget, boolean bDetailedDesc, Record recMealPlan, short sBreakfasts, short sLunches, short sDinners</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[Calendar calendar = DateTimeField.m_calendar;
String strMealDesc = Constants.BLANK;
Date dateStart = this.getStartDate();
calendar.setTime(dateStart);
calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.MINUTE, 0);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);
dateStart = calendar.getTime();

calendar.setTime(dateTarget);
calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.MINUTE, 0);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);
dateTarget = calendar.getTime();
int day = (int)((dateTarget.getTime() - dateStart.getTime()) / DBConstants.KMS_IN_A_DAY);
if (day < 0)
    return strMealDesc; // Return blank... can't have a meal before day 0

if (sBreakfasts >= day + 1)
{
    if (bDetailedDesc)
        strMealDesc += "Breakfast";
    else
        strMealDesc += "B";
}
if (sLunches >= day + 1)
{
    if (strMealDesc.length() > 0)
        strMealDesc += " ";
    if (bDetailedDesc)
        strMealDesc += "Lunch";
    else
        strMealDesc += "L";
}
if (sDinners >= day + 1)
{
    if (strMealDesc.length() > 0)
        strMealDesc += " ";
    if (bDetailedDesc)
        strMealDesc += "Dinner";
    else
        strMealDesc += "D";
}
return strMealDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5095">
		<LastChanged>2012-04-12T07:48:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>95</Sequence>
		<MethodName>getMealDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportation</MethodClassName>
		<LogicSource><![CDATA[ProductModel recTransportation = this.getProduct();
if (recTransportation != null)
    recTransportation.setOpenMode(recTransportation.getOpenMode() | DBConstants.OPEN_CACHE_RECORDS);    // Cache recently used records.
if (recTransportation != null)
    if ((recTransportation.getEditMode() == DBConstants.EDIT_CURRENT) || (recTransportation.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
{
    short sBreakfasts = (short)recTransportation.getField(Transportation.BREAKFASTS).getValue();
    short sLunches = (short)recTransportation.getField(Transportation.LUNCHES).getValue();
    short sDinners = (short)recTransportation.getField(Transportation.DINNERS).getValue();
    return this.getMealDescFromCount(dateTarget, bDetailedDesc, recMealPlan, sBreakfasts, sLunches, sDinners);
}
return DBConstants.BLANK;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5096">
		<LastChanged>2012-04-12T06:47:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>95</Sequence>
		<MethodName>getMealDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruise</MethodClassName>
		<LogicSource><![CDATA[ProductModel recCruise = this.getProduct();
if (recCruise != null)
    recCruise.setOpenMode(recCruise.getOpenMode() | DBConstants.OPEN_CACHE_RECORDS);    // Cache recently used records.
if (recCruise != null)
    if ((recCruise.getEditMode() == DBConstants.EDIT_CURRENT) || (recCruise.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
{
    short sBreakfasts = (short)recCruise.getField(Cruise.BREAKFASTS).getValue();
    short sLunches = (short)recCruise.getField(Cruise.LUNCHES).getValue();
    short sDinners = (short)recCruise.getField(Cruise.DINNERS).getValue();
    return this.getMealDescFromCount(dateTarget, bDetailedDesc, recMealPlan, sBreakfasts, sLunches, sDinners);
}
return DBConstants.BLANK;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5097">
		<LastChanged>2012-04-12T07:48:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>98</Sequence>
		<MethodName>initBookingDetailFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportation</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingTransportation.RATE_ID).isNull()))
    this.getField(BookingTransportation.RATE_ID).moveFieldToThis((BaseField)recTour.getField(Tour.TRANSPORTATION_RATE_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingTransportation.CLASS_ID).isNull()))
    this.getField(BookingTransportation.CLASS_ID).moveFieldToThis((BaseField)recTour.getField(Tour.TRANSPORTATION_CLASS_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5098">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>99</Sequence>
		<MethodName>moveTourHeaderFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportation</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5100">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setDetailProductProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportation</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
int iRateTypeID = ((Integer)Utility.getAs(properties, BookingTransportation.RATE_ID, Integer.class, IntegerField.ZERO)).intValue();
int iRateClassID = ((Integer)Utility.getAs(properties, BookingTransportation.CLASS_ID, Integer.class, IntegerField.ZERO)).intValue();
Record recBooking = null;
if (!this.getField(BookingDetail.BOOKING_ID).isNull())
    recBooking = ((ReferenceField)this.getField(BookingDetail.BOOKING_ID)).getReference();
Record recTour = null;
if (recBooking != null)
    recTour = ((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
if ((this.getField(BookingTransportation.RATE_ID).getValue() == 0) || (iRateClassID != 0))
{
    if (iRateTypeID == 0)
        if (recTour != null)
            iRateTypeID = (int)recTour.getField(Tour.TRANSPORTATION_RATE_ID).getValue();
    if (iRateTypeID != 0)
        this.getField(BookingTransportation.RATE_ID).setValue(iRateTypeID);
}
if ((this.getField(BookingTransportation.CLASS_ID).getValue() == 0) || (iRateClassID != 0))
{
    if (iRateClassID == 0)
        if (recTour != null)
            iRateClassID = (int)recTour.getField(Tour.TRANSPORTATION_CLASS_ID).getValue();
    if (iRateClassID != 0)
        this.getField(BookingTransportation.CLASS_ID).setValue(iRateClassID);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5102">
		<LastChanged>2012-04-12T06:46:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>91</Sequence>
		<MethodName>setupEndDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruise</MethodClassName>
		<LogicSource><![CDATA[Date startDate = this.getStartDate();
Calendar calendar = DateTimeField.m_calendar;
ProductModel recCruise = this.getProduct();
if (recCruise != null)
{
	int days = (int)recCruise.getField(Cruise.DAYS).getValue();
	calendar.setTime(startDate);
	calendar.add(Calendar.DATE, days);
	startDate = calendar.getTime();
}
return startDate;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5103">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>94</Sequence>
		<MethodName>setupProductDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruise</MethodClassName>
		<LogicSource><![CDATA[String string = super;
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5104">
		<LastChanged>2012-04-12T06:47:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>98</Sequence>
		<MethodName>initBookingDetailFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruise</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingCruise.CLASS_ID).isNull()))
    this.getField(BookingCruise.CLASS_ID).moveFieldToThis((BaseField)recTour.getField(Tour.CRUISE_CLASS_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingCruise.RATE_ID).isNull()))
    this.getField(BookingCruise.RATE_ID).moveFieldToThis((BaseField)recTour.getField(Tour.CRUISE_RATE_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5105">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setDetailProductProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruise</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
int iRateClassID = ((Integer)Utility.getAs(properties, BookingCruise.CLASS_ID, Integer.class, IntegerField.ZERO)).intValue();
Record recBooking = null;
if (!this.getField(BookingDetail.BOOKING_ID).isNull())
    recBooking = ((ReferenceField)this.getField(BookingDetail.BOOKING_ID)).getReference();
Record recTour = null;
if (recBooking != null)
    recTour = ((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
if ((this.getField(BookingCruise.CLASS_ID).getValue() == 0) || (iRateClassID != 0))
{
    if (iRateClassID == 0)
        if (recTour != null)
            iRateClassID = (int)recTour.getField(Tour.CRUISE_CLASS_ID).getValue();
    if (iRateClassID != 0)
        this.getField(BookingCruise.CLASS_ID).setValue(iRateClassID);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5106">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>99</Sequence>
		<MethodName>moveTourHeaderFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruise</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5109">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>91</Sequence>
		<MethodName>setupEndDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAir</MethodClassName>
		<LogicSource><![CDATA[Date startDate = this.getStartDate();
Calendar calendar = DateTimeField.m_calendar;
Date timeArrive = ((DateTimeField)this.getField(BookingAir.ARRIVE_TIME)).getDateTime();
if (timeArrive == null)
    return startDate;   // Never
calendar.setTime(timeArrive);
int iHour = calendar.get(Calendar.HOUR_OF_DAY);
int iMinute = calendar.get(Calendar.MINUTE);
int iDays = (int)this.getField(BookingAir.ADD_DAYS).getValue();
calendar.setTime(startDate);
calendar.add(Calendar.DATE, iDays);

calendar.set(Calendar.HOUR_OF_DAY, iHour);
calendar.set(Calendar.MINUTE, iMinute);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);

startDate = calendar.getTime();
return startDate;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5110">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>94</Sequence>
		<MethodName>setupProductDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAir</MethodClassName>
		<LogicSource><![CDATA[String strProductDesc = super.setupProductDesc();
if ((strProductDesc == null) || (strProductDesc.length() == 0))
{
    Record recAirline = ((ReferenceField)this.getField(BookingDetail.AIRLINE_ID)).getReference();
    if (recAirline != null)
        strProductDesc += recAirline.getField(Airline.AIRLINE_CODE).toString();
    strProductDesc += this.getField(BookingDetail.FLIGHT_NO).toString() + ' ';
    strProductDesc += this.getField(BookingDetail.CITY_CODE).toString() + '/' + this.getField(BookingDetail.TO_CITY_CODE).toString() + ' ';
    strProductDesc += this.getField(BookingDetail.ETD).toString() + '-' + this.getField(BookingDetail.ARRIVE_TIME).toString();
    if (!this.getField(BookingDetail.ADD_DAYS).isNull())
        strProductDesc += " " + this.getField(BookingDetail.ADD_DAYS).toString();
}
return strProductDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5111">
		<LastChanged>2012-01-31T10:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>95</Sequence>
		<MethodName>getMealDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAir</MethodClassName>
		<LogicSource><![CDATA[Calendar calendar = DateTimeField.m_calendar;
String strMealDesc = Constants.BLANK;

Date dateStart = this.getStartDate();
calendar.setTime(dateTarget);
calendar.set(Calendar.HOUR_OF_DAY, 0);
calendar.set(Calendar.MINUTE, 0);
calendar.set(Calendar.SECOND, 0);
calendar.set(Calendar.MILLISECOND, 0);
dateTarget = calendar.getTime();
if (dateStart.before(dateTarget))
    return strMealDesc;     // No meals before this day

calendar.add(Calendar.HOUR_OF_DAY, 24);
dateTarget = calendar.getTime();
if (dateStart.after(dateTarget))
    return strMealDesc;     // No meals after this day

strMealDesc = this.getField(BookingAir.MEALS).toString();
return strMealDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5112">
		<LastChanged>2012-04-12T08:34:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>98</Sequence>
		<MethodName>initBookingDetailFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAir</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingAir.RATE_ID).isNull()))
    this.getField(BookingAir.RATE_ID).moveFieldToThis((BaseField)recTour.getField(Tour.AIR_RATE_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingAir.CLASS_ID).isNull()))
    this.getField(BookingAir.CLASS_ID).moveFieldToThis((BaseField)recTour.getField(Tour.AIR_CLASS_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5113">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>180</Sequence>
		<MethodName>setDetailProductProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAir</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5114">
		<LastChanged>2012-02-01T19:02:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>moveTourHeaderFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAir</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (recTourHeaderDetail != null)
{
    this.moveTargetField(recTourHeaderDetail, BookingDetail.ETD, TourHeaderDetail.ETD);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.ARRIVE_TIME, TourHeaderDetail.ARRIVE_TIME);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.XO, TourHeaderDetail.XO);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.CITY_CODE, TourHeaderDetail.CITY_CODE);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.CITY_DESC, TourHeaderDetail.CITY_DESC);
    if (this.moveTargetField(recTourHeaderDetail, BookingDetail.AIRLINE_ID, TourHeaderDetail.AIRLINE_ID))
    {
        Record recAirline = ((ReferenceField)this.getField(BookingDetail.AIRLINE_ID)).getReference();
        if (recAirline != null)
            this.getField(BookingDetail.CARRIER).moveFieldToThis(recAirline.getField(Airline.DESCRIPTION));
    }
    this.moveTargetField(recTourHeaderDetail, BookingDetail.FLIGHT_NO, TourHeaderDetail.FLIGHT_NO);
    //this.moveTargetField(recTourHeaderDetail, BookingDetail.CLASS, TourHeaderDetail.CLASS);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.TO_CITY_CODE, TourHeaderDetail.TO_CITY_CODE);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.ADD_DAYS, TourHeaderDetail.ADD_DAYS);
    //this.moveTargetField(recTourHeaderDetail, BookingDetail.STATUS, TourHeaderDetail.STATUS);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.FARE_BASIS, TourHeaderDetail.FARE_BASIS);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.START_DATE, TourHeaderDetail.START_DATE);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.END_DATE, TourHeaderDetail.END_DATE);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.ALLOW, TourHeaderDetail.ALLOW);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.MEALS, TourHeaderDetail.MEALS);

    if (!recTourHeaderDetail.getField(TourHeaderAir.TOUR_HEADER_AIR_HEADER_ID).isNull())
    {	// Now move the air header reference (if it exists)
        try {
            Record recBookingAirHeader = ((ReferenceField)this.getField(BookingAir.BOOKING_AIR_HEADER_ID)).getReferenceRecord();
            recBookingAirHeader.addNew();

            recBookingAirHeader.setKeyArea(BookingAirHeader.BOOKING_ID_KEY);
            recBookingAirHeader.getField(BookingAirHeader.BOOKING_ID).moveFieldToThis(this.getField(BookingAir.BOOKING_ID));
            recBookingAirHeader.getField(BookingAirHeader.BOOKING_PAX_ID).moveFieldToThis(this.getField(BookingAir.BOOKING_PAX_ID));
            recBookingAirHeader.getField(BookingAirHeader.MODULE_ID).moveFieldToThis(this.getField(BookingAir.MODULE_ID));
            recBookingAirHeader.getField(BookingAirHeader.MODULE_START_DATE).moveFieldToThis(this.getField(BookingAir.MODULE_START_DATE));

            recBookingAirHeader.getField(BookingAirHeader.TOUR_HEADER_DETAIL_ID).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAir.TOUR_HEADER_AIR_HEADER_ID));

            if (recBookingAirHeader.seek(null))
            {
                this.getField(BookingAir.BOOKING_AIR_HEADER_ID).moveFieldToThis(recBookingAirHeader.getField(BookingAirHeader.ID));
            }


        } catch (DBException ex) {
            ex.printStackTrace();
        }
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5116">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItem</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(BookingDetail.PRODUCT_TYPE_ID, ProductType.ITEM_ID)); ]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5117">
		<LastChanged>2012-04-12T07:50:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>98</Sequence>
		<MethodName>initBookingDetailFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItem</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingItem.RATE_ID).isNull()))
    this.getField(BookingItem.RATE_ID).moveFieldToThis((BaseField)recTour.getField(Tour.ITEM_RATE_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
if ((!bOnlyIfTargetIsNull) || (this.getField(BookingItem.CLASS_ID).isNull()))
    this.getField(BookingItem.CLASS_ID).moveFieldToThis((BaseField)recTour.getField(Tour.ITEM_CLASS_ID), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5118">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setDetailProductProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItem</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5119">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>99</Sequence>
		<MethodName>moveTourHeaderFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItem</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5122">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTour</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(BookingDetail.PRODUCT_TYPE_ID, ProductType.TOUR_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5123">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>99</Sequence>
		<MethodName>initBookingDetailFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTour</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5124">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>moveTourHeaderFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTour</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (!this.getField(BookingTour.PRICING_TYPE_ID).isModified())
{   // Set the pricing type for this detail
    if (recTourHeaderDetail != null)
        if (!recTourHeaderDetail.getField(TourHeaderDetail.PRICING_TYPE_ID).isNull())
            this.getField(BookingTour.PRICING_TYPE_ID).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderDetail.PRICING_TYPE_ID),DBConstants.DISPLAY, DBConstants.INIT_MOVE );
}
if (this.getField(BookingTour.PRICING_TYPE_ID).isNull())
    if (!this.getField(BookingDetail.PRODUCT_ID).isNull())
{
     Record recTourHeader = ((ReferenceField)this.getField(BookingDetail.PRODUCT_ID)).getReference();
     if (recTourHeader != null)
     {
         TourClass recTourClass = (TourClass)((ReferenceField)recTourHeader.getField(TourHeader.TOUR_CLASS_ID)).getReference();
         if (recTourClass != null)
             if (recTourClass.getEditMode() == DBConstants.EDIT_CURRENT)
             {
                 recTourClass.fixBasedFields();
                 this.getField(BookingTour.PRICING_TYPE_ID).moveFieldToThis(recTourClass.getField(TourClass.TOUR_PRICING_TYPE_ID));                         
             }
     }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5125">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>setDetailProductProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTour</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5127">
		<LastChanged>2012-04-12T07:47:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>91</Sequence>
		<MethodName>setupEndDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTour</MethodClassName>
		<LogicSource><![CDATA[Date startDate = this.getStartDate();
Calendar calendar = DateTimeField.m_calendar;
ProductModel recTourHeader = this.getProduct();
if (recTourHeader != null)
{
	int iNights = (int)recTourHeader.getField(TourHeader.NIGHTS).getValue();
	if (iNights == 0)
		iNights = (int)recTourHeader.getField(TourHeader.DAYS).getValue();
	calendar.setTime(startDate);
	calendar.add(Calendar.DATE, iNights);
	startDate = calendar.getTime();
}
return startDate;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5128">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>94</Sequence>
		<MethodName>setupProductDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTour</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5129">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>95</Sequence>
		<MethodName>getMealDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTour</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5132">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourProductField</MethodClassName>
		<LogicSource>return new TourHeader(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5145">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getBookingDetail</MethodName>
		<LogicDescription>Get the detail record</LogicDescription>
		<MethodReturns>BookingDetail</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource>return (BookingDetail)this.getMainRecord().getTable().getCurrentTable().getRecord();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5146">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>BookingCalendarItem</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource><![CDATA[super;
if (m_iconLookup == null) // First time only
    m_iconLookup = this.getTask().loadImageIcon(BookingConstants.BUTTON_LOCATION + MenuConstants.LOOKUP, MenuConstants.LOOKUP);
if (m_iconPrice == null)
    m_iconPrice = this.getTask().loadImageIcon(BookingConstants.BUTTON_LOCATION + BookingConstants.COST, BookingConstants.COST);
if (m_iconInventory == null)
    m_iconInventory = this.getTask().loadImageIcon(BookingConstants.BUTTON_LOCATION + BookingConstants.INVENTORY, BookingConstants.INVENTORY);
if (m_iconProduct == null)
    m_iconProduct = this.getTask().loadImageIcon(BookingConstants.BUTTON_LOCATION + BookingConstants.PRODUCT, BookingConstants.PRODUCT);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5147">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>950</Sequence>
		<MethodName>getTask</MethodName>
		<LogicDescription>Utility method to get the (applet) task so I can load a graphic.</LogicDescription>
		<MethodReturns>BaseApplet</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingCalendarItem</MethodClassName>
		<LogicSource>return (BaseApplet)this.getBookingDetail().getRecordOwner().getTask();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5163">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addDetailXMLColumn</MethodName>
		<LogicDescription/>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>Record record, int iFieldSeq</MethodInterface>
		<MethodClassName>BookingDetailReportScreen</MethodClassName>
		<LogicSource>return this.addColumn(new MultipleTableFieldConverter(record, iFieldSeq));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5166">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>addColumn</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailReportScreen</MethodClassName>
		<LogicSource><![CDATA[if (converter.getField() instanceof ReferenceField)
    return new SEditText(this.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.SET_ANCHOR), this, converter, ScreenConstants.DEFAULT_DISPLAY);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5168">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getNextGridRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailReportScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = super;
if (record != null)
{
    ReferenceField fldProductID = (ReferenceField)record.getField(BookingDetail.PRODUCT_ID);
    if (fldProductID.getListener(ReadSecondaryHandler.class.getName()) == null)
    {
        fldProductID.addListener(new ReadSecondaryHandler(fldProductID.getReferenceRecord()));
    }
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5169">
		<LastChanged>2012-02-01T14:39:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addDetailXMLColumn*1</MethodName>
		<LogicDescription/>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>Record record, String iFieldSeq</MethodInterface>
		<MethodClassName>RecordReportDetail</MethodClassName>
		<LogicSource>return this.addColumn(new MultipleTableFieldConverter(record, iFieldSeq));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5170">
		<LastChanged>2012-02-01T14:39:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addDetailXMLColumn*2</MethodName>
		<LogicDescription/>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>Record record, String iFieldSeq, String iSecondFieldSeq</MethodInterface>
		<MethodClassName>RecordReportDetail</MethodClassName>
		<LogicSource>return this.addColumn(new MultipleTableFieldConverter(record, iFieldSeq, iSecondFieldSeq));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5171">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>addColumn</MethodName>
		<LogicDescription/>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>Converter converter</MethodInterface>
		<MethodClassName>RecordReportDetail</MethodClassName>
		<LogicSource><![CDATA[if (converter.getField() instanceof ReferenceField)
    return new SEditText(this.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.SET_ANCHOR), this, converter, ScreenConstants.DEFAULT_DISPLAY);
else
    return converter.setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5172">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>isPrintableControl</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RecordReportDetail</MethodClassName>
		<LogicSource><![CDATA[return true;	// Yep]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5174">
		<LastChanged>2012-06-13T14:12:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductReportDetail</MethodClassName>
		<LogicSource><![CDATA[if ((DBConstants.TRUE.equalsIgnoreCase(this.getProperty(City.CITY_FILE))) || (DBConstants.YES.equalsIgnoreCase(this.getProperty(City.CITY_FILE))))
{
    Record recCity = this.getRecord(City.CITY_FILE);
    for (int iFieldSeq = 0; iFieldSeq < recCity.getFieldCount(); iFieldSeq++)
    {
        this.addDetailXMLColumn(recCity, recCity.getField(iFieldSeq).getFieldName());
    }

    Record recCity2 = this.getRecord("To" + City.CITY_FILE);
    for (int iFieldSeq = 0; iFieldSeq < recCity2.getFieldCount(); iFieldSeq++)
    {
        this.addDetailXMLColumn(recCity2, recCity2.getField(iFieldSeq).getFieldName());
    }
}
if ((DBConstants.TRUE.equalsIgnoreCase(this.getProperty(Vendor.VENDOR_FILE))) || (DBConstants.YES.equalsIgnoreCase(this.getProperty(Vendor.VENDOR_FILE))))
{
    Record recVendor = this.getRecord(Vendor.VENDOR_FILE);
    for (int iFieldSeq = 0; iFieldSeq < recVendor.getFieldCount(); iFieldSeq++)
    {
        this.addDetailXMLColumn(recVendor, recVendor.getField(iFieldSeq).getFieldName());
    }
}

Record recBookingDetail = this.getRecord(BookingDetail.BOOKING_DETAIL_FILE);
for (int iFieldSeq = 0; iFieldSeq < 80; iFieldSeq++)    // Hotel.HOTEL_FIELDS is the largest possible value
{
    int iProductID = recBookingDetail.getFieldSeq(BookingDetail.PRODUCT_ID);
    this.addDetailXMLColumn(recBookingDetail, iProductID, iFieldSeq);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5179">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItineraryActionHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false); // By default, only respond to screen moves]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5180">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItineraryActionHandler</MethodClassName>
		<LogicSource><![CDATA[RecordOwner recordOwner = this.getOwner().getRecord().getRecordOwner();

Record recBooking = (Record)recordOwner.getRecord(Booking.BOOKING_FILE);
BaseField fldDestination = ((Record)recordOwner.getScreenRecord()).getField(BookingItineraryScreenRecord.ACTION_TARGET);
Record recMessageTransport = ((ReferenceField)recordOwner.getScreenRecord().getField(BookingItineraryScreenRecord.MESSAGE_TRANSPORT_ID)).getReference();
if (recMessageTransport != null)
{
    String strMessageTransport = recMessageTransport.getField(MessageTransport.CODE).toString();
    if (MessageTransport.FAX.equalsIgnoreCase(strMessageTransport))
    {
        fldDestination.moveFieldToThis(recBooking.getField(Booking.FAX));
    }
    else if (MessageTransport.EMAIL.equalsIgnoreCase(strMessageTransport))
    {
        fldDestination.moveFieldToThis(recBooking.getField(Booking.EMAIL));
    }
}

return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5181">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineReportScreen</MethodClassName>
		<LogicSource>return new BookingLine(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5182">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineReportScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new SubFileFilter(this.getRecord(Booking.BOOKING_FILE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5183">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineReportScreen</MethodClassName>
		<LogicSource><![CDATA[Record recBookingLine = this.getMainRecord();
((ReferenceField)recBookingLine.getField(BookingLine.BOOKING_ID)).setReferenceRecord(this.getRecord(Booking.BOOKING_FILE));
for (int iFieldSeq = 0; iFieldSeq < recBookingLine.getFieldCount(); iFieldSeq++)
{
    BaseField field = recBookingLine.getField(iFieldSeq);
    this.addColumn(field);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5184">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>isPrintableControl</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OtherItineraryReportDetail</MethodClassName>
		<LogicSource><![CDATA[return true;	// YES!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5185">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OtherItineraryReportDetail</MethodClassName>
		<LogicSource><![CDATA[// Booking detail record
new BookingDetailReportScreen(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | HtmlConstants.HEADING_SCREEN, null);
// Line items
new BookingLineReportScreen(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | HtmlConstants.HEADING_SCREEN, null);
// Pax detail
new BookingPaxReportDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | HtmlConstants.HEADING_SCREEN, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5186">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxReportDetail</MethodClassName>
		<LogicSource>return new BookingPax(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5187">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxReportDetail</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new SubFileFilter(this.getRecord(Booking.BOOKING_FILE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5188">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxReportDetail</MethodClassName>
		<LogicSource><![CDATA[Record recBookingPax = this.getMainRecord();
((ReferenceField)recBookingPax.getField(BookingPax.BOOKING_ID)).setReferenceRecord(this.getRecord(Booking.BOOKING_FILE));
for (int iFieldSeq = 0; iFieldSeq < recBookingPax.getFieldCount(); iFieldSeq++)
{
    BaseField field = recBookingPax.getField(iFieldSeq);
    this.addColumn(field);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5189">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Tour recTour = (Tour)this.getMainRecord();
BaseField fldDepartureDate = recTour.getField(Tour.DEPARTURE_DATE);
TourHeader recTourHeader = (TourHeader)this.getHeaderRecord();
TourClass recTourClass= (TourClass)((ReferenceField)recTourHeader.getField(TourHeader.TOUR_CLASS_ID)).getReferenceRecord();
Booking recBooking = null;
BaseField fldTourDesc = recTour.getField(Tour.DESCRIPTION);
fldDepartureDate.addListener(new ChangeTourHeaderHandler(recTourHeader, recTourClass, recTour, recBooking, null, fldDepartureDate, fldTourDesc));

this.getHeaderRecord().addListener(new FileListener(null)
{
    public void doValidRecord(boolean bDisplayOption)
    {
        super.doValidRecord(bDisplayOption);
        boolean bEnabledState = false;
        if (this.getOwner().getField(TourHeader.TOUR_SERIES).getState() == true)
            bEnabledState = true;
        if (this.getOwner().getField(TourHeader.TOUR_SERIES).isNull())  // Unknown type
            bEnabledState = true;
        setAppending(bEnabledState);
    }
});

this.getMainRecord().addListener(new FileListener(null)
{
    public int doRecordChange(FieldInfo field, int iChangeType, boolean bDisplayOption)
    {
        int iErrorCode = super.doRecordChange(field, iChangeType, bDisplayOption);
        if (iErrorCode != DBConstants.NORMAL_RETURN)
            return iErrorCode;
        if (iChangeType == DBConstants.FIELD_CHANGED_TYPE)
        {
            Record recTourHeader = getHeaderRecord();
            if (recTourHeader.getField(TourHeader.TOUR_SERIES).getState() != true)
            {
                try {
                    recTourHeader.edit();
                    recTourHeader.getField(TourHeader.TOUR_SERIES).setState(true);
                    int iSeriesCode = ((int)recTourHeader.getField(TourHeader.TOUR_TYPE).getValue() | TourType.SERIES);
                    recTourHeader.getField(TourHeader.TOUR_TYPE).setValue(iSeriesCode);
                    recTourHeader.writeAndRefresh();
                } catch (DBException ex) {
                    ex.printStackTrace();
                }
            }
        }
        return iErrorCode;
    }
});]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5190">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), Dance.NAME_KEY, Dance.NAME, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5191">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceField</MethodClassName>
		<LogicSource>return new Dance(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5192">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5194">
		<LastChanged>2013-01-22T05:55:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailSubScreen</MethodClassName>
		<LogicSource><![CDATA[Record recProduct = ((ReferenceField)this.getMainRecord().getField(BookingDetail.PRODUCT_ID)).getReferenceRecord();
Map<String,Object> map = new Hashtable<String,Object>();
String startDate = ((DateTimeField)this.getMainRecord().getField(BookingDetail.DETAIL_DATE)).toString();
if (startDate == null)
    startDate = ((DateTimeField)this.getRecord(Tour.TOUR_FILE).getField(Tour.DEPARTURE_DATE)).toString();
if (startDate != null)
    map.put("StartDate", startDate);
map.put("ReadOnly", Boolean.TRUE.toString());
if (strCommand.equalsIgnoreCase(Product.PRICING_DETAIL))
    return (this.onForm(recProduct, Product.PRICING_GRID_SCREEN, true, ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER, map) != null);
else if (strCommand.equalsIgnoreCase(Product.INVENTORY_DETAIL))
    return (this.onForm(recProduct, Product.INVENTORY_GRID_SCREEN, true, ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER, map) != null);
else if (strCommand.equalsIgnoreCase(MessageLog.MESSAGE_LOG_FILE))
{
    Record recMessageLog = new MessageLog(this);
    this.removeRecord(recMessageLog); // This will be owned by the new screen
    Map<String,Object> properties = new Hashtable<String,Object>();
    String strReferenceFieldName = recMessageLog.getField(MessageLog.REFERENCE_ID).getFieldName();
    String strReferenceID = this.getMainRecord().getCounterField().toString();
    String strReferenceTypeFieldName = recMessageLog.getField(MessageLog.REFERENCE_TYPE).getFieldName();
    String strReferenceType = this.getMainRecord().getTableNames(false);
    if (strReferenceID != null)
    {
        properties.put(strReferenceFieldName, strReferenceID);
        properties.put(strReferenceTypeFieldName, strReferenceType);
    }
    iCommandOptions = ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER;
    this.onForm(recMessageLog, ScreenConstants.DISPLAY_MODE, false, iCommandOptions, false, properties);
    return true;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5198">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdatePMC</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField fldPMC</MethodInterface>
		<MethodClassName>UpdatePMC</MethodClassName>
		<LogicSource><![CDATA[super;

m_fldPMC = fldPMC;

this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5199">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdatePMC</MethodClassName>
		<LogicSource><![CDATA[ReferenceField fldLandClass = (ReferenceField)this.getOwner();
if (fldLandClass.isNull())
    m_fldPMC.setData(null, bDisplayOption, iMoveMode);
else
{
    Record recLandClass = fldLandClass.getReference();
    if (LandClass.PRIVATE_VEHICLE_CODE.equals(recLandClass.getField(LandClass.CODE).toString()))
        m_fldPMC.setValue(0);
    else if (LandClass.SEAT_IN_COACH_CODE.equals(recLandClass.getField(LandClass.CODE).toString()))
        m_fldPMC.setValue(PMC_MAX);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5200">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdateLandClass</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField fldLandClass</MethodInterface>
		<MethodClassName>UpdateLandClass</MethodClassName>
		<LogicSource>m_fldLandClass = (ReferenceField)fldLandClass;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5201">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateLandClass</MethodClassName>
		<LogicSource><![CDATA[BaseField fldPMC = this.getOwner();
if ((!fldPMC.isNull()) && (fldPMC.getValue() == 0))
    m_fldLandClass.setValue(m_fldLandClass.getIDFromCode(LandClass.PRIVATE_VEHICLE_CODE));
else if (fldPMC.getValue() == UpdatePMC.PMC_MAX)
    m_fldLandClass.setValue(m_fldLandClass.getIDFromCode(LandClass.SEAT_IN_COACH_CODE));
else
    m_fldLandClass.setData(null, bDisplayOption, iMoveMode);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5202">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateLandClass</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getOwner() != null)
    this.fieldChanged(true, DBConstants.INIT_MOVE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5208">
		<LastChanged>2012-04-11T16:00:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandAvailabilityRequest</MethodClassName>
		<LogicSource><![CDATA[super;
// The SIC/PMC field is required for a inventory lookup
this.removeMessageDataDesc(BookingDetailModel.RATE_ID);
this.addMessageFieldDesc(BookingDetailModel.CLASS_ID, Integer.class, MessageFieldDesc.REQUIRED, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5260">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription><![CDATA[Get the message properties for this product.
@param strMessageName The message name.
@return A map with the message properties.]]></LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>ApControl</MethodClassName>
		<LogicSource>return trxMessageHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5263">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,400</Sequence>
		<MethodName>addDestInfo</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Vendor</MethodClassName>
		<LogicSource><![CDATA[String strMessageTransport = (String)trxMessageHeader.get(MessageTransport.SEND_MESSAGE_BY_PARAM);

if (((MessageTransport.SOAP.equalsIgnoreCase(strMessageTransport)) || (MessageTransport.XML.equalsIgnoreCase(strMessageTransport)))
    && (trxMessageHeader.get(TrxMessageHeader.DESTINATION_PARAM) == null))
{
    String strDestination = ((PropertiesField)this.getField(Vendor.PROPERTIES)).getProperty(TrxMessageHeader.DESTINATION_MESSAGE_PARAM);
    if (strDestination != null)
    {
        if (strDestination.startsWith("/"))
            if (!this.getField(Person.WEB).isNull())
                strDestination = this.getField(Person.WEB).toString() + strDestination;
        trxMessageHeader.put(TrxMessageHeader.DESTINATION_PARAM, strDestination);
    }
    else
        trxMessageHeader.put(TrxMessageHeader.DESTINATION_PARAM, this.getField(Person.WEB).toString());
}

trxMessageHeader = super;

return trxMessageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5268">
		<LastChanged>2012-01-25T17:18:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>212</Sequence>
		<MethodName>createProcessMessage*1</MethodName>
		<LogicDescription><![CDATA[Get the physical message to do this task for this product type.
Note: Basically this method is here in case I want to add per-product
message definitions.
@param strMessageProcessorCode The code in the message info file.
@return The base physical message.]]></LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>String strMessageProcessorCode, String strMessageTransport</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[TrxMessageHeader trxMessageHeader = null;
MessageProcessInfo recMessageProcessInfo = new MessageProcessInfo(this.findRecordOwner());
MessageProcessInfo recMessageProcessInfoCurrent = (MessageProcessInfo)recMessageProcessInfo.getMessageProcessInfo(strMessageProcessorCode);
if (recMessageProcessInfoCurrent != null)
    trxMessageHeader = recMessageProcessInfoCurrent.createProcessMessageHeader(this, strMessageTransport);
recMessageProcessInfo.free();
return trxMessageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5269">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription/>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>ProfileControl</MethodClassName>
		<LogicSource>return trxMessageHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5270">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,300</Sequence>
		<MethodName>getMessageTransport</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageTransport</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>Profile</MethodClassName>
		<LogicSource>return (MessageTransport)((ReferenceField)this.getField(Profile.MESSAGE_TRANSPORT_ID)).getReference();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5274">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,300</Sequence>
		<MethodName>getMessageTransport</MethodName>
		<LogicDescription>Add the information from this record to this message header.</LogicDescription>
		<MethodReturns>MessageTransport</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>Vendor</MethodClassName>
		<LogicSource>return (MessageTransport)((ReferenceField)this.getField(Vendor.MESSAGE_TRANSPORT_ID)).getReference();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5275">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,400</Sequence>
		<MethodName>addDestInfo</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Profile</MethodClassName>
		<LogicSource><![CDATA[// Add SOAP handling!

return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5277">
		<LastChanged>2012-02-01T11:35:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription>Get the request type code for this status field sequence.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String iStatusType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[String strRequestType = this.getField(iStatusType).getFieldName();
if (RequestType.BOOKING.equalsIgnoreCase(strRequestType))
{
    if (!this.productOrdered())
        strRequestType = RequestType.BOOKING_ADD;
    else
    {
        if (this.getField(BookingDetail.DELETED).getState() == true)
            strRequestType = RequestType.BOOKING_CANCEL;
        else
        {
            Record recTour = ((ReferenceField)this.getField(BookingDetail.TOUR_ID)).getReference();
            if ((recTour != null) &&
                ((recTour.getEditMode() == DBConstants.EDIT_CURRENT) || (recTour.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
                    && (recTour.getField(Tour.CANCELLED).getState() == true))
                strRequestType = RequestType.BOOKING_CANCEL;
            else
                strRequestType = RequestType.BOOKING_CHANGE;
        }
    }
}
return strRequestType;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5278">
		<LastChanged>2012-01-25T17:18:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>213</Sequence>
		<MethodName>createProcessMessage*2</MethodName>
		<LogicDescription><![CDATA[Get the physical message to do this task for this product type.
Note: Basically this method is here in case I want to add per-product
message definitions.
@param strMessageProcessorCode The code in the message info file.
@return The base physical message.]]></LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>String strMessageInfoType, String strContactType, String strRequestType, String strMessageProcessType, String strProcessType, String strMessageTransport</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[TrxMessageHeader trxMessageHeader = null;
MessageProcessInfo recMessageProcessInfo = new MessageProcessInfo(this.findRecordOwner());
MessageProcessInfo recMessageProcessInfoCurrent = (MessageProcessInfo)recMessageProcessInfo.getMessageProcessInfo(strMessageInfoType, strContactType, strRequestType, strMessageProcessType, strProcessType);
if (recMessageProcessInfoCurrent != null)
    trxMessageHeader = recMessageProcessInfoCurrent.createProcessMessageHeader(this, strMessageTransport);
recMessageProcessInfo.free();
return trxMessageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5281">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSession</MethodClassName>
		<LogicSource>return new TestHotelRateScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5282">
		<LastChanged>2012-04-12T13:16:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSession</MethodClassName>
		<LogicSource><![CDATA[if ("getrate".equalsIgnoreCase(strCommand))
{
    Object objHotelID = properties.get("ProductID");
    this.getScreenRecord().getField(TestHotelRateScreenRecord.PRODUCT_ID).setString(objHotelID.toString());
    Hotel recHotel = (Hotel)((ReferenceField)this.getScreenRecord().getField(TestHotelRateScreenRecord.PRODUCT_ID)).getReference();
    if ((recHotel.getEditMode() == DBConstants.EDIT_CURRENT)
        || (recHotel.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
    {
        String strMessageInfoType = MessageInfoType.REQUEST;
        String strContactType = recHotel.getTableNames(false);
        String strRequestType = RequestType.PRICE;
        String strMessageType = MessageType.MESSAGE_OUT;
        String strProcessType = ProcessType.INFO;
        String strMessageTransport = null;
        TrxMessageHeader trxMessageHeader = recHotel.createProcessMessage(strMessageInfoType, strContactType, strRequestType, strMessageType, strProcessType, strMessageTransport);
        if (trxMessageHeader == null)
            return null;
        BaseMessage messageOut = BaseMessage.createMessage(trxMessageHeader);
        ProductRequest message = (ProductRequest)messageOut.getMessageDataDesc(null);
        if (message == null)
            return null;

        trxMessageHeader = (TrxMessageHeader)messageOut.getMessageHeader();
        trxMessageHeader.put(MessageTransport.MANUAL_RESPONSE_PARAM, DBConstants.TRUE);    // For testing, allow manual requests
        if (m_intRegistryID != null)
            trxMessageHeader.put(TrxMessageHeader.REGISTRY_ID, m_intRegistryID);    // The return Queue ID

        Record record = this.getScreenRecord();
        message.put(BookingDetail.PRODUCT_ID, properties.get("ProductID"));
        message.put(BookingDetail.RATE_ID, properties.get("RateID"));
        message.put(BookingDetail.CLASS_ID, properties.get("ClassID"));
        message.put(BookingDetail.DETAIL_DATE, properties.get("DetailDate"));

        if (MessageTransport.DIRECT.equalsIgnoreCase((String)trxMessageHeader.get(MessageTransport.SEND_MESSAGE_BY_PARAM)))
        {
            BaseProductResponse messageReply = (BaseProductResponse)((BaseMessage)recHotel.processCostRequestInMessage(messageOut, null)).getMessageDataDesc(null);
            double dProductCost = recHotel.getField(Product.PRODUCT_COST).getValue();
            this.getScreenRecord().getField(TestHotelRateScreenRecord.TOTAL_COST).setValue(dProductCost);
        }
        else
        {
            MessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
            if (messageManager != null)
                messageManager.sendMessage(messageOut);
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5283">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSession</MethodClassName>
		<LogicSource>return null;//???ew TestTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5284">
		<LastChanged>2012-01-25T23:03:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>handleMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSession</MethodClassName>
		<LogicSource><![CDATA[System.out.println("---------------------------------------------------------- HotelSession/86");
if (message instanceof BaseMessage)
{
    Double dblRate = (Double)message.get(BookingDetail.TOTAL_COST);
    if (message.get(HotelRateResponse.PRODUCT_RESPONSE_MESSAGE) instanceof HotelRateResponseMessageData)
    {
        dblRate = new Double(((HotelRateResponseMessageData)message.get(HotelRateResponse.PRODUCT_RESPONSE_MESSAGE)).getRoomCost(PaxCategory.DOUBLE_ID));
    }

    MessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
    BaseMessageHeader messageFilter = message.getMessageHeader();
    BaseMessageHeader messageHeader = new SessionMessageHeader(null, this);
    Map<String,Object> properties = new Hashtable<String,Object>();
    properties.put("hotelCost", dblRate);
    BaseMessage messageTableUpdate = new MapMessage(messageHeader, properties);
    messageManager.sendMessage(messageTableUpdate);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5285">
		<LastChanged>2012-01-25T23:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSession</MethodClassName>
		<LogicSource><![CDATA[super;

//        BaseMessageFilter remoteFilter = new ServerSessionMessageFilter(messageFilter.getQueueName(), messageFilter.getQueueType(), null, this);
//System.out.println("Remote filter " + remoteFilter);
BaseMessageFilter filterForSession = new BaseMessageFilter(MessageConstants.TRX_RETURN_QUEUE, MessageConstants.INTERNET_QUEUE, null, null);
MessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
messageManager.addMessageFilter(filterForSession);
filterForSession.addMessageListener(this);

m_intRegistryID = filterForSession.getRegistryID();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5287">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[if (m_recProductPricing != null)
    m_recProductPricing.free();
m_recProductPricing = null;
if (m_recProductTerms != null)
    m_recProductTerms.free();
m_recProductTerms = null;
if (m_recInventory != null)
    m_recInventory.free();
m_recInventory = null;
if (m_recMessageProcessInfo != null)
    m_recMessageProcessInfo.free();
m_recMessageProcessInfo = null;

super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5288">
		<LastChanged>2012-04-12T10:14:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>processCostRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Transportation</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequest = (ProductRequest)((BaseMessage)messageIn).getMessageDataDesc(null);
TransportationMessageData productMessageData = (TransportationMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
PassengerMessageData passengerMessageData  = (PassengerMessageData)productRequest.getMessageDataDesc(ProductRequest.PASSENGER_MESSAGE);

Date dateTarget = productMessageData.getTargetDate();
short sTargetPax = passengerMessageData.getTargetPax();
int iTransportationClassID = productMessageData.getRateClassID();

TransportationRateResponse responseMessage = null;
if (messageReply == null)
{
    messageReply = new TreeMessage(null, null);
    responseMessage =  new TransportationRateResponse((BaseMessage)messageReply, null);
}
else
    responseMessage = (TransportationRateResponse)((BaseMessage)messageReply).getMessageDataDesc(null);
responseMessage.moveRequestInfoToReply(messageIn);
ProductRateResponseMessageData responseProductMessageData = (ProductRateResponseMessageData)responseMessage.getMessageDataDesc(ProductRateResponse.PRODUCT_RESPONSE_MESSAGE);

double dPPCost = this.getTransportationCost(dateTarget, sTargetPax, iTransportationClassID, false);
double dPPPriceLocal = this.getTransportationCost(dateTarget, sTargetPax, iTransportationClassID, true);

this.getField(Transportation.PP_COST).setValue(dPPCost);
this.getField(Transportation.PP_PRICE_LOCAL).setValue(dPPPriceLocal);

double dTransportationCost = dPPCost;

double dTotalLocalCost = Math.floor(dTransportationCost * sTargetPax * 100.00 + 0.5) / 100.00;
double dTotalLocalPrice = Math.floor(dPPPriceLocal * sTargetPax * 100.00 + 0.5) / 100.00;

this.getField(Transportation.CLASS_ID).setValue(iTransportationClassID);

this.getField(Transportation.PP_COST).setValue(dTransportationCost);
this.getField(Product.PRODUCT_COST).setValue(dTotalLocalCost);
this.getField(Product.PRODUCT_PRICE_LOCAL).setValue(dTotalLocalPrice);

responseProductMessageData.setPPCost(this.getField(Transportation.PP_COST).getValue());
if (iTransportationClassID != productMessageData.getRateClassID())
{
    responseProductMessageData.setRateClassID(productMessageData.getRateClassID());
    responseProductMessageData.setNewRateClassID(iTransportationClassID);
}
responseProductMessageData.setProductCost(dTotalLocalCost);

int iStatus = BaseStatus.VALID;
if (dTotalLocalCost == 0)
    iStatus = BaseStatus.NOT_VALID;
responseMessage.setMessageDataStatus(iStatus);
this.getField(Product.DISPLAY_COST_STATUS_ID).setValue(iStatus);
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5289">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,100</Sequence>
		<MethodName>getTransportationCost</MethodName>
		<LogicDescription/>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>Date dateTarget, short sTargetPax, int iTransportationClassID, boolean bGetPrice</MethodInterface>
		<MethodClassName>Transportation</MethodClassName>
		<LogicSource><![CDATA[double dCost = 0;

TransportationPricing recProductCostLookup = ((TransportationPricing)this.getProductPricing()).getTransportationCost(this, dateTarget, sTargetPax, iTransportationClassID);
if (recProductCostLookup != null)
{
    if (!bGetPrice)
        dCost += recProductCostLookup.getCost(TransportationPricing.COST, this.getProductTerms());
    else
        dCost += recProductCostLookup.getField(TransportationPricing.PRICE).getValue();
}
return dCost;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5292">
		<LastChanged>2012-02-01T19:02:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getTransportationCost</MethodName>
		<LogicDescription/>
		<MethodReturns>TransportationPricing</MethodReturns>
		<MethodInterface>Transportation recTransportation, Date dateTarget, short sTargetPax, int iClassID</MethodInterface>
		<MethodClassName>TransportationPricing</MethodClassName>
		<LogicSource><![CDATA[if (dateTarget == null)
    return null;
dateTarget = Converter.convertTimeToDate(dateTarget);
if ((this.getEditMode() == Constants.EDIT_IN_PROGRESS) || (this.getEditMode() == Constants.EDIT_CURRENT))
{
    if (this.getField(ProductPricing.PRODUCT_ID).equals(recTransportation.getField(Product.ID)))
    if (this.getField(ProductPricing.CLASS_ID).getValue() == iClassID)
    if (this.getField(ProductPricing.START_DATE).getValue() <= dateTarget.getTime()) // Start <= thisDate
    if (this.getField(ProductPricing.END_DATE).getValue() >= dateTarget.getTime())   // End >= thisDate
    if (this.getField(TransportationPricing.FROM_PAX).getValue() <= sTargetPax)    // Start <= thisDate
    if (this.getField(TransportationPricing.TO_PAX).getValue() >= sTargetPax)  // End >= thisDate
        return this;        // Valid price
}

this.getField(ProductPricing.PRODUCT_ID).moveFieldToThis(recTransportation.getField(Product.ID));
this.getField(ProductPricing.CLASS_ID).setValue(iClassID);
((DateTimeField)this.getField(ProductPricing.END_DATE)).setDate(dateTarget, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(TransportationPricing.TO_PAX).setValue(sTargetPax);
this.getField(ProductPricing.ID).setValue(0);   // Since it reads from current.

this.setKeyArea(ProductPricing.PRODUCT_ID_KEY);
FileListener behavior1 = new SubCurrentFilter(true, false);
this.addListener(behavior1);

try   {
    this.close();
    while (this.hasNext())
    {   // Loop until found or not
        this.next();
        if (!this.getField(ProductPricing.PRODUCT_ID).equals(recTransportation.getField(Product.ID)))
            break;
        if (this.getField(ProductPricing.CLASS_ID).getValue() != iClassID)
            break;
        if (this.getField(ProductPricing.START_DATE).getValue() > dateTarget.getTime())    // Start > thisDate
            break;
        if (this.getField(ProductPricing.END_DATE).getValue() >= dateTarget.getTime())   // End >= thisDate
        {
            if (this.getField(TransportationPricing.FROM_PAX).getValue() <= sTargetPax)    // Start > thisDate
                if (this.getField(TransportationPricing.TO_PAX).getValue() >= sTargetPax)  // End >= thisDate
                    return this;        // Valid price
        }
    }
} catch (DBException ex)   {
    ex.printStackTrace();
} finally {
    this.removeListener(behavior1, true);
}
return null;    // Rate not found if loop finished]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5296">
		<LastChanged>2012-04-11T00:10:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationMessageData</MethodClassName>
		<LogicSource><![CDATA[super;
this.removeMessageDataDesc(BookingDetailModel.RATE_ID);
this.removeMessageDataDesc(BookingDetailModel.CLASS_ID);
this.addMessageFieldDesc(BookingDetailModel.RATE_ID, Integer.class, MessageFieldDesc.OPTIONAL, null);
this.addMessageFieldDesc(BookingDetailModel.CLASS_ID, Integer.class, MessageFieldDesc.OPTIONAL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5297">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationMessageData</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5298">
		<LastChanged>2012-04-11T00:10:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
((Record)record).getField(BookingTransportationModel.PP_COST).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5299">
		<LastChanged>2012-04-11T11:20:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
BookingTransportationModel recBookingTransportation = (BookingTransportationModel)record;
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5300">
		<LastChanged>2012-04-11T00:10:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationMessageData</MethodClassName>
		<LogicSource><![CDATA[this.put(BookingDetailModel.CLASS_ID, propertyOwner.getProperty(BookingDetailModel.CLASS_ID));
this.put(BookingDetailModel.DETAIL_DATE, propertyOwner.getProperty(BookingDetailModel.DETAIL_DATE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5307">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransRateRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Transportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5318">
		<LastChanged>2012-04-11T10:05:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,500</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationMessageData</MethodClassName>
		<LogicSource><![CDATA[if (bFindFirst)
    if (recordOwner != null)
        if (recordOwner.getRecord(TransportationModel.TRANSPORTATION_FILE) != null)
            return (TransportationModel)recordOwner.getRecord(TransportationModel.TRANSPORTATION_FILE);
return (TransportationModel)Record.makeRecordFromClassName(TransportationModel.THICK_CLASS, recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5319">
		<LastChanged>2012-04-11T10:07:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,500</Sequence>
		<MethodName>getProductClass</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationMessageData</MethodClassName>
		<LogicSource>return (TransportationClassModel)Record.makeRecordFromClassName(TransportationClassModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5320">
		<LastChanged>2012-04-11T10:10:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,500</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandMessageData</MethodClassName>
		<LogicSource><![CDATA[if (bFindFirst)
    if (recordOwner != null)
        if (recordOwner.getRecord(LandModel.LAND_FILE) != null)
            return (LandModel)recordOwner.getRecord(LandModel.LAND_FILE);
return (LandModel)Record.makeRecordFromClassName(LandModel.THICK_CLASS, recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5321">
		<LastChanged>2012-04-11T10:11:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,500</Sequence>
		<MethodName>getProductClass</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandMessageData</MethodClassName>
		<LogicSource>return (LandClassModel)Record.makeRecordFromClassName(LandClassModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5325">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getCarCost</MethodName>
		<LogicDescription/>
		<MethodReturns>CarPricing</MethodReturns>
		<MethodInterface>Car recCar, Date dateTarget, int iRateID, int iClassID</MethodInterface>
		<MethodClassName>CarPricing</MethodClassName>
		<LogicSource>return (CarPricing)this.getProductCost(recCar, dateTarget, iRateID, iClassID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5326">
		<LastChanged>2012-02-01T19:02:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getProductCost</MethodName>
		<LogicDescription/>
		<MethodReturns>ProductPricing</MethodReturns>
		<MethodInterface>Product recProduct, Date dateTarget, int iRateID, int iClassID</MethodInterface>
		<MethodClassName>ProductPricing</MethodClassName>
		<LogicSource><![CDATA[if (dateTarget == null)
    return null;
dateTarget = Converter.convertTimeToDate(dateTarget);
if ((this.getEditMode() == Constants.EDIT_IN_PROGRESS) || (this.getEditMode() == Constants.EDIT_CURRENT))
{
    if (this.getField(ProductPricing.PRODUCT_ID).equals(recProduct.getField(Product.ID)))
    if (this.getField(ProductPricing.RATE_ID).getValue() == iRateID)
    if (this.getField(ProductPricing.CLASS_ID).getValue() == iClassID)
    if (this.getField(ProductPricing.START_DATE).getValue() <= dateTarget.getTime()) // Start <= thisDate
    if (this.getField(ProductPricing.END_DATE).getValue() >= dateTarget.getTime())   // End >= thisDate
        return this;        // Valid price
}

this.getField(ProductPricing.PRODUCT_ID).moveFieldToThis(recProduct.getField(Product.ID));
this.getField(ProductPricing.RATE_ID).setValue(iRateID);
this.getField(ProductPricing.CLASS_ID).setValue(iClassID);
((DateTimeField)this.getField(ProductPricing.END_DATE)).setDate(dateTarget, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getField(ProductPricing.ID).setValue(0);   // Since it reads from current.

this.setKeyArea(ProductPricing.PRODUCT_ID_KEY);
FileListener behavior = new SubCurrentFilter(true, false);
this.addListener(behavior);

try   {
    this.close();
    while (this.hasNext())
    {   // Loop until found or not
        this.next();
        if (!this.getField(ProductPricing.PRODUCT_ID).equals(recProduct.getField(Product.ID)))
            break;
        if (this.getField(ProductPricing.RATE_ID).getValue() != iRateID)
            break;
        if (this.getField(ProductPricing.CLASS_ID).getValue() != iClassID)
            break;
        if (this.getField(ProductPricing.START_DATE).getValue() > dateTarget.getTime())    // Start > thisDate
            break;
        if (this.getField(ProductPricing.END_DATE).getValue() >= dateTarget.getTime())   // End >= thisDate
            return this;        // Valid price
    }
} catch (DBException ex)   {
    ex.printStackTrace();
} finally {
    this.removeListener(behavior, true);
}
return null;    // Rate not found if loop finished]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5327">
		<LastChanged>2012-04-12T10:07:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>processCostRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Car</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequest = (ProductRequest)((BaseMessage)messageIn).getMessageDataDesc(null);
CarMessageData productMessageData = (CarMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);

Date dateTarget = productMessageData.getTargetDate();
short sQuantity = productMessageData.getQuantity();
int iCarRateID = productMessageData.getRateTypeID();
int iCarClassID = productMessageData.getRateClassID();
int iDays = productMessageData.getDays();

CarRateResponse responseMessage = null;
if (messageReply == null)
{
    messageReply = new TreeMessage(null, null);
    responseMessage =  new CarRateResponse((BaseMessage)messageReply, null);
}
else
    responseMessage = (CarRateResponse)((BaseMessage)messageReply).getMessageDataDesc(null);

responseMessage.moveRequestInfoToReply(messageIn);
ProductRateResponseMessageData responseProductMessageData = (ProductRateResponseMessageData)responseMessage.getMessageDataDesc(ProductRateResponse.PRODUCT_RESPONSE_MESSAGE);

double dPPCost = this.getCarCost(dateTarget, iDays, iCarRateID, iCarClassID, false);
double dPPPriceLocal = this.getCarCost(dateTarget, iDays, iCarRateID, iCarClassID, true);

this.getField(Car.PER_VEHICLE_COST).setValue(dPPCost);
this.getField(Car.PER_VEHICLE_PRICE_LOCAL).setValue(dPPPriceLocal);

double dCarCost = dPPCost;

double dTotalLocalCost = Math.floor(dCarCost * sQuantity * 100.00 + 0.5) / 100.00;
double dTotalLocalPriceLocal = Math.floor(dPPPriceLocal * sQuantity * 100.00 + 0.5) / 100.00;

this.getField(Car.CLASS_ID).setValue(iCarClassID);

this.getField(Car.PER_VEHICLE_COST).setValue(dCarCost);
this.getField(Product.PRODUCT_COST).setValue(dTotalLocalCost);
this.getField(Product.PRODUCT_PRICE_LOCAL).setValue(dTotalLocalPriceLocal);

((CarRateResponse)responseMessage).setPerVehicleCost(this.getField(Car.PER_VEHICLE_COST).getValue());
if (iCarClassID != productMessageData.getRateClassID())
{
    responseProductMessageData.setRateClassID(productMessageData.getRateClassID());
    responseProductMessageData.setNewRateClassID(iCarClassID);
}
responseProductMessageData.setProductCost(dTotalLocalCost);

int iStatus = BaseStatus.VALID;
if (dTotalLocalCost == 0)
{
    iStatus = BaseStatus.NOT_VALID;
    responseMessage.setMessageDataError(this.getTask().getApplication().getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(COST_NOT_FOUND_MSG));
}
responseMessage.setMessageDataStatus(iStatus);
this.getField(Product.DISPLAY_COST_STATUS_ID).setValue(iStatus);
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5328">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,100</Sequence>
		<MethodName>getCarCost</MethodName>
		<LogicDescription/>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>Date dateTarget, int iDays, int iRateID, int iClassID, boolean bGetPrice</MethodInterface>
		<MethodClassName>Car</MethodClassName>
		<LogicSource><![CDATA[double dCost = 0;
if (dateTarget == null)
    return 0;

while (iDays > 0)
{
    CarPricing recProductCostLookup = ((CarPricing)this.getProductPricing()).getCarCost(this, dateTarget, iRateID, iClassID);
    if (recProductCostLookup != null)
    {
        if (!bGetPrice)
            dCost += recProductCostLookup.getCost(CarPricing.COST, this.getProductTerms());
        else
            dCost += recProductCostLookup.getField(CarPricing.PRICE).getValue();
    }
    else
        return 0;   // No cost for this day = error
    dateTarget = new Date(dateTarget.getTime() + DBConstants.KMS_IN_A_DAY);
    iDays--;
}
return dCost;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5329">
		<LastChanged>2012-04-11T09:59:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,300</Sequence>
		<MethodName>getProductClass</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarMessageData</MethodClassName>
		<LogicSource>return (CarClassModel)Record.makeRecordFromClassName(CarClassModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5330">
		<LastChanged>2012-04-11T09:59:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,200</Sequence>
		<MethodName>getProductRate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarMessageData</MethodClassName>
		<LogicSource>return (CarRateModel)Record.makeRecordFromClassName(CarRateModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5331">
		<LastChanged>2012-04-11T09:59:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarMessageData</MethodClassName>
		<LogicSource><![CDATA[if (bFindFirst)
    if (recordOwner != null)
        if (recordOwner.getRecord(CarModel.CAR_FILE) != null)
            return (CarModel)recordOwner.getRecord(CarModel.CAR_FILE);
return (CarModel)Record.makeRecordFromClassName(CarModel.THICK_CLASS, recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5334">
		<LastChanged>2012-04-11T00:10:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarMessageData</MethodClassName>
		<LogicSource><![CDATA[this.put(BookingCarModel.DAYS, propertyOwner.getProperty(BookingCarModel.DAYS));
this.put(BookingCarModel.QUANTITY, propertyOwner.getProperty(BookingCarModel.QUANTITY));
this.put(BookingDetailModel.CLASS_ID, propertyOwner.getProperty(BookingDetailModel.CLASS_ID));
this.put(BookingDetailModel.RATE_ID, propertyOwner.getProperty(BookingDetailModel.RATE_ID));
this.put(BookingDetailModel.DETAIL_DATE, propertyOwner.getProperty(BookingDetailModel.DETAIL_DATE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5335">
		<LastChanged>2012-04-11T09:56:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
Rec recBookingDetail = (BookingDetailModel)record;
this.putRawFieldData(recBookingDetail.getField(BookingCarModel.QUANTITY));
this.putRawFieldData(recBookingDetail.getField(BookingCarModel.DAYS));
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5336">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarMessageData</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5337">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarMessageData</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5338">
		<LastChanged>2012-04-11T00:10:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarMessageData</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMessageFieldDesc(BookingCarModel.DAYS, Integer.class, MessageFieldDesc.REQUIRED, null);
this.addMessageFieldDesc(BookingCarModel.QUANTITY, Short.class, MessageFieldDesc.REQUIRED, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5339">
		<LastChanged>2012-04-11T00:10:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,400</Sequence>
		<MethodName>getQuantity</MethodName>
		<LogicDescription/>
		<MethodReturns>short</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CarMessageData</MethodClassName>
		<LogicSource><![CDATA[Short shQuantity = (Short)this.get(BookingCarModel.QUANTITY);
if (shQuantity == null)
    shQuantity = QUANTITY_DEFAULT;
return shQuantity.shortValue();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5340">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setPerVehicleCost</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>double dPerVehicleCost</MethodInterface>
		<MethodClassName>CarRateResponse</MethodClassName>
		<LogicSource>this.put(PER_VEHICLE_COST_PARAM, new Double(dPerVehicleCost));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5341">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarRateRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Car(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5342">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirRateRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Air(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5343">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseRateRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Cruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5344">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemRateRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Item(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5345">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourRateRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new TourHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5346">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseRateField</MethodClassName>
		<LogicSource>return new CruiseRate(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5347">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseRateField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), CruiseRate.DESCRIPTION_KEY, CruiseRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5348">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getCruiseCost</MethodName>
		<LogicDescription/>
		<MethodReturns>CruisePricing</MethodReturns>
		<MethodInterface>Cruise recCruise, Date dateTarget, int iRateID, int iClassID</MethodInterface>
		<MethodClassName>CruisePricing</MethodClassName>
		<LogicSource>return (CruisePricing)this.getProductCost(recCruise, dateTarget, iRateID, iClassID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5349">
		<LastChanged>2012-04-12T10:08:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>processCostRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Cruise</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequest = (ProductRequest)((BaseMessage)messageIn).getMessageDataDesc(null);
CruiseMessageData productMessageData = (CruiseMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
PassengerMessageData passengerMessageData  = (PassengerMessageData)productRequest.getMessageDataDesc(ProductRequest.PASSENGER_MESSAGE);

String NO_CRUISE_RATE = "No cruise rate";
BaseApplication application = null;
if (this.getRecordOwner() != null)
    if (this.getRecordOwner().getTask() != null)
        application = (BaseApplication)this.getRecordOwner().getTask().getApplication();
if (application == null)
    application = (BaseApplication)BaseApplet.getSharedInstance().getApplication();
int iCostStatus = BaseStatus.VALID;
String strErrorMessage = DBConstants.BLANK;

Date dateTarget = productMessageData.getTargetDate();
short sTargetPax = passengerMessageData.getTargetPax();
int iCruiseRateID = productMessageData.getRateTypeID();
int iCruiseClassID = productMessageData.getRateClassID();

CruiseRateResponse responseMessage = null;
if (messageReply == null)
{
    messageReply = new TreeMessage(null, null);
    responseMessage =  new CruiseRateResponse((BaseMessage)messageReply, null);
}
else
    responseMessage = (CruiseRateResponse)((BaseMessage)messageReply).getMessageDataDesc(null);

responseMessage.moveRequestInfoToReply(messageIn);
ProductRateResponseMessageData responseProductMessageData = (ProductRateResponseMessageData)responseMessage.getMessageDataDesc(ProductRateResponse.PRODUCT_RESPONSE_MESSAGE);

double dPPCost = this.getCruiseCost(dateTarget, iCruiseRateID, iCruiseClassID, false);
double dPPPriceLocal = this.getCruiseCost(dateTarget, iCruiseRateID, iCruiseClassID, true);

this.getField(Cruise.PP_COST).setValue(dPPCost);
this.getField(Cruise.PP_PRICE_LOCAL).setValue(dPPPriceLocal);

double dCruiseCost = dPPCost;

double dTotalLocalCost = Math.floor(dCruiseCost * sTargetPax * 100.00 + 0.5) / 100.00;
double dTotalLocalPrice = Math.floor(dPPPriceLocal * sTargetPax * 100.00 + 0.5) / 100.00;

this.getField(Cruise.CLASS_ID).setValue(iCruiseClassID);
this.getField(Cruise.RATE_ID).setValue(iCruiseRateID);

this.getField(Cruise.PP_COST).setValue(dCruiseCost);
this.getField(Product.PRODUCT_COST).setValue(dTotalLocalCost);
this.getField(Product.PRODUCT_PRICE_LOCAL).setValue(dTotalLocalPrice);

responseProductMessageData.setPPCost(this.getField(Cruise.PP_COST).getValue());
if (iCruiseClassID != productMessageData.getRateClassID())
{
    responseProductMessageData.setRateClassID(productMessageData.getRateClassID());
    responseProductMessageData.setNewRateClassID(iCruiseClassID);
}
responseProductMessageData.setProductCost(dTotalLocalCost);

int iStatus = BaseStatus.VALID;
if (dTotalLocalCost == 0)
    iStatus = BaseStatus.NOT_VALID;
responseMessage.setMessageDataStatus(iStatus);
this.getField(Product.DISPLAY_COST_STATUS_ID).setValue(iStatus);
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5350">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,100</Sequence>
		<MethodName>getCruiseCost</MethodName>
		<LogicDescription/>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>Date dateTarget, int iRateID, int iClassID, boolean bGetPrice</MethodInterface>
		<MethodClassName>Cruise</MethodClassName>
		<LogicSource><![CDATA[double dCost = 0;
CruisePricing recProductCostLookup = ((CruisePricing)this.getProductPricing()).getCruiseCost(this, dateTarget, iRateID, iClassID);
if (recProductCostLookup != null)
{
    if (!bGetPrice)
        dCost += recProductCostLookup.getCost(CruisePricing.COST, this.getProductTerms());
    else
        dCost += recProductCostLookup.getField(CruisePricing.PRICE).getValue();
}
return dCost;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5351">
		<LastChanged>2012-04-11T10:01:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseMessageData</MethodClassName>
		<LogicSource><![CDATA[if (bFindFirst)
    if (recordOwner != null)
        if (recordOwner.getRecord(CruiseModel.CRUISE_FILE) != null)
            return (CruiseModel)recordOwner.getRecord(CruiseModel.CRUISE_FILE);
return (CruiseModel)Record.makeRecordFromClassName(CruiseModel.THICK_CLASS, recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5352">
		<LastChanged>2012-04-11T10:02:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,200</Sequence>
		<MethodName>getProductClass</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseMessageData</MethodClassName>
		<LogicSource>return (CruiseClassModel)Record.makeRecordFromClassName(CruiseClassModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5353">
		<LastChanged>2012-04-11T10:02:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,300</Sequence>
		<MethodName>getProductRate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseMessageData</MethodClassName>
		<LogicSource>return (CruiseRateModel)Record.makeRecordFromClassName(CruiseRateModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5356">
		<LastChanged>2012-04-11T00:10:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,200</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseMessageData</MethodClassName>
		<LogicSource><![CDATA[this.put(BookingDetailModel.CLASS_ID, propertyOwner.getProperty(BookingDetailModel.CLASS_ID));
this.put(BookingDetailModel.RATE_ID, propertyOwner.getProperty(BookingDetailModel.RATE_ID));
this.put(BookingDetailModel.DETAIL_DATE, propertyOwner.getProperty(BookingDetailModel.DETAIL_DATE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5357">
		<LastChanged>2012-04-11T10:00:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,100</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseMessageData</MethodClassName>
		<LogicSource><![CDATA[BookingDetailModel recBookingDetail = (BookingDetailModel)record;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5358">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseMessageData</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5359">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseMessageData</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5360">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseMessageData</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5361">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseRateSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), CruiseRate.DESCRIPTION_KEY, CruiseRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5362">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getAirCost</MethodName>
		<LogicDescription/>
		<MethodReturns>AirPricing</MethodReturns>
		<MethodInterface>Air recAir, Date dateTarget, int iRateID, int iClassID</MethodInterface>
		<MethodClassName>AirPricing</MethodClassName>
		<LogicSource>return (AirPricing)this.getProductCost(recAir, dateTarget, iRateID, iClassID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5363">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirRateField</MethodClassName>
		<LogicSource>return new AirRate(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5364">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirRateField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), AirRate.DESCRIPTION_KEY, AirRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5365">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirRateSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), AirRate.DESCRIPTION_KEY, AirRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5366">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationRateField</MethodClassName>
		<LogicSource>return new TransportationRate(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5367">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationRateField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), TransportationRate.DESCRIPTION_KEY, TransportationRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5368">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationRateSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), TransportationRate.DESCRIPTION_KEY, TransportationRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5369">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateField</MethodClassName>
		<LogicSource>return new LandRate(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5370">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), LandClass.DESCRIPTION_KEY, LandClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5371">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), LandRate.DESCRIPTION_KEY, LandRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5372">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirClassSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), AirClass.DESCRIPTION_KEY, AirClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5373">
		<LastChanged>2012-04-12T10:05:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>processCostRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Air</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequest = (ProductRequest)((BaseMessage)messageIn).getMessageDataDesc(null);
AirMessageData productMessageData = (AirMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
PassengerMessageData passengerMessageData  = (PassengerMessageData)productRequest.getMessageDataDesc(ProductRequest.PASSENGER_MESSAGE);

Date dateTarget = productMessageData.getTargetDate();
short sTargetPax = passengerMessageData.getTargetPax();
int iAirRateID = productMessageData.getRateTypeID();
int iAirClassID = productMessageData.getRateClassID();

AirRateResponse responseMessage = null;
if (messageReply == null)
{
    messageReply = new TreeMessage(null, null);
    responseMessage =  new AirRateResponse((BaseMessage)messageReply, null);
}
else
    responseMessage = (AirRateResponse)((BaseMessage)messageReply).getMessageDataDesc(null);
responseMessage.moveRequestInfoToReply(messageIn);
ProductRateResponseMessageData responseProductMessageData = (ProductRateResponseMessageData)responseMessage.getMessageDataDesc(ProductRateResponse.PRODUCT_RESPONSE_MESSAGE);
        
double dPPCost = this.getAirCost(dateTarget, iAirRateID, iAirClassID, false);
double dPPPriceLocal = this.getAirCost(dateTarget, iAirRateID, iAirClassID, true);

this.getField(Air.PP_COST).setValue(dPPCost);
this.getField(Air.PP_PRICE_LOCAL).setValue(dPPPriceLocal);

double dAirCost = dPPCost;

double dTotalLocalCost = Math.floor(dAirCost * sTargetPax * 100.00 + 0.5) / 100.00;
double dTotalLocalPrice = Math.floor(dPPPriceLocal * sTargetPax * 100.00 + 0.5) / 100.00;

this.getField(Air.CLASS_ID).setValue(iAirClassID);

this.getField(Air.PP_COST).setValue(dAirCost);
this.getField(Product.PRODUCT_COST).setValue(dTotalLocalCost);
this.getField(Product.PRODUCT_PRICE_LOCAL).setValue(dTotalLocalPrice);

responseProductMessageData.setPPCost(this.getField(Air.PP_COST).getValue());
if (iAirClassID != productMessageData.getRateClassID())
{
    responseProductMessageData.setRateClassID(productMessageData.getRateClassID());
    responseProductMessageData.setNewRateClassID(iAirClassID);
}
responseProductMessageData.setProductCost(dTotalLocalCost);

int iStatus = BaseStatus.VALID;
if (dTotalLocalCost == 0)
    iStatus = BaseStatus.NOT_VALID;
responseMessage.setMessageDataStatus(iStatus);
this.getField(Product.DISPLAY_COST_STATUS_ID).setValue(iStatus);
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5374">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,100</Sequence>
		<MethodName>getAirCost</MethodName>
		<LogicDescription/>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>Date dateTarget, int iAirRateID, int iAirClassID, boolean bGetPrice</MethodInterface>
		<MethodClassName>Air</MethodClassName>
		<LogicSource><![CDATA[double dCost = 0;
AirPricing recProductCostLookup = ((AirPricing)this.getProductPricing()).getAirCost(this, dateTarget, iAirRateID, iAirClassID);
if (recProductCostLookup != null)
{
    if (!bGetPrice)
        dCost += recProductCostLookup.getCost(AirPricing.COST, this.getProductTerms());
    else
        dCost += recProductCostLookup.getField(AirPricing.PRICE).getValue();
}
return dCost;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5375">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirMessageData</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5376">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirMessageData</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5377">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirMessageData</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5378">
		<LastChanged>2012-04-11T09:53:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,000</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirMessageData</MethodClassName>
		<LogicSource><![CDATA[BookingAirModel recBookingAir = (BookingAirModel)record;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5379">
		<LastChanged>2012-04-11T00:10:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,100</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirMessageData</MethodClassName>
		<LogicSource><![CDATA[this.put(BookingDetailModel.RATE_ID, propertyOwner.getProperty(BookingDetailModel.RATE_ID));
this.put(BookingDetailModel.CLASS_ID, propertyOwner.getProperty(BookingDetailModel.CLASS_ID));
this.put(BookingDetailModel.DETAIL_DATE, propertyOwner.getProperty(BookingDetailModel.DETAIL_DATE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5382">
		<LastChanged>2012-04-11T09:54:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>7,000</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirMessageData</MethodClassName>
		<LogicSource><![CDATA[if (bFindFirst)
    if (recordOwner != null)
        if (recordOwner.getRecord(AirModel.AIR_FILE) != null)
            return (AirModel)recordOwner.getRecord(AirModel.AIR_FILE);
return (AirModel)Record.makeRecordFromClassName(AirModel.THICK_CLASS, recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5383">
		<LastChanged>2012-04-11T09:55:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>7,100</Sequence>
		<MethodName>getProductRate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirMessageData</MethodClassName>
		<LogicSource>return (AirRateModel)Record.makeRecordFromClassName(AirRateModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5384">
		<LastChanged>2012-04-11T09:55:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>7,200</Sequence>
		<MethodName>getProductClass</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirMessageData</MethodClassName>
		<LogicSource>return (AirClassModel)Record.makeRecordFromClassName(AirClassModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5385">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getItemCost</MethodName>
		<LogicDescription/>
		<MethodReturns>ItemPricing</MethodReturns>
		<MethodInterface>Item recItem, Date dateTarget, int iRateID, int iClassID</MethodInterface>
		<MethodClassName>ItemPricing</MethodClassName>
		<LogicSource>return (ItemPricing)this.getProductCost(recItem, dateTarget, iRateID, iClassID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5386">
		<LastChanged>2012-04-12T10:10:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>processCostRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Item</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequest = (ProductRequest)((BaseMessage)messageIn).getMessageDataDesc(null);
ItemMessageData productMessageData = (ItemMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
PassengerMessageData passengerMessageData  = (PassengerMessageData)productRequest.getMessageDataDesc(ProductRequest.PASSENGER_MESSAGE);

Date dateTarget = productMessageData.getTargetDate();
short sTargetPax = passengerMessageData.getTargetPax();
int iRateID = productMessageData.getRateTypeID();
int iClassID = productMessageData.getRateClassID();

ItemRateResponse responseMessage = null;
if (messageReply == null)
{
    messageReply = new TreeMessage(null, null);
    responseMessage =  new ItemRateResponse((BaseMessage)messageReply, null);
}
else
    responseMessage = (ItemRateResponse)((BaseMessage)messageReply).getMessageDataDesc(null);
responseMessage.moveRequestInfoToReply(messageIn);
ProductRateResponseMessageData responseProductMessageData = (ProductRateResponseMessageData)responseMessage.getMessageDataDesc(ProductRateResponse.PRODUCT_RESPONSE_MESSAGE);

double dPPCost = this.getItemCost(dateTarget, iRateID, iClassID, false);
double dPPPriceLocal = this.getItemCost(dateTarget, iRateID, iClassID, true);

this.getField(Item.PP_COST).setValue(dPPCost);
this.getField(Item.PP_PRICE_LOCAL).setValue(dPPPriceLocal);

double dItemCost = dPPCost;

double dTotalLocalCost = Math.floor(dItemCost * sTargetPax * 100.00 + 0.5) / 100.00;
double dTotalLocalPrice = Math.floor(dPPPriceLocal * sTargetPax * 100.00 + 0.5) / 100.00;

this.getField(Item.CLASS_ID).setValue(iClassID);

this.getField(Item.PP_COST).setValue(dItemCost);
this.getField(Product.PRODUCT_COST).setValue(dTotalLocalCost);
this.getField(Product.PRODUCT_PRICE_LOCAL).setValue(dTotalLocalPrice);

responseProductMessageData.setPPCost(this.getField(Item.PP_COST).getValue());
if (iClassID != productMessageData.getRateClassID())
{
    responseProductMessageData.setRateClassID(productMessageData.getRateClassID());
    responseProductMessageData.setNewRateClassID(iClassID);
}
responseProductMessageData.setProductCost(dTotalLocalCost);

int iStatus = BaseStatus.VALID;
if (dTotalLocalCost == 0)
    iStatus = BaseStatus.NOT_VALID;
responseMessage.setMessageDataStatus(iStatus);
this.getField(Product.DISPLAY_COST_STATUS_ID).setValue(iStatus);
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5387">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,100</Sequence>
		<MethodName>getItemCost</MethodName>
		<LogicDescription/>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>Date dateTarget, int iAirRateID, int iAirClassID, boolean bGetPrice</MethodInterface>
		<MethodClassName>Item</MethodClassName>
		<LogicSource><![CDATA[double dCost = 0;
ItemPricing recProductCostLookup = ((ItemPricing)this.getProductPricing()).getItemCost(this, dateTarget, iAirRateID, iAirClassID);
if (recProductCostLookup != null)
{
    if (!bGetPrice)
        dCost += recProductCostLookup.getCost(ItemPricing.COST, this.getProductTerms());
    else
        dCost += recProductCostLookup.getField(ItemPricing.PRICE).getValue();
}
return dCost;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5388">
		<LastChanged>2012-04-11T10:13:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemMessageData</MethodClassName>
		<LogicSource><![CDATA[if (bFindFirst)
    if (recordOwner != null)
        if (recordOwner.getRecord(ItemModel.ITEM_FILE) != null)
            return (ItemModel)recordOwner.getRecord(ItemModel.ITEM_FILE);
return (ItemModel)Record.makeRecordFromClassName(ItemModel.THICK_CLASS, recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5391">
		<LastChanged>2012-04-11T00:10:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,100</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemMessageData</MethodClassName>
		<LogicSource><![CDATA[//xthis.put(ProductModel.RATE_TYPE_ID_PARAM, propertyOwner.getProperty(ProductModel.RATE_TYPE_ID_PARAM));
//xthis.put(ProductModel.RATE_CLASS_ID_PARAM, propertyOwner.getProperty(ProductModel.RATE_CLASS_ID_PARAM));
this.put(BookingDetailModel.DETAIL_DATE, propertyOwner.getProperty(BookingDetailModel.DETAIL_DATE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5392">
		<LastChanged>2012-04-11T10:12:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,200</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
BookingItemModel recBookingItem = (BookingItemModel)record;
Record recBooking = ((ReferenceField)recBookingItem.getField(BookingDetailModel.BOOKING_ID)).getReference();
if (recBooking != null)
{	// Since there is no product date, use the departure date
    Record recTour = ((ReferenceField)recBooking.getField(BookingModel.TOUR_ID)).getReference();
    if (recTour != null)
        this.putRawFieldData(recTour.getField(TourModel.DEPARTURE_DATE));
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5393">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemMessageData</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5394">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemMessageData</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5395">
		<LastChanged>2012-04-11T00:10:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemMessageData</MethodClassName>
		<LogicSource><![CDATA[super;
this.removeMessageDataDesc(BookingDetailModel.RATE_ID);
this.removeMessageDataDesc(BookingDetailModel.CLASS_ID);
this.addMessageFieldDesc(BookingDetailModel.RATE_ID, Integer.class, MessageFieldDesc.OPTIONAL, null);
this.addMessageFieldDesc(BookingDetailModel.CLASS_ID, Integer.class, MessageFieldDesc.OPTIONAL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5397">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[if (m_recTourHeaderPricing != null)
    m_recTourHeaderPricing.free();
m_recTourHeaderPricing = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5398">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>processBookingRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Land</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5399">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>processAvailabilityRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Transportation</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5400">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>processBookingRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Transportation</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5402">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>processBookingRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Car</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5403">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>processAvailabilityRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Cruise</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5404">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>processBookingRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Cruise</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5405">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>processAvailabilityRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Air</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5406">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>processBookingRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Air</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5407">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>processAvailabilityRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Item</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5408">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>processBookingRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Item</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5409">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>processAvailabilityRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5411">
		<LastChanged>2012-04-06T16:40:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getAvailability</MethodName>
		<LogicDescription/>
		<MethodReturns>InventoryModel</MethodReturns>
		<MethodInterface>ProductModel recProduct, Date dateTarget, int iRateID, int iClassID, int iOtherID</MethodInterface>
		<MethodClassName>Inventory</MethodClassName>
		<LogicSource><![CDATA[int iOldKeyOrder = this.getDefaultOrder();
try {
    this.addNew();
    this.setKeyArea(Inventory.INV_DATE_KEY);
    ProductType recProductType = (ProductType)((ReferenceField)this.getField(Inventory.PRODUCT_TYPE_ID)).getReferenceRecord();
    int iProductTypeID = recProductType.getProductTypeID((Product)recProduct);
    this.getField(Inventory.PRODUCT_TYPE_ID).setValue(iProductTypeID);
    this.getField(Inventory.PRODUCT_ID).moveFieldToThis((BaseField)recProduct.getCounterField());
    ((DateField)this.getField(Inventory.INV_DATE)).setDate(dateTarget, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
    this.getField(Inventory.RATE_ID).setValue(0);
    this.getField(Inventory.CLASS_ID).setValue(0);
    this.getField(Inventory.OTHER_ID).setValue(0);
    this.close();
    while (this.seek(FileFilter.GREATER_THAN_EQUAL))
    {
        if (this.getField(Inventory.PRODUCT_TYPE_ID).getValue() != iProductTypeID)
            break;
        if (!this.getField(Inventory.PRODUCT_ID).equals(recProduct.getCounterField()))
            break;
        if (((DateField)this.getField(Inventory.INV_DATE)).compareTo(dateTarget) > 0)
            break;
        if (this.getField(Inventory.RATE_ID).getValue() != 0)
            if (this.getField(Inventory.RATE_ID).getValue() != iRateID)
                continue;
        if (this.getField(Inventory.CLASS_ID).getValue() != 0)
            if (this.getField(Inventory.CLASS_ID).getValue() != iClassID)
                continue;
        if (this.getField(Inventory.OTHER_ID).getValue() != 0)
            if (this.getField(Inventory.OTHER_ID).getValue() != iOtherID)
                continue;
        // Great, this one matches
        return this;
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    this.setKeyArea(iOldKeyOrder);
}
return null;	// No inventory]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="5412">
		<LastChanged>2012-04-06T08:49:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getInventory</MethodName>
		<LogicDescription>Get the inventory record</LogicDescription>
		<MethodReturns>InventoryModel</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[if (m_recInventory == null)
    m_recInventory = (InventoryModel)Record.makeRecordFromClassName(InventoryModel.THICK_CLASS, this.findRecordOwner());
return m_recInventory;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5413">
		<LastChanged>2012-04-12T11:44:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setMessageDataStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iMessageStatus</MethodInterface>
		<MethodClassName>BaseProductResponse</MethodClassName>
		<LogicSource>this.put(BaseDataStatusModel.DATA_STATUS, new Integer(iMessageStatus));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5414">
		<LastChanged>2012-04-12T11:44:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getMessageDataStatus</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseProductResponse</MethodClassName>
		<LogicSource><![CDATA[Integer intMessageStatus = (Integer)this.get(BaseDataStatusModel.DATA_STATUS);
if (intMessageStatus == null)
    intMessageStatus = new Integer(BaseDataStatusModel.NO_STATUS);
return intMessageStatus.intValue();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5415">
		<LastChanged>2012-04-11T10:11:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>7,500</Sequence>
		<MethodName>getProductRate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandMessageData</MethodClassName>
		<LogicSource>return (LandRateModel)Record.makeRecordFromClassName(LandRateModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5416">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandBookingRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Land(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5417">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransBookingRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Transportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5418">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarBookingRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Car(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5419">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseBookingRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Cruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5420">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirBookingRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Air(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5421">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemBookingRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Item(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5422">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourBookingRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new TourHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5423">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransAvailRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Transportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5424">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarAvailRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Car(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5425">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseAvailRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Cruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5426">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirAvailRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Air(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5427">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemAvailRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Item(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5428">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourAvailRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new TourHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5429">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getSharedRecordTypeKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Inventory</MethodClassName>
		<LogicSource>return this.getField(Inventory.PRODUCT_TYPE_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5430">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>createSharedRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Inventory</MethodClassName>
		<LogicSource><![CDATA[try {
    int iProductType = (Integer) Converter.convertObjectToDatatype(objKey, Integer.class, 0);
    if (iProductType == ProductType.HOTEL_ID)
        return new HotelInventory(recordOwner);
    if (iProductType == ProductType.LAND_ID)
        return new LandInventory(recordOwner);
    if (iProductType == ProductType.AIR_ID)
        return new AirInventory(recordOwner);
    if (iProductType == ProductType.CAR_ID)
        return new CarInventory(recordOwner);
    if (iProductType == ProductType.CRUISE_ID)
        return new CruiseInventory(recordOwner);
    if (iProductType == ProductType.ITEM_ID)
        return new ItemInventory(recordOwner);
    if (iProductType == ProductType.TOUR_ID)
        return new TourHeaderInventory(recordOwner);
    if (iProductType == ProductType.TRANSPORTATION_ID)
        return new TransportationInventory(recordOwner);
} catch (Exception ex) {
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5439">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandAvailabilityRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5441">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationAvailabilityRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5442">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarAvailabilityRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5443">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseAvailabilityRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5444">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirAvailabilityRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5445">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemAvailabilityRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5446">
		<LastChanged>2012-04-12T12:33:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourAvailabilityRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
if (iStatus == BaseDataStatusModel.DATA_VALID)
{
    BookingDetailModel recBookingDetail = (BookingDetailModel)record;
//    if (recBookingDetail.getField(BookingDetailModel.INVENTORY_MANUAL).getState() == true)
//        iStatus = BaseMessageStatus.VALID;  // No inventory lookup required
}
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5448">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandAvailabilityRequest</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5449">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandAvailabilityRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5453">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationAvailabilityRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5454">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationAvailabilityRequest</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5455">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationAvailabilityRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5456">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseAvailabilityRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5457">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseAvailabilityRequest</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5458">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseAvailabilityRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5459">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarAvailabilityRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5460">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarAvailabilityRequest</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5461">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarAvailabilityRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5462">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirAvailabilityRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5463">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirAvailabilityRequest</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5464">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirAvailabilityRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5465">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemAvailabilityRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5466">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemAvailabilityRequest</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5467">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemAvailabilityRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5468">
		<LastChanged>2012-04-11T16:00:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourAvailabilityRequest</MethodClassName>
		<LogicSource><![CDATA[super;
// this.addDataDesc(ProductModel.INVENTORY_PARAM, Boolean.class, String.class, null, OPTIONAL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5469">
		<LastChanged>2012-04-12T12:33:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourAvailabilityRequest</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
BookingDetailModel recBookingDetail = (BookingDetailModel)record;
// this.putRawFieldData(ProductModel.INVENTORY_PARAM, recBookingDetail.getField(BookingDetailModel.INVENTORY_MANUAL));
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5470">
		<LastChanged>2012-04-11T16:00:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourAvailabilityRequest</MethodClassName>
		<LogicSource><![CDATA[super;
// this.putRaw(ProductModel.INVENTORY_PARAM, propertyOwner.getProperty(ProductModel.INVENTORY_PARAM));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5471">
		<LastChanged>2012-02-01T19:02:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,300</Sequence>
		<MethodName>getTourCost*3</MethodName>
		<LogicDescription/>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>TourHeaderLine recTourHeaderLine, TourHeaderOption recTourHeaderOption, BaseField fldPaxCategory, boolean bGetPrice</MethodInterface>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[double dTourCost = 0;
FileListener listener = null;
recTourHeaderLine.setKeyArea(TourHeaderLine.TOUR_HEADER_OPTION_ID_KEY);
recTourHeaderLine.addListener(listener = new SubFileFilter(recTourHeaderOption.getField(TourHeaderOption.ID), TourHeaderLine.TOUR_HEADER_OPTION_ID, fldPaxCategory, TourHeaderLine.PAX_CATEGORY_ID, null, null));
recTourHeaderLine.close();
try {
    while (recTourHeaderLine.hasNext())
    {
        recTourHeaderLine.next();
        double dCost = 0;
        if (!bGetPrice)
        {
            dCost = recTourHeaderLine.getField(TourHeaderLine.COST).getValue();
            ProductTerms recProductTerms = (ProductTerms)((ReferenceField)recTourHeaderLine.getField(TourHeaderLine.PRODUCT_TERMS_ID)).getReference();
            if (recProductTerms != null)
                if (recProductTerms.getEditMode() == DBConstants.EDIT_CURRENT)
                    dCost = recProductTerms.calcNetCost(dCost, null);
        }
        else
            dCost = recTourHeaderLine.getField(TourHeaderLine.PRICE).getValue();
        dTourCost = dTourCost + dCost;
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    recTourHeaderLine.removeListener(listener, true);
}
return dTourCost;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5472">
		<LastChanged>2012-04-11T00:10:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourMessageData</MethodClassName>
		<LogicSource><![CDATA[super;
this.removeMessageDataDesc(BookingDetailModel.RATE_ID);
this.removeMessageDataDesc(BookingDetailModel.CLASS_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5473">
		<LastChanged>2012-02-01T19:02:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,200</Sequence>
		<MethodName>getTourCost*2</MethodName>
		<LogicDescription/>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>Date dateTarget, String strTourOrOption, BaseField fldTourOrOptionID, TourMessageData productMessageData, boolean bGetPrice</MethodInterface>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[double dCostTotal = 0;
Short intPax = (Short)productMessageData.get(Product.PAX_PARAM);
int iTargetPax = 1;
if (intPax != null)
    iTargetPax = intPax.intValue();

TourHeaderOption recTourHeaderOption = new TourHeaderOption(this.findRecordOwner());
PaxCategory recPaxCategory = new PaxCategory(this.findRecordOwner());
TourHeaderLine recTourHeaderPricing = new TourHeaderLine(this.findRecordOwner());
try {
    recTourHeaderOption.setKeyArea(TourHeaderOption.TOUR_OR_OPTION_KEY);
    recTourHeaderOption.addListener(new StringSubFileFilter(strTourOrOption, TourHeaderOption.TOUR_OR_OPTION, fldTourOrOptionID.getData().toString(), TourHeaderOption.TOUR_OR_OPTION_ID, null, null));
    recTourHeaderOption.close();
    while (recTourHeaderOption.hasNext())
    {
        recTourHeaderOption.next();
        if (recTourHeaderOption.getField(TourHeaderOption.ASK_FOR_ANSWER).getState() == true)
            continue;
        if (recTourHeaderOption.getField(TourHeaderOption.ALWAYS_RESOLVE).getState() == false)
            continue;
        boolean bIsValid = false;
        int iPaxInRooms = 0;
        for (int iRoomType = PaxCategory.SINGLE_ID; iRoomType <= PaxCategory.CHILD_ID; iRoomType++)
        {
            Short intPaxInRoom = (Short)productMessageData.get(Product.ROOM_TYPE_PARAM + Integer.toString(iRoomType));
            if (intPaxInRoom != null)
                iPaxInRooms += intPaxInRoom.shortValue();
        }
        recPaxCategory.close();
        while (recPaxCategory.hasNext())
        {
            recPaxCategory.next();
            if (recTourHeaderOption.isValid(null, recPaxCategory.getField(PaxCategory.ID), dateTarget))
            {   // This option applies to this target departure date
                bIsValid = true;
                short shPaxInRoomType = (short)iTargetPax;
                int iRoomType = (int)recPaxCategory.getField(PaxCategory.ROOM_TYPE).getValue();
                if (iRoomType != 0)
                {
                    Short shortPaxInRoomType = (Short)productMessageData.get(Product.ROOM_TYPE_PARAM + Integer.toString(iRoomType));
                    shPaxInRoomType = 0;
                    if (shortPaxInRoomType != null)
                        shPaxInRoomType = shortPaxInRoomType.shortValue();
                    if (iPaxInRooms != iTargetPax)
                    {   // Special case - Didn't specify room configuration, so return the twin share price
                        if ((recPaxCategory.getField(PaxCategory.ID).getValue() == PaxCategory.ALL_ID)
                            || (recPaxCategory.getField(PaxCategory.ID).getValue() == PaxCategory.DOUBLE_ID))
                                shPaxInRoomType = (short)iTargetPax;
                        else
                            shPaxInRoomType = 0;   // Don't process other room types.
                    }
                }
                if (shPaxInRoomType == 0)
                    continue;   // No pax in this category
                double dRoomCost = this.getTourCost(recTourHeaderPricing, recTourHeaderOption, recPaxCategory.getField(PaxCategory.ID), bGetPrice);
                dCostTotal += dRoomCost * shPaxInRoomType;
            }
            if (bIsValid)
                if (recTourHeaderOption.getField(TourHeaderOption.DETAIL_OPTION_COUNT).getValue() > 0)
            {
                dCostTotal += this.getTourCost(dateTarget, TourHeaderOption.OPTION, recTourHeaderOption.getField(TourHeaderOption.ID), productMessageData, bGetPrice);
            }
        }
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    recTourHeaderOption.free();
    recTourHeaderOption = null;
    recPaxCategory.free();
    recPaxCategory = null;
    recTourHeaderPricing.free();
    recTourHeaderPricing = null;
}

this.getField(Product.PRODUCT_COST).setValue(dCostTotal);
int iCostStatus = CostStatus.VALID;
this.getField(Product.DISPLAY_COST_STATUS_ID).setValue(iCostStatus);
return dCostTotal;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5474">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceScreen</MethodClassName>
		<LogicSource>return new Dance(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5475">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceGridScreen</MethodClassName>
		<LogicSource>return new Dance(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5476">
		<LastChanged>2012-01-19T20:33:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Dance</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DETAIL_MODE) == ScreenConstants.DETAIL_MODE)
    screen = new DanceStepGridScreen(this, null, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = new DanceScreen(this, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    screen = new DanceGridScreen(this, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5477">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepScreen</MethodClassName>
		<LogicSource>return new DanceStep(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5478">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepGridScreen</MethodClassName>
		<LogicSource>return new DanceStep(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5479">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>DanceStepGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recMain, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>DanceStepGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5480">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, application.getResources(ResourceConstants.MENU_RESOURCE, true).getString(MenuConstants.FORMDETAIL));
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5481">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.MENU_RESOURCE, true).getString(MenuConstants.FORMDETAIL), MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5482">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(DanceScreenRecord.DANCE_ID).setEnabled(true);
this.getScreenRecord().getField(DanceScreenRecord.DANCE_FOOT_IN).setEnabled(true);
this.getScreenRecord().getField(DanceScreenRecord.DANCE_DIRECTION_ID).setEnabled(true);
this.getScreenRecord().getField(DanceScreenRecord.MOVE_CLASS_ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5483">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5484">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepGridScreen</MethodClassName>
		<LogicSource>return new DanceHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5485">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepGridScreen</MethodClassName>
		<LogicSource>return new Dance(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5486">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(DanceStep.DATE_KEY);
this.getMainRecord().getKeyArea().setKeyOrder(DBConstants.DESCENDING);
    // Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(DanceScreenRecord.DANCE_ID)).syncReference(this.getHeaderRecord());
this.getScreenRecord().getField(DanceScreenRecord.DANCE_ID).addListener(new FieldReSelectHandler(this));

this.getScreenRecord().getField(DanceScreenRecord.DANCE_FOOT_IN).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(DanceStep.DANCE_FOOT_IN, (BaseField)this.getScreenRecord().getField(DanceScreenRecord.DANCE_FOOT_IN), DBConstants.EQUALS, null, true));

this.getScreenRecord().getField(DanceScreenRecord.DANCE_DIRECTION_ID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(DanceStep.DANCE_DIRECTION_ID, (BaseField)this.getScreenRecord().getField(DanceScreenRecord.DANCE_DIRECTION_ID), DBConstants.EQUALS, null, true));

this.getScreenRecord().getField(DanceScreenRecord.MOVE_CLASS_ID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(DanceStep.MOVE_CLASS_ID, (BaseField)this.getScreenRecord().getField(DanceScreenRecord.MOVE_CLASS_ID), DBConstants.EQUALS, null, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5487">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepGridScreen</MethodClassName>
		<LogicSource><![CDATA[this.getMainRecord().addListener(new CompareFileFilter(DanceStep.DANCE_ID, (BaseField)this.getHeaderRecord().getCounterField(), DBConstants.EQUALS, null, true));
this.getMainRecord().getField(DanceStep.DANCE_ID).addListener(new InitFieldHandler((BaseField)this.getHeaderRecord().getCounterField(), false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5488">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepGridScreen</MethodClassName>
		<LogicSource>return new DanceScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5489">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Dance</MethodClassName>
		<LogicSource><![CDATA[if (MenuConstants.FORMDETAIL.equalsIgnoreCase(strCommand))
    return ScreenConstants.DETAIL_MODE;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5490">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepScreen</MethodClassName>
		<LogicSource>return new Dance(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5491">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepScreen</MethodClassName>
		<LogicSource>return new DanceScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5492">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepScreen</MethodClassName>
		<LogicSource><![CDATA[super;
    // Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(DanceScreenRecord.DANCE_ID)).syncReference(this.getHeaderRecord());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5493">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepScreen</MethodClassName>
		<LogicSource>return new DanceHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5494">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepScreen</MethodClassName>
		<LogicSource><![CDATA[this.getMainRecord().addListener(new CompareFileFilter(DanceStep.DANCE_ID, (BaseField)this.getHeaderRecord().getCounterField(), DBConstants.EQUALS, null, true));
this.getMainRecord().getField(DanceStep.DANCE_ID).addListener(new InitFieldHandler((BaseField)this.getHeaderRecord().getCounterField(), false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5495">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5498">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepGridScreen</MethodClassName>
		<LogicSource>return this.getRecord(Dance.DANCE_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5499">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.FORM)) || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
{   // Add the header field to this screen, so on return the same sub records will display
    BasePanel parentScreen = this.getParentScreen();
    if (parentScreen != null)
    {
        parentScreen.popHistory(1, false);
        parentScreen.pushHistory(this.getScreenURL(), false);  // Push this screen onto history stack
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5500">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcProductAmountHome</MethodClassName>
		<LogicSource><![CDATA[Record recProduct = this.getOwner().getRecord();
double dProductCost = this.getOwner().getValue();
double dProductCostHome = this.convertLocalToHome(dProductCost);
if (dProductCostHome != 0)
    m_fldTarget.setValue(dProductCostHome);
else
    m_fldTarget.setData(null);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5501">
		<LastChanged>2012-01-31T10:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>convertLocalToHome</MethodName>
		<LogicDescription/>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>double dAmountLocal</MethodInterface>
		<MethodClassName>CalcProductAmountHome</MethodClassName>
		<LogicSource><![CDATA[Record recProduct = this.getOwner().getRecord();
double dAmountHome = 0.00;
if (dAmountLocal != 0)
{
    Record recVendor = ((ReferenceField)recProduct.getField(Product.VENDOR_ID)).getReference();
    if (recVendor != null)
        if ((recVendor.getEditMode() == DBConstants.EDIT_IN_PROGRESS) || (recVendor.getEditMode() == DBConstants.EDIT_CURRENT))
        {
            Record recCurrencys = ((ReferenceField)recVendor.getField(Vendor.CURRENCYS_ID)).getReference();
            if (recCurrencys != null)
                if ((recCurrencys.getEditMode() == DBConstants.EDIT_IN_PROGRESS) || (recCurrencys.getEditMode() == DBConstants.EDIT_CURRENT))
                {
                    double dExchange = 1.0;
                    if (!recCurrencys.getField(Currencys.COSTING_RATE).isNull())
                        dExchange = recCurrencys.getField(Currencys.COSTING_RATE).getValue();
                    else
                        dExchange = recCurrencys.getField(Currencys.LAST_RATE).getValue();
                    dAmountHome = Math.floor(dAmountLocal * dExchange * 100.00 + 0.5) / 100.00;
                }
        }
}
return dAmountHome;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5503">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5504">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelGridScreen</MethodClassName>
		<LogicSource>return new HotelScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5505">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarGridScreen</MethodClassName>
		<LogicSource>return new CarScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5506">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseGridScreen</MethodClassName>
		<LogicSource>return new CruiseScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5507">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource>return new HotelScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5508">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>42</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns>ProductRateMessageListener</MethodReturns>
		<MethodInterface>Product recProduct, BaseMessageFilter messageFilter</MethodInterface>
		<MethodClassName>ProductGridScreen</MethodClassName>
		<LogicSource>return new ProductRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5509">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>44</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>GetProductCostHandler</MethodReturns>
		<MethodInterface>ProductScreenRecord screenRecord, Integer intRegistryID</MethodInterface>
		<MethodClassName>ProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[return new GetProductCostHandler(screenRecord, intRegistryID);
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5510">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>44</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelGridScreen</MethodClassName>
		<LogicSource>return new GetHotelCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5511">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>42</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelGridScreen</MethodClassName>
		<LogicSource>return new HotelRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5512">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>44</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandGridScreen</MethodClassName>
		<LogicSource>return new LandRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5513">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>46</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandGridScreen</MethodClassName>
		<LogicSource>return new GetLandCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5514">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandGridScreen</MethodClassName>
		<LogicSource>return new LandScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5515">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationGridScreen</MethodClassName>
		<LogicSource>return new TransportationScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5516">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>43</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationGridScreen</MethodClassName>
		<LogicSource>return new TransportationRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5517">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>46</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationGridScreen</MethodClassName>
		<LogicSource>return new GetTransportationCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5518">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>isQueryComplete</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetTransportationCostHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bQueryComplete = super;
if ((bQueryComplete)
    && (!m_recProductVars.getField(ProductScreenRecord.CLASS_ID).isNull()))
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5519">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>setupScreenStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetTransportationCostHandler</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5520">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fixMessageMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationRateMessageListener</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5521">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetTransportationCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>recProductVars, intRegistryID</MethodReturns>
		<MethodInterface>Record recProductVars, Integer intRegistryID</MethodInterface>
		<MethodClassName>GetTransportationCostHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5522">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetTourHeaderCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>recProductVars, intRegistryID</MethodReturns>
		<MethodInterface>Record recProductVars, Integer intRegistryID</MethodInterface>
		<MethodClassName>GetTourHeaderCostHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5523">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>isQueryComplete</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetTourHeaderCostHandler</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5524">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>setupScreenStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetTourHeaderCostHandler</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5525">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetCarCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>recProductVars, intRegistryID</MethodReturns>
		<MethodInterface>Record recProductVars, Integer intRegistryID</MethodInterface>
		<MethodClassName>GetCarCostHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5526">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>isQueryComplete</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetCarCostHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bQueryComplete = super;
if ((bQueryComplete)
    && (!m_recProductVars.getField(ProductScreenRecord.CLASS_ID).isNull()))
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5527">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>setupScreenStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetCarCostHandler</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5528">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetCruiseCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>recProductVars, intRegistryID</MethodReturns>
		<MethodInterface>Record recProductVars, Integer intRegistryID</MethodInterface>
		<MethodClassName>GetCruiseCostHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5529">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>isQueryComplete</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetCruiseCostHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bQueryComplete = super;
if ((bQueryComplete)
    && (!m_recProductVars.getField(ProductScreenRecord.CLASS_ID).isNull()))
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5530">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>setupScreenStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetCruiseCostHandler</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5531">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetAirCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>recProductVars, intRegistryID</MethodReturns>
		<MethodInterface>Record recProductVars, Integer intRegistryID</MethodInterface>
		<MethodClassName>GetAirCostHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5532">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>isQueryComplete</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetAirCostHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bQueryComplete = super;
if ((bQueryComplete)
    && (!m_recProductVars.getField(ProductScreenRecord.CLASS_ID).isNull()))
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5533">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>setupScreenStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetAirCostHandler</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5534">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetItemCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>recProductVars, intRegistryID</MethodReturns>
		<MethodInterface>Record recProductVars, Integer intRegistryID</MethodInterface>
		<MethodClassName>GetItemCostHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5535">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>isQueryComplete</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetItemCostHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bQueryComplete = super;
if ((bQueryComplete)
    && (!m_recProductVars.getField(ProductScreenRecord.RATE_ID).isNull())
    && (!m_recProductVars.getField(ProductScreenRecord.CLASS_ID).isNull()))
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5536">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>setupScreenStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetItemCostHandler</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5537">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>52</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarGridScreen</MethodClassName>
		<LogicSource>return new CarRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5538">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>54</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarGridScreen</MethodClassName>
		<LogicSource>return new GetCarCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5539">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseGridScreen</MethodClassName>
		<LogicSource>return new CruiseRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5540">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseGridScreen</MethodClassName>
		<LogicSource>return new GetCruiseCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5541">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fixMessageMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseRateMessageListener</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5542">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirGridScreen</MethodClassName>
		<LogicSource>return new AirRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5543">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirGridScreen</MethodClassName>
		<LogicSource>return new GetAirCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5544">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fixMessageMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirRateMessageListener</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5545">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemGridScreen</MethodClassName>
		<LogicSource>return new ItemRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5546">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemGridScreen</MethodClassName>
		<LogicSource>return new GetItemCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5547">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addRateMessageListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourProductGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5548">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemGridScreen</MethodClassName>
		<LogicSource><![CDATA[super.addToolbarButtons(toolScreen);
BaseApplication application = (BaseApplication)this.getTask().getApplication();

this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
this.getScreenRecord().getField(ProductScreenRecord.REMOTE_QUERY_ENABLED).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5549">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemRateField</MethodClassName>
		<LogicSource>return new ItemRate(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5550">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemRateField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), ItemRate.DESCRIPTION_KEY, ItemRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5551">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemClassField</MethodClassName>
		<LogicSource>return new ItemClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5552">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemClassField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), ItemClass.DESCRIPTION_KEY, ItemClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5553">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemGridScreen</MethodClassName>
		<LogicSource>return new ItemScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5554">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourProductGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5555">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>65</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourProductGridScreen</MethodClassName>
		<LogicSource>return new GetTourHeaderCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5556">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strCommand = super;

strCommand = this.saveProductParam(strCommand, ProductScreenRecord.RATE_ID);
strCommand = this.saveProductParam(strCommand, ProductScreenRecord.CLASS_ID);
strCommand = this.saveProductParam(strCommand, ProductScreenRecord.DETAIL_DATE);
strCommand = this.saveProductParam(strCommand, ProductScreenRecord.REMOTE_QUERY_ENABLED);

return strCommand;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5557">
		<LastChanged>2012-02-01T05:07:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>95</Sequence>
		<MethodName>saveProductParam</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strCommand, String iFieldSeq</MethodInterface>
		<MethodClassName>ProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (!this.getScreenRecord().getField(iFieldSeq).isNull())
    strCommand = Utility.addURLParam(strCommand, this.getScreenRecord().getField(iFieldSeq).getFieldName(), this.getScreenRecord().getField(iFieldSeq).toString());
return strCommand;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5558">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.restoreScreenParam(ProductScreenRecord.RATE_ID);
this.restoreScreenParam(ProductScreenRecord.CLASS_ID);
this.restoreScreenParam(ProductScreenRecord.DETAIL_DATE);
this.restoreScreenParam(ProductScreenRecord.REMOTE_QUERY_ENABLED);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5560">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
        
this.restoreScreenParam(ProductScreenRecord.PAX);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5561">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strCommand = super;

strCommand = this.saveProductParam(strCommand, ProductScreenRecord.PAX);
        
return strCommand;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5564">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.restoreScreenParam(TourHeaderScreenRecord.KEY_ORDER);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5565">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strCommand = super;

strCommand = this.saveProductParam(strCommand, TourHeaderScreenRecord.KEY_ORDER);

return strCommand;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5566">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,060</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns>ProductRateMessageListener</MethodReturns>
		<MethodInterface>Product recProduct, BaseMessageFilter messageFilter</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource>return new ProductRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5567">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,070</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>GetProductCostHandler</MethodReturns>
		<MethodInterface>ProductScreenRecord screenRecord, Integer intRegistryID</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource>return new GetProductCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5568">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,080</Sequence>
		<MethodName>setScreenFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[Record recProduct = this.getMainRecord();
this.addThisRecordFilter(properties, City.CITY_FILE, JTreePanel.LOCATION, Product.CITY_ID, ProductScreenRecord.CITY_ID);
Date date = this.getPropertyDate((String)properties.get(SearchConstants.DATE));
if (date != null)
    ((DateTimeField)this.getScreenRecord().getField(ProductScreenRecord.DETAIL_DATE)).setDateTime(date, DBConstants.DONT_DISPLAY, DBConstants.SCREEN_MOVE);
String strSearchText = (String)properties.get(SearchConstants.SEARCH_TEXT);
if ((strSearchText != null) && (strSearchText.length() > 0))
    this.getScreenRecord().getField(ProductScreenRecord.DESCRIPTION).setString(strSearchText.toUpperCase());

String strPax = (String)properties.get(SearchConstants.PAX);
if ((strPax == null) || (strPax.length() == 0) || (strPax.equals("0")))     // Pax will be correct when pax are in a booking.
    strPax = "2";
this.getScreenRecord().getField(ProductScreenRecord.PAX).setString(strPax);
// For now:
this.getScreenRecord().getField(ProductScreenRecord.REMOTE_QUERY_ENABLED).setState(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5569">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,090</Sequence>
		<MethodName>restoreProductParam</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Map&lt;String,Object&gt; properties, int iFieldSeq, String strParamName</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[if (strParamName == null)
    strParamName = this.getScreenRecord().getField(iFieldSeq).getFieldName();
if (properties.get(strParamName) != null)
{
    this.getScreenRecord().getField(iFieldSeq).setString((String)properties.get(strParamName));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5570">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>450</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource>return new HotelRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5571">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>460</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource>return new GetHotelCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5572">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>setScreenFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record recProduct = this.getMainRecord();

String strHotelClass = (String)properties.get(SearchConstants.HOTEL_CLASS);
this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).setString(strHotelClass);

Record recProductControl = this.getRecord(ProductControl.PRODUCT_CONTROL_FILE);
this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).moveFieldToThis(recProductControl.getField(ProductControl.HOTEL_RATE_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5573">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandSearchSession</MethodClassName>
		<LogicSource>return new LandRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5574">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandSearchSession</MethodClassName>
		<LogicSource>return new GetLandCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5575">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>setScreenFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record recProduct = this.getMainRecord();
String strPax = (String)properties.get(SearchConstants.PAX);
this.getScreenRecord().getField(ProductScreenRecord.PAX).setString(strPax);

Record recProductControl = this.getRecord(ProductControl.PRODUCT_CONTROL_FILE);
this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).moveFieldToThis(recProductControl.getField(ProductControl.LAND_RATE_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5576">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>setScreenFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record screenRecord = this.getScreenRecord();
Record recProduct = this.getMainRecord();

this.addThisRecordFilter(properties, City.CITY_FILE, SearchConstants.LOCATION_TO, TransportProduct.TO_CITY_ID, ProductScreenRecord.TO_CITY_ID);

String strAirClass = (String)properties.get(SearchConstants.AIR_CLASS);
this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).setString(strAirClass);

Record recProductControl = this.getRecord(ProductControl.PRODUCT_CONTROL_FILE);
this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).moveFieldToThis(recProductControl.getField(ProductControl.AIR_RATE_ID));

this.addThisRecordFilter(properties, Airline.AIRLINE_FILE, SearchConstants.AIRLINE, Air.AIRLINE_ID, AirScreenRecord.AIRLINE_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5577">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarSearchSession</MethodClassName>
		<LogicSource>return new CarRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5578">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarSearchSession</MethodClassName>
		<LogicSource>return new GetCarCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5579">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirSearchSession</MethodClassName>
		<LogicSource>return new AirRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5580">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirSearchSession</MethodClassName>
		<LogicSource>return new GetAirCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5581">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseSearchSession</MethodClassName>
		<LogicSource>return new GetCruiseCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5582">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseSearchSession</MethodClassName>
		<LogicSource>return new CruiseRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5583">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>setScreenFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record recProduct = this.getMainRecord();

this.addThisRecordFilter(properties, City.CITY_FILE, SearchConstants.LOCATION_TO, TransportProduct.TO_CITY_ID, ProductScreenRecord.TO_CITY_ID);

String strCruiseClass = (String)properties.get(SearchConstants.CRUISE_CLASS);
this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).setString(strCruiseClass);

Record recProductControl = this.getRecord(ProductControl.PRODUCT_CONTROL_FILE);
this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).moveFieldToThis(recProductControl.getField(ProductControl.CRUISE_RATE_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5584">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>setScreenFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record recProduct = this.getMainRecord();
Record recProductControl = this.getRecord(ProductControl.PRODUCT_CONTROL_FILE);

this.getScreenRecord().getField(ProductScreenRecord.CLASS_ID).moveFieldToThis(recProductControl.getField(ProductControl.ITEM_CLASS_ID));
this.getScreenRecord().getField(ProductScreenRecord.RATE_ID).moveFieldToThis(recProductControl.getField(ProductControl.ITEM_RATE_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5585">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemSearchSession</MethodClassName>
		<LogicSource>return new ItemRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5586">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemSearchSession</MethodClassName>
		<LogicSource>return new GetItemCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5587">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>setScreenFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;

Record recTourHeader = this.getMainRecord();
// Add the tour type filter
String strTourType = (String)properties.get(SearchConstants.TOUR_TYPE);
if (strTourType != null)
{
    int sBitPosition = Integer.parseInt(strTourType);
    if (sBitPosition > 0)
        this.getScreenRecord().getField(TourHeaderScreenRecord.TOUR_TYPE).setValue(1 << sBitPosition);
    else
        strTourType = null;
}
if (strTourType == null)
    this.getScreenRecord().getField(TourHeaderScreenRecord.TOUR_TYPE).moveFieldToThis(this.getRecord(BookingControl.BOOKING_CONTROL_FILE).getField(BookingControl.THIN_TOUR_TYPE));

((DateTimeField)this.getScreenRecord().getField(TourHeaderScreenRecord.START_DEPARTURE_DATE)).setValue(DateTimeField.todaysDate());

this.addThisRecordFilter(properties, Country.COUNTRY_FILE, JTreePanel.LOCATION, TourHeader.COUNTRY_ID, TourHeaderScreenRecord.COUNTRY_ID);
this.addThisRecordFilter(properties, Region.REGION_FILE, JTreePanel.LOCATION, TourHeader.REGION_ID, TourHeaderScreenRecord.REGION_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5588">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderSearchSession</MethodClassName>
		<LogicSource>return new TourHeaderRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5589">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderSearchSession</MethodClassName>
		<LogicSource>return new GetTourHeaderCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5590">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addProductRateMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationSearchSession</MethodClassName>
		<LogicSource>return new TransportationRateMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5591">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationSearchSession</MethodClassName>
		<LogicSource>return new GetTransportationCostHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5592">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirSearchSession</MethodClassName>
		<LogicSource>return new AirScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5593">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandSearchSession</MethodClassName>
		<LogicSource>return new LandScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5594">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationSearchSession</MethodClassName>
		<LogicSource>return new TransportationScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5595">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarSearchSession</MethodClassName>
		<LogicSource>return new CarScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5596">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseSearchSession</MethodClassName>
		<LogicSource>return new CruiseScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5597">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemSearchSession</MethodClassName>
		<LogicSource>return new ItemScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5598">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderSearchSession</MethodClassName>
		<LogicSource>return new TourHeaderScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5599">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>410</Sequence>
		<MethodName>addRateMessageListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
// Override this to add the listeners and message queues (remember to call super)
this.getMainRecord().getField(Hotel.DOUBLE_COST).setSelected(true);  // Now you can calc the USD amount (since you have this local amount)
this.getMainRecord().getField(Hotel.DOUBLE_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Hotel.DOUBLE_COST_LOCAL)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5600">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addRateMessageListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
// Override this to add the listeners and message queues (remember to call super)
this.getMainRecord().getField(Land.PMC_COST).setSelected(true);  // Now you can calc the USD amount (since you have this local amount)
this.getMainRecord().getField(Land.PMC_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Land.PMC_COST_HOME)));
this.getMainRecord().getField(Land.SIC_COST).setSelected(true);  // Now you can calc the USD amount (since you have this local amount)
this.getMainRecord().getField(Land.SIC_COST).addListener(new CalcProductAmountHome(this.getMainRecord().getField(Land.SIC_COST_HOME)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5601">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupScreenStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetLandCostHandler</MethodClassName>
		<LogicSource><![CDATA[if (iStatus == CostStatus.VALID)
{   // The returned cost is the double cost
	// All data is in the correct field
}
else
{
    recProduct.getField(Land.PMC_COST_HOME).setData(null);
    recProduct.getField(Land.SIC_COST_HOME).setData(null);
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5602">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarSearchSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5603">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
new City(this);	// For thin]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5604">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
new City(this);	// For thin]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5605">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
new City(this);	// Thin display screen uses this for depart and arrive city.]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5606">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemSearchSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5607">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemClassSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), ItemClass.DESCRIPTION_KEY, ItemClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5608">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemRateSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), ItemRate.DESCRIPTION_KEY, ItemRate.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5609">
		<LastChanged>2012-01-25T22:50:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,150</Sequence>
		<MethodName>addAvailabilityMessageListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Product recProduct, ProductScreenRecord screenRecord</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[// Override this to add the listeners and message queues (remember to call super)
// Create a private messageReceiver and listen for changes
MessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
Integer intRegistryID = null;
if (messageManager != null)
{
    Object source = this;
    BaseMessageFilter messageFilter = new BaseMessageFilter(MessageConstants.TRX_RETURN_QUEUE, MessageConstants.INTERNET_QUEUE, source, null);
    messageManager.addMessageFilter(messageFilter);
    this.addProductAvailabilityMessageFilter(recProduct, messageFilter);
    recProduct.addListener(new FreeOnFreeHandler(messageFilter));
    intRegistryID = messageFilter.getRegistryID();
    recProduct.addListener(this.getProductAvailabilityHandler(screenRecord, intRegistryID));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5610">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,170</Sequence>
		<MethodName>getProductAvailabilityHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>GetProductAvailabilityHandler</MethodReturns>
		<MethodInterface>ProductScreenRecord screenRecord, Integer intRegistryID</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource>return new GetProductAvailabilityHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5611">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,160</Sequence>
		<MethodName>addProductAvailabilityMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns>ProductAvailabilityMessageListener</MethodReturns>
		<MethodInterface>Product recProduct, BaseMessageFilter messageFilter</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource>return new ProductAvailabilityMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5612">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>fixMessageMap</MethodName>
		<LogicDescription><![CDATA[Convert this message map to the message map AutoRecordMessageListener
is expecting, so the correct fields will be updated.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseMessage message</MethodInterface>
		<MethodClassName>ProductAvailabilityMessageListener</MethodClassName>
		<LogicSource><![CDATA[message.put(DBParams.FIELD, MULTIPLE_FIELDS);
String strAvailStatusParam = m_record.getField(Product.DISPLAY_INVENTORY_STATUS_ID).getFieldName();
Integer intMessageStatus = (Integer)message.get(BaseDataStatus.DATA_STATUS);
int iMessageStatus = BaseStatus.VALID;
if (intMessageStatus != null)
    iMessageStatus = intMessageStatus.intValue();
message.put(strAvailStatusParam, intMessageStatus.toString());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5613">
		<LastChanged>2012-01-25T16:43:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>handleMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductAvailabilityMessageListener</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
if (m_record != null)
{
    RecordOwner recordOwner = m_record.getRecordOwner();
    if (recordOwner != null)
    {
        Record screenRecord = (Record)recordOwner.getScreenRecord();
        if (screenRecord instanceof ProductScreenRecord)
        {   // Always
            if (!((ProductScreenRecord)screenRecord).checkPriceProperties(message, (Product)m_record))
                return DBConstants.NORMAL_RETURN;   // The user is not looking for these prices anymore, don't display
        }
    }
    this.fixMessageMap(message);
    iErrorCode = super.handleMessage(message);  // Owner is a GridScreen, so the AutoRecord logic
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5614">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetProductStatusHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Record recProductVars, Integer intRegistryID</MethodInterface>
		<MethodClassName>GetProductStatusHandler</MethodClassName>
		<LogicSource><![CDATA[m_recProductVars = (ProductScreenRecord)recProductVars;
m_intRegistryID = intRegistryID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5615">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doFirstValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetProductStatusHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.isQueryComplete())
{
    Product recProduct = (Product)this.getOwner();
    RecordOwner recordOwner = recProduct.getRecordOwner();
    String strMessageInfoType = MessageInfoType.REQUEST;
    String strContactType = recProduct.getTableNames(false);
    String strRequestType = this.getRequestType();
    String strMessageProcessType = MessageType.MESSAGE_OUT;
    String strProcessType = ProcessType.INFO;
    String strMessageTransport = null;
    TrxMessageHeader trxMessageHeader = recProduct.createProcessMessage(strMessageInfoType, strContactType, strRequestType, strMessageProcessType, strProcessType, strMessageTransport);
    if (trxMessageHeader == null)
        return;
    BaseMessage message = (BaseMessage)BaseMessage.createMessage(trxMessageHeader);
    if (message == null)
        return;
    Record screenRecord = (Record)recordOwner.getScreenRecord();
    this.setLookupProperties(message, recProduct, screenRecord);
    if ((MessageTransportTypeField.DIRECT.equalsIgnoreCase((String)trxMessageHeader.get(MessageTransport.TRANSPORT_TYPE_PARAM)))
        || (trxMessageHeader.get(MessageTransport.TRANSPORT_TYPE_PARAM) == null))
    {
        int iStatus = this.getDirectProductInfo(recProduct, message);
        this.setupScreenStatus(recProduct, iStatus);
    }
    else if ((MessageTransportTypeField.AUTO_RESPONSE.equalsIgnoreCase((String)trxMessageHeader.get(MessageTransport.TRANSPORT_TYPE_PARAM)))
        || (MessageTransportTypeField.LOCAL.equalsIgnoreCase((String)trxMessageHeader.get(MessageTransport.TRANSPORT_TYPE_PARAM))))
    {   // The user wants to do remote price lookups.
        if (screenRecord.getField(ProductScreenRecord.REMOTE_QUERY_ENABLED).getState() == true)
        {
            if (m_intRegistryID != null)
                trxMessageHeader.put(TrxMessageHeader.REGISTRY_ID, m_intRegistryID);    // The return Queue ID

            MessageManager messageManager = ((Application)recordOwner.getTask().getApplication()).getMessageManager();
            this.setupScreenStatus(recProduct, BaseStatus.REQUEST_SENT);
            if (messageManager != null)
                messageManager.sendMessage(message);
        }
        else
            this.setupScreenStatus(recProduct, BaseStatus.NO_STATUS);
    }
    else if (MessageTransportTypeField.MANUAL_RESPONSE.equalsIgnoreCase((String)trxMessageHeader.get(MessageTransport.TRANSPORT_TYPE_PARAM)))
        this.setupScreenStatus(recProduct, BaseStatus.MANUAL_REQUEST_REQUIRED);
    else if (MessageTransportTypeField.MANUAL_COMMUNICATION.equalsIgnoreCase((String)trxMessageHeader.get(MessageTransport.TRANSPORT_TYPE_PARAM)))
    {
        // For manual messages, the status is set manually (don't change it)
    }
    else
        this.setupScreenStatus(recProduct, BaseStatus.NO_STATUS);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5616">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>350</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>GetProductStatusHandler</MethodClassName>
		<LogicSource>return RequestType.PRICE;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5617">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setupScreenStatus</MethodName>
		<LogicDescription><![CDATA[Move this product cost from to virtual fields to the ProductCost
field in recProduct. Also move the status to the product cost status.
(Override this to set the correct fields!)]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recProduct, int iStatus</MethodInterface>
		<MethodClassName>GetProductStatusHandler</MethodClassName>
		<LogicSource>// Override this!</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5618">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setLookupProperties</MethodName>
		<LogicDescription><![CDATA[Get the lookup properties from the ProductScreenRecord and the
Product record and set them in this map.
(Override this to set the loopup properties)]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseMessage map, Record recProduct, Record screenRecord</MethodInterface>
		<MethodClassName>GetProductStatusHandler</MethodClassName>
		<LogicSource>// Override this!</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5619">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>isQueryComplete</MethodName>
		<LogicDescription><![CDATA[If all the data in the screen record that is required for a query is there,
return true. If not, false.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>GetProductStatusHandler</MethodClassName>
		<LogicSource><![CDATA[return true;	// Override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5620">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>isQueryComplete</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetProductAvailabilityHandler</MethodClassName>
		<LogicSource><![CDATA[if (!m_recProductVars.getField(ProductScreenRecord.DETAIL_DATE).isNull())
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5621">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setLookupProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetProductAvailabilityHandler</MethodClassName>
		<LogicSource>((ProductScreenRecord)screenRecord).setPriceProperties(map, (Product)recProduct);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5622">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setupScreenStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetProductAvailabilityHandler</MethodClassName>
		<LogicSource>recProduct.getField(Product.DISPLAY_INVENTORY_STATUS_ID).setValue(iStatus);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5623">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetProductCostHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>recProductVars, intRegistryID</MethodReturns>
		<MethodInterface>Record recProductVars, Integer intRegistryID</MethodInterface>
		<MethodClassName>GetProductCostHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5624">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5625">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>550</Sequence>
		<MethodName>addProductAvailabilityMessageFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource>return new HotelAvailabilityMessageListener(null, recProduct, false, messageFilter);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5626">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>560</Sequence>
		<MethodName>getProductAvailabilityHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource>return new GetHotelAvailabilityHandler(screenRecord, intRegistryID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5627">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fixMessageMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailabilityMessageListener</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5628">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>isQueryComplete</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetHotelAvailabilityHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bQueryComplete = super.isQueryComplete();
if ((bQueryComplete)
    && (!m_recProductVars.getField(ProductScreenRecord.CLASS_ID).isNull()))
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5629">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetProductAvailabilityHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>recProductVars, intRegistryID</MethodReturns>
		<MethodInterface>Record recProductVars, Integer intRegistryID</MethodInterface>
		<MethodClassName>GetProductAvailabilityHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5630">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetHotelAvailabilityHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>recProductVars, intRegistryID</MethodReturns>
		<MethodInterface>Record recProductVars, Integer intRegistryID</MethodInterface>
		<MethodClassName>GetHotelAvailabilityHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5631">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetProductAvailabilityHandler</MethodClassName>
		<LogicSource>return RequestType.AVAILABILITY;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5632">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>375</Sequence>
		<MethodName>getDirectProductInfo</MethodName>
		<LogicDescription><![CDATA[Get the cost or inventory information from the product now.
@return The message status]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Product recProduct, BaseMessage message</MethodInterface>
		<MethodClassName>GetProductStatusHandler</MethodClassName>
		<LogicSource><![CDATA[return BaseStatus.NOT_VALID;		// Override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5633">
		<LastChanged>2012-04-11T13:59:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>375</Sequence>
		<MethodName>getDirectProductInfo</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetProductAvailabilityHandler</MethodClassName>
		<LogicSource><![CDATA[BaseProductResponse response = (BaseProductResponse)((BaseMessage)recProduct.processAvailabilityRequestInMessage(message, null, null)).getMessageDataDesc(null);
if (response != null)
    return response.getMessageDataStatus();
return BaseStatus.NOT_VALID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5634">
		<LastChanged>2012-04-12T09:19:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>375</Sequence>
		<MethodName>getDirectProductInfo</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetProductCostHandler</MethodClassName>
		<LogicSource><![CDATA[BaseProductResponse response = (BaseProductResponse)((BaseMessage)recProduct.processCostRequestInMessage(message, null)).getMessageDataDesc(null);

int iPricingType = PricingType.COMPONENT_PRICING | PricingType.COMPONENT_COST_PRICING;
double dMarkup = 0.00;
RecordOwner recordOwner = recProduct.getRecordOwner();
if (recordOwner != null)
{
    Record recBooking = (Record)recordOwner.getRecord(BookingModel.BOOKING_FILE);
    if ((recBooking != null)
        && ((recBooking.getEditMode() == DBConstants.EDIT_CURRENT) || (recBooking.getEditMode() == DBConstants.EDIT_IN_PROGRESS)))
    {
        PricingType recPricingType = (PricingType)((ReferenceField)recBooking.getField(BookingModel.NON_TOUR_PRICING_TYPE_ID)).getReference();
        iPricingType = (int)recPricingType.getField(PricingType.PRICING_CODES).getValue();
        dMarkup = recBooking.getField(BookingModel.MARKUP).getValue();
    }
    else
    {
        Record recBookingControl = (Record)recordOwner.getRecord(BookingControl.BOOKING_CONTROL_FILE);
        if (recBookingControl == null)
            recBookingControl = new BookingControl(recordOwner);
        PricingType recPricingType = (PricingType)((ReferenceField)recBookingControl.getField(BookingControl.NON_TOUR_PRICING_TYPE_ID)).getReference();
        iPricingType = (int)recPricingType.getField(PricingType.PRICING_CODES).getValue();
        dMarkup = recBookingControl.getField(BookingControl.MARKUP).getValue();
    }

    boolean bMarkupOnlyIfNoPrice = false;
    if (((iPricingType & PricingType.COMPONENT_PRICING) != 0) && ((iPricingType & PricingType.COMPONENT_COST_PRICING) != 0))
        bMarkupOnlyIfNoPrice = true;

    if ((iPricingType & PricingType.OPTION_PRICING) != 0)
        recProduct.markupPriceFromCost(0, false);    // Never
    
    if ((iPricingType & PricingType.COMPONENT_COST_PRICING) != 0)
        recProduct.markupPriceFromCost(dMarkup, bMarkupOnlyIfNoPrice);

    recProduct.markupPriceFromCost(0, true);   // Null looks better than 0
}

if (response != null)
    return response.getMessageDataStatus();
return BaseStatus.NOT_VALID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5635">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,600</Sequence>
		<MethodName>removeTempListeners</MethodName>
		<LogicDescription>Remove any of the temporary file filters added on the last time through.</LogicDescription>
		<MethodReturns>FileListener</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[FileListener listenerLast = null;
Record recProduct = this.getMainRecord();
FileListener listenerNext = recProduct.getListener();
while (listenerNext != null)
{
    if ((listenerNext.getMasterSlaveFlag() & (FileListener.INITED_IN_SLAVE * 2)) != 0)
    {
        recProduct.removeListener(listenerNext, true);
        listenerNext = listenerLast;
        if (listenerNext == null)
            listenerNext = recProduct.getListener();
    }
    else
    {
        listenerLast = listenerNext;    // Last one that wasn't removed
        listenerNext = (FileListener)listenerNext.getNextListener();
    }
}
return listenerLast;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5636">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,800</Sequence>
		<MethodName>markTempListeners</MethodName>
		<LogicDescription>Mark all the listeners past this one as temporary</LogicDescription>
		<MethodReturns/>
		<MethodInterface>FileListener listenerLast</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[while (listenerLast != null)
{
    listenerLast = (FileListener)listenerLast.getNextListener();
    if (listenerLast != null)
        listenerLast.setMasterSlaveFlag(listenerLast.getMasterSlaveFlag() | (FileListener.INITED_IN_SLAVE * 2));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5637">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>checkPriceProperties</MethodName>
		<LogicDescription><![CDATA[Is this the correct message for this screen.
(Double-check to make sure the user still wants this price information)
@return True if the properties are correct.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseMessage map, Record recProduct</MethodInterface>
		<MethodClassName>ProductScreenRecord</MethodClassName>
		<LogicSource><![CDATA[Object objData = map.get(DBParams.TIMESTAMP);
Object objLast = Double.toString(this.getField(ProductScreenRecord.LAST_CHANGED).getValue());
if (objData != null)
    if (objData.equals(objLast))
        return true;    // Same
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5638">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceTypeField</MethodClassName>
		<LogicSource>return new DanceType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5639">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceTypeField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), DanceType.DESCRIPTION_KEY, DanceType.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5640">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DancePositionField</MethodClassName>
		<LogicSource>return new DancePosition(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5641">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DancePositionField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), DancePosition.DESCRIPTION_KEY, DancePosition.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5642">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepField</MethodClassName>
		<LogicSource>return new DanceStep(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5643">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), DanceStep.DESCRIPTION_KEY, DanceStep.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5651">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductStatusSelect</MethodClassName>
		<LogicSource>return this.setupPopupView(itsLocation, targetScreen, converter, iDisplayFieldDesc, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5652">
		<LastChanged>2012-01-31T10:43:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BookingLine recBookingLine = (BookingLine)this.getRecord(BookingLine.BOOKING_LINE_FILE);
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
recBooking.addArDetail(null, recBookingLine, false);

recBookingLine.getField(BookingLine.PRICE).addListener(new CopyDataHandler(recBookingLine.getField(BookingLine.PRICING_STATUS_ID), new Integer(PricingStatus.MANUAL), null));
recBookingLine.addListener(new BookingLineStatusHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5653">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource><![CDATA[ResourceBundle resources = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.BOOKING_RESOURCE, true);

new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON_WITH_GAP, ScreenConstants.ANCHOR_DEFAULT), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.TOUR, ProductType.TOUR, resources.getString(ProductType.TOUR));
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.AIR, ProductType.AIR, resources.getString(ProductType.AIR));
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.HOTEL, ProductType.HOTEL, resources.getString(ProductType.HOTEL));
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.LAND, ProductType.LAND, resources.getString(ProductType.LAND));
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.CAR, ProductType.CAR, resources.getString(ProductType.CAR));
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.TRANSPORTATION, ProductType.TRANSPORTATION, resources.getString(ProductType.TRANSPORTATION));
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.CRUISE, ProductType.CRUISE, resources.getString(ProductType.CRUISE));
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, DBConstants.BLANK, Booking.BUTTON_LOCATION + ProductType.ITEM, ProductType.ITEM, resources.getString(ProductType.ITEM));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5654">
		<LastChanged>2013-01-22T05:54:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = super;
iCommandOptions = ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROWSER;
Product record = null;
Map<String,Object> properties = new Hashtable<String,Object>();

if (ProductType.TOUR.equalsIgnoreCase(strCommand))
{
    record = new TourHeader(this);
}
else if (ProductType.AIR.equalsIgnoreCase(strCommand))
{
    record = new Air(this);
    this.setThisProperty(properties, Tour.AIR_RATE_ID, BookingDetail.RATE_ID);
    this.setThisProperty(properties, Tour.AIR_CLASS_ID, BookingDetail.CLASS_ID);
}
else if (ProductType.HOTEL.equalsIgnoreCase(strCommand))
{
    record = new Hotel(this);
    this.setThisProperty(properties, Tour.HOTEL_CLASS_ID, BookingDetail.CLASS_ID);
    this.setThisProperty(properties, Tour.HOTEL_RATE_ID, BookingDetail.RATE_ID);
}
else if (ProductType.LAND.equals(strCommand))
{
    record = new Land(this);
    if (this.getRecord(Booking.BOOKING_FILE).getField(Booking.PAX).getValue() > 0)
        properties.put(this.getRecord(Booking.BOOKING_FILE).getField(Booking.PAX).getFieldName(), this.getRecord(Booking.BOOKING_FILE).getField(Booking.PAX).toString());
    this.setThisProperty(properties, Tour.LAND_RATE_ID, BookingDetail.RATE_ID);
    this.setThisProperty(properties, Tour.LAND_CLASS_ID, BookingDetail.CLASS_ID);
}
else if (ProductType.TRANSPORTATION.equalsIgnoreCase(strCommand))
{
    record = new Transportation(this);
    if (this.getRecord(Booking.BOOKING_FILE).getField(Booking.PAX).getValue() > 0)
        properties.put(this.getRecord(Booking.BOOKING_FILE).getField(Booking.PAX).getFieldName(), this.getRecord(Booking.BOOKING_FILE).getField(Booking.PAX).toString());
    this.setThisProperty(properties, Tour.TRANSPORTATION_RATE_ID, BookingDetail.RATE_ID);
    this.setThisProperty(properties, Tour.TRANSPORTATION_CLASS_ID, BookingDetail.CLASS_ID);
}
else if (ProductType.CAR.equalsIgnoreCase(strCommand))
{
    record = new Car(this);
    this.setThisProperty(properties, Tour.CAR_RATE_ID, BookingDetail.RATE_ID);
    this.setThisProperty(properties, Tour.CAR_CLASS_ID, BookingDetail.CLASS_ID);
}
else if (ProductType.CRUISE.equalsIgnoreCase(strCommand))
{
    record = new Cruise(this);
    this.setThisProperty(properties, Tour.CRUISE_RATE_ID, BookingDetail.RATE_ID);
    this.setThisProperty(properties, Tour.CRUISE_CLASS_ID, BookingDetail.CLASS_ID);
}
else if (ProductType.ITEM.equalsIgnoreCase(strCommand))
{
    record = new Item(this);
    this.setThisProperty(properties, Tour.ITEM_RATE_ID, BookingDetail.RATE_ID);
    this.setThisProperty(properties, Tour.ITEM_CLASS_ID, BookingDetail.CLASS_ID);
}

Record screenRecord = null;
Record recBooking = this.getRecord(Booking.BOOKING_FILE);
if ((recBooking != null)
    && (recBooking.getRecordOwner() != null)
        && (recBooking.getRecordOwner().getScreenRecord() instanceof BookingScreenRecord))
            screenRecord = (Record)recBooking.getRecordOwner().getScreenRecord();

if (record != null)
{       // Set the default target date.
    if (this.getScreenFieldView().getControl() instanceof CalendarPanel)
    {   // Always
        CalendarPanel panel = (CalendarPanel)this.getScreenFieldView().getControl();
        Date date = null;
        String strCityID = null;
        if (panel.getSelectedPane() != null)
        {
            date = panel.getSelectedPane().getThisDate();
        }
        else if (panel.getSelectedItem() != null)
        {
            date = panel.getSelectedItem().getItem().getEndDate();
            if (date == null)
                date = panel.getSelectedItem().getItem().getStartDate();
        }
        if (date == null)
            if (screenRecord != null)
            date = ((DateTimeField)screenRecord.getField(BookingScreenRecord.LAST_DATE)).getDateTime();
        if (date == null)
            date = ((DateTimeField)this.getRecord(Tour.TOUR_FILE).getField(Tour.DEPARTURE_DATE)).getDateTime();
        Converter.initGlobals();
        if (date != null)
        {
            Calendar calendar = Converter.gCalendar;
            calendar.setTime(date);
            if (calendar.get(Calendar.HOUR_OF_DAY) == 0)
                if (calendar.get(Calendar.MINUTE) == 0)
                if (calendar.get(Calendar.SECOND) == 0)
                if (calendar.get(Calendar.MILLISECOND) == 0)
            {       // Default time should be noon
                calendar.set(Calendar.HOUR_OF_DAY, 12);
                date = calendar.getTime();
            }
            properties.put(this.getRecord(BookingDetail.BOOKING_DETAIL_FILE).getField(BookingDetail.DETAIL_DATE).getFieldName(), date.toString());
        }
    }
    
    if (screenRecord != null)
        if (!screenRecord.getField(BookingScreenRecord.LAST_CITY_ID).isNull())
            properties.put(record.getField(Product.CITY_ID).getFieldName(), screenRecord.getField(BookingScreenRecord.LAST_CITY_ID).toString());

    this.removeRecord(record);    // Remove it from the recordowner's list    record.setRecordOwner(null);
    record.addListener(new OnSelectHandler(this, DBConstants.USER_DEFINED_TYPE)
    {
        public RecordMessage createMessage(Object bookmark)
        {
            RecordMessage message = super.createMessage(bookmark);
            if (message != null)
            {
                Record recProduct = getOwner();
                RecordOwner gridScreen = recProduct.getRecordOwner();
                Record screenRecord = (Record)gridScreen.getScreenRecord();
                this.addMessageProperty(message, screenRecord, ProductScreenRecord.DETAIL_DATE);
                this.addMessageProperty(message, screenRecord, ProductScreenRecord.CLASS_ID);
                this.addMessageProperty(message, screenRecord, ProductScreenRecord.RATE_ID);
            }
            return message;
        }
        public void addMessageProperty(BaseMessage message, Record screenRecord, String iFieldSeq)
        {
            if (!screenRecord.getField(iFieldSeq).isNull())
                message.put(screenRecord.getField(iFieldSeq).getFieldName(), screenRecord.getField(iFieldSeq).toString());
        }
    });

    ScreenLocation itsLocation = null;
    BasePanel parentScreen = Screen.makeWindow(this.getTask().getApplication());
    boolean bReadCurrentRecord = false;
    boolean bUseBaseTable = false;
    boolean bLinkGridToQuery = false;
    boolean bCloneThisQuery = false;
    BasePanel screen = (BasePanel)record.makeScreen(itsLocation, parentScreen, ScreenConstants.SELECT_MODE, bCloneThisQuery, bReadCurrentRecord, bUseBaseTable, bLinkGridToQuery, properties);
    return true;    // Success
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5655">
		<LastChanged>2012-01-31T21:15:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>setThisProperty</MethodName>
		<LogicDescription>This is property in this property object</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Map&lt;String,Object&gt; properties, String iTourFieldSeq, String iParamFieldSeq</MethodInterface>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource><![CDATA[if (!this.getRecord(Tour.TOUR_FILE).getField(iTourFieldSeq).isNull())
    properties.put(this.getRecord(BookingDetail.BOOKING_DETAIL_FILE).getField(iParamFieldSeq).getFieldName(), this.getRecord(Tour.TOUR_FILE).getField(iTourFieldSeq).toString());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5656">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>handleMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    if (message instanceof RecordMessage)
{
    String strRecordName = (String)message.getMessageHeader().get(RecordMessageHeader.TABLE_NAME);
    Object bookmark = ((RecordMessageHeader)message.getMessageHeader()).getBookmark(DBConstants.BOOKMARK_HANDLE);
    BookingDetail recBookingDetail = (BookingDetail)this.getMainRecord();

    ProductType recProductType = (ProductType)this.getRecord(ProductType.PRODUCT_TYPE_FILE);
    if (recProductType == null)
        recProductType = new ProductType(this);
    recBookingDetail = (BookingDetail)recBookingDetail.createSharedRecord(new Integer(recProductType.getProductTypeIDFromName(strRecordName)), this);
    if (recBookingDetail != null)
    {   // Now I have the specific detail record to add
        try {
            Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
            Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
            recBookingDetail.addDetailBehaviors(recBooking, recTour);
            recBookingDetail.setOpenMode(recBookingDetail.getOpenMode() | DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);
            recBookingDetail.addNew();
            this.setDetailProperty(message, recBookingDetail, BookingDetail.DETAIL_DATE);
            Calendar calendar = ((DateTimeField)recBookingDetail.getField(BookingDetail.DETAIL_DATE)).getCalendar();
            if (calendar != null)
                if (calendar.get(Calendar.HOUR_OF_DAY) == 0)
                    if (calendar.get(Calendar.MINUTE) == 0)
                    if (calendar.get(Calendar.SECOND) == 0)
                    if (calendar.get(Calendar.MILLISECOND) == 0)
                {       // Default time should be noon
                    calendar.set(Calendar.HOUR_OF_DAY, 12);
                    ((DateTimeField)recBookingDetail.getField(BookingDetail.DETAIL_DATE)).setCalendar(calendar, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
                }
            this.setDetailProperty(message, recBookingDetail, BookingDetail.RATE_ID);
            this.setDetailProperty(message, recBookingDetail, BookingDetail.CLASS_ID);
            recBookingDetail.getField(BookingDetail.PRODUCT_ID).setString(bookmark.toString());
            recBookingDetail.add();
        } catch (DBException ex) {
            ex.printStackTrace();
        } finally {
            recBookingDetail.free();
        }
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5657">
		<LastChanged>2012-01-31T21:14:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>32</Sequence>
		<MethodName>setThisProperty</MethodName>
		<LogicDescription><![CDATA[Set this field to the property with the same name.
@param iScreenField Screen field sequence with the same name.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>String iScreenField</MethodInterface>
		<MethodClassName>ProductGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getProperty(this.getScreenRecord().getField(iScreenField).getFieldName()) != null)
    this.getScreenRecord().getField(iScreenField).setString(this.getProperty(this.getScreenRecord().getField(iScreenField).getFieldName()));        ]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5658">
		<LastChanged>2012-02-01T11:46:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>setDetailProperty</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseMessage message, Record record, String iFieldSeq</MethodInterface>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource><![CDATA[String strParamName = record.getField(iFieldSeq).getFieldName();
if (message.get(strParamName) != null)
{
    if (message.get(strParamName) instanceof String)
        record.getField(iFieldSeq).setString((String)message.get(strParamName));
    else
        record.getField(iFieldSeq).setData(message.get(strParamName));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5659">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClassScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ProductControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5660">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClassScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(TourClass.AIR_RATE_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.AIR_RATE_ID)));
this.getMainRecord().getField(TourClass.AIR_CLASS_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.AIR_CLASS_ID)));
this.getMainRecord().getField(TourClass.HOTEL_RATE_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.HOTEL_RATE_ID)));
this.getMainRecord().getField(TourClass.HOTEL_CLASS_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.HOTEL_CLASS_ID)));
this.getMainRecord().getField(TourClass.LAND_RATE_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.LAND_RATE_ID)));
this.getMainRecord().getField(TourClass.LAND_CLASS_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.LAND_CLASS_ID)));
this.getMainRecord().getField(TourClass.PMC_CUTOFF).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.PMC_CUTOFF)));
this.getMainRecord().getField(TourClass.CAR_RATE_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.CAR_RATE_ID)));
this.getMainRecord().getField(TourClass.CAR_CLASS_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.CAR_CLASS_ID)));
this.getMainRecord().getField(TourClass.TRANSPORTATION_RATE_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.TRANSPORTATION_RATE_ID)));
this.getMainRecord().getField(TourClass.TRANSPORTATION_CLASS_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.TRANSPORTATION_CLASS_ID)));
this.getMainRecord().getField(TourClass.CRUISE_RATE_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.CRUISE_RATE_ID)));
this.getMainRecord().getField(TourClass.CRUISE_CLASS_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.CRUISE_CLASS_ID)));
this.getMainRecord().getField(TourClass.ITEM_RATE_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.ITEM_RATE_ID)));
this.getMainRecord().getField(TourClass.ITEM_CLASS_ID).addListener(new InitFieldHandler(this.getRecord(ProductControl.PRODUCT_CONTROL_FILE).getField(ProductControl.ITEM_CLASS_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5662">
		<LastChanged>2012-02-01T10:33:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>resetCount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaxSelectHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
Record booking = m_fldMain.getRecord();
for (int iFieldSeq = booking.getFieldSeq(Booking.SINGLE_PAX); iFieldSeq <= booking.getFieldSeq(Booking.QUAD_PAX); iFieldSeq++)
{    // Zero all the other fields
    iErrorCode = this.setFieldCount(iFieldSeq, 0, true);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5663">
		<LastChanged>2012-04-11T15:41:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>84</Sequence>
		<MethodName>setupProductDesc</MethodName>
		<LogicDescription><![CDATA[From the current detail and product info,
setup the product description.
@return The product description (using the product).]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[ProductModel recProduct = this.getProduct();
if (recProduct == null)
    return this.getField(BookingDetail.DESCRIPTION).toString();
return recProduct.getField(Product.DESCRIPTION).toString();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="5664">
		<LastChanged>2012-04-01T00:06:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>77</Sequence>
		<MethodName>getEndDate</MethodName>
		<LogicDescription><![CDATA[Get the end product date and time.
@return The date.]]></LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>return ((DateTimeField)this.getField(BookingDetail.DETAIL_END_DATE)).getDateTime();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="5665">
		<LastChanged>2012-04-12T06:40:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>moveProductFields</MethodName>
		<LogicDescription><![CDATA[Move data from the product record to this record.
@param recProduct the souce product record.
@return An error code]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>ProductModel recProduct</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[if (this.getField(BookingDetail.ACK_DAYS).isNull())
    this.moveTargetField((Record)recProduct, BookingDetail.ACK_DAYS, Product.ACK_DAYS);

this.getField(BookingDetail.VENDOR_ID).setModified(false);  // This will be auto-restored in calling (setDetailProductFields) method.
this.getField(BookingDetail.VENDOR_ID).moveFieldToThis((BaseField)recProduct.getField(Product.VENDOR_ID));
if (this.getField(BookingDetail.VENDOR_ID).isModified())
{
    Record recVendor = ((ReferenceField)recProduct.getField(Product.VENDOR_ID)).getReference();
    if (recVendor != null)
    {
        Record recCurrency = ((ReferenceField)recVendor.getField(Vendor.CURRENCYS_ID)).getReference();
        if (recCurrency != null)
        {
            if (!recCurrency.getField(Currencys.COSTING_RATE).isNull())
                this.getField(BookingDetail.EXCHANGE).moveFieldToThis(recCurrency.getField(Currencys.COSTING_RATE));
            else
                this.getField(BookingDetail.EXCHANGE).moveFieldToThis(recCurrency.getField(Currencys.LAST_RATE));
        }
    }
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5666">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>122</Sequence>
		<MethodName>moveTourHeaderFields</MethodName>
		<LogicDescription><![CDATA[Move from the tour header record to this record.
NOTE: Be careful as the TourHeaderDetail record can be null (so fields that depend on Tour can be set).
@param recTourHeaderDetail The tour header record.
@return An error code]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>TourSub recTourHeaderDetail, Tour recTour</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[if (recTourHeaderDetail != null)
{
	this.moveTargetField(recTourHeaderDetail, BookingDetail.INFO_MESSAGE_TRANSPORT_ID, TourHeaderDetail.INFO_MESSAGE_TRANSPORT_ID);
	this.moveTargetField(recTourHeaderDetail, BookingDetail.INFO_STATUS_ID, TourHeaderDetail.INFO_STATUS_ID);
	this.moveTargetField(recTourHeaderDetail, BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID, TourHeaderDetail.INVENTORY_MESSAGE_TRANSPORT_ID);
	this.moveTargetField(recTourHeaderDetail, BookingDetail.INVENTORY_STATUS_ID, TourHeaderDetail.INVENTORY_STATUS_ID);
	this.moveTargetField(recTourHeaderDetail, BookingDetail.COST_MESSAGE_TRANSPORT_ID, TourHeaderDetail.COST_MESSAGE_TRANSPORT_ID);
	this.moveTargetField(recTourHeaderDetail, BookingDetail.COST_STATUS_ID, TourHeaderDetail.COST_STATUS_ID);
	this.moveTargetField(recTourHeaderDetail, BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID, TourHeaderDetail.PRODUCT_MESSAGE_TRANSPORT_ID);
	this.moveTargetField(recTourHeaderDetail, BookingDetail.PRODUCT_STATUS_ID, TourHeaderDetail.PRODUCT_STATUS_ID);
	this.moveTargetField(recTourHeaderDetail, BookingDetail.ACK_DAYS, TourHeaderDetail.ACK_DAYS);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.RATE_ID, TourHeaderDetail.RATE_ID);
    this.moveTargetField(recTourHeaderDetail, BookingDetail.CLASS_ID, TourHeaderDetail.CLASS_ID);
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5667">
		<LastChanged>2012-04-12T08:39:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>128</Sequence>
		<MethodName>moveTargetField</MethodName>
		<LogicDescription><![CDATA[Move from the target field to this field
If this field is unmodified and the target is not null.
@param recTarget The source record
@param iDetailField The destinatation field in BookingDetail
@param iTargetField The source field.
@return true If the field was changed.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Rec recTarget, String iDetailField, String iTargetField</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[if (!this.getField(iDetailField).isModified()) if (!recTarget.getField(iTargetField).isNull())
{
    FieldListener listener = this.getField(iDetailField).getListener(InitOnceFieldHandler.class);
    boolean bOldState = false;
    if (listener != null)
        bOldState = listener.setEnabledListener(false);
    this.getField(iDetailField).moveFieldToThis((BaseField)recTarget.getField(iTargetField), DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    if (listener != null)
        listener.setEnabledListener(bOldState);
    return true;
}
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5668">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>moveProductFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAir</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;

this.moveTargetField(recProduct, BookingDetail.ETD, Product.ETD);
this.moveTargetField(recProduct, BookingDetail.ARRIVE_TIME, Air.ARRIVE_TIME);
if (this.moveTargetField(recProduct, BookingDetail.CITY_CODE, Air.CITY_CODE))
{
    //this.moveTargetField(recProduct, BookingDetail.CITY_DESC, Air.CITY_DESC);
}
if (this.moveTargetField(recProduct, BookingDetail.AIRLINE_ID, Air.AIRLINE_ID))
{
    Record recAirline = ((ReferenceField)this.getField(BookingDetail.AIRLINE_ID)).getReference();
    if (recAirline != null)
        this.getField(BookingDetail.CARRIER).moveFieldToThis(recAirline.getField(Airline.DESCRIPTION));
}
this.moveTargetField(recProduct, BookingDetail.FLIGHT_NO, Air.FLIGHT_NO);
this.moveTargetField(recProduct, BookingDetail.TO_CITY_CODE, Air.TO_CITY_CODE);
this.moveTargetField(recProduct, BookingDetail.ADD_DAYS, Air.ADD_DAYS);
this.moveTargetField(recProduct, BookingDetail.START_DATE, Air.START_DATE);
this.moveTargetField(recProduct, BookingDetail.END_DATE, Air.END_DATE);
this.moveTargetField(recProduct, BookingDetail.MEALS, Air.MEALS);

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5669">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>RecomputeProductDesc</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Object object</MethodInterface>
		<MethodClassName>RecomputeProductDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5670">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RecomputeProductDesc</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
String strDesc = ((BookingDetail)this.getOwner().getRecord()).setupProductDesc();
iErrorCode = this.getOwner().getRecord().getField(BookingDetail.DESCRIPTION).setString(strDesc);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5671">
		<LastChanged>2012-04-11T15:41:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>82</Sequence>
		<MethodName>setupGMTDates</MethodName>
		<LogicDescription>Calc the GMT start and end dates.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[ProductModel recProduct = this.getProduct();
if ((recProduct != null) &&
    ((recProduct.getEditMode() == DBConstants.EDIT_IN_PROGRESS) || (recProduct.getEditMode() == DBConstants.EDIT_CURRENT)))
{
    Record recCity = ((ReferenceField)recProduct.getField(Product.CITY_ID)).getReference();
    if (recCity != null)
    {
        this.getField(BookingDetail.GMT_OFFSET).moveFieldToThis(recCity.getField(City.GMT_OFFSET));
        if (recCity.getField(City.GMT_OFFSET).isNull())
        {
            Record recCountry = ((ReferenceField)recCity.getField(City.COUNTRY_ID)).getReference();
            if (recCountry != null)
            {
                this.getField(BookingDetail.GMT_OFFSET).moveFieldToThis(recCountry.getField(Country.GMT_OFFSET));
                if (this.getField(BookingDetail.GMT_OFFSET).isNull())
                {
                    Record recState = ((ReferenceField)recCity.getField(City.STATE_ID)).getReference();
                    if (recState != null)
                        this.getField(BookingDetail.GMT_OFFSET).moveFieldToThis(recState.getField(State.GMT_OFFSET));
                }
            }
        }
    }
}
Calendar calendar = DateTimeField.m_calendar;

Date date = this.getStartDate();
calendar.setTime(date);
calendar.add(Calendar.HOUR_OF_DAY, (int)this.getField(BookingDetail.GMT_OFFSET).getValue());
date = calendar.getTime();
((DateTimeField)this.getField(BookingDetail.GMT_DATE)).setDateTime(date,  DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);

date = this.getEndDate();
calendar.setTime(date);
calendar.add(Calendar.HOUR_OF_DAY, (int)this.getField(BookingDetail.GMT_OFFSET).getValue());
date = calendar.getTime();
((DateTimeField)this.getField(BookingDetail.GMT_END_DATE)).setDateTime(date,  DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5672">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTourHeaderScreen</MethodClassName>
		<LogicSource>return new TourHeaderTour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5673">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTourHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5674">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTourHeaderGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderTour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5675">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTourHeaderGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5676">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourHeaderTourHeaderGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recTourHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourHeaderTourHeaderGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5678">
		<LastChanged>2012-03-28T08:28:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionScreen</MethodClassName>
		<LogicSource><![CDATA[String strCommand = super;

String strValue = TourHeaderOption.OPTION;
if (this.getHeaderRecord() instanceof TourHeader)
    strValue = TourHeaderOption.TOUR;
strCommand = Utility.addURLParam(strCommand, TourHeaderOption.TOUR_OR_OPTION, strValue);

return strCommand;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5679">
		<LastChanged>2012-03-28T08:30:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strCommand = super;

String strValue = TourHeaderOption.OPTION;
if (this.getHeaderRecord() instanceof TourHeader)
    strValue = TourHeaderOption.TOUR;
strCommand = Utility.addURLParam(strCommand, TourHeaderOption.TOUR_OR_OPTION, strValue);

return strCommand;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5680">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckTourOptionDisplay</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
{
    RecordOwner recordOwner = this.getOwner().getRecord().getRecordOwner();
    Record recBooking = (Record)recordOwner.getRecord(Booking.BOOKING_FILE);
    if (m_bOldAlwaysResolve == false)
        if (recBooking.getField(Booking.ALWAYS_RESOLVE).getState() == true)
    {
        recordOwner.getScreenRecord().getField(BookingScreenRecord.BK_SUB_SCREEN).setValue(BookingScreenHandler.OPTIONS_SCREEN); // Switch to the options screen
    }

    m_bOldAlwaysResolve = recBooking.getField(Booking.ALWAYS_RESOLVE).getState();
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5681">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderAirHeaderField</MethodClassName>
		<LogicSource>return new TourHeaderAirHeader(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5682">
		<LastChanged>2012-06-30T16:28:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderAirHeaderField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.makeReferenceRecord();
ScreenComponent sField = this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, null, TourHeaderAirHeader.AIRLINE_DESC, true, true);
ScreenComponent sfTemp = BaseField.createScreenComponent(ScreenModel.CANNED_BOX, targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, null, ScreenConstants.DEFAULT_DISPLAY, properties);
for (int i = 0; ; i++)
{
    ScreenComponent screenField = this.getComponent(i);
    if (screenField == null)
        break;  // Just being careful.
    if (screenField.getClass().isAssignableFrom(sfTemp.getClass()))
    {
        screenField.free();
        properties = new HashMap<String,Object>();
        properties.put(ScreenModel.RECORD, record);
        properties.put(ScreenModel.COMMAND, ThinMenuConstants.LOOKUP);
        properties.put(ScreenModel.IMAGE, ThinMenuConstants.LOOKUP);
        screenField = createScreenComponent(TourHeaderAirHeader.TOUR_HEADER_AIR_HEADER_SFIELD_CLASS, targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, converter, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
        break;
    }
}
sfTemp.free();
return sField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5683">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderField</MethodClassName>
		<LogicSource>return new BookingAirHeader(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5684">
		<LastChanged>2012-06-30T16:28:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.makeReferenceRecord();
ScreenComponent sField = this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, null, BookingAirHeader.AIRLINE_DESC, true, false);
ScreenComponent sfTemp = BaseField.createScreenComponent(ScreenModel.CANNED_BOX, targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, null, ScreenConstants.DEFAULT_DISPLAY, properties);
for (int i = 0; ; i++)
{
    ScreenComponent screenField = this.getComponent(i);
    if (screenField == null)
        break;  // Just being careful.
    if (screenField.getClass().isAssignableFrom(sfTemp.getClass()))
    {
        screenField.free();
        properties = new HashMap<String,Object>();
        properties.put(ScreenModel.RECORD, record);
        properties.put(ScreenModel.COMMAND, ThinMenuConstants.LOOKUP);
        properties.put(ScreenModel.IMAGE, ThinMenuConstants.LOOKUP);
        screenField = createScreenComponent(BookingAirHeader.BOOKING_AIR_HEADER_SCREEN_FIELD_CLASS, targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, converter, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
        break;
    }
}
sfTemp.free();
return sField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5685">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderGridScreen</MethodClassName>
		<LogicSource>return new BookingAirHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5686">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5687">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderScreen</MethodClassName>
		<LogicSource>return new BookingAirHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5688">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5689">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.AIR_HEADER_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5690">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.AIR_HEADER_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5691">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BookingAirHeader recBookingAirHeader = (BookingAirHeader)this.getMainRecord();
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
recBookingAirHeader.addDetailBehaviors(recBooking, recTour);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5692">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BookingAirHeader recBookingAirHeader = (BookingAirHeader)this.getMainRecord();
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
recBookingAirHeader.addDetailBehaviors(recBooking, recTour);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5693">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirGridScreen</MethodClassName>
		<LogicSource><![CDATA[super.addToolbarButtons(toolScreen);
ResourceBundle resources = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.BOOKING_RESOURCE, true);
BaseField field = ((Record)this.getRecord(Booking.BOOKING_FILE).getRecordOwner().getScreenRecord()).getField(BookingScreenRecord.BK_SUB_SCREEN);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, field, ScreenConstants.DEFAULT_DISPLAY, null, resources.getString(ProductType.AIR + "Header"), Booking.BUTTON_LOCATION + ProductType.AIR + "Header", Integer.toString(BookingScreenHandler.AIR_HEADER_SCREEN), resources.getString(ProductType.AIR + "HeaderTip"));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5694">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirScreen</MethodClassName>
		<LogicSource><![CDATA[super.addToolbarButtons(toolScreen);
ResourceBundle resources = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.BOOKING_RESOURCE, true);
BaseField field = ((Record)this.getRecord(Booking.BOOKING_FILE).getRecordOwner().getScreenRecord()).getField(BookingScreenRecord.BK_SUB_SCREEN);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, field, ScreenConstants.DEFAULT_DISPLAY, null, resources.getString(ProductType.AIR + "Header"), Booking.BUTTON_LOCATION + ProductType.AIR + "Header", Integer.toString(BookingScreenHandler.AIR_HEADER_SCREEN), resources.getString(ProductType.AIR + "HeaderTip"));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5695">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
ResourceBundle resources = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.BOOKING_RESOURCE, true);
BaseField field = ((Record)this.getRecord(Booking.BOOKING_FILE).getRecordOwner().getScreenRecord()).getField(BookingScreenRecord.BK_SUB_SCREEN);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, field, ScreenConstants.DEFAULT_DISPLAY, null, resources.getString(ProductType.AIR), Booking.BUTTON_LOCATION + ProductType.AIR, Integer.toString(BookingScreenHandler.AIR_SCREEN), resources.getString(ProductType.AIR + "Tip"));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5696">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
ResourceBundle resources = ((BaseApplication)this.getTask().getApplication()).getResources(ResourceConstants.BOOKING_RESOURCE, true);
BaseField field = ((Record)this.getRecord(Booking.BOOKING_FILE).getRecordOwner().getScreenRecord()).getField(BookingScreenRecord.BK_SUB_SCREEN);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolScreen, field, ScreenConstants.DEFAULT_DISPLAY, null, resources.getString(ProductType.AIR), Booking.BUTTON_LOCATION + ProductType.AIR, Integer.toString(BookingScreenHandler.AIR_SCREEN), resources.getString(ProductType.AIR + "Tip"));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5697">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSubGridScreen</MethodClassName>
		<LogicSource>return this.getRecord(Booking.BOOKING_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5698">
		<LastChanged>2012-01-31T10:43:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSubScreen</MethodClassName>
		<LogicSource>return this.getRecord(Booking.BOOKING_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5699">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setDetailProductFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeader</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;

this.getField(BookingAirHeader.AIRLINE_CODE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.AIRLINE_CODE));
this.getField(BookingAirHeader.AIRLINE_IATA).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.AIRLINE_IATA));
this.getField(BookingAirHeader.AIRLINE_DESC).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.AIRLINE_DESC));
this.getField(BookingAirHeader.CONJUNCTION).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.CONJUNCTION));
this.getField(BookingAirHeader.ENDORSEMENTS).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.ENDORSEMENTS));
this.getField(BookingAirHeader.ORIGIN_DEST).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.ORIGIN_DEST));
this.getField(BookingAirHeader.BOOKING_REFERENCE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.BOOKING_REFERENCE));
this.getField(BookingAirHeader.TOUR_CODE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.TOUR_CODE));
this.getField(BookingAirHeader.TOTAL_FARE_BASIS).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.TOTAL_FARE_BASIS));
this.getField(BookingAirHeader.FARE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.FARE));
this.getField(BookingAirHeader.EQUIVALENT).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.EQUIVALENT));
this.getField(BookingAirHeader.CURRENCY_CODE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.CURRENCY_CODE));
this.getField(BookingAirHeader.TAX_PERCENT).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.TAX_PERCENT));
this.getField(BookingAirHeader.TAX_1).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.TAX_1));
this.getField(BookingAirHeader.TAX_1_DESC).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.TAX_1_DESC));
this.getField(BookingAirHeader.TAX_2).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.TAX_2));
this.getField(BookingAirHeader.TAX_2_DESC).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.TAX_2_DESC));
this.getField(BookingAirHeader.TOTAL).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.TOTAL));
this.getField(BookingAirHeader.COMMISSION).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.COMMISSION));
this.getField(BookingAirHeader.TAX).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.TAX));
this.getField(BookingAirHeader.COMMISSION_RATE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.COMMISSION_RATE));
this.getField(BookingAirHeader.AGENT).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.AGENT));
this.getField(BookingAirHeader.INTERNATIONAL).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.INTERNATIONAL));
this.getField(BookingAirHeader.COMM_PERCENT).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.COMM_PERCENT));
this.getField(BookingAirHeader.COMM_AMOUNT).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.COMM_AMOUNT));
this.getField(BookingAirHeader.TICKET_BY).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.TICKET_BY));
this.getField(BookingAirHeader.NET_FARE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.NET_FARE));
this.getField(BookingAirHeader.OVERRIDE_PERCENT).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.OVERRIDE_PERCENT));
this.getField(BookingAirHeader.OVERRIDE_AMOUNT).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.OVERRIDE_AMOUNT));
this.getField(BookingAirHeader.NET_COST).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.NET_COST));
this.getField(BookingAirHeader.VOID).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.VOID));
this.getField(BookingAirHeader.VOID_DATE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.VOID_DATE));
this.getField(BookingAirHeader.EXCH_TICKET).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.EXCH_TICKET));
this.getField(BookingAirHeader.DEP_DATE).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.DEP_DATE));
this.getField(BookingAirHeader.CREDIT).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.CREDIT));
this.getField(BookingAirHeader.COMMENT_1).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.COMMENT_1));
this.getField(BookingAirHeader.COMMENT_2).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.COMMENT_2));
this.getField(BookingAirHeader.COMMENT_3).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.COMMENT_3));
this.getField(BookingAirHeader.FREQ_FLIER).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.FREQ_FLIER));
this.getField(BookingAirHeader.FARE_1).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.FARE_1));
this.getField(BookingAirHeader.FARE_2).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.FARE_2));
this.getField(BookingAirHeader.FARE_3).moveFieldToThis(recTourHeaderDetail.getField(TourHeaderAirHeader.FARE_3));

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5700">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSubGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((this.getHeaderRecord().getEditMode() == DBConstants.EDIT_ADD)
    || (this.getHeaderRecord().getEditMode() == DBConstants.EDIT_NONE))
{	// Only call this if there is not a valid booking
    super;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5701">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSubScreen</MethodClassName>
		<LogicSource><![CDATA[if ((this.getHeaderRecord().getEditMode() == DBConstants.EDIT_ADD)
    || (this.getHeaderRecord().getEditMode() == DBConstants.EDIT_NONE))
{	// Only call this if there is not a valid booking
    super;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5702">
		<LastChanged>2012-01-25T17:18:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,100</Sequence>
		<MethodName>getNextMessageDetailTarget</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageDetailTarget</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Vendor</MethodClassName>
		<LogicSource><![CDATA[if (m_recApControl == null)
{
    RecordOwner recordOwner = this.findRecordOwner();
    m_recApControl = new ApControl(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recApControl);
    this.addListener(new FreeOnFreeHandler(m_recApControl));
}
return m_recApControl;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5703">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>220</Sequence>
		<MethodName>getNextMessageDetailTarget</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageDetailTarget</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[if (this.getField(Hotel.VENDOR_ID).isNull())
    return null;
return (Vendor)((ReferenceField)this.getField(Hotel.VENDOR_ID)).getReference();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5704">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>250</Sequence>
		<MethodName>getMessageTransport</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageTransport</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource>return (MessageTransport)((ReferenceField)this.getField(Product.PRODUCT_MESSAGE_TRANSPORT_ID)).getReference();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5705">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>255</Sequence>
		<MethodName>addDestInfo</MethodName>
		<LogicDescription/>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource>return trxMessageHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5709">
		<LastChanged>2012-01-25T17:18:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,100</Sequence>
		<MethodName>getNextMessageDetailTarget</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageDetailTarget</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Profile</MethodClassName>
		<LogicSource><![CDATA[if (m_recProfileControl == null)
{
    m_recProfileControl = new ProfileControl(this.findRecordOwner());
    if (m_recProfileControl.getRecordOwner() != null)
        m_recProfileControl.getRecordOwner().removeRecord(m_recProfileControl);
    this.addListener(new FreeOnFreeHandler(m_recProfileControl));
}
return m_recProfileControl;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5710">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getNextMessageDetailTarget</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageDetailTarget</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ApControl</MethodClassName>
		<LogicSource><![CDATA[return null;	// End of the chain]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5711">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getMessageTransport</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageTransport</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>ApControl</MethodClassName>
		<LogicSource>return (MessageTransport)((ReferenceField)this.getField(ApControl.MESSAGE_TRANSPORT_ID)).getReference();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5712">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>addDestInfo</MethodName>
		<LogicDescription/>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>ApControl</MethodClassName>
		<LogicSource>return trxMessageHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5713">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getNextMessageDetailTarget</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageDetailTarget</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProfileControl</MethodClassName>
		<LogicSource>return null;    // End of the chain</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5714">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getMessageTransport</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageTransport</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>ProfileControl</MethodClassName>
		<LogicSource>return (MessageTransport)((ReferenceField)this.getField(ProfileControl.MESSAGE_TRANSPORT_ID)).getReference();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5715">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>addDestInfo</MethodName>
		<LogicDescription/>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>ProfileControl</MethodClassName>
		<LogicSource>return trxMessageHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5716">
		<LastChanged>2012-05-26T16:48:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>checkMessageRequired</MethodName>
		<LogicDescription><![CDATA[Lookup the message for this status update.
If no update is required, return a null message.
@return The message to process (or null if no message).]]></LogicDescription>
		<MethodReturns>MessageDataParent</MethodReturns>
		<MethodInterface>String iStatusType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[if (this.getEditMode() == DBConstants.EDIT_NONE)
    return null;
ProductModel recProduct = this.getProduct();
if (recProduct == null)
    return null;   // Never
String strMessageInfoType = MessageInfoType.REQUEST;
String strRequestType = this.getRequestType(iStatusType);
String strMessageProcessType = MessageType.MESSAGE_OUT;
String strProcessType = this.getProcessType(iStatusType);
String strContactType = recProduct.getTableNames(false);
if (RequestType.BOOKING_CANCEL.equalsIgnoreCase(strRequestType))
    strContactType = Product.PRODUCT_FILE;      // Cancellation message is generic
String strMessageTransport = this.getMessageTransport(iStatusType);
if (MessageTransport.MANUAL.equals(strMessageTransport))
    return null;    // No need to send a message if manual
TrxMessageHeader trxMessageHeader = ((Product)recProduct).createProcessMessage(strMessageInfoType, strContactType, strRequestType, strMessageProcessType, strProcessType, strMessageTransport);
if (trxMessageHeader == null)
    return null;
String strPrefix = this.getFieldParam(this.getField(iStatusType)) + '.' + BookingDetail.MESSAGE_PARAM + '.' + BaseMessage.HEADER_TAG + '.';
this.addMessageProperties(strPrefix, true, trxMessageHeader, null, null);
BaseMessage message = BaseMessage.createMessage(trxMessageHeader);
BaseProductMessageDesc messageData = (BaseProductMessageDesc)message.getMessageDataDesc(null);
if ((message == null) || (messageData == null))
    return null;
trxMessageHeader.addTaskProperties(this.getTask());
if (this.getEditMode() == DBConstants.EDIT_ADD)
{
    try {
        this.writeAndRefresh();
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}
trxMessageHeader.put(TrxMessageHeader.REFERENCE_ID, this.getCounterField().toString());
trxMessageHeader.put(TrxMessageHeader.REFERENCE_TYPE, this.getTableNames(false));
trxMessageHeader.put(TrxMessageHeader.REFERENCE_CLASS, this.getClass().getName());
strPrefix = this.getFieldParam(this.getField(iStatusType)) + '.' + BookingDetail.MESSAGE_PARAM + '.';
this.addMessageProperties(strPrefix, false, null, message, strPrefix);        // Add any land varies params
String strMessageTransportID = (String)message.getMessageHeader().get(MessageTransport.TRANSPORT_ID_PARAM);
if ((strMessageTransportID != null) && (strMessageTransportID.length() > 0))
{
    int fieldSeq = this.getFieldSeq(iStatusType);
    boolean[] brgEnabled = this.getField(fieldSeq + MESSAGE_TRANSPORT_OFFSET).setEnableListeners(false);    // No echo
    this.getField(fieldSeq + MESSAGE_TRANSPORT_OFFSET).setString(strMessageTransportID);   // Set the message transport
    this.getField(fieldSeq + MESSAGE_TRANSPORT_OFFSET).setEnableListeners(brgEnabled);
    if (!strMessageTransportID.equals(this.getField(fieldSeq + MESSAGE_TRANSPORT_OFFSET).toString()))
    { // Transport was changed, I must get the NEW message (for the new transport)!
        return this.checkMessageRequired(iStatusType);
    }
}
this.setErrorMessage(messageData, null);
int iStatus = messageData.checkRequestParams(this);
if (iStatus == BaseDataStatus.DATA_VALID)
{
    messageData.handlePutRawRecordData(this);    // Set the properties for a price lookup
    if (!((ProductMessageData)message.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE)).updateMessageKeys(this, iStatusType))
        return null; // If the data hasn't changed, don't change the status.
    return messageData;
}
((ProductMessageData)message.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE)).setRecordDataStatus(this, iStatusType, iStatus);
return null;    // Status was returned and set, don't process this message.]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="5718">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxField</MethodClassName>
		<LogicSource>return new BookingPax(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5719">
		<LastChanged>2012-02-01T08:21:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaxField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), null, BookingPax.SUR_NAME, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5720">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderDetailField</MethodClassName>
		<LogicSource><![CDATA[return null;	// Must Override!!!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5721">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderDetailField</MethodClassName>
		<LogicSource>return null; //+++ this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), -1, TourHeader.DESCRIPTION, false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5722">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDetailScreen</MethodClassName>
		<LogicSource><![CDATA[boolean bHandled = false;
if (BookingScreenHandler.OPTIONS.equalsIgnoreCase(strCommand))
{
    BasePanel parentScreen = this.getParentScreen();
    ScreenLocation screenLocation = parentScreen.getNextLocation(ScreenConstants.FLUSH_LEFT, ScreenConstants.FILL_REMAINDER);
    Map<String,Object> properties = new Hashtable<String,Object>();
    if (!this.getMainRecord().getField(BookingDetail.PRODUCT_ID).isNull())
    {
        properties.put(BookingAnswerGridScreen.MODULE_ID, this.getMainRecord().getField(BookingDetail.PRODUCT_ID).toString());
        properties.put(BookingAnswerGridScreen.MODULE_START_DATE, this.getMainRecord().getField(BookingDetail.DETAIL_DATE).toString());
    }
    Task task = parentScreen.getTask();

    this.free();
    task.setProperties(properties);
    new BookingAnswerGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    bHandled = true;
}
if (!bHandled)
    bHandled = super; // This will send the command to my view
return bHandled;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5723">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MoveClassField</MethodClassName>
		<LogicSource>return new MoveClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5724">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MoveClassField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), MoveClass.DESCRIPTION_KEY, MoveClass.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5725">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HandPositionField</MethodClassName>
		<LogicSource>return new HandPosition(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5726">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HandPositionField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), HandPosition.DESCRIPTION_KEY, HandPosition.DESCRIPTION, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5727">
		<LastChanged>2012-02-01T19:02:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strURL = super;

strURL = Utility.addURLParam(strURL, BookingAnswerGridScreen.MODULE_ID, m_strModuleID, false);
strURL = Utility.addURLParam(strURL, BookingAnswerGridScreen.MODULE_START_DATE, m_strModuleStartDate, false);
strURL = Utility.addURLParam(strURL, BookingAnswerGridScreen.TOUR_OR_OPTION, m_strTourOrOption, false);
strURL = Utility.addURLParam(strURL, BookingAnswerGridScreen.TOUR_OR_OPTION_ID, m_strTourOrOptionID, false);
strURL = Utility.addURLParam(strURL, BookingAnswerGridScreen.BOOKING_PAX_ID, m_recBookingPax.getField(BookingPax.ID).toString(), false);
return strURL;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5728">
		<LastChanged>2012-02-01T19:02:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>restoreTheProperties</MethodName>
		<LogicDescription/>
		<MethodReturns>TourHeader</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingAnswerGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record recBooking = this.getRecord(Booking.BOOKING_FILE);

if (m_recBookingPax == null)
    m_recBookingPax = new BookingPax(this);
if (m_recBookingPax.getField(BookingPax.ID).isNull())
    m_recBookingPax.getField(BookingPax.ID).setValue(0);
if (this.getProperty(BookingAnswerGridScreen.TOUR_OR_OPTION) != null)
    m_strTourOrOption = this.getProperty(BookingAnswerGridScreen.TOUR_OR_OPTION);
if (m_strTourOrOption == null)  // Never
    m_strTourOrOption = TourHeaderOption.TOUR;

Record recTour = ((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
TourHeader recTourHeader = (TourHeader)((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReference();

if (this.getProperty(BookingAnswerGridScreen.MODULE_ID) != null)
    m_strModuleID = this.getProperty(BookingAnswerGridScreen.MODULE_ID);
if (this.getProperty(BookingAnswerGridScreen.MODULE_START_DATE) != null)
    m_strModuleStartDate = this.getProperty(BookingAnswerGridScreen.MODULE_START_DATE);
if (m_strModuleStartDate != null)
    m_fldModuleStart.setString(m_strModuleStartDate);
if ((m_strModuleID != null)
    && (m_strModuleStartDate != null))
{
    if ((!m_fldModuleStart.equals(recTour.getField(Tour.DEPARTURE_DATE)))
        || (!m_strModuleID.equals(recTourHeader.getField(TourHeader.ID).toString())))
    {
        recTourHeader = new TourHeader(this);
        recTourHeader.getField(TourHeader.ID).setString(m_strModuleID);
        try {
            if (recTourHeader.seek(null))
            {   // Always

            }
        } catch (DBException ex) {
            ex.printStackTrace();
        }
    }
}
else
{
    m_strModuleID = recTourHeader.getField(TourHeader.ID).toString();
    m_strModuleStartDate = recTour.getField(Tour.DEPARTURE_DATE).toString();
}

if (this.getProperty(BookingAnswerGridScreen.TOUR_OR_OPTION_ID) != null)
    m_strTourOrOptionID = this.getProperty(BookingAnswerGridScreen.TOUR_OR_OPTION_ID);
if (m_strTourOrOptionID == null)
    m_strTourOrOptionID = m_strModuleID;

return recTourHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5729">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerScreen</MethodClassName>
		<LogicSource>return new BookingAnswer(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5730">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5731">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.OPTIONS_SCREEN));
super;
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5732">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.setAppending(false);

this.getMainRecord().getField(BookingAnswer.SELECTED).addListener(new BookingAnswerSelectHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5733">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
{
    BasePanel parentScreen = this.getParentScreen();
    ScreenLocation itsLocation = null;
    if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_SAME_WINDOW)	// Use same window
        itsLocation = this.getScreenLocation();
    else
        parentScreen = Screen.makeWindow(this.getTask().getApplication());

    Record record = this.getMainRecord();
    if ((record.getEditMode() != Constants.EDIT_CURRENT) && (record.getEditMode() != Constants.EDIT_IN_PROGRESS))
        return false;

    BookingPax recBookingPax = (BookingPax)((ReferenceField)this.getMainRecord().getField(BookingAnswer.BOOKING_PAX_ID)).getReference();
    if (recBookingPax != null)
    {
        try {
            BookingPax recBookingPax2 = (BookingPax)recBookingPax.clone();
            recBookingPax2.readSameRecord(recBookingPax, false, true);
            recBookingPax = recBookingPax2;
        } catch (CloneNotSupportedException ex) {
            // Never
        }
    }
    String strModuleID = record.getField(BookingAnswer.MODULE_ID).toString();
    String strDateModuleStart = record.getField(BookingAnswer.MODULE_START_DATE).toString();
    String strTourOrOption = TourHeaderOption.OPTION;
    String strTourOrOptionID = record.getField(BookingAnswer.TOUR_HEADER_OPTION_ID).toString();
    Converter fieldConverter = null;
    int iDisplayFieldDesc = ScreenConstants.DISPLAY_MODE | ScreenConstants.DONT_DISPLAY_FIELD_DESC;
    if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_SAME_WINDOW)	// Use same window
        this.free();
    new BookingAnswerGridScreen(recBookingPax, strModuleID, strTourOrOption, strTourOrOptionID, strDateModuleStart, null, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, null);
    return true;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5734">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAnswerScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5736">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PricingTypeField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), PricingType.DESCRIPTION, false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5737">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistGridScreen</MethodClassName>
		<LogicSource>return new Vendor(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5738">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaymentHistoryGridScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5739">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailGridScreen</MethodClassName>
		<LogicSource>return new BankTrxBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5740">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxDistGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5742">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5743">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5744">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaxBaseCategoryField</MethodClassName>
		<LogicSource><![CDATA[Record record = super.makeReferenceRecord(recordOwner);
// Only records with a null in this field
record.addListener(new CompareFileFilter(PaxCategory.BASED_PAX_CAT_ID, (String)null, DBConstants.EQUALS, null, false));
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5745">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelPricing</MethodClassName>
		<LogicSource><![CDATA[super;

this.getField(HotelPricing.COST).addListener(new PaxToRoomHandler(HotelPricing.ROOM_COST));
this.getField(HotelPricing.ROOM_COST).addListener(new RoomToPaxHandler(HotelPricing.COST));
this.getField(HotelPricing.PRICE).addListener(new PaxToRoomHandler(HotelPricing.ROOM_PRICE));
this.getField(HotelPricing.ROOM_PRICE).addListener(new RoomToPaxHandler(HotelPricing.PRICE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5748">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getPaxInRoom</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>PaxCategory</MethodClassName>
		<LogicSource><![CDATA[int iRoomType = (int)this.getField(PaxCategory.ROOM_TYPE).getValue();
if ((iRoomType >= PaxCategory.SINGLE_ID)
    && (iRoomType <= PaxCategory.QUAD_ID))
        return iRoomType;
return 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5750">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>computeValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaxToRoomHandler</MethodClassName>
		<LogicSource>return Math.floor(dSrcValue * this.getPaxInRoom() * 100 + 0.5) / 100;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5751">
		<LastChanged>2012-01-31T10:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getPaxInRoom</MethodName>
		<LogicDescription>Get the number of passengers in this hotel pricing category</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>PaxToRoomHandler</MethodClassName>
		<LogicSource><![CDATA[Record recHotelPricing = ((BaseField)this.getOwner()).getRecord();
PaxCategory recPaxCategory = (PaxCategory)((ReferenceField)recHotelPricing.getField(HotelPricing.PAX_CATEGORY_ID)).getReferenceRecord();
if (recPaxCategory != null)
    return recPaxCategory.getPaxInRoom();
return 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5752">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>computeValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RoomToPaxHandler</MethodClassName>
		<LogicSource>return Math.floor(dSrcValue / this.getPaxInRoom() * 100 + 0.5) / 100;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5753">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PaxToRoomHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PaxToRoomHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setDisableTarget(true);	// Eliminate the echo back]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5754">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
new ProductControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5755">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailPriceChangeHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    if ((iChangeType == DBConstants.ADD_TYPE)
        || (iChangeType == DBConstants.UPDATE_TYPE)
        || (iChangeType == DBConstants.DELETE_TYPE))
{
  ((BookingDetail)this.getOwner()).handlePriceChange(iChangeType);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5756">
		<LastChanged>2012-04-12T06:45:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>handlePriceChange</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>int iChangeType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;

Booking recBooking = (Booking)this.getBooking(true);

int iNonTourPricingType = (int)((ReferenceField)recBooking.getField(Booking.NON_TOUR_PRICING_TYPE_ID)).getReference().getField(PricingType.PRICING_CODES).getValue();
if (iNonTourPricingType == PricingType.OPTION_PRICING)  // Can't have option pricing on non-tours!
    iNonTourPricingType = PricingType.COMPONENT_PRICING | PricingType.COMPONENT_COST_PRICING;

if ((!this.getField(BookingDetail.TOUR_HEADER_OPTION_ID).isNull()) || (this.getField(BookingDetail.PRODUCT_TYPE_ID).getValue() == ProductType.TOUR_ID))
{   // Entered using a module or is a module
    BaseField fldModuleID = this.getField(BookingDetail.MODULE_ID);
    Date dateStart = ((DateTimeField)this.getField(BookingDetail.MODULE_START_DATE)).getDateTime();
    if (this.getField(BookingDetail.PRODUCT_TYPE_ID).getValue() == ProductType.TOUR_ID)
    {
        fldModuleID = this.getField(BookingDetail.PRODUCT_ID);
        dateStart = ((DateTimeField)this.getField(BookingDetail.DETAIL_DATE)).getDateTime();
    }
    int iTourPricingType = recBooking.getTourPricingType(null, fldModuleID, dateStart);
    if ((iTourPricingType & PricingType.OPTION_PRICING) != 0)
    {
        if ((this.getField(BookingDetail.TOTAL_COST_LOCAL).isModified())
                || (iChangeType == DBConstants.DELETE_TYPE))   // This means the record has been deleted
        {
                if ((recBooking.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class) == null)
                    || (recBooking.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class).isEnabledListener() == true))  // If this is DISABLED, don't change the status (only on initial setup)
            {
                PricingType recPricingType2 = new PricingType(this.findRecordOwner());
                PricingType recPricingType3 = recPricingType2.getPricingType(PricingType.COMPONENT_COST_PRICING);
                if (recPricingType3 != null)
                    recBooking.getField(Booking.TOUR_PRICING_TYPE_ID).moveFieldToThis(recPricingType3.getField(PricingType.ID));
                recPricingType2.free();
            }
        }
        return iErrorCode;  // Pricing already entered from the tour header option
    }
    else
        iNonTourPricingType = iTourPricingType;
}
if ((iNonTourPricingType & PricingType.COMPONENT_PRICING) != 0)
{
    String strProductKey = this.getPricingDetailKey();
    if (!strProductKey.equals(this.getField(BookingDetail.PRICING_DETAIL_KEY).toString()))
    {
        ProductModel recProduct = this.getProduct();

        iErrorCode = this.updateBookingComponentPricing((Product)recProduct, iChangeType);

        if (iErrorCode == DBConstants.NORMAL_RETURN)
            return iErrorCode;  // Otherwise, continue and price using the cost.
        iErrorCode = DBConstants.NORMAL_RETURN;
        strProductKey = this.getField(BookingDetail.PRICING_DETAIL_KEY).toString();
    }
}
if ((iNonTourPricingType & PricingType.COMPONENT_COST_PRICING) != 0)
{
    if ((this.getField(BookingDetail.TOTAL_COST_LOCAL).isModified())
        || (iChangeType == DBConstants.DELETE_TYPE))   // This means the record has been deleted
    {
        return this.updateBookingComponentCostPricing(recBooking, iChangeType);
    }
}
if (iErrorCode != DBConstants.NORMAL_RETURN)
{
    BookingLine recBookingLine = this.getBookingLine();
    int iPricingType = PricingType.COMPONENT_PRICING;
    int iPaxCategory = PaxCategory.ALL_ID;
    int iQuantity = this.getNoPax();
    double dAmount = 0;
    double dCommissionRate = this.getBooking(true).getField(Booking.STD_COMMISSION).getValue();
    boolean bCommissionable = dCommissionRate != 0;
    String strPayAt = PayAtField.FINAL_PAY_DATE;
    int iPricingStatus = PricingStatus.NOT_VALID;
    iErrorCode = this.updateBookingLine(recBookingLine, iPricingType, iPaxCategory, iQuantity, dAmount, bCommissionable, dCommissionRate, strPayAt, iPricingStatus, iChangeType);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5758">
		<LastChanged>2012-04-06T00:44:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,500</Sequence>
		<MethodName>updateBookingLine</MethodName>
		<LogicDescription><![CDATA[Add the booking line item for this booking detail.
@param recBookingLine The line file
@param iPricingType Cost or Pricing.
@param iPaxCategory The passenger room type (category)
@param iQuantity The number to add
@param dAmount The unit amount
@param bCommissionable Is this line item fully commissionable?
@param dCommission The commission rate if not fully commissionable.
@param iChangeType The detail change type
@return NORMAL_RETURN if a pricing item was added
@return ERROR_RETURN If no pricing was added, or a item was deleted making this line item total zero.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BookingLineModel bookingLine, int iPricingType, int iPaxCategory,  int iQuantity, double dAmount, boolean bCommissionable, double dCommissionRate, String strPayAt, int iPricingStatusID, int iChangeType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
if ((iPaxCategory == PaxCategory.SINGLE_ID) || (iPaxCategory == 0))
{   // First time through
    this.getField(BookingDetail.TOTAL_PRICE_LOCAL).setValue(0.00);
    this.getField(BookingDetail.PP_PRICE_LOCAL).setValue(0.00);
}

Booking recBooking = (Booking)this.getBooking(true);        
BookingLine recBookingLine = (BookingLine)bookingLine;
try {
    recBookingLine.addNew();
    if (iChangeType != DBConstants.ADD_TYPE)
    {
        recBookingLine.getField(BookingLine.BOOKING_ID).moveFieldToThis(recBooking.getField(Booking.ID));
        recBookingLine.getField(BookingLine.BOOKING_PAX_ID).moveFieldToThis(this.getField(BookingDetail.BOOKING_PAX_ID));   // For now
        recBookingLine.getField(BookingLine.BOOKING_DETAIL_ID).moveFieldToThis(this.getField(BookingDetail.ID));
        recBookingLine.getField(BookingLine.PAX_CATEGORY_ID).setValue(iPaxCategory);
        recBookingLine.setKeyArea(BookingLine.BOOKING_DETAIL_ID_KEY);
        if ((recBookingLine.seek(">="))
            && (recBookingLine.getField(BookingLine.BOOKING_ID).equals(recBooking.getField(Booking.ID)))
                && (recBookingLine.getField(BookingLine.BOOKING_PAX_ID).equals(this.getField(BookingDetail.BOOKING_PAX_ID)))
                && (recBookingLine.getField(BookingLine.BOOKING_DETAIL_ID).equals(this.getField(BookingDetail.ID)))
                && (recBookingLine.getField(BookingLine.PAX_CATEGORY_ID).getValue() == iPaxCategory))
            recBookingLine.edit();
        else
            recBookingLine.addNew();
    }

    double dPPCost = 0;
    double dPPPrice = 0;
    double dMarkup = recBooking.getField(Booking.MARKUP).getValue();
    if (bCommissionable)
        dCommissionRate = recBooking.getField(Booking.STD_COMMISSION).getValue();
    if ((iPricingType & PricingType.COMPONENT_PRICING) != 0)
    {
        dPPPrice = dAmount; // Price is passed in
    }
    else if ((iPricingType & PricingType.COMPONENT_COST_PRICING) != 0)
    {
        dPPCost = dAmount;
        dPPPrice = (Math.floor(dPPCost * (1.0 + dMarkup) * 100 + 0.5)) / 100;     // Net to the agent.
        dPPPrice = (Math.floor(dPPPrice / (1 - dCommissionRate) * 100)) / 100;    // This amount minus the commission will give the price.
    }

    recBookingLine.getField(BookingLine.BOOKING_ID).moveFieldToThis(recBooking.getField(Booking.ID));

    recBookingLine.getField(BookingLine.MODULE_ID).moveFieldToThis(this.getField(BookingDetail.MODULE_ID));
    recBookingLine.getField(BookingLine.MODULE_START_DATE).moveFieldToThis(this.getField(BookingDetail.MODULE_START_DATE));
    if (this.getField(BookingDetail.PRODUCT_TYPE_ID).getValue() == ProductType.TOUR_ID)
    {
        recBookingLine.getField(BookingLine.MODULE_ID).moveFieldToThis(this.getField(BookingDetail.PRODUCT_ID));
        recBookingLine.getField(BookingLine.MODULE_START_DATE).moveFieldToThis(this.getField(BookingDetail.DETAIL_DATE));
    }

    // Note: BookingLine.SEQUENCE is assigned automatically.
    String strDescription = this.getField(BookingDetail.DESCRIPTION).toString();
    if (iPaxCategory != PaxCategory.ALL_ID)
    {
        RoomTypeField fldTemp = new RoomTypeField(null, DBConstants.BLANK, DBConstants.DEFAULT_FIELD_LENGTH, null, null);
        String strRoomType = fldTemp.convertIndexToString(iPaxCategory);
        fldTemp.free();
        strDescription = strDescription + " (" + strRoomType + ')';
    }
    recBookingLine.getField(BookingLine.DESCRIPTION).setString(strDescription);
    recBookingLine.getField(BookingLine.PRICE).setValue(dPPPrice);

    recBookingLine.getField(BookingLine.QUANTITY).setValue(iQuantity);

    recBookingLine.getField(BookingLine.COMMISSIONABLE).setState(bCommissionable);
    recBookingLine.getField(BookingLine.COMMISSION_RATE).setValue(dCommissionRate);
    recBookingLine.getField(BookingLine.PRICING_STATUS_ID).setValue(iPricingStatusID);
    if ((strPayAt == null) || (strPayAt.length() == 0))
        strPayAt = PayAtField.FINAL_PAY_DATE;
    recBookingLine.getField(BookingLine.PAY_AT).setString(strPayAt);
    recBookingLine.getField(BookingLine.BOOKING_PAX_ID).moveFieldToThis(this.getField(BookingDetail.BOOKING_PAX_ID));   // For now
    
    Object bookingDetailID = this.getField(BookingDetail.ID).getData();
    if (iChangeType == DBConstants.ADD_TYPE)
        if (bookingDetailID == null)    // Always for add
        {
            if (this.getEditMode() == DBConstants.EDIT_ADD)
                this.writeAndRefresh();     // Need record ID
            bookingDetailID = this.getField(BookingDetail.ID).getData();
        }
    recBookingLine.getField(BookingLine.BOOKING_DETAIL_ID).setData(bookingDetailID);
    recBookingLine.getField(BookingLine.PAX_CATEGORY_ID).setValue(iPaxCategory);
    if ((iChangeType == DBConstants.DELETE_TYPE)
        || ((iPricingStatusID != PricingStatus.NOT_VALID) && ((recBookingLine.getField(BookingLine.PRICE).getValue() == 0)
                || (recBookingLine.getField(BookingLine.QUANTITY).getValue() == 0))))
    {
        if (recBookingLine.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
            recBookingLine.remove();
        iErrorCode = DBConstants.ERROR_RETURN;  // This just means that there are no line items.
    }
    else
    {
        if (recBookingLine.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
            recBookingLine.set();
        else
            recBookingLine.add();
    }
    if (iErrorCode == DBConstants.NORMAL_RETURN)
    {
        this.getField(BookingDetail.TOTAL_PRICE_LOCAL).setValue(this.getField(BookingDetail.TOTAL_PRICE_LOCAL).getValue() + recBookingLine.getField(BookingLine.GROSS).getValue());
        this.getField(BookingDetail.PP_PRICE_LOCAL).setValue(this.getField(BookingDetail.PP_PRICE_LOCAL).getValue() + recBookingLine.getField(BookingLine.PRICE).getValue());
    }
} catch (DBException ex) {
    ex.printStackTrace();
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="5759">
		<LastChanged>2012-04-02T10:33:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>updateBookingPricing</MethodName>
		<LogicDescription><![CDATA[Using this booking detail, create or change the pricing
using the price amount in the ProductPricing record.
@param recBookingLine The line file
@param recBookingDetail The detail for this type of product
@return NORMAL_RETURN if price exists and was added
@return ERROR_RETURN if no pricing (or a zero price) was added]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BookingLineModel recBookingLine, BookingDetailModel recBookingDetail, int iChangeType</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource>return DBConstants.ERROR_RETURN;    // No update done.</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5760">
		<LastChanged>2012-01-25T17:18:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getProductPricing</MethodName>
		<LogicDescription/>
		<MethodReturns>ProductPricing</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[if (m_recProductPricing == null)
{
    m_recProductPricing = this.createProductPricing(this.findRecordOwner());
    if (m_recProductPricing != null)
        if (m_recProductPricing.getRecordOwner() != null)
    {
        m_recProductPricing.getRecordOwner().removeRecord(m_recProductPricing);
        this.addListener(new FreeOnFreeHandler(m_recProductPricing));
    }
}
return m_recProductPricing;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5761">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,600</Sequence>
		<MethodName>createProductPricing</MethodName>
		<LogicDescription/>
		<MethodReturns>ProductPricing</MethodReturns>
		<MethodInterface>RecordOwner recordOwner</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5762">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>8,400</Sequence>
		<MethodName>createProductPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Land</MethodClassName>
		<LogicSource>return new LandPricing(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5763">
		<LastChanged>2012-04-07T08:41:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>9,000</Sequence>
		<MethodName>updateBookingPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Land</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.ERROR_RETURN;

Date dateTarget = ((DateTimeField)recBookingDetail.getField(BookingDetailModel.DETAIL_DATE)).getDateTime();
short sTargetPax = recBookingDetail.getNoPax();
int iPMC = (int)recBookingDetail.getField(BookingDetailModel.CLASS_ID).getValue();

String strPrefix = LAND_COST_PROPERTIES;
TrxMessageHeader messageHeader = new TrxMessageHeader(null, null);
BaseMessage message = new TreeMessage(messageHeader, null);
LandRateRequest landRateRequest = new LandRateRequest(message, null);
landRateRequest.handleGetRawRecordData(recBookingDetail);
recBookingDetail.addMessageProperties(strPrefix, false, messageHeader, message, null);

FileListener listener = ((LandPricing)this.getProductPricing()).setupLandFilter(this, dateTarget, sTargetPax, iPMC);
this.getProductPricing().addListener(listener);

Map<String,Object> mapSurvey = messageHeader.getProperties();
LandMessageData productMessageData = (LandMessageData)landRateRequest.getMessageDataDesc(LandRateRequest.PRODUCT_MESSAGE);

try   {
    this.getProductPricing().close();
    while (this.getProductPricing().hasNext())
    {   // Loop until found or not
        this.getProductPricing().next();
        int iQuantity = ((LandPricing)this.getProductPricing()).getQuantity(this.getTask(), sTargetPax, productMessageData, mapSurvey);
        if (iQuantity != 0)
        {
            int iPricingType = PricingType.COMPONENT_PRICING;
            int iPaxCategory = (int)this.getProductPricing().getField(ProductPricing.PAX_CATEGORY_ID).getValue();
            double dAmount = this.getProductPricing().getField(ProductPricing.PRICE).getValue();
            boolean bCommissionable = this.getProductPricing().getField(ProductPricing.COMMISSIONABLE).getState();
            double dCommissionRate = this.getProductPricing().getField(ProductPricing.COMMISSION_RATE).getValue();
            String strPayAt = this.getProductPricing().getField(ProductPricing.PAY_AT).toString();
            iErrorCode = recBookingDetail.updateBookingLine(recBookingLine, iPricingType, iPaxCategory, iQuantity, dAmount, bCommissionable, dCommissionRate, strPayAt, PricingStatus.OKAY, iChangeType);
        }
    }
} catch (DBException ex) {
    ex.printStackTrace();
}

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5764">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>8,400</Sequence>
		<MethodName>createProductPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource>return new HotelPricing(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5765">
		<LastChanged>2012-04-06T00:42:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,100</Sequence>
		<MethodName>getBookingLine</MethodName>
		<LogicDescription>Get/create and setup the BookingLine record</LogicDescription>
		<MethodReturns>BookingLine</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[if (m_recBookingLine == null)
{
    Booking recBooking = (Booking)this.getBooking(true);
    Tour recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
    m_recBookingLine = new BookingLine(this.findRecordOwner());
    m_recBookingLine.addDetailBehaviors(recBooking, recTour);
    if (m_recBookingLine.getRecordOwner() != null)
        m_recBookingLine.getRecordOwner().removeRecord(m_recBookingLine);    // Set it is not on the recordowner's list
    this.addListener(new FreeOnFreeHandler(m_recBookingLine));
}
return m_recBookingLine;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5766">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>8,400</Sequence>
		<MethodName>createProductPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Air</MethodClassName>
		<LogicSource>return new AirPricing(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5767">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>8,400</Sequence>
		<MethodName>createProductPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Car</MethodClassName>
		<LogicSource>return new CarPricing(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5768">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>8,400</Sequence>
		<MethodName>createProductPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Transportation</MethodClassName>
		<LogicSource>return new TransportationPricing(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5769">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>8,400</Sequence>
		<MethodName>createProductPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Cruise</MethodClassName>
		<LogicSource>return new CruisePricing(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5770">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>8,400</Sequence>
		<MethodName>createProductPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Item</MethodClassName>
		<LogicSource>return new ItemPricing(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5771">
		<LastChanged>2012-01-25T17:18:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>getProductTerms</MethodName>
		<LogicDescription/>
		<MethodReturns>ProductTerms</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[if (m_recProductTerms == null)
{
    m_recProductTerms = new ProductTerms(this.findRecordOwner());
    if (m_recProductTerms.getRecordOwner() != null)
        m_recProductTerms.getRecordOwner().removeRecord(m_recProductTerms);
    this.addListener(new FreeOnFreeHandler(m_recProductTerms));
}
return m_recProductTerms;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5772">
		<LastChanged>2012-04-07T12:34:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>8,000</Sequence>
		<MethodName>updateBookingPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.ERROR_RETURN;  // Error just means that there were no line items added
BookingModel recBooking = recBookingDetail.getBooking(true);

int iHotelID = (int)this.getField(Product.ID).getValue();
Date dateTarget = ((DateTimeField)recBookingDetail.getField(BookingDetailModel.DETAIL_DATE)).getDateTime();
int iRateID = (int)recBookingDetail.getField(BookingDetailModel.RATE_ID).getValue();
int iClassID = (int)recBookingDetail.getField(BookingDetailModel.CLASS_ID).getValue();

for (int iPaxCategory = PaxCategory.SINGLE_ID; iPaxCategory <= PaxCategory.CHILD_ID; iPaxCategory++)
{
    short sTargetPax = (short)recBooking.getField(((Record)recBooking).getFieldSeq(BookingModel.SINGLE_PAX) + iPaxCategory - PaxCategory.SINGLE_ID).getValue();
    if (sTargetPax == 0)
        continue;
    HotelPricing recProductPricing = null;
    double dAmount = 0;
    short sNights = (short)recBookingDetail.getField(BookingHotelModel.NIGHTS).getValue();
    while (sNights > 0)
    {
        recProductPricing = ((HotelPricing)this.getProductPricing()).getHotelCost(iHotelID, dateTarget, iRateID, iClassID, iPaxCategory);
        if (recProductPricing != null)
            dAmount = dAmount + recProductPricing.getField(ProductPricing.PRICE).getValue();
        dateTarget = new Date(dateTarget.getTime() + DBConstants.KMS_IN_A_DAY);
        sNights--;
    }
    if (recProductPricing != null)
        if (dAmount != 0)
    {
        int iPricingType = PricingType.COMPONENT_PRICING;
        int iQuantity = sTargetPax;
        boolean bCommissionable = recProductPricing.getField(ProductPricing.COMMISSIONABLE).getState();
        double dCommissionRate = recProductPricing.getField(ProductPricing.COMMISSION_RATE).getValue();
        String strPayAt = recProductPricing.getField(ProductPricing.PAY_AT).toString();
        int iErrorCode2 = recBookingDetail.updateBookingLine(recBookingLine, iPricingType, iPaxCategory, iQuantity, dAmount, bCommissionable, dCommissionRate, strPayAt, PricingStatus.OKAY, iChangeType);
        if (iErrorCode2 == DBConstants.NORMAL_RETURN)
            iErrorCode = DBConstants.NORMAL_RETURN;   // Some Valid pricing was added
    }
}
return iErrorCode;   // For now]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5773">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,050</Sequence>
		<MethodName>getPricingDetailKey</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[String strReturn = DBConstants.BLANK;

strReturn = this.addKeyField(strReturn, BookingDetail.PRODUCT_ID);
strReturn = this.addKeyField(strReturn, BookingDetail.DETAIL_DATE);
strReturn = this.addKeyField(strReturn, BookingDetail.CLASS_ID);
strReturn = this.addKeyField(strReturn, BookingDetail.RATE_ID);

return strReturn;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5774">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,020</Sequence>
		<MethodName>updateBookingComponentPricing</MethodName>
		<LogicDescription><![CDATA[Update the booking pricing (given this detail change)
@param recProduct The product
@param iChangeType The change type]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Product recProduct, int iChangeType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
    
if (iChangeType == DBConstants.ADD_TYPE)
    if (this.getEditMode() == DBConstants.EDIT_ADD)    // Always
{
    try {
        this.writeAndRefresh();
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}

iErrorCode = recProduct.updateBookingPricing(this.getBookingLine(), this, iChangeType);

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5775">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,030</Sequence>
		<MethodName>updateBookingComponentCostPricing</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Booking recBooking, int iChangeType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;

double dPPCost = this.getField(BookingDetail.TOTAL_COST_LOCAL).getValue();
int iQuantity = this.getPaxInRoom(PaxCategory.ALL_ID);
if (iQuantity != 0)
    dPPCost = dPPCost / iQuantity;
iErrorCode = this.updateBookingLine(this.getBookingLine(), PricingType.COMPONENT_COST_PRICING, PaxCategory.ALL_ID, iQuantity, dPPCost, true, recBooking.getField(Booking.COMMISSION).getValue(), null, PricingStatus.OKAY, iChangeType);

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5776">
		<LastChanged>2012-02-01T05:02:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,070</Sequence>
		<MethodName>addKeyField</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strReturn, String iFieldSeq</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[char chSeparator = '/'; // Character.forDigit(iCount, Character.MAX_RADIX);

if (!this.getField(iFieldSeq).isNull())
{
    if (strReturn.length() > 0)
        strReturn += chSeparator;
    strReturn += this.getField(iFieldSeq).toString();
}
return strReturn;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5778">
		<LastChanged>2012-02-01T10:18:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,030</Sequence>
		<MethodName>updateBookingComponentCostPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotel</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;

double dTotalCost = this.getField(BookingDetail.TOTAL_COST_LOCAL).getValue();
double dRatioDenominator = 0.00;
for (int iPaxCategory = PaxCategory.SINGLE_ID; iPaxCategory <= PaxCategory.CHILD_ID; iPaxCategory++)
{
    int iBookingDetailField = this.getFieldSeq(BookingHotel.SINGLE_COST) + iPaxCategory - PaxCategory.SINGLE_ID;
    int iBookingField = recBooking.getFieldSeq(Booking.SINGLE_PAX) + iPaxCategory - PaxCategory.SINGLE_ID;
    double dPPCost = this.getField(iBookingDetailField).getValue();
    int iPaxInRoom = (int)recBooking.getField(iBookingField).getValue();
    dRatioDenominator = dRatioDenominator + (dPPCost * iPaxInRoom);
}
if (dRatioDenominator != 0)
{
    for (int iPaxCategory = PaxCategory.SINGLE_ID; iPaxCategory <= PaxCategory.CHILD_ID; iPaxCategory++)
    {
        int iBookingDetailField = this.getFieldSeq(BookingHotel.SINGLE_COST) + iPaxCategory - PaxCategory.SINGLE_ID;
        int iBookingField = recBooking.getFieldSeq(Booking.SINGLE_PAX) + iPaxCategory - PaxCategory.SINGLE_ID;
        double dPPCost = this.getField(iBookingDetailField).getValue();
        int iPaxInRoom = (int)recBooking.getField(iBookingField).getValue();
        double dRatioNumerator = dPPCost;
            dPPCost = dTotalCost * (dRatioNumerator / dRatioDenominator);
        iErrorCode = this.updateBookingLine(this.getBookingLine(), PricingType.COMPONENT_COST_PRICING, iPaxCategory, iPaxInRoom, dPPCost, true, recBooking.getField(Booking.COMMISSION).getValue(), null, PricingStatus.OKAY, iChangeType);
    }
    iErrorCode = DBConstants.NORMAL_RETURN;
}
else
{
    iErrorCode = this.updateBookingLine(this.getBookingLine(), PricingType.COMPONENT_COST_PRICING, 0, recBooking.getCountPax(), dTotalCost / recBooking.getCountPax(), true, recBooking.getField(Booking.COMMISSION).getValue(), null, PricingStatus.OKAY, iChangeType);
    iErrorCode = DBConstants.NORMAL_RETURN; // Error return from updateBookingLine just means there was no update
}

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5779">
		<LastChanged>2012-04-07T08:50:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,030</Sequence>
		<MethodName>updateBookingPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Air</MethodClassName>
		<LogicSource><![CDATA[Date dateTarget = ((DateTimeField)recBookingDetail.getField(BookingDetailModel.DETAIL_DATE)).getDateTime();
short sTargetPax = recBookingDetail.getNoPax();
int iRateID = (int)recBookingDetail.getField(BookingDetailModel.RATE_ID).getValue();
int iClassID = (int)recBookingDetail.getField(BookingDetailModel.CLASS_ID).getValue();
AirPricing recProductPricing = ((AirPricing)this.getProductPricing()).getAirCost(this, dateTarget, iRateID, iClassID);
if (recProductPricing != null)
{
    int iPricingType = PricingType.COMPONENT_PRICING;
    int iPaxCategory = PaxCategory.ALL_ID;
    int iQuantity = sTargetPax;
    double dAmount = recProductPricing.getField(ProductPricing.PRICE).getValue();
    boolean bCommissionable = recProductPricing.getField(ProductPricing.COMMISSIONABLE).getState();
    double dCommissionRate = recProductPricing.getField(ProductPricing.COMMISSION_RATE).getValue();
    String strPayAt = recProductPricing.getField(ProductPricing.PAY_AT).toString();
    return recBookingDetail.updateBookingLine(recBookingLine, iPricingType, iPaxCategory, iQuantity, dAmount, bCommissionable, dCommissionRate, strPayAt, PricingStatus.OKAY, iChangeType);
}
return DBConstants.ERROR_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5780">
		<LastChanged>2012-04-07T09:39:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,030</Sequence>
		<MethodName>updateBookingPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Car</MethodClassName>
		<LogicSource><![CDATA[Date dateTarget = ((DateTimeField)recBookingDetail.getField(BookingDetailModel.DETAIL_DATE)).getDateTime();
int iRateID = (int)recBookingDetail.getField(BookingDetailModel.RATE_ID).getValue();
int iClassID = (int)recBookingDetail.getField(BookingDetailModel.CLASS_ID).getValue();
CarPricing recProductPricing = ((CarPricing)this.getProductPricing()).getCarCost(this, dateTarget, iRateID, iClassID);
if (recProductPricing != null)
{
    int iPricingType = PricingType.COMPONENT_PRICING;
    int iPaxCategory = PaxCategory.ALL_ID;
    int iQuantity = (int)recBookingDetail.getField(BookingCarModel.QUANTITY).getValue();
    double dAmount = recProductPricing.getField(ProductPricing.PRICE).getValue();
    boolean bCommissionable = recProductPricing.getField(ProductPricing.COMMISSIONABLE).getState();
    double dCommissionRate = recProductPricing.getField(ProductPricing.COMMISSION_RATE).getValue();
    String strPayAt = recProductPricing.getField(ProductPricing.PAY_AT).toString();
    return recBookingDetail.updateBookingLine(recBookingLine, iPricingType, iPaxCategory, iQuantity, dAmount, bCommissionable, dCommissionRate, strPayAt, PricingStatus.OKAY, iChangeType);
}
return DBConstants.ERROR_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5781">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>updateBookingComponentCostPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCar</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;

double dCost = this.getField(BookingDetail.TOTAL_COST_LOCAL).getValue();
int iQuantity = (int)this.getField(BookingCar.QUANTITY).getValue();
iErrorCode = this.updateBookingLine(this.getBookingLine(), PricingType.COMPONENT_COST_PRICING, PaxCategory.ALL_ID, iQuantity, dCost, true, recBooking.getField(Booking.COMMISSION).getValue(), null, PricingStatus.OKAY, iChangeType);

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5782">
		<LastChanged>2012-04-07T08:50:01</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,030</Sequence>
		<MethodName>updateBookingPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Transportation</MethodClassName>
		<LogicSource><![CDATA[Date dateTarget = ((DateTimeField)recBookingDetail.getField(BookingDetailModel.DETAIL_DATE)).getDateTime();
short sTargetPax = recBookingDetail.getNoPax();
int iClassID = (int)recBookingDetail.getField(BookingDetailModel.CLASS_ID).getValue();
int iRateID = (int)recBookingDetail.getField(BookingDetailModel.RATE_ID).getValue();
TransportationPricing recProductPricing = ((TransportationPricing)this.getProductPricing()).getTransportationCost(this, dateTarget, sTargetPax, iClassID);
if (recProductPricing != null)
{
    int iPricingType = PricingType.COMPONENT_PRICING;
    int iPaxCategory = PaxCategory.ALL_ID;
    int iQuantity = sTargetPax;
    double dAmount = recProductPricing.getField(ProductPricing.PRICE).getValue();
    boolean bCommissionable = recProductPricing.getField(ProductPricing.COMMISSIONABLE).getState();
    double dCommissionRate = recProductPricing.getField(ProductPricing.COMMISSION_RATE).getValue();
    String strPayAt = recProductPricing.getField(ProductPricing.PAY_AT).toString();
    return recBookingDetail.updateBookingLine(recBookingLine, iPricingType, iPaxCategory, iQuantity, dAmount, bCommissionable, dCommissionRate, strPayAt, PricingStatus.OKAY, iChangeType);
}
return DBConstants.ERROR_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5783">
		<LastChanged>2012-04-07T08:50:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,030</Sequence>
		<MethodName>updateBookingPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Cruise</MethodClassName>
		<LogicSource><![CDATA[Date dateTarget = ((DateTimeField)recBookingDetail.getField(BookingDetailModel.DETAIL_DATE)).getDateTime();
short sTargetPax = recBookingDetail.getNoPax();
int iClassID = (int)recBookingDetail.getField(BookingDetailModel.CLASS_ID).getValue();
int iRateID = (int)recBookingDetail.getField(BookingDetailModel.RATE_ID).getValue();
CruisePricing recProductPricing = ((CruisePricing)this.getProductPricing()).getCruiseCost(this, dateTarget, iRateID, iClassID);
if (recProductPricing != null)
{
    int iPricingType = PricingType.COMPONENT_PRICING;
    int iPaxCategory = PaxCategory.ALL_ID;
    int iQuantity = sTargetPax;
    double dAmount = recProductPricing.getField(ProductPricing.PRICE).getValue();
    boolean bCommissionable = recProductPricing.getField(ProductPricing.COMMISSIONABLE).getState();
    double dCommissionRate = recProductPricing.getField(ProductPricing.COMMISSION_RATE).getValue();
    String strPayAt = recProductPricing.getField(ProductPricing.PAY_AT).toString();
    return recBookingDetail.updateBookingLine(recBookingLine, iPricingType, iPaxCategory, iQuantity, dAmount, bCommissionable, dCommissionRate, strPayAt, PricingStatus.OKAY, iChangeType);
}
return DBConstants.ERROR_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5784">
		<LastChanged>2012-04-07T08:40:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,030</Sequence>
		<MethodName>updateBookingPricing</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Item</MethodClassName>
		<LogicSource><![CDATA[Date dateTarget = ((DateTimeField)recBookingDetail.getField(BookingDetailModel.DETAIL_DATE)).getDateTime();
short sTargetPax = recBookingDetail.getNoPax();
int iClassID = (int)recBookingDetail.getField(BookingDetailModel.CLASS_ID).getValue();
int iRateID = (int)recBookingDetail.getField(BookingDetailModel.RATE_ID).getValue();
ItemPricing recProductPricing = ((ItemPricing)this.getProductPricing()).getItemCost(this, dateTarget, iRateID, iClassID);
if (recProductPricing != null)
{
    int iPricingType = PricingType.COMPONENT_PRICING;
    int iPaxCategory = PaxCategory.ALL_ID;
    int iQuantity = sTargetPax;
    double dAmount = recProductPricing.getField(ProductPricing.PRICE).getValue();
    boolean bCommissionable = recProductPricing.getField(ProductPricing.COMMISSIONABLE).getState();
    double dCommissionRate = recProductPricing.getField(ProductPricing.COMMISSION_RATE).getValue();
    String strPayAt = recProductPricing.getField(ProductPricing.PAY_AT).toString();
    return recBookingDetail.updateBookingLine(recBookingLine, iPricingType, iPaxCategory, iQuantity, dAmount, bCommissionable, dCommissionRate, strPayAt, PricingStatus.OKAY, iChangeType);
}
return DBConstants.ERROR_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5785">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMenuScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
String strDesc = application.getResources(ResourceConstants.MENU_RESOURCE, true).getString(MenuConstants.GRID);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strDesc, MenuConstants.GRID, MenuConstants.GRID, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5786">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
new City(this);	// Thin display screen uses this for depart and arrive city.]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5787">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelSession</MethodClassName>
		<LogicSource>return new BookingHotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5788">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5789">
		<LastChanged>2012-04-11T15:01:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailBaseSession</MethodClassName>
		<LogicSource><![CDATA[super;
Record recBooking = this.getRecord(Booking.BOOKING_FILE);
this.getMainRecord().addListener(new SubFileFilter(recBooking));

BookingDetail recBookingDetail = (BookingDetail)this.getMainRecord();
Record recProduct = (Record)recBookingDetail.getProduct();
recBookingDetail.getField(BookingDetail.PRODUCT_ID).addListener(new ReadSecondaryHandler(recProduct));

Record recVendor = ((ReferenceField)recProduct.getField(Product.VENDOR_ID)).getReferenceRecord(this);
recProduct.getField(Product.VENDOR_ID).addListener(new ReadSecondaryHandler(recVendor));

Record recCurrencys = ((ReferenceField)recVendor.getField(Vendor.CURRENCYS_ID)).getReferenceRecord(this);
recVendor.getField(Vendor.CURRENCYS_ID).addListener(new ReadSecondaryHandler(recCurrencys));

// This code read the currency CODE into a virtual field for use in displays 
MoveOnChangeHandler moveListener = new MoveOnChangeHandler(recBookingDetail.getField(BookingDetail.CURRENCY_CODE), recCurrencys.getField(Currencys.CURRENCY_CODE));
moveListener.setRespondsToMode(DBConstants.INIT_MOVE, true);
moveListener.setRespondsToMode(DBConstants.READ_MOVE, true);
recBookingDetail.getField(BookingDetail.PRODUCT_ID).addListener(moveListener);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5790">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelSession</MethodClassName>
		<LogicSource><![CDATA[super;
new HotelClass(this);
new MealPlan(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5791">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemSession</MethodClassName>
		<LogicSource>return new BookingItem(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5792">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItemSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5793">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourSession</MethodClassName>
		<LogicSource>return new BookingTour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5794">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5795">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandSession</MethodClassName>
		<LogicSource>return new BookingLand(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5796">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLandSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5797">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportationSession</MethodClassName>
		<LogicSource>return new BookingTransportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5798">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportationSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5799">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseSession</MethodClassName>
		<LogicSource>return new BookingCruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5800">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruiseSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5801">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarSession</MethodClassName>
		<LogicSource>return new BookingCar(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5802">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCarSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5803">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirSession</MethodClassName>
		<LogicSource>return new BookingAir(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5804">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5829">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>initField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PricingTypeField</MethodClassName>
		<LogicSource>return this.setValue(PricingType.COMPONENT_COST_PRICING, bDisplayOption, DBConstants.INIT_MOVE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5831">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PricingTypeSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), PricingType.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5832">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PricingTypeField</MethodClassName>
		<LogicSource>return new PricingType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5833">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>getBitDayOfWeek</MethodName>
		<LogicDescription><![CDATA[Get the bit for this day of the week.
Bit 0 = Sunday, Bit 6 = Saturday]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Calendar calendar</MethodInterface>
		<MethodClassName>DaysOfWeekField</MethodClassName>
		<LogicSource><![CDATA[int iDayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
switch (iDayOfWeek)
{
    case Calendar.SUNDAY:
        return 0;
    case Calendar.MONDAY:
        return 1;
    case Calendar.TUESDAY:
        return 2;
    case Calendar.WEDNESDAY:
        return 3;
    case Calendar.THURSDAY:
        return 4;
    case Calendar.FRIDAY:
        return 5;
    case Calendar.SATURDAY:
        return 6;
}
return iDayOfWeek;  // Never]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5834">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>140</Sequence>
		<MethodName>isValidDate</MethodName>
		<LogicDescription>For the value in this field, is this date valid?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Date date</MethodInterface>
		<MethodClassName>DaysOfWeekField</MethodClassName>
		<LogicSource><![CDATA[Converter.initGlobals();
Calendar calendar = Converter.gCalendar;
calendar.setTime(date);
int iBit = this.getBitDayOfWeek(calendar);
if (this.isNull())
    return true;    // All days valid
int fieldValue = (int)this.getValue();
if ((fieldValue & (1 << iBit)) == 0)
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5839">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>isSoftDeleteThisRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSoftDeleteHandler</MethodClassName>
		<LogicSource><![CDATA[return true;	// Fix this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5840">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>softDeleteThisRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingSoftDeleteHandler</MethodClassName>
		<LogicSource><![CDATA[return DBConstants.NORMAL_RETURN;	// Fix this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5841">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>isSoftDeleteThisRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailSoftDeleteHandler</MethodClassName>
		<LogicSource><![CDATA[if (this.getOwner().getField(BookingDetail.AP_TRX_ID).isNull())
    return false;   // If there is no active voucher, it is okay to delete this record.
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5843">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcDepositHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.READ_MOVE, false);   // Usually, you only want to recompute on screen change
this.setRespondsToMode(DBConstants.INIT_MOVE, false);   // Usually, you only want to recompute on screen change]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5844">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcDepositHandler</MethodClassName>
		<LogicSource><![CDATA[Record recBooking = this.getOwner().getRecord();
int iPax = (int)recBooking.getField(Booking.PAX).getValue();
double dDepositAmount = 0;
if (!recBooking.getField(Booking.TOUR_ID).isNull())
{
    Record recTour = ((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
    if (recTour != null)
    {
        Record recTourHeader = ((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReference();
        if (recTourHeader != null)
        {
            TourClass recTourClass = (TourClass)((ReferenceField)recTourHeader.getField(TourHeader.TOUR_CLASS_ID)).getReference();
            if (recTourClass != null)
            {
                recTourClass.fixBasedFields();
                dDepositAmount = recTourClass.getField(TourClass.DEPOSIT_AMOUNT).getValue();
            }
        }
    }
}

double dDeposit = dDepositAmount * iPax;
recBooking.getField(Booking.DEPOSIT).setValue(dDeposit);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5845">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxGroupScreen</MethodClassName>
		<LogicSource>return new TrxDescHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5846">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusScreen</MethodClassName>
		<LogicSource>return new TrxDescHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5847">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeScreen</MethodClassName>
		<LogicSource>return new TrxGroupHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5848">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxTypeScreen</MethodClassName>
		<LogicSource>return new TrxGroup(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5849">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>11</Sequence>
		<MethodName>CalcAcctBalHandler*2</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField fldTarget, BaseField fldStartDate, BaseField fldEndDate, boolean bInclusive, BaseField fldGrandTotal</MethodInterface>
		<MethodClassName>CalcAcctBalHandler</MethodClassName>
		<LogicSource><![CDATA[m_fldTarget = fldTarget;
m_fldStartDate = fldStartDate;
m_fldEndDate = fldEndDate;
m_bInclusive = bInclusive;
m_fldGrandTotal = fldGrandTotal;
m_recAcctDetail = null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5850">
		<LastChanged>2012-01-31T14:43:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProfitCenterFilter</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>String fsAccountNoField, BaseField fldFilter</MethodInterface>
		<MethodClassName>ProfitCenterFilter</MethodClassName>
		<LogicSource><![CDATA[super;
m_fsAccountNoField = fsAccountNoField;
m_fldFilter = fldFilter;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5851">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doLocalCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfitCenterFilter</MethodClassName>
		<LogicSource><![CDATA[int iAccountNo = (int)this.getOwner().getField(m_fsAccountNoField).getValue();
int iProfitCenter = iAccountNo - ((int)(iAccountNo / 1000)) * 1000;
int iTargetProfitCenter = (int)((ReferenceField)m_fldFilter).getReference().getField(ProfitCenter.PROFIT_CENTER_NO).getValue();
if (iTargetProfitCenter != 0)
    if (iTargetProfitCenter != iProfitCenter)
        return false;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5852">
		<LastChanged>2012-01-31T14:39:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getAcctDetail</MethodName>
		<LogicDescription/>
		<MethodReturns>AcctDetail</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CalcAcctBalHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recAcctDetail == null)
{
    m_recAcctDetail = new AcctDetail(this.getOwner().findRecordOwner());
    if (m_recAcctDetail.getRecordOwner() != null)
        m_recAcctDetail.getRecordOwner().removeRecord(m_recAcctDetail);
    m_recAcctDetail.addListener(new SubFileFilter(this.getOwner()));

	if (m_fldStartDate != null)
	{
        if (m_bInclusive)
        {
            SubFileFilter listener = new SubFileFilter(m_fldStartDate, AcctDetail.TRX_DATE, null, null, null, null);
            listener.setEndKey(false);
            m_recAcctDetail.addListener(listener);
        }
        else
        {
            if (m_fldStartDate != null)
                m_recAcctDetail.addListener(new CompareFileFilter(AcctDetail.TRX_DATE, m_fldStartDate, ">", null, false));
        }
	}
	if (m_fldEndDate != null)
	{
        if (m_bInclusive)
        {
            SubFileFilter listener = new SubFileFilter(m_fldEndDate, AcctDetail.TRX_DATE, null, null, null, null);
            listener.setInitialKey(false);
            m_recAcctDetail.addListener(listener);
        }
        else
        {
            if (m_fldEndDate != null)
                m_recAcctDetail.addListener(new CompareFileFilter(AcctDetail.TRX_DATE, m_fldEndDate, "<", null, false));
        }
	}
    m_recAcctDetail.addListener(new SubCountHandler(m_fldTarget, AcctDetail.AMOUNT_LOCAL, false, true));
}
return m_recAcctDetail;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5853">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>isPrintableControl</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailLedgerDetail</MethodClassName>
		<LogicSource><![CDATA[boolean flag = false;
if (this.getScreenRecord().getField(GenledScreenRecord.PRINT_DETAIL).getState() == true)
    flag = super;
return flag;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5854">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrialBalanceSubTotal</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5855">
		<LastChanged>2012-01-31T14:44:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>isBreak</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrialBalanceSubTotal</MethodClassName>
		<LogicSource><![CDATA[boolean bBreak = super;
if (bBreak)
    bBreak = this.getScreenRecord().getField(GenledScreenRecord.SUB_TOTALS).getState();
if (bBreak)
    bBreak = this.getMainRecord().getField(Account.SECTION_SUB_TOTAL).getState();
return bBreak;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5856">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>isBreak</MethodName>
		<LogicDescription><![CDATA[Is this a control break?
@return True if it is a break.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>DetailHeadingScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5857">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceCrossRefSubTotal</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5858">
		<LastChanged>2012-02-01T19:02:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGroupGridScreen</MethodClassName>
		<LogicSource><![CDATA[this.getMainRecord().setKeyArea(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord().getField(AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID), AcctDetailDist.ACCT_DETAIL_DIST_GROUP_ID, null, null, null, null));
this.getHeaderRecord().getField(AcctDetailDist.ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5859">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ExcludeClosingFilter</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField fldExcludeClosing</MethodInterface>
		<MethodClassName>ExcludeClosingFilter</MethodClassName>
		<LogicSource>m_fldExcludeClosing = fldExcludeClosing;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5860">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doLocalCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ExcludeClosingFilter</MethodClassName>
		<LogicSource><![CDATA[if (m_fldExcludeClosing != null)
    if (m_fldExcludeClosing.getState() == true)
        if (this.getOwner().getField(AcctDetail.TRX_TYPE_ID).getValue() == this.getClosingTrxType())
    return false;	// Skip this record.
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5861">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getClosingTrxType</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ExcludeClosingFilter</MethodClassName>
		<LogicSource><![CDATA[if (m_recTransactionType == null)
{
    m_recTransactionType = new TransactionType(this.getOwner().findRecordOwner());
    if (m_recTransactionType.getRecordOwner() != null)
        m_recTransactionType.getRecordOwner().removeRecord(m_recTransactionType);
    m_iTypeClosing = m_recTransactionType.getTrxTypeID(TransactionType.GENLED, AcctDetail.ACCT_DETAIL_FILE, AcctDetail.CLOSINGENTRY, AcctDetail.CLOSINGENTRY);
}
return m_iTypeClosing;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5862">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ExcludeClosingFilter</MethodClassName>
		<LogicSource><![CDATA[if (m_recTransactionType != null)
    m_recTransactionType.free();
m_recTransactionType = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5863">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxDescHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recTrxStatus != null)
    m_recTrxStatus.free();
m_recTrxStatus = null;
if (m_recTrxGroup != null)
    m_recTrxGroup.free();
m_recTrxGroup = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5864">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxStatusHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recTrxType != null)
    m_recTrxType.free();
m_recTrxType = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5865">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxGroupHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recTrxType != null)
    m_recTrxType.free();
m_recTrxType = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5866">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxDescScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new UpdateTrxDescHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5867">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTrxSystemHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recTrxDesc != null)
    m_recTrxDesc.free();
m_recTrxDesc = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5873">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Profile</MethodClassName>
		<LogicSource><![CDATA[if (Profile.MESSAGE_LOG_SCREEN.equalsIgnoreCase(strCommand))
    return Profile.MESSAGE_LOG_MODE;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5876">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactScreenRecord</MethodClassName>
		<LogicSource><![CDATA[super;
FieldToUpperHandler upper = new FieldToUpperHandler(null);
this.getField(ContactScreenRecord.NAME_SORT).addListener(upper);
CheckForTheHandler the = new CheckForTheHandler(null);
this.getField(ContactScreenRecord.NAME_SORT).addListener(the);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5877">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactCategoryField</MethodClassName>
		<LogicSource>return new ContactCategory(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5878">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactCategoryField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5879">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactCategoryFilter</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5880">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
toolScreen.getScreenRecord().getField(ContactScreenRecord.NAME_SORT).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(ContactScreenRecord.POSTAL_CODE_SORT).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(ContactScreenRecord.CONTACT_CATEGORY_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5976">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PictureSession</MethodClassName>
		<LogicSource><![CDATA[super;
this.setupSubMenus(HtmlConstants.MAIN_MENU_KEY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5977">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PictureSession</MethodClassName>
		<LogicSource><![CDATA[String strCommandNoCommas = Utility.replace(strCommand, ",", null);   // Get any commas out
if (Utility.isNumeric(strCommandNoCommas))
{
    this.setupSubMenus(strCommandNoCommas);
    return Boolean.TRUE;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5978">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PictureSession</MethodClassName>
		<LogicSource>return new Picture(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5979">
		<LastChanged>2012-02-01T19:02:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupSubMenus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strMenu</MethodInterface>
		<MethodClassName>PictureSession</MethodClassName>
		<LogicSource><![CDATA[Record recMenu = this.getMainRecord();
try   {
    boolean bIsNumeric = Utility.isNumeric(strMenu);
    if (bIsNumeric)
    {
        recMenu.setKeyArea(Picture.ID_KEY);
        recMenu.getField(Picture.ID).setString(strMenu);
        bIsNumeric = recMenu.seek("=");
    }
    if (!bIsNumeric)
    {
        recMenu.setKeyArea(Picture.CODE_KEY);
        recMenu.getField(Picture.CODE).setString(strMenu);
        if (recMenu.seek("="))
        {
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace(); // Never
}
String strParentID = recMenu.getField(Picture.ID).toString();
BaseListener listener = recMenu.getListener(StringSubFileFilter.class.getName());
if (listener != null)
{ // Should just change the string
    recMenu.removeListener(listener, true);
}
recMenu.setKeyArea(Picture.PARENT_FOLDER_ID_KEY);
recMenu.addListener(new StringSubFileFilter(strParentID, Picture.PARENT_FOLDER_ID, null, -1, null, -1));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5980">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PictureSession</MethodName>
		<LogicDescription/>
		<MethodReturns>parentSessionObject, null, null</MethodReturns>
		<MethodInterface>TaskSession parentSessionObject</MethodInterface>
		<MethodClassName>PictureSession</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6012">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
((BaseField)((BaseScreen)this.getParentScreen()).getHeaderRecord().getCounterField()).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6013">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), TourHeader.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6014">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.restoreScreenParam(ProfileScreenRecord.PROFILE_TYPE_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6022">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InfoStatusSelect</MethodClassName>
		<LogicSource>return this.setupPopupView(itsLocation, targetScreen, converter, iDisplayFieldDesc, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6023">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CostStatusSelect</MethodClassName>
		<LogicSource>return this.setupPopupView(itsLocation, targetScreen, converter, iDisplayFieldDesc, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6024">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryStatusSelect</MethodClassName>
		<LogicSource>return this.setupPopupView(itsLocation, targetScreen, converter, iDisplayFieldDesc, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6025">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addStandardScreenFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>boolean bTopNext</MethodInterface>
		<MethodClassName>TourDetailScreen</MethodClassName>
		<LogicSource><![CDATA[this.getMainRecord().getField(TourHeaderDetail.INFO_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(TourHeaderDetail.INFO_MESSAGE_TRANSPORT_ID).setupDefaultView(this.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(TourHeaderDetail.INVENTORY_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(TourHeaderDetail.INVENTORY_MESSAGE_TRANSPORT_ID).setupDefaultView(this.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(TourHeaderDetail.COST_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(TourHeaderDetail.COST_MESSAGE_TRANSPORT_ID).setupDefaultView(this.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(TourHeaderDetail.PRODUCT_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(TourHeaderDetail.PRODUCT_MESSAGE_TRANSPORT_ID).setupDefaultView(this.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.DONT_SET_ANCHOR), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(TourHeaderDetail.MODIFY_CODE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(TourHeaderDetail.MODIFY_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6028">
		<LastChanged>2012-02-01T14:17:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,010</Sequence>
		<MethodName>getMessageTransport</MethodName>
		<LogicDescription>Get the message transport code for this message type</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String iStatusType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[Record recMessageTransport = ((ReferenceField)this.getField(this.getFieldSeq(iStatusType) + MESSAGE_TRANSPORT_OFFSET)).getReference();
if ((recMessageTransport != null) &&
	((recMessageTransport.getEditMode() == DBConstants.EDIT_CURRENT) || (recMessageTransport.getEditMode() == DBConstants.EDIT_IN_PROGRESS)))
		return recMessageTransport.getField(MessageTransport.CODE).toString();
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6031">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addStandardScreenFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>boolean bTopNext</MethodInterface>
		<MethodClassName>BookingDetailSubScreen</MethodClassName>
		<LogicSource><![CDATA[this.getMainRecord().getField(BookingDetail.STATUS_SUMMARY).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(BookingDetail.INFO_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).setupDefaultView(this.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), this, ScreenConstants.DONT_DISPLAY_FIELD_DESC);
this.getMainRecord().getField(BookingDetail.INVENTORY_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(BookingDetail.INVENTORY_MESSAGE_TRANSPORT_ID).setupDefaultView(this.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), this, ScreenConstants.DONT_DISPLAY_FIELD_DESC);
this.getMainRecord().getField(BookingDetail.COST_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID).setupDefaultView(this.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), this, ScreenConstants.DONT_DISPLAY_FIELD_DESC);
this.getMainRecord().getField(BookingDetail.PRODUCT_STATUS_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(BookingDetail.PRODUCT_MESSAGE_TRANSPORT_ID).setupDefaultView(this.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), this, ScreenConstants.DONT_DISPLAY_FIELD_DESC);
this.getMainRecord().getField(BookingDetail.ACK_DAYS).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
FieldConverter converter = new FieldLengthConverter(this.getMainRecord().getField(BookingDetail.REMOTE_BOOKING_NO), 30);
converter.setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(BookingDetail.BOOKING_DETAIL_FILE).getField(BookingDetail.TOTAL_PRICE_LOCAL).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6032">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>doSetData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseStatusUpdateHandler</MethodClassName>
		<LogicSource><![CDATA[if (objData instanceof String)
{ // The user pressed the button.
    Record recBaseStatus = this.getOwner().getRecord();
    BaseField fldStatusID = recBaseStatus.getReferringField();
    Record recBookingDetail = fldStatusID.getRecord(); 
    Task task = null;
    if (recBookingDetail.getRecordOwner() != null)
        task = recBookingDetail.getRecordOwner().getTask();
    else if (recBaseStatus.getRecordOwner() != null)
        task = recBaseStatus.getRecordOwner().getTask();
    String strMessage = this.getDisplayMessage();
    if (task != null)
        task.setStatusText(strMessage);
    return DBConstants.NORMAL_RETURN;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6034">
		<LastChanged>2012-04-06T00:41:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,110</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription>Add any message properties that are set in this record.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>String strPrefix, boolean bDeleteProperties, MessageHeader messageHeader, Message message, String strNewPrefix</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> properties = ((PropertiesField)this.getField(BookingDetail.PROPERTIES)).getProperties();
if (properties != null)
{
    Iterator<String> iterator = properties.keySet().iterator();
    while (iterator.hasNext())
    {
        String strKey = iterator.next();
        if (strKey.startsWith(strPrefix))
        {
            String value = (String)properties.get(strKey);
            if (bDeleteProperties)
                ((PropertiesField)this.getField(BookingDetail.PROPERTIES)).setProperty(strKey, null);  // Remove from record
            strKey = strKey.substring(strPrefix.length());
            if (strNewPrefix != null)
                strKey = strNewPrefix + strKey;
            if (messageHeader instanceof TrxMessageHeader) // Always
                ((TrxMessageHeader)messageHeader).put(strKey, value);
            if (message instanceof BaseMessage) // Always
                if (((BaseMessage)message).getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE) != null)
                    ((MessageRecordDesc)((BaseMessage)message).getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE)).put(strKey, value);
        }
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="6035">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,120</Sequence>
		<MethodName>getFieldParam</MethodName>
		<LogicDescription><![CDATA[For this messagestatusID field, return the message type param
@param fldStatusID The status id field
@return The param for this status type]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>BaseField fldStatusID</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[String strParam = DBConstants.BLANK;
if (fldStatusID == this.getField(BookingDetail.INFO_STATUS_ID))
    strParam = BookingDetail.INFO_PARAM;
else if (fldStatusID == this.getField(BookingDetail.COST_STATUS_ID))
    strParam = BookingDetail.COST_PARAM;
else if (fldStatusID == this.getField(BookingDetail.INVENTORY_STATUS_ID))
    strParam = BookingDetail.INVENTORY_PARAM;
else if (fldStatusID == this.getField(BookingDetail.PRODUCT_STATUS_ID))
    strParam = BookingDetail.PRODUCT_PARAM;
return strParam;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6037">
		<LastChanged>2012-04-12T11:45:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>550</Sequence>
		<MethodName>setMessageDataError</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strErrorMessage</MethodInterface>
		<MethodClassName>BaseProductResponse</MethodClassName>
		<LogicSource>this.put(BaseDataStatusModel.DATA_ERROR_MESSAGE, strErrorMessage);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6038">
		<LastChanged>2012-04-12T11:44:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>650</Sequence>
		<MethodName>getMessageDataError</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseProductResponse</MethodClassName>
		<LogicSource><![CDATA[String strErrorMessage = (String)this.get(BaseDataStatusModel.DATA_ERROR_MESSAGE);
if (strErrorMessage == null)
    strErrorMessage = DBConstants.BLANK;
return strErrorMessage;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6039">
		<LastChanged>2012-04-12T11:25:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getMessageTypeParam</MethodName>
		<LogicDescription><![CDATA[Get the property key for an error property for this type of message.
@return The message type]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseProductMessageDesc</MethodClassName>
		<LogicSource><![CDATA[String strRequestParam = DBConstants.BLANK;
// The way I get the error param is a little lame, but it works!
String strClassName = this.getClass().getName();
if (strClassName.indexOf("Information") != -1)
    strRequestParam = BookingDetailModel.INFO_PARAM;
else if (strClassName.indexOf("Rate") != -1)
    strRequestParam = BookingDetailModel.COST_PARAM;
else if (strClassName.indexOf("Availability") != -1)
    strRequestParam = BookingDetailModel.INVENTORY_PARAM;
else if (strClassName.indexOf("Booking") != -1)
    strRequestParam = BookingDetailModel.PRODUCT_PARAM;
return strRequestParam;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6040">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ProductControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6041">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getVariesParam</MethodName>
		<LogicDescription><![CDATA[Get the param name for this param.
@param strVariesDesc The (optional) param name (see LandPricing)
@returns The param name]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strVariesDesc</MethodInterface>
		<MethodClassName>LandVaries</MethodClassName>
		<LogicSource><![CDATA[String strParam = this.getField(LandVaries.DESCRIPTION).toString();
if ((strParam == null) || (strParam.length() == 0))
    strParam = this.getCounterField().toString();
strParam = VARIES_PARAM + '.' + strParam;
if ((strVariesDesc != null) && (strVariesDesc.length() != 0))
    strParam = strParam + '.' + strVariesDesc;
strParam = Utility.replace(strParam, " ", DBConstants.BLANK);
return strParam;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6042">
		<LastChanged>2012-07-19T11:32:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>LandPricingFilter</MethodName>
		<LogicDescription/>
		<MethodReturns>null, recLand, null, null, null, null, null, null, null, false, false, false</MethodReturns>
		<MethodInterface>Land recLand, Date dateTarget, short sTargetPax, int iSicPmc</MethodInterface>
		<MethodClassName>LandPricingFilter</MethodClassName>
		<LogicSource><![CDATA[super;
dateTarget = Converter.convertTimeToDate(dateTarget);
m_dateTarget = dateTarget;
m_sTargetPax = sTargetPax;
m_iSicPmc = iSicPmc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6043">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>setSicPmc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iSicPmc</MethodInterface>
		<MethodClassName>LandPricingFilter</MethodClassName>
		<LogicSource>m_iSicPmc = iSicPmc;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6044">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>doInitialKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingFilter</MethodClassName>
		<LogicSource><![CDATA[this.getOwner().getField(LandPricing.CLASS_ID).setValue(m_iSicPmc);
this.getOwner().getField(LandPricing.CLASS_ID).setModified(true);
((DateTimeField)this.getOwner().getField(LandPricing.END_DATE)).setDate(m_dateTarget, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
this.getOwner().getField(LandPricing.END_DATE).setModified(true);
this.getOwner().getField(LandPricing.TO_PAX).setValue(m_sTargetPax);
this.getOwner().getField(LandPricing.TO_PAX).setModified(true);
super;   // This is the starting key, set the initial position]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6045">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>doEndKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingFilter</MethodClassName>
		<LogicSource><![CDATA[this.getOwner().getField(LandPricing.CLASS_ID).setValue(m_iSicPmc);
this.getOwner().getField(LandPricing.CLASS_ID).setModified(true);
super;   // This is the starting key, set the initial position]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6046">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>doLocalCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricingFilter</MethodClassName>
		<LogicSource><![CDATA[boolean bDontSkip = true;
if (this.getOwner().getField(LandPricing.START_DATE).getValue() > m_dateTarget.getTime())    // Start > thisDate
	bDontSkip = false;		// Skip this one
if (this.getOwner().getField(LandPricing.END_DATE).getValue() < m_dateTarget.getTime())   // End >= thisDate
	bDontSkip = false;		// Skip this one
if (this.getOwner().getField(LandPricing.FROM_PAX).getValue() > m_sTargetPax)    // Start > thisDate
	bDontSkip = false;		// Skip this one
if (this.getOwner().getField(LandPricing.TO_PAX).getValue() < m_sTargetPax)  // End >= thisDate
	bDontSkip = false;		// Skip this one
if (bDontSkip)
	bDontSkip = super;
return bDontSkip; // Don't skip (no criteria)]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6047">
		<LastChanged>2012-01-31T10:43:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>setupLandFilter</MethodName>
		<LogicDescription/>
		<MethodReturns>FileListener</MethodReturns>
		<MethodInterface>Land recLand, Date dateTarget, short sTargetPax, int iSicPmc</MethodInterface>
		<MethodClassName>LandPricing</MethodClassName>
		<LogicSource><![CDATA[this.setKeyArea(LandPricing.PRODUCT_ID_KEY);
FileListener listener = new LandPricingFilter(recLand, dateTarget, sTargetPax, iSicPmc);
return listener;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6048">
		<LastChanged>2012-04-07T11:31:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>getQuantity</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Task task, short sTargetPax, LandMessageData mapProperties, Map&lt;String, Object&gt; mapSurvey</MethodInterface>
		<MethodClassName>LandPricing</MethodClassName>
		<LogicSource><![CDATA[int iQuantity = 0;
int iPaxCategory = (int)this.getField(LandPricing.PAX_CATEGORY_ID).getValue();
if (iPaxCategory == PaxCategory.ALL_ID)
    iQuantity = sTargetPax;
else
{
    try {
        iQuantity = ((Integer)Converter.convertObjectToDatatype(mapProperties.get(Product.ROOM_TYPE_PARAM + Integer.toString(iPaxCategory)), Integer.class, IntegerField.ZERO)).intValue();
    } catch (Exception ex) {
    }
}
LandVaries recVariesOn = (LandVaries)((ReferenceField)this.getField(LandPricing.LAND_VARIES_ID)).getReference();
if (recVariesOn != null)
    if ((recVariesOn.getEditMode() == DBConstants.EDIT_CURRENT) || (recVariesOn.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
{
    String strVariesBy = recVariesOn.getField(LandVaries.VARIES_BY).toString();
    if ((strVariesBy == null) || (strVariesBy.length() == 0))
        strVariesBy = VariesByField.AUTO_PER_PERSON;
    else if ((VariesByField.AUTO_PER_PERSON.equals(strVariesBy)) || (VariesByField.MANUAL_PER_PERSON.equals(strVariesBy)))
    {
            // Cost is already per person
    }
    else if ((VariesByField.AUTO_FIXED.equals(strVariesBy)) || (VariesByField.MANUAL_FIXED.equals(strVariesBy)))
    {
        iQuantity = 1; // Divide fixed cost by number of pax
    }
    else if ((VariesByField.AUTO_PER_ROOM.equals(strVariesBy)) || (VariesByField.MANUAL_PER_ROOM.equals(strVariesBy)))
    {
        int iRooms = 0;
        for (int i = PaxCategory.SINGLE_ID; i <= PaxCategory.QUAD_ID; i++)
        {
            if ((iPaxCategory == PaxCategory.ALL_ID)
                || (iPaxCategory == i))
            {
                try {
                    iRooms += ((Integer)Converter.convertObjectToDatatype(mapProperties.get(Product.ROOM_TYPE_PARAM + Integer.toString(i)), Integer.class, IntegerField.ZERO)).intValue() / (i - PaxCategory.SINGLE_ID + 1);
                } catch (Exception ex) {
                }
            }
        }
        if (iRooms > 0)
            iQuantity = iRooms;
    }
    if ((VariesByField.MANUAL_PER_PERSON.equals(strVariesBy)) || (VariesByField.MANUAL_FIXED.equals(strVariesBy)) || (VariesByField.MANUAL_PER_ROOM.equals(strVariesBy)))
    { // Cost comes from a param
        String strKey = BookingDetailModel.COST_PARAM + '.' + BookingDetailModel.MESSAGE_PARAM + '.' + ThinUtil.fixDOMElementName(recVariesOn.getVariesParam(this.getField(LandPricing.VARIES_DESC).toString()));
        if (mapProperties.get(strKey) == null)
        {
            String PARAM_REQUIRED = "Param required";
            String strError = strKey;
            if (mapSurvey != null)
            { // Name of param that is missing
                mapSurvey.put(strKey + '.' + recVariesOn.getField(LandVaries.DESCRIPTION).getFieldName(), recVariesOn.getField(LandVaries.DESCRIPTION).toString());
                strError = recVariesOn.getField(LandVaries.DESCRIPTION).toString();
                if (!this.getField(LandPricing.VARIES_DESC).isNull())
                {
                    mapSurvey.put(strKey + '.' + this.getField(LandPricing.VARIES_DESC).getFieldName(), this.getField(LandPricing.VARIES_DESC).toString());
                    strError = strError +  "(" + this.getField(LandPricing.VARIES_DESC).toString() + ")";
                }
            }
            if (task != null)
                return task.setLastError(MessageFormat.format(task.getApplication().getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(PARAM_REQUIRED), strError));
            return DBConstants.ERROR_RETURN;
        }
        try {
            iQuantity = iQuantity * ((Double)Converter.convertObjectToDatatype(mapProperties.get(strKey), Double.class, DoubleField.ZERO)).intValue();
        } catch (Exception ex) {
        }           
    }
}
return iQuantity;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6062">
		<LastChanged>2012-01-25T17:18:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>getMessageProcessInfo</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageProcessInfo</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[if (m_recMessageProcessInfo == null)
{
    RecordOwner recordOwner = this.findRecordOwner();
    m_recMessageProcessInfo = new MessageProcessInfo(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recMessageProcessInfo);
}
return m_recMessageProcessInfo;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6063">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryGridScreen</MethodClassName>
		<LogicSource>return new HotelInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6064">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new HotelInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6065">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new Hotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6066">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new HotelHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6067">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryGridScreen</MethodClassName>
		<LogicSource>return new LandInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6068">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirInventoryGridScreen</MethodClassName>
		<LogicSource>return new AirInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6069">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseInventoryGridScreen</MethodClassName>
		<LogicSource>return new CruiseInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6070">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationInventoryGridScreen</MethodClassName>
		<LogicSource>return new TransportationInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6071">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarInventoryGridScreen</MethodClassName>
		<LogicSource>return new CarInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6072">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemInventoryGridScreen</MethodClassName>
		<LogicSource>return new ItemInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6073">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderInventoryGridScreen</MethodClassName>
		<LogicSource>return new TourHeaderInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6074">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemInventoryScreen</MethodClassName>
		<LogicSource>return new ItemInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6075">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarInventoryScreen</MethodClassName>
		<LogicSource>return new CarInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6076">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseInventoryScreen</MethodClassName>
		<LogicSource>return new CruiseInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6077">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationInventoryScreen</MethodClassName>
		<LogicSource>return new TransportationInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6078">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryScreen</MethodClassName>
		<LogicSource>return new LandInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6079">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderInventoryScreen</MethodClassName>
		<LogicSource>return new TourHeaderInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6080">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderInventoryScreen</MethodClassName>
		<LogicSource>return super; //?new LandHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6081">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirInventoryScreen</MethodClassName>
		<LogicSource>return new AirInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6082">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirInventoryScreen</MethodClassName>
		<LogicSource>return new FlightHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6083">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationInventoryScreen</MethodClassName>
		<LogicSource>return new TransportationHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6084">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseInventoryScreen</MethodClassName>
		<LogicSource>return new CruiseHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6085">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarInventoryScreen</MethodClassName>
		<LogicSource>return new CarHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6086">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemInventoryScreen</MethodClassName>
		<LogicSource>return new ItemHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6088">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>processAvailabilityRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Car</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6089">
		<LastChanged>2012-04-12T07:41:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>270</Sequence>
		<MethodName>processAvailabilityRequestInMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequest = (ProductRequest)((BaseMessage)messageIn).getMessageDataDesc(null);
ProductMessageData productMessageData = (ProductMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
PassengerMessageData passengerMessageData = (PassengerMessageData)productRequest.getMessageDataDesc(ProductRequest.PASSENGER_MESSAGE);
Date dateTarget = productMessageData.getTargetDate();
int iRateID = productMessageData.getRateTypeID();
int iClassID = productMessageData.getRateClassID();
Object objOtherID = productMessageData.get(Product.OTHER_ID_PARAM);
if (objOtherID == null)
    objOtherID = InventoryModel.NO_OTHER;
int iOtherID = Integer.parseInt(objOtherID.toString());
String strErrorMessage = null;
int iInventoryStatus = InventoryStatus.VALID;

BaseProductResponse responseMessage = null;
if (messageReply == null)
    messageReply = (BaseMessage)this.getMessageProcessInfo().createReplyMessage((BaseMessage)productRequest.getMessage());
responseMessage = (BaseProductResponse)((BaseMessage)messageReply).getMessageDataDesc(null);
responseMessage.moveRequestInfoToReply(messageIn);

//       First, calculate the room cost
int iAvailability = 0;
int iRooms = 0;
int iNights = 0;
if (productMessageData instanceof HotelMessageData)    // Could be CancelRequest (then nights = 0)
    iNights = ((HotelMessageData)productMessageData).getNights();
int iErrorCode = DBConstants.NORMAL_RETURN;
int iRoomCategory = PaxCategory.SINGLE_ID;
Set<Integer> setSurvey = this.getInventory().surveyInventory(fldTrxID); 
for (int iFieldSeq = this.getFieldSeq(Hotel.SINGLE_COST); iRoomCategory <= PaxCategory.CHILD_ID; iRoomCategory++, iFieldSeq++)
{
    dateTarget = productMessageData.getTargetDate();
    int iPaxInRoom = passengerMessageData.getPaxInRoom(iRoomCategory);
    if (productRequest instanceof CancelRequest)    // CancelRequest (then pax = 0)
        iPaxInRoom = 0;
    int iRoomCapacity = iRoomCategory;
    if (iRoomCategory == PaxCategory.CHILD_ID)
        iRoomCapacity = 1;
    iRooms = iPaxInRoom / iRoomCapacity;
    if (iRooms > 0)
    {
        for (int day = 0; day < iNights; day++)
        {
            InventoryModel recInventory = (InventoryModel)this.getInventory().getAvailability(this, dateTarget, iRateID, iClassID, iOtherID);
            iAvailability = InventoryModel.NO_INVENTORY;
            if (recInventory != null)
                iAvailability = (int)recInventory.getField(InventoryModel.AVAILABLE).getValue();
            if ((recInventory != null) && (fldTrxID != null)) // If in update mode, update the availability
            { // No need to check avail, updateAvailability checks the correct availability (taking into account previous the previous usage) 
                boolean bIsDeleted = false;   // todo (don) Fix this.
                iErrorCode = recInventory.updateAvailability(iRooms, fldTrxID, iRoomCategory, bIsDeleted, setSurvey);
                if (iErrorCode != DBConstants.NORMAL_RETURN)
                    break;
            }
            else if (iAvailability < iRooms)
                break;
            else if (iAvailability == InventoryModel.NO_INVENTORY)
                break;
            DateConverter.initGlobals();
            DateConverter.gCalendar.setTime(dateTarget);
            DateConverter.gCalendar.add(Calendar.DATE, +1);
            dateTarget = DateConverter.gCalendar.getTime();
        }
    }
    if ((iAvailability < iRooms) || (iAvailability == InventoryModel.NO_INVENTORY)
            || (iErrorCode != DBConstants.NORMAL_RETURN))
        break;
}
if (fldTrxID != null) // If in update mode, fix the availability
{
    if ((iAvailability < iRooms) || (iAvailability == InventoryModel.NO_INVENTORY)
        || (iErrorCode != DBConstants.NORMAL_RETURN))
    { // Have to back-out the changes and return.
        int iErrorCode2 = this.getInventory().removeInventory(fldTrxID);
        if (iErrorCode2 != DBConstants.NORMAL_RETURN)
            iErrorCode = iErrorCode2;
        iInventoryStatus = BaseDataStatus.NOT_VALID;
        if (strErrorMessage == null)
        {
            if ((this.getRecordOwner() != null)
                && (this.getRecordOwner().getTask() != null))
                    strErrorMessage = this.getRecordOwner().getTask().getLastError(iErrorCode);
            else
                strErrorMessage = "Inventory not available";
        }
    }
    else
    {
        this.getInventory().removeTrxs(fldTrxID, setSurvey);  // Remove any transactions that are no longer used
    }
}
if (responseMessage instanceof ProductAvailabilityResponse)
{
    ProductResponseMessageData responseMessageData = (ProductResponseMessageData)responseMessage.getMessageDataDesc(HotelRateResponse.PRODUCT_RESPONSE_MESSAGE);
    responseMessageData.setAvailability(iAvailability);
}

if (iAvailability < iRooms)
{
    strErrorMessage = InventoryStatus.NO_INVENTORY_ERROR_MESSAGE;
    if (this.getRecordOwner() != null)
        if (this.getRecordOwner().getTask() != null)
    {
        strErrorMessage = this.getRecordOwner().getTask().getApplication().getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(strErrorMessage);
        strErrorMessage = MessageFormat.format(strErrorMessage, iAvailability, dateTarget);
    }
    iInventoryStatus = InventoryStatus.NOT_VALID;
}
else if (iAvailability == InventoryModel.NO_INVENTORY)
{
    strErrorMessage = InventoryStatus.LOOKUP_ERROR_MESSAGE;
    if (this.getRecordOwner() != null)
        if (this.getRecordOwner().getTask() != null)
            strErrorMessage = this.getRecordOwner().getTask().getApplication().getResources(ResourceConstants.BOOKING_RESOURCE, true).getString(strErrorMessage);
    iInventoryStatus = InventoryStatus.ERROR;
}
this.getField(Product.DISPLAY_INVENTORY_STATUS_ID).setValue(iInventoryStatus);
responseMessage.setMessageDataStatus(iInventoryStatus);
if (strErrorMessage != null)
    responseMessage.setMessageDataError(strErrorMessage);
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6090">
		<LastChanged>2012-01-25T17:18:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getProductType</MethodName>
		<LogicDescription/>
		<MethodReturns>ProductType</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductTypeAutoField</MethodClassName>
		<LogicSource><![CDATA[Product recProduct = (Product)this.getRecord();
if (m_recProductType == null)
{
    RecordOwner recordOwner = recProduct.findRecordOwner();
    m_recProductType = new ProductType(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recProductType);
    recProduct.addListener(new FreeOnFreeHandler(m_recProductType));
}
m_recProductType.getProductTypeID(recProduct);
return m_recProductType;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6091">
		<LastChanged>2012-04-06T22:55:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getData</MethodName>
		<LogicDescription>When they ask for data, make sure the main icon is correct (for grid usage)</LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface/>
		<MethodClassName>StatusSummaryField</MethodClassName>
		<LogicSource><![CDATA[Object data = super;
String strProductType = this.getProductType();
if (this.getComponent(0) instanceof org.jbundle.base.screen.model.opt.SBlinkImageView)
{ // Always
    org.jbundle.base.screen.model.opt.SBlinkImageView blink = (org.jbundle.base.screen.model.opt.SBlinkImageView)this.getComponent(0);
    BasePanel targetScreen = blink.getParentScreen();
    if (targetScreen != null)
        if (targetScreen.getAppletScreen() != null)
        {
            org.jbundle.thin.base.screen.BaseApplet applet = (org.jbundle.thin.base.screen.BaseApplet)targetScreen.getAppletScreen().getTask();
            if ((blink.getImageIcon(IntegerField.ZERO) == null)
                || (!strProductType.equalsIgnoreCase(blink.getImageIcon(IntegerField.ZERO).toString())))
                {
                    blink.addIcon(applet.loadImageIcon(BookingConstants.BUTTON_LOCATION + strProductType, strProductType), 0);
                }
            BookingDetailModel recCustSaleDetail = (BookingDetailModel)((BaseField)this.getField()).getRecord();
            if (recCustSaleDetail.getField(BookingDetailModel.PRODUCT_STATUS_ID).getValue() == ProductStatus.CANCELED)
                blink.addIcon(applet.loadImageIcon(ThinMenuConstants.CANCEL, ThinMenuConstants.CANCEL), 0);
        }
}
return data;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6096">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourDetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getMainRecord() instanceof TourHeaderDetail)
{
    String strManualTransportID = Integer.toString(((ReferenceField)this.getMainRecord().getField(TourHeaderDetail.INFO_MESSAGE_TRANSPORT_ID)).getIDFromCode(MessageTransport.MANUAL));
    this.getMainRecord().getField(TourHeaderDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(TourHeaderDetail.INFO_STATUS_ID), strManualTransportID, false));
    this.getMainRecord().getField(TourHeaderDetail.INVENTORY_MESSAGE_TRANSPORT_ID).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(TourHeaderDetail.INVENTORY_STATUS_ID), strManualTransportID, false));
    this.getMainRecord().getField(TourHeaderDetail.COST_MESSAGE_TRANSPORT_ID).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(TourHeaderDetail.COST_STATUS_ID), strManualTransportID, false));
    this.getMainRecord().getField(TourHeaderDetail.PRODUCT_MESSAGE_TRANSPORT_ID).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(TourHeaderDetail.PRODUCT_STATUS_ID), strManualTransportID, false));
    
    Converter convCheckMark = new RadioConverter(this.getMainRecord().getField(TourHeaderDetail.INFO_MESSAGE_TRANSPORT_ID), strManualTransportID, false);
    this.getMainRecord().getField(TourHeaderDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new RemoveConverterOnFreeHandler(convCheckMark));
    this.getMainRecord().getField(TourHeaderDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new CopyDataHandler(this.getMainRecord().getField(TourHeaderDetail.INFO_STATUS_ID), null, convCheckMark));
    this.getMainRecord().getField(TourHeaderDetail.INVENTORY_MESSAGE_TRANSPORT_ID).addListener(new CopyDataHandler(this.getMainRecord().getField(TourHeaderDetail.INVENTORY_STATUS_ID), null, convCheckMark));
    this.getMainRecord().getField(TourHeaderDetail.COST_MESSAGE_TRANSPORT_ID).addListener(new CopyDataHandler(this.getMainRecord().getField(TourHeaderDetail.COST_STATUS_ID), null, convCheckMark));
    this.getMainRecord().getField(TourHeaderDetail.PRODUCT_MESSAGE_TRANSPORT_ID).addListener(new CopyDataHandler(this.getMainRecord().getField(TourHeaderDetail.PRODUCT_STATUS_ID), null, convCheckMark));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6099">
		<LastChanged>2012-04-12T12:34:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
if (iStatus == BaseDataStatusModel.DATA_VALID)
    iStatus = this.checkBookingRequestParams(record);
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6100">
		<LastChanged>2012-04-12T12:28:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
if (iStatus == BaseDataStatusModel.DATA_VALID)
    iStatus = this.checkBookingRequestParams(record);
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6101">
		<LastChanged>2012-04-12T11:59:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
if (iStatus == BaseDataStatusModel.DATA_VALID)
    iStatus = this.checkBookingRequestParams(record);
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6102">
		<LastChanged>2012-04-12T12:37:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
if (iStatus == BaseDataStatusModel.DATA_VALID)
    iStatus = this.checkBookingRequestParams(record);
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6103">
		<LastChanged>2012-04-12T12:12:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
if (iStatus == BaseDataStatusModel.DATA_VALID)
    iStatus = this.checkBookingRequestParams(record);
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6104">
		<LastChanged>2012-04-12T12:04:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
if (iStatus == BaseDataStatusModel.DATA_VALID)
    iStatus = this.checkBookingRequestParams(record);
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6105">
		<LastChanged>2012-04-12T12:23:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
if (iStatus == BaseDataStatusModel.DATA_VALID)
    iStatus = this.checkBookingRequestParams(record);
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6106">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new ItemInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6107">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new CarInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6108">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new CruiseInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6109">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new TransportationInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6110">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new LandInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6111">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new TourHeaderInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6112">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirInventoryRangeAdjust</MethodClassName>
		<LogicSource>return new AirInventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6113">
		<LastChanged>2012-02-01T12:39:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,105</Sequence>
		<MethodName>getProcessType</MethodName>
		<LogicDescription><![CDATA[For this kind of message, get the process type.
For now, all are UPDATE, which means update the information in the booking
when the response comes back (vs. just return the information to the caller)]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String iStatusType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>return ProcessType.UPDATE;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6114">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourStatusSelect</MethodClassName>
		<LogicSource>return this.setupPopupView(itsLocation, targetScreen, converter, iDisplayFieldDesc, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6115">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingStatusSelect</MethodClassName>
		<LogicSource>return this.setupPopupView(itsLocation, targetScreen, converter, iDisplayFieldDesc, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6127">
		<LastChanged>2012-04-11T09:45:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>convertNameToID</MethodName>
		<LogicDescription>Convert this description to an ID</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strPaxCategory</MethodInterface>
		<MethodClassName>PaxCategory</MethodClassName>
		<LogicSource><![CDATA[int iOldKeyOrder = this.getDefaultOrder();
this.setKeyArea(PaxCategory.DESCRIPTION_KEY);
this.getField(PaxCategory.DESCRIPTION).setString(strPaxCategory);
try {
	if (this.seek(null))
		return this.getCounterField().toString();
} catch (DBException ex) {
	ex.printStackTrace();
} finally {
	this.setKeyArea(iOldKeyOrder);
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="6133">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourBookingResponse</MethodClassName>
		<LogicSource><![CDATA[// For now, don't extract the detail pricing. It was already add on the costing lookup
// todo(don) - May want to confirm pricing?
//Booking recBooking = ((BookingDetail)record).getBooking(true);
//this.addLineItemsToBooking(recBooking);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6135">
		<LastChanged>2012-04-12T10:09:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>285</Sequence>
		<MethodName>getProductBookingResponse</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource><![CDATA[if (RequestType.BOOKING_ADD.equalsIgnoreCase(strRequestType))
    return new HotelBookingResponse((BaseMessage)message, strKey);
else if (RequestType.BOOKING_CHANGE.equalsIgnoreCase(strRequestType))
    return new HotelBookingChangeResponse((BaseMessage)message, strKey);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6136">
		<LastChanged>2012-04-12T09:14:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>610</Sequence>
		<MethodName>getProductBookingResponse</MethodName>
		<LogicDescription/>
		<MethodReturns>ProductBookingResponse</MethodReturns>
		<MethodInterface>String strRequestType, Message message, String strKey</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[if (RequestType.BOOKING_CANCEL.equalsIgnoreCase(strRequestType))
    return new CancelResponse((BaseMessage)message, strKey);
return null;	// Override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6137">
		<LastChanged>2012-04-02T10:39:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>620</Sequence>
		<MethodName>getBookingDetail</MethodName>
		<LogicDescription>Create the booking detail for this product type</LogicDescription>
		<MethodReturns>BookingDetailModel</MethodReturns>
		<MethodInterface>RecordOwner recordOwner</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6138">
		<LastChanged>2012-04-07T09:41:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>290</Sequence>
		<MethodName>getBookingDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource>return (BookingDetailModel)Record.makeRecordFromClassName(BookingHotelModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6140">
		<LastChanged>2012-04-12T10:14:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,310</Sequence>
		<MethodName>getProductBookingResponse</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Land</MethodClassName>
		<LogicSource><![CDATA[if (RequestType.BOOKING_ADD.equalsIgnoreCase(strRequestType))
    return new LandBookingResponse((BaseMessage)message, strKey);
else if (RequestType.BOOKING_CHANGE.equalsIgnoreCase(strRequestType))
    return new LandBookingChangeResponse((BaseMessage)message, strKey);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6141">
		<LastChanged>2012-04-07T09:41:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,320</Sequence>
		<MethodName>getBookingDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Land</MethodClassName>
		<LogicSource>return (BookingDetailModel)Record.makeRecordFromClassName(BookingLandModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6142">
		<LastChanged>2012-04-12T10:13:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,310</Sequence>
		<MethodName>getProductBookingResponse</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[if (RequestType.BOOKING_ADD.equalsIgnoreCase(strRequestType))
    return new TourBookingResponse((BaseMessage)message, strKey);
else if (RequestType.BOOKING_CHANGE.equalsIgnoreCase(strRequestType))
    return new TourBookingChangeResponse((BaseMessage)message, strKey);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6143">
		<LastChanged>2012-04-07T09:41:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,320</Sequence>
		<MethodName>getBookingDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource>return (BookingDetailModel)Record.makeRecordFromClassName(BookingTourModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6144">
		<LastChanged>2012-04-12T10:05:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,310</Sequence>
		<MethodName>getProductBookingResponse</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Air</MethodClassName>
		<LogicSource><![CDATA[if (RequestType.BOOKING_ADD.equalsIgnoreCase(strRequestType))
    return new AirBookingResponse((BaseMessage)message, strKey);
else if (RequestType.BOOKING_CHANGE.equalsIgnoreCase(strRequestType))
    return new AirBookingChangeResponse((BaseMessage)message, strKey);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6145">
		<LastChanged>2012-04-07T09:40:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,320</Sequence>
		<MethodName>getBookingDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Air</MethodClassName>
		<LogicSource>return (BookingDetailModel)Record.makeRecordFromClassName(BookingAirModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6146">
		<LastChanged>2012-04-12T10:13:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,310</Sequence>
		<MethodName>getProductBookingResponse</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Transportation</MethodClassName>
		<LogicSource><![CDATA[if (RequestType.BOOKING_ADD.equalsIgnoreCase(strRequestType))
    return new TransportationBookingResponse((BaseMessage)message, strKey);
else if (RequestType.BOOKING_CHANGE.equalsIgnoreCase(strRequestType))
    return new TransportationBookingChangeResponse((BaseMessage)message, strKey);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6147">
		<LastChanged>2012-04-07T09:42:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,320</Sequence>
		<MethodName>getBookingDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Transportation</MethodClassName>
		<LogicSource>return (BookingDetailModel)Record.makeRecordFromClassName(BookingTransportationModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6148">
		<LastChanged>2012-04-12T10:08:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,310</Sequence>
		<MethodName>getProductBookingResponse</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Cruise</MethodClassName>
		<LogicSource><![CDATA[if (RequestType.BOOKING_ADD.equalsIgnoreCase(strRequestType))
    return new CruiseBookingResponse((BaseMessage)message, strKey);
else if (RequestType.BOOKING_CHANGE.equalsIgnoreCase(strRequestType))
    return new CruiseBookingChangeResponse((BaseMessage)message, strKey);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6149">
		<LastChanged>2012-04-07T09:40:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,320</Sequence>
		<MethodName>getBookingDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Cruise</MethodClassName>
		<LogicSource>return (BookingDetailModel)Record.makeRecordFromClassName(BookingCruiseModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6150">
		<LastChanged>2012-04-12T10:07:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,310</Sequence>
		<MethodName>getProductBookingResponse</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Car</MethodClassName>
		<LogicSource><![CDATA[if (RequestType.BOOKING_ADD.equalsIgnoreCase(strRequestType))
    return new CarBookingResponse((BaseMessage)message, strKey);
else if (RequestType.BOOKING_CHANGE.equalsIgnoreCase(strRequestType))
    return new CarBookingChangeResponse((BaseMessage)message, strKey);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6151">
		<LastChanged>2012-04-07T09:40:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,320</Sequence>
		<MethodName>getBookingDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Car</MethodClassName>
		<LogicSource>return (BookingDetailModel)Record.makeRecordFromClassName(BookingCarModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6152">
		<LastChanged>2012-04-12T10:11:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,310</Sequence>
		<MethodName>getProductBookingResponse</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Item</MethodClassName>
		<LogicSource><![CDATA[if (RequestType.BOOKING_ADD.equalsIgnoreCase(strRequestType))
    return new ItemBookingResponse((BaseMessage)message, strKey);
else if (RequestType.BOOKING_CHANGE.equalsIgnoreCase(strRequestType))
    return new ItemBookingChangeResponse((BaseMessage)message, strKey);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6153">
		<LastChanged>2012-04-07T09:41:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,320</Sequence>
		<MethodName>getBookingDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Item</MethodClassName>
		<LogicSource>return (BookingDetailModel)Record.makeRecordFromClassName(BookingItemModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6161">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getString</MethodName>
		<LogicDescription>A utility method to get a resource string using a record's owner</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Record record, String strResourceName, String string</MethodInterface>
		<MethodClassName>BaseProductMessageDesc</MethodClassName>
		<LogicSource><![CDATA[if (record != null)
	if (record.getRecordOwner() != null)
		if (record.getRecordOwner().getTask() != null)
			if (record.getRecordOwner().getTask().getApplication() != null)
				string = record.getRecordOwner().getTask().getApplication().getResources(strResourceName, true).getString(string);
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6162">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourOrderHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6163">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourOrderHandler</MethodClassName>
		<LogicSource><![CDATA[if (this.getOwner().getRecord().getField(Tour.ORDER_COMPONENTS).getState() == true)
{
    // Note: Must be finalized to order components (setting this flag will set up the A/P detail)
    Record recTour = this.getOwner().getRecord();
    int iOldOpenMode = recTour.setOpenMode(recTour.getOpenMode() & ~DBConstants.OPEN_READ_ONLY);
    recTour.getField(Tour.FINALIZED).setState(true);
    try {
        recTour.writeAndRefresh();
    } catch (DBException ex) {
        ex.printStackTrace();
    } finally {
        recTour.setOpenMode(iOldOpenMode);
    }

    ((Tour)this.getOwner().getRecord()).orderAllComponents();
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6167">
		<LastChanged>2012-04-02T22:24:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,050</Sequence>
		<MethodName>checkRequiredParams</MethodName>
		<LogicDescription><![CDATA[Pre-check to see if the minimal required params are set.
@return If okay, return 0, otherwise return the field that is required.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String iStatusType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[if (this.getField(BookingDetail.PRODUCT_ID).isNull())
	return BookingDetail.PRODUCT_ID;	// Product must be non-null
if (this.getField(BookingDetail.DETAIL_DATE).isNull())
	return BookingDetail.DETAIL_DATE;	// Date must be non-null
return null;	// Looks good so far.]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="6168">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,050</Sequence>
		<MethodName>checkRequiredParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotel</MethodClassName>
		<LogicSource><![CDATA[if (iStatusType != BookingDetail.INFO_STATUS_ID)
{
    if (this.getField(BookingDetail.RATE_ID).isNull())
        return BookingDetail.RATE_ID;
    if (this.getField(BookingDetail.CLASS_ID).isNull())
        return BookingDetail.CLASS_ID;
    if (this.getField(BookingHotel.NIGHTS).isNull())
        return BookingHotel.NIGHTS;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6169">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,050</Sequence>
		<MethodName>checkRequiredParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLand</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6170">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,050</Sequence>
		<MethodName>checkRequiredParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAir</MethodClassName>
		<LogicSource><![CDATA[if (iStatusType != BookingDetail.INFO_STATUS_ID)
{
    if (this.getField(BookingDetail.RATE_ID).isNull())
        return BookingDetail.RATE_ID;
    if (this.getField(BookingDetail.CLASS_ID).isNull())
        return BookingDetail.CLASS_ID;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6171">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,050</Sequence>
		<MethodName>checkRequiredParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTour</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6172">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,050</Sequence>
		<MethodName>checkRequiredParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCar</MethodClassName>
		<LogicSource><![CDATA[if (iStatusType != BookingDetail.INFO_STATUS_ID)
{
    if (this.getField(BookingDetail.RATE_ID).isNull())
        return BookingDetail.RATE_ID;
    if (this.getField(BookingDetail.CLASS_ID).isNull())
        return BookingDetail.CLASS_ID;
    if (this.getField(BookingCar.QUANTITY).isNull())
        return BookingCar.QUANTITY;
    if (this.getField(BookingCar.DAYS).isNull())
        return BookingCar.DAYS;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6173">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,050</Sequence>
		<MethodName>checkRequiredParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruise</MethodClassName>
		<LogicSource><![CDATA[if (iStatusType != BookingDetail.INFO_STATUS_ID)
{
    if (this.getField(BookingDetail.RATE_ID).isNull())
        return BookingDetail.RATE_ID;
    if (this.getField(BookingDetail.CLASS_ID).isNull())
        return BookingDetail.CLASS_ID;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6174">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,050</Sequence>
		<MethodName>checkRequiredParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTransportation</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6175">
		<LastChanged>2012-02-01T14:20:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,050</Sequence>
		<MethodName>checkRequiredParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItem</MethodClassName>
		<LogicSource><![CDATA[if (this.getField(BookingDetail.PRODUCT_ID).isNull())
    return BookingDetail.PRODUCT_ID; // Product must be non-null
return null;    // Looks good.. don't call super (date is not required here)]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6189">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingApTrx(record);
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingInventory(record);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6190">
		<LastChanged>2012-04-12T11:47:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>initBookingInventory</MethodName>
		<LogicDescription><![CDATA[Reduce the internal inventory before sending the booking request.
@param record The BookingDetail record.
@return The error code.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>ProductRequest</MethodClassName>
		<LogicSource><![CDATA[BookingDetailModel recBookingDetail = (BookingDetailModel)record; 
int iErrorCode = DBConstants.NORMAL_RETURN;
ProductModel product = recBookingDetail.getProduct();
// This next line UPDATES the inventory and returns a (unusable) response message with an error code.
if (!(((MessageTransport)((ReferenceField)recBookingDetail.getField(BookingDetailModel.INVENTORY_MESSAGE_TRANSPORT_ID)).getReference()).isDirectTransport()))
    return DBConstants.NORMAL_RETURN; // No need to check inventory if this is not taking from the direct inventory
BaseProductResponse response = (BaseProductResponse)((BaseMessage)product.processAvailabilityRequestInMessage(this.getMessage(), null, (BaseField)record.getCounterField())).getMessageDataDesc(null);
if (response.getMessageDataStatus() != BaseDataStatusModel.VALID)
{
    iErrorCode = DBConstants.ERROR_RETURN;
    if (((Record)recBookingDetail).getRecordOwner() != null)
        if (((Record)recBookingDetail).getRecordOwner().getTask() != null)
            iErrorCode = ((Record)recBookingDetail).getRecordOwner().getTask().setLastError((response.getMessageDataError()));
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6191">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingApTrx(record);
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingInventory(record);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6192">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingApTrx(record);
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingInventory(record);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6193">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingApTrx(record);
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingInventory(record);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6194">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingApTrx(record);
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingInventory(record);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6195">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingApTrx(record);
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingInventory(record);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6196">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingApTrx(record);
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingInventory(record);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6197">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemBookingRequest</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingApTrx(record);
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingInventory(record);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6198">
		<LastChanged>2012-04-06T16:42:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>updateAvailability</MethodName>
		<LogicDescription><![CDATA[For the current record, update the availability using this amount
@param iTargetAmount Amount to reduce the inventory by.
@param fldTrxID The (BookingDetail) trx to tie this inventory to
@param iType Option type (ie., room type)
@param bDelete If true, delete this inventory
@param mapSurvey If a changed transaction is contained in this map, remove it
@return Error code]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>int iTargetAmount, Field fldTrxID, int iType, boolean bDelete, Set&lt;Integer&gt; setSurvey</MethodInterface>
		<MethodClassName>Inventory</MethodClassName>
		<LogicSource><![CDATA[Task task = null;
if (this.getRecordOwner() != null)
    task = this.getRecordOwner().getTask();
if ((this.getEditMode() == DBConstants.EDIT_NONE) || (this.getEditMode() == DBConstants.EDIT_ADD))
{
    if (task != null)
        return task.setLastError(task.getApplication().getResources(ResourceConstants.ERROR_RESOURCE, true).getString("No current record")); // Must have a current record
    else
        return DBConstants.ERROR_RETURN;
}
int iOldOpenMode = this.getOpenMode();
try {
    this.setOpenMode(iOldOpenMode & ~DBConstants.OPEN_READ_ONLY);   // Allow write (I don't know where this file has been)
    this.edit();
    int iOldTotal = (int)this.getField(Inventory.USED).getValue();
    int iOldAmount = 0;
    if (bDelete)
        iTargetAmount = 0;
    InventoryDetail recInventoryDetail = this.getInventoryDetail();
    
    recInventoryDetail.addNew();
    recInventoryDetail.setKeyArea(InventoryDetail.INVENTORY_ID_KEY);
    recInventoryDetail.getField(InventoryDetail.INVENTORY_ID).moveFieldToThis((BaseField)this.getCounterField());
    recInventoryDetail.getField(InventoryDetail.BOOKING_DETAIL_ID).moveFieldToThis((BaseField)fldTrxID);
    recInventoryDetail.getField(InventoryDetail.TYPE).setValue(iType);
    boolean bFound = recInventoryDetail.seek(null);
    if (bFound)
        iOldAmount = (int)recInventoryDetail.getField(InventoryDetail.AMOUNT).getValue();
    if (this.getField(Inventory.AVAILABLE).getValue() < (iTargetAmount - iOldAmount))
    {
        if (task != null)
            return task.setLastError(task.getApplication().getResources(ResourceConstants.BOOKING_RESOURCE, true).getString("Not sufficent inventory"));   // Insufficient inventory
        else
            return DBConstants.ERROR_RETURN;
    }
    if (bFound)
    {
        if (setSurvey != null)
            setSurvey.remove((Integer)recInventoryDetail.getCounterField().getData());
        recInventoryDetail.edit();
        recInventoryDetail.getField(InventoryDetail.AMOUNT).setValue(iTargetAmount);
        if ((bDelete) || (iTargetAmount == 0))
            recInventoryDetail.remove();
        else
            recInventoryDetail.set();
    }
    else
    {
        recInventoryDetail.addNew();
        recInventoryDetail.getField(InventoryDetail.INVENTORY_ID).moveFieldToThis((BaseField)this.getCounterField());
        recInventoryDetail.getField(InventoryDetail.BOOKING_DETAIL_ID).moveFieldToThis((BaseField)fldTrxID);
        recInventoryDetail.getField(InventoryDetail.TYPE).setValue(iType);
        recInventoryDetail.getField(InventoryDetail.AMOUNT).setValue(iTargetAmount);
        if (!bDelete)
            recInventoryDetail.add();
    }

    this.getField(Inventory.USED).setValue(iOldTotal - iOldAmount + iTargetAmount);
    this.set();
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    this.setOpenMode(iOldOpenMode);   // Set it back
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="6199">
		<LastChanged>2012-01-25T17:18:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getInventoryDetail</MethodName>
		<LogicDescription/>
		<MethodReturns>InventoryDetail</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Inventory</MethodClassName>
		<LogicSource><![CDATA[if (m_recInventoryDetail == null)
{
    m_recInventoryDetail = new InventoryDetail(this.findRecordOwner());
}
return m_recInventoryDetail;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6200">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Inventory</MethodClassName>
		<LogicSource><![CDATA[if (m_recInventoryDetail != null)
    m_recInventoryDetail.free();
m_recInventoryDetail = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6201">
		<LastChanged>2012-04-06T16:43:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>removeInventory</MethodName>
		<LogicDescription><![CDATA[Remove the inventory for this BookingDetail trxID.
(Deletes the links, and adds the inventory back)]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Field fldTrxID</MethodInterface>
		<MethodClassName>Inventory</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
Task task = null;
if (this.getRecordOwner() != null)
    task = this.getRecordOwner().getTask();

InventoryDetail recInventoryDetail = this.getInventoryDetail();
recInventoryDetail.setKeyArea(InventoryDetail.BOOKING_DETAIL_ID_KEY);
SubFileFilter listener = null;
recInventoryDetail.addListener(listener = new SubFileFilter((BaseField)fldTrxID, InventoryDetail.BOOKING_DETAIL_ID, null, null, null, null));
try {
	recInventoryDetail.close();
	while (recInventoryDetail.hasNext())
	{
		recInventoryDetail.next();
		recInventoryDetail.edit();
		
		this.setKeyArea(Inventory.ID_KEY);
		this.getField(Inventory.ID).moveFieldToThis(recInventoryDetail.getField(InventoryDetail.INVENTORY_ID));
		if (!this.seek(null))
		{	// Never
            if (task != null)
                return task.setLastError(task.getApplication().getResources(ResourceConstants.BOOKING_RESOURCE, true).getString("Could not remove inventory"));   // Insufficient inventory
            else
                return DBConstants.ERROR_RETURN;
		}
		int iTargetAmount = (int)recInventoryDetail.getField(InventoryDetail.AMOUNT).getValue();
        this.edit();
        this.getField(Inventory.USED).setValue(this.getField(Inventory.USED).getValue() - iTargetAmount);    
        this.set();

		
		recInventoryDetail.remove();
	}
} catch (DBException ex) {
	ex.printStackTrace();
} finally {
	recInventoryDetail.removeListener(listener, true);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="6202">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>InventoryDetailGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>InventoryDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6203">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailGridScreen</MethodClassName>
		<LogicSource>return new InventoryDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6204">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6205">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailGridScreen</MethodClassName>
		<LogicSource>return new Inventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6206">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new BookingDetail(this);
new Booking(this);
new Tour(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6207">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(InventoryDetail.BOOKING_DETAIL_ID).addListener(new ReadSecondaryHandler(this.getRecord(BookingDetail.BOOKING_DETAIL_FILE)));
this.getRecord(BookingDetail.BOOKING_DETAIL_FILE).getField(BookingDetail.BOOKING_ID).addListener(new ReadSecondaryHandler(this.getRecord(Booking.BOOKING_FILE)));
this.getRecord(Booking.BOOKING_FILE).getField(Booking.TOUR_ID).addListener(new ReadSecondaryHandler(this.getRecord(Tour.TOUR_FILE)));
this.setEnabled(false);	// Can't change anything
this.setAppending(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6208">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>InventoryDetailScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>InventoryDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6209">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailScreen</MethodClassName>
		<LogicSource>return new InventoryDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6210">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailScreen</MethodClassName>
		<LogicSource>return new Inventory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6211">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new BookingDetail(this);
new Booking(this);
new Tour(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6212">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(InventoryDetail.BOOKING_DETAIL_ID).addListener(new ReadSecondaryHandler(this.getRecord(BookingDetail.BOOKING_DETAIL_FILE)));
this.getRecord(BookingDetail.BOOKING_DETAIL_FILE).getField(BookingDetail.BOOKING_ID).addListener(new ReadSecondaryHandler(this.getRecord(Booking.BOOKING_FILE)));
this.getRecord(Booking.BOOKING_FILE).getField(Booking.TOUR_ID).addListener(new ReadSecondaryHandler(this.getRecord(Tour.TOUR_FILE)));
this.setEnabled(false);	// Can't change anything
this.setAppending(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6213">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6214">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailScreen</MethodClassName>
		<LogicSource>return new InventoryHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6215">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailGridScreen</MethodClassName>
		<LogicSource>return new InventoryHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6216">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6217">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6218">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription><![CDATA[I added this method, so I can override it for other header screens
(see InventoryHeaderScreen)]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductHeaderScreen</MethodClassName>
		<LogicSource>return ((BaseScreen)this.getParentScreen()).getHeaderRecord();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6219">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6220">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6221">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6222">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6223">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetailScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6224">
		<LastChanged>2012-03-27T16:44:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryDetail</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(INVENTORY_DETAIL_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DETAIL_MODE) == ScreenConstants.DETAIL_MODE)
{
    if ((this.getEditMode() == DBConstants.EDIT_CURRENT) || (this.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
    {
        Record recBookingDetail = new BookingDetail(this.findRecordOwner());
        recBookingDetail.getField(BookingDetail.ID).moveFieldToThis(this.getField(InventoryDetail.BOOKING_DETAIL_ID));
        try {
            if (recBookingDetail.seek(null))
            {
                recBookingDetail = recBookingDetail.getTable().getCurrentTable().getRecord();
                screen = recBookingDetail.makeScreen(itsLocation, parentScreen, ScreenConstants.MAINT_MODE, properties);
            }
        } catch (DBException ex) {
            ex.printStackTrace();
        }
    }
}
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    screen = Record.makeNewScreen(INVENTORY_DETAIL_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6225">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InventoryField</MethodClassName>
		<LogicSource>return new Inventory(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6226">
		<LastChanged>2012-04-06T16:41:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>surveyInventory</MethodName>
		<LogicDescription>Get all the transaction IDs for this BookingDetail trx ID.</LogicDescription>
		<MethodReturns>Set&lt;Integer&gt;</MethodReturns>
		<MethodInterface>Field fldTrxID</MethodInterface>
		<MethodClassName>Inventory</MethodClassName>
		<LogicSource><![CDATA[if (fldTrxID == null)
    return null;
Set<Integer> setSurvey = new HashSet<Integer>();
InventoryDetail recInventoryDetail = this.getInventoryDetail();
recInventoryDetail.setKeyArea(InventoryDetail.BOOKING_DETAIL_ID_KEY);
SubFileFilter listener = null;
recInventoryDetail.addListener(listener = new SubFileFilter((BaseField)fldTrxID, InventoryDetail.BOOKING_DETAIL_ID, null, null, null, null));
try {
    recInventoryDetail.close();
    while (recInventoryDetail.hasNext())
    {
        recInventoryDetail.next();
        
        setSurvey.add((Integer)recInventoryDetail.getCounterField().getData());
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    recInventoryDetail.removeListener(listener, true);
}
return setSurvey;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="6227">
		<LastChanged>2012-04-06T10:26:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>removeTrxs</MethodName>
		<LogicDescription>Remove the transactions contained in this map</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Field fldTrxID, Set&lt;Integer&gt; setSurvey</MethodInterface>
		<MethodClassName>Inventory</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
if (setSurvey != null)
    if (setSurvey.size() > 0)
{
    Iterator<Integer> iterator = setSurvey.iterator();
    InventoryDetail recInventoryDetail = this.getInventoryDetail();
    while (iterator.hasNext())
    {
        try {
            recInventoryDetail.setKeyArea(InventoryDetail.ID_KEY);
            recInventoryDetail.addNew();
            recInventoryDetail.getField(InventoryDetail.ID).setData(iterator.next());
            if (recInventoryDetail.seek(null))
            {
                int iTargetAmount = 0;
                int iType = (int)recInventoryDetail.getField(InventoryDetail.TYPE).getValue();
                boolean bDelete = true;
                Inventory recInventory = (Inventory)((ReferenceField)recInventoryDetail.getField(InventoryDetail.INVENTORY_ID)).getReference();
                iErrorCode = recInventory.updateAvailability(iTargetAmount, fldTrxID, iType, bDelete, null);
                if (iErrorCode != DBConstants.NORMAL_RETURN)
                    return iErrorCode;
            }
        } catch (DBException ex) {
            ex.printStackTrace();
        }
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="6228">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getDisplayMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourStatusUpdateHandler</MethodClassName>
		<LogicSource><![CDATA[String strMessage = null;

Record recBaseStatus = this.getOwner().getRecord();
BaseField fldStatusID = recBaseStatus.getReferringField();
Record recTour = fldStatusID.getRecord(); 
TourStatusSummaryField fldTourStatusSummary = (TourStatusSummaryField)recTour.getField(Tour.TOUR_STATUS_SUMMARY);
String strSource = null;
String strKey = fldTourStatusSummary.getHighStatusKey();
if (strKey != null)
{
    int iDot = strKey.indexOf('.');
    if (iDot != 0)
    {
        String strType = strKey.substring(0, iDot);
        String strDetailID = strKey.substring(iDot+1);
        BookingDetail recBookingDetail = new BookingDetail(recTour.findRecordOwner());
        try {
            recBookingDetail.getField(BookingDetail.ID).setString(strDetailID);
            if (recBookingDetail.seek(null))
            {
                String strErrorKey = recBookingDetail.getFieldParam(recBookingDetail.getField(strType));
                strErrorKey = strErrorKey + '.' + BookingDetail.MESSAGE_PARAM + '.' + BookingDetail.ERROR_PARAM;
                strMessage = ((PropertiesField)recBookingDetail.getField(BookingDetail.ERROR_PROPERTIES)).getProperty(strErrorKey);
                strSource = recBookingDetail.getField(BookingDetail.PRODUCT_TYPE) + " - " + recBookingDetail.getField(BookingDetail.DESCRIPTION);
            }
        } catch (DBException ex) {
            ex.printStackTrace();
        } finally {
            recBookingDetail.free();
        }
    }
}
if (strMessage != null)
    strMessage = strMessage + " (" + strSource + ")";
else
    strMessage = this.getOwner().getRecord().getField(TourStatus.DESCRIPTION).toString();
if (strMessage == null)
    strMessage = super;
return strMessage;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6231">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourApTrxGridScreen</MethodClassName>
		<LogicSource>return this.getRecord(Tour.TOUR_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6232">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = super.addToolbars();
/*
ToolScreen toolbar2 = new EmptyToolbar(this.getNextLocation(ScreenConstants.LAST_LOCATION, ScreenConstants.DONT_SET_ANCHOR), this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);

Converter converter = null;
converter = recTour.getField(Tour.TOTAL_COST);
ScreenField sField = (ScreenField)converter.setupDefaultView(toolbar.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolbar, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
*/
return toolbar;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6233">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.ITIN_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6234">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinalizeHandler</MethodClassName>
		<LogicSource><![CDATA[if (this.getOwner().getRecord().getField(Tour.FINALIZED).getState() == true)
    ((Tour)this.getOwner().getRecord()).updateTourApTrx(null, null);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6235">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinalizeHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6236">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>orderAllComponents</MethodName>
		<LogicDescription>Order all the components for this tour.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Tour</MethodClassName>
		<LogicSource><![CDATA[if (this.getField(Tour.ORDER_COMPONENTS).getState() == false)
    return;
BookingDetail recBookingDetail = new BookingDetail(this.findRecordOwner());
try {
    recBookingDetail.addListener(new SubFileFilter(this));
    while (recBookingDetail.hasNext())
    {
        recBookingDetail.next();
        Record recBookingDetailCurrent = recBookingDetail.getTable().getCurrentTable().getRecord();
        recBookingDetailCurrent.edit();
        recBookingDetailCurrent.getField(BookingDetail.PRODUCT_STATUS_REQUEST).setData(Boolean.TRUE);
        if (recBookingDetailCurrent.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
            recBookingDetailCurrent.set();   // Possible that the listeners re-wrote this record already.
    }
} catch (DBException ex) {
    recBookingDetail.free();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6237">
		<LastChanged>2012-04-01T08:48:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,600</Sequence>
		<MethodName>linkBookingDetailToApTrx</MethodName>
		<LogicDescription><![CDATA[Read or Create the ApTrx record for this BookingDetail
and link the BookingDetail to it.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BookingDetailModel recBookingDetail</MethodInterface>
		<MethodClassName>ApTrx</MethodClassName>
		<LogicSource><![CDATA[if ((recBookingDetail == null)
    || (recBookingDetail.getEditMode() == DBConstants.EDIT_ADD)
    || (recBookingDetail.getEditMode() == DBConstants.EDIT_NONE)
    || (!recBookingDetail.getField(BookingDetailModel.AP_TRX_ID).isNull()))
        return DBConstants.ERROR_RETURN;
// Record is current and aptrx is null.
Vendor recVendor = (Vendor)((ReferenceField)recBookingDetail.getField(BookingDetailModel.VENDOR_ID)).getReference();
if ((recVendor == null)
    || (recVendor.getEditMode() == DBConstants.EDIT_ADD)
    || (recVendor.getEditMode() == DBConstants.EDIT_NONE))
        return DBConstants.ERROR_RETURN;

int iOldOpenMode = this.getOpenMode();
try {
    if (this.getListener(UpdateDepEstHandler.class) == null)
        this.addListener(new UpdateDepEstHandler(null));
    this.setOpenMode(iOldOpenMode & ~DBConstants.OPEN_READ_ONLY);   // Allow write (I don't know where this file has been)
    this.addNew();  // Each A/P Trx contains one detail item
    if (OperationTypeField.INDIVIDUALLY_CODE.equalsIgnoreCase(recVendor.getField(Vendor.OPERATION_TYPE_CODE).toString()))
        this.addNew();  // Each A/P Trx contains one detail item
    else
    { // OperationTypeField.ALL_TOGETHER_CODE or OperationTypeField.LIKE_TOGETHER_CODE
        this.getField(ApTrx.TOUR_ID).moveFieldToThis((BaseField)recBookingDetail.getField(BookingDetailModel.TOUR_ID));
        this.getField(ApTrx.VENDOR_ID).moveFieldToThis(recVendor.getField(Vendor.ID));
        if (OperationTypeField.LIKE_TOGETHER_CODE.equalsIgnoreCase(recVendor.getField(Vendor.OPERATION_TYPE_CODE).toString()))
            this.getField(ApTrx.PRODUCT_TYPE_ID).moveFieldToThis((BaseField)recBookingDetail.getField(BookingDetailModel.PRODUCT_TYPE_ID));
        if ((this.seek(">="))
            && (this.getField(ApTrx.TOUR_ID).equals(recBookingDetail.getField(BookingDetailModel.TOUR_ID)))
                && (this.getField(ApTrx.VENDOR_ID).equals(recVendor.getField(Vendor.ID))))
        {
            if ((OperationTypeField.LIKE_TOGETHER_CODE.equalsIgnoreCase(recVendor.getField(Vendor.OPERATION_TYPE_CODE).toString()))
                && (!this.getField(ApTrx.PRODUCT_TYPE_ID).equals(recBookingDetail.getField(BookingDetailModel.PRODUCT_TYPE_ID))))
                    this.addNew();
        }
        else
            this.addNew();
    }
    if (this.getEditMode() == DBConstants.EDIT_ADD)
        this.addNewApTrx((BaseField)recBookingDetail.getField(BookingDetailModel.TOUR_ID), recVendor, (int)recBookingDetail.getField(BookingDetailModel.PRODUCT_TYPE_ID).getValue());

    recBookingDetail.getTable().edit();
    ((BaseField)recBookingDetail.getField(BookingDetailModel.AP_TRX_ID)).moveFieldToThis(this.getField(ApTrx.ID));
    ((Record)recBookingDetail).writeAndRefresh();   // Possible that the listeners re-wrote this record already.

    this.edit();
    this.addBookingDetailInfo(recBookingDetail);
    this.set();
    
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    this.setOpenMode(iOldOpenMode);   // Set it back
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6239">
		<LastChanged>2012-04-01T08:49:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>addBookingDetailInfo</MethodName>
		<LogicDescription>Add the information from this BookingDetail to this ApTrx.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>BookingDetailModel recBookingDetail</MethodInterface>
		<MethodClassName>ApTrx</MethodClassName>
		<LogicSource><![CDATA[double dProductCost = this.getField(ApTrx.DEPARTURE_ESTIMATE).getValue();
dProductCost += recBookingDetail.getField(BookingDetailModel.TOTAL_COST).getValue();
this.getField(ApTrx.DEPARTURE_ESTIMATE).setValue(dProductCost);
double dProductCostLocal = this.getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL).getValue();
dProductCostLocal += recBookingDetail.getField(BookingDetailModel.TOTAL_COST_LOCAL).getValue();
this.getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL).setValue(dProductCostLocal);
if (dProductCostLocal != 0)
    this.getField(ApTrx.DEPARTURE_EXCHANGE).setValue(dProductCost / dProductCostLocal);

String strServiceDesc = this.getField(ApTrx.DESCRIPTION).getString();
if (strServiceDesc.length() > 0)
    strServiceDesc += ", ";
strServiceDesc += recBookingDetail.getProductDesc();
this.getField(ApTrx.DESCRIPTION).setString(strServiceDesc);

Date dateStart = ((DateField)this.getField(ApTrx.START_SERVICE_DATE)).getDateTime();
Date dateEnd = ((DateField)this.getField(ApTrx.END_SERVICE_DATE)).getDateTime();
Date date = recBookingDetail.getStartDate();
if ((dateStart == null) || (date.getTime() < dateStart.getTime()))
    dateStart = date;
date = recBookingDetail.getEndDate();
if ((dateEnd == null) || (date.getTime() > dateEnd.getTime()))
    dateEnd = date;
((DateField)this.getField(ApTrx.START_SERVICE_DATE)).setDate(dateStart, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
((DateField)this.getField(ApTrx.END_SERVICE_DATE)).setDate(dateEnd, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);

this.getField(ApTrx.FINALIZATION_DATE).setValue(DateTimeField.currentTime());

if (this.getField(ApTrx.VENDOR_ID).isNull())
    if (dProductCost == 0.0)
{   // Special case - This booking detail is a place holder such as a tour component
    TrxStatus recTrxStatus = (TrxStatus)((ReferenceField)this.getField(ApTrx.TRX_STATUS_ID)).getReferenceRecord();
    int iTrxStatusID = recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.NO_VOUCHER);
    this.getField(ApTrx.TRX_STATUS_ID).setValue(iTrxStatusID);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6240">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTourStatusSummaryHandler</MethodClassName>
		<LogicSource><![CDATA[Record recTour = this.getOwner().getRecord();
if (recTour.getField(Tour.MANUAL_TOUR_STATUS).getState() == false)
{
    int iStatus = BaseDataStatus.NO_STATUS;
    String strKey = ((TourStatusSummaryField)this.getOwner()).getHighStatusKey();
    if (strKey != null)
    {
        String strValue = ((TourStatusSummaryField)this.getOwner()).getProperty(strKey);
        iStatus = ((TourStatusSummaryField)this.getOwner()).getStatusFromProperty(strValue);
    }
    if (iStatus == BaseDataStatus.OKAY)
        if (this.getOwner().getRecord().getField(Tour.ORDER_COMPONENTS).getState() == false)
            iStatus = BaseDataStatus.DATA_VALID;
    if (this.getOwner().getRecord().getField(Tour.CANCELLED).getState() == true)
    {
        TourStatusSummaryField field = (TourStatusSummaryField)this.getOwner();
        Map<String,Object> map = field.getProperties();
        boolean bAllCancelled = true;
        for (String key : map.keySet())
        {
            if ("ProductStatusID".equalsIgnoreCase(field.getStatusFromKey(key)))
            {
                String strValue = (String)map.get(key);
                if (field.getStatusFromProperty(strValue) != BaseDataStatus.CANCELED)
                    bAllCancelled = false;
            }
        }
        if (bAllCancelled)
            iStatus = BaseDataStatus.CANCELED;
    }
    recTour.getField(Tour.TOUR_STATUS_ID).setValue(iStatus,  bDisplayOption, iMoveMode);
    if (iMoveMode == DBConstants.INIT_MOVE)
        recTour.getField(Tour.TOUR_STATUS_ID).setModified(false);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6242">
		<LastChanged>2012-02-01T04:55:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdateTourStatusHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>String iFieldSeq</MethodInterface>
		<MethodClassName>UpdateTourStatusHandler</MethodClassName>
		<LogicSource><![CDATA[super;
m_iFieldSeq = iFieldSeq;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6243">
		<LastChanged>2012-04-06T00:52:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTourStatusHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_ADD_TYPE) || (iChangeType == DBConstants.AFTER_UPDATE_TYPE) || (iChangeType == DBConstants.AFTER_DELETE_TYPE))
{
    BookingDetail recBookingDetail = (BookingDetail)this.getOwner();
    BaseField fieldTarget = recBookingDetail.getField(m_iFieldSeq);
    if ((iChangeType == DBConstants.AFTER_DELETE_TYPE) || (fieldTarget.isModified()))
    {                
        Record recTour = null;
        Booking recBooking = (Booking)recBookingDetail.getBooking(false);
        // Do a special check - if the Booking's tour IS this detail's tour and it is current and locked, use that one.
        if (recBooking != null)
            if ((recBooking.getEditMode() == DBConstants.EDIT_CURRENT) || (recBooking.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
                if (recBooking.getField(Booking.TOUR_ID).equals(recBookingDetail.getField(BookingDetail.TOUR_ID)))
                    recTour = ((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
        
        boolean bUpdateTourNow = true;
        if ((recTour == null) || ((recTour.getEditMode() != DBConstants.EDIT_IN_PROGRESS) && (recTour.getEditMode() != DBConstants.EDIT_CURRENT)))
            recTour = ((ReferenceField)recBookingDetail.getField(BookingDetail.TOUR_ID)).getReference();
        else
            bUpdateTourNow = false;
        if ((recTour != null)
            && ((recTour.getEditMode() == DBConstants.EDIT_CURRENT) || (recTour.getEditMode() == DBConstants.EDIT_IN_PROGRESS)))
        {   // Always
            try {
                if ((recTour.getOpenMode() & DBConstants.OPEN_READ_ONLY) == DBConstants.OPEN_READ_ONLY)
                    recTour.setOpenMode(recTour.getOpenMode() & ~DBConstants.OPEN_READ_ONLY);
                    if ((recTour.getOpenMode() & DBConstants.LOCK_STRATEGY_MASK) == DBConstants.OPEN_NO_LOCK_STRATEGY)
                        recTour.setOpenMode(recTour.getOpenMode() | DBConstants.OPEN_LOCK_ON_CHANGE_STRATEGY);
                if (!bUpdateTourNow)
                    UpdateOnCloseHandler.addUpdateOnCloseHandler(recBooking, recTour, false, true, true);   // Make sure recTour is updated whenever booking is
                recTour.edit();
                ((TourStatusSummaryField)recTour.getField(Tour.TOUR_STATUS_SUMMARY)).setDetailProperty(recBookingDetail, m_iFieldSeq, iChangeType);
                if (bUpdateTourNow)
                    recTour.set();
            } catch (DBException ex) {
                ex.printStackTrace();
            }
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6244">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdateTourStatusSummaryHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateTourStatusSummaryHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6245">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcLineFieldsHandler</MethodClassName>
		<LogicSource><![CDATA[Record recBookingLine = this.getOwner().getRecord();
double dPrice = recBookingLine.getField(BookingLine.PRICE).getValue();
double dQuantity = recBookingLine.getField(BookingLine.QUANTITY).getValue();
double dCommissionRate = recBookingLine.getField(BookingLine.COMMISSION_RATE).getValue();
double dGross = Math.floor(dPrice * dQuantity * 100 + 0.5) / 100;
double dCommission = Math.floor(dGross * dCommissionRate * 100 + 0.5) / 100;
double dNet = dGross - dCommission;
recBookingLine.getField(BookingLine.GROSS).setValue(dGross);
recBookingLine.getField(BookingLine.COMMISSION).setValue(dCommission);
recBookingLine.getField(BookingLine.NET).setValue(dNet);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6246">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CalcActionDateHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcActionDateHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6247">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcActionDateHandler</MethodClassName>
		<LogicSource><![CDATA[Tour recTour = (Tour)this.getOwner().getRecord();
if (recTour.getEditMode() == DBConstants.EDIT_CURRENT)
{
    if ((recTour.getOpenMode() | DBConstants.LOCK_STRATEGY_MASK) == 0)
        recTour.setOpenMode(recTour.getOpenMode() | DBConstants.OPEN_LOCK_ON_EDIT_STRATEGY);   // Error if already locked
    try {
        if (recTour.edit() != DBConstants.NORMAL_RETURN)
            return DBConstants.NORMAL_RETURN;   // No problem - already locked
    } catch (DBException ex) {
        ex.printStackTrace();
        return DBConstants.NORMAL_RETURN;
    }
}
if (recTour.getListener(UpdateOnCloseHandler.class) == null)
    recTour.addListener(new UpdateOnCloseHandler(null)); // Make sure this is updated

BaseField actionType = recTour.getField(Tour.TOUR_EVENT_ID);
actionType.setValue(TourEvent.NO_EVENT);
recTour.getField(Tour.NEXT_EVENT_DATE).setToLimit(DBConstants.END_SELECT_KEY);
BaseField actionDate = recTour.getField(Tour.NEXT_EVENT_DATE);

if (recTour.getField(Tour.DEPARTED).getState() == false)
    if (recTour.getField(Tour.DEPARTURE_DATE).compareTo(actionDate) <= 0)
{
    actionDate.moveFieldToThis(recTour.getField(Tour.DEPARTURE_DATE));
    actionType.setValue(TourEvent.DEPARTURE);
}

if (recTour.getField(Tour.SP_1).getState() == false)
    if (recTour.getField(Tour.SP_1_DATE).compareTo(actionDate) <= 0)
{
    actionDate.moveFieldToThis(recTour.getField(Tour.SP_1_DATE));
    actionType.setValue(TourEvent.SPECIAL_1);
}

if (recTour.getField(Tour.SP_2).getState() == false)
    if (recTour.getField(Tour.SP_2_DATE).compareTo(actionDate) <= 0)
{
    actionDate.moveFieldToThis(recTour.getField(Tour.SP_2_DATE));
    actionType.setValue(TourEvent.SPECIAL_2);
}

if (recTour.getField(Tour.TICKETS).getState() == false)
    if (recTour.getField(Tour.TICKET_DATE).compareTo(actionDate) <= 0)
{
    actionDate.moveFieldToThis(recTour.getField(Tour.TICKET_DATE));
    actionType.setValue(TourEvent.TICKETING);
}

if (recTour.getField(Tour.FINAL_DOCS).getState() == false)
    if (recTour.getField(Tour.FINAL_DOC_DATE).compareTo(actionDate) <= 0)
{
    actionDate.moveFieldToThis(recTour.getField(Tour.FINAL_DOC_DATE));
    actionType.setValue(TourEvent.FINAL_DOCS);
}

if (recTour.getField(Tour.FINALIZED).getState() == false)
    if (recTour.getField(Tour.FINALIZE_DATE).compareTo(actionDate) <= 0)
{
    actionDate.moveFieldToThis(recTour.getField(Tour.FINALIZE_DATE));
    actionType.setValue(TourEvent.FINALIZATION);
}

if (recTour.getField(Tour.CLOSED).getState() == false)
    if (recTour.getField(Tour.CLOSED_DATE).compareTo(actionDate) <= 0)
{
    actionDate.moveFieldToThis(recTour.getField(Tour.CLOSED_DATE));
    actionType.setValue(TourEvent.TOUR_CLOSED);
}

if (recTour.getField(Tour.ORDER_COMPONENTS).getState() == false)
    if (recTour.getField(Tour.ORDER_COMP_DATE).compareTo(actionDate) <= 0)
{
    actionDate.moveFieldToThis(recTour.getField(Tour.ORDER_COMP_DATE));
    actionType.setValue(TourEvent.ORDER_COMPONENTS);
}

return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6248">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GetDepartureDateHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>TourField fldTourID</MethodInterface>
		<MethodClassName>GetDepartureDateHandler</MethodClassName>
		<LogicSource><![CDATA[super;
m_fldTourID = fldTourID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6249">
		<LastChanged>2012-03-31T23:09:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doGetData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetDepartureDateHandler</MethodClassName>
		<LogicSource><![CDATA[Object data = super;
if (m_fldTourID != null)
{
    Record recTour = m_fldTourID.getReferenceRecord();
    if ((ApTrx.TOUR_ID_KEY.equals(this.getOwner().getRecord().getDefaultKeyName()))
        && ((this.getOwner().getRecord().getListener(SubFileFilter.class) != null))
            && (recTour != null)
                && (!m_fldTourID.equals(recTour.getCounterField())))
                    recTour = null;
                else
                    m_fldTourID.getReference();
    if (recTour != null)
        if ((recTour.getEditMode() == DBConstants.EDIT_CURRENT) || (recTour.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
            data = recTour.getField(TourModel.DEPARTURE_DATE).getData();
}
return data;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6250">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventHandler</MethodClassName>
		<LogicSource><![CDATA[if (this.getOwner() instanceof BooleanField)
    if (this.getOwner().getState() == true)
{
    this.triggerEvent(m_iTourEventID, 0);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6251">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourEventHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>int iTourEventID</MethodInterface>
		<MethodClassName>TourEventHandler</MethodClassName>
		<LogicSource><![CDATA[super;

m_iTourEventID = iTourEventID;

this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6252">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourStatusEventHandler</MethodClassName>
		<LogicSource><![CDATA[int iTourStatus = (int)this.getOwner().getValue();
if (iTourStatus == TourStatus.OKAY)
    this.getOwner().getRecord().getField(Tour.SERV_CONF).setState(true, bDisplayOption, iMoveMode);    // Trigger the services confirmed event
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6254">
		<LastChanged>2012-04-12T17:25:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>triggerEvent</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iTourEventID, int iBaseStatusID</MethodInterface>
		<MethodClassName>TourEventHandler</MethodClassName>
		<LogicSource><![CDATA[Record recTarget = this.getOwner().getRecord();
if (recTarget.getEditMode() == DBConstants.EDIT_NONE)
    return;     // Never
BookingModel recBooking = null;
TourModel recTour = null;
if (recTarget instanceof BookingModel)
{
    recBooking = (BookingModel)recTarget;
    recTour = (TourModel)((ReferenceField)recBooking.getField(BookingModel.TOUR_ID)).getReference();
}
else if (recTarget instanceof TourModel)
{
    recTour = (TourModel)recTarget;
}
else
{
    // Never - error
}
Record recTourHeader = ((ReferenceField)recTour.getField(TourModel.TOUR_HEADER_ID)).getReference();
Record recTourClass = ((ReferenceField)recTourHeader.getField(TourHeaderModel.TOUR_CLASS_ID)).getReference();

TourEventSchedule recTourEventSchedule = (TourEventSchedule)recTour.getTourEventSchedule();
if (recTourEventSchedule.getListener(SubFileFilter.class) != null)
{   // Already in use
    recTourEventSchedule = new TourEventSchedule(((Record)recTour).findRecordOwner()); 
}
CompareFileFilter listener2 = new CompareFileFilter(TourEventSchedule.TOUR_EVENT_ID, Integer.toString(iTourEventID), DBConstants.EQUALS, null, false);
recTourEventSchedule.addListener(listener2);
try {

    boolean bFirstTime = true;
    boolean bBaseClass = true;
    while ((recTourClass != null ) && (recTourClass.getEditMode() == DBConstants.EDIT_CURRENT))
    {
        SubFileFilter listener1 = new SubFileFilter(recTourClass);
        recTourEventSchedule.addListener(listener1);
        recTourEventSchedule.close();
        while (recTourEventSchedule.hasNext())
        {
            recTourEventSchedule.next();
            if (!bBaseClass)
            {
                if (recTourEventSchedule.getField(TourEventSchedule.TOUR_CLASS_ONLY).getState() == true)
                    continue;   // This event runs for the base class only
            }
            if (bFirstTime)
            {
                recTarget.writeAndRefresh();
                bFirstTime = false;
            }
            if (iTourEventID == TourEvent.BOOKING_STATUS)
                if (recTourEventSchedule.getField(TourEventSchedule.BOOKING_STATUS_ID).getValue() != iBaseStatusID)
                    continue;   // Not the right booking status
            recTourEventSchedule.doAction(recTarget);
        }
        bBaseClass = false;
        recTourEventSchedule.removeListener(listener1, true);
        recTourClass = ((ReferenceField)recTourClass.getField(TourClassModel.BASED_CLASS_ID)).getReference();
    }
    if (!bFirstTime)
        recTarget.writeAndRefresh();
} catch (DBException ex) {
    ex.printStackTrace();
    return;
} finally {
    recTourEventSchedule.removeListener(listener2, true);
    recTourEventSchedule.close();
    if (recTourEventSchedule != recTour.getTourEventSchedule())
        recTourEventSchedule.free();    // This was a temp copy.
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6256">
		<LastChanged>2012-04-12T17:30:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingStatusEventHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bBookingModified = false;
String strKey = null;
Record recBooking = this.getOwner().getRecord();
int iOldOpenMode = recBooking.setOpenMode(recBooking.getOpenMode() & ~DBConstants.OPEN_READ_ONLY);
Record recBookingStatus = ((ReferenceField)this.getOwner()).getReference();
Stack<String> stack = new Stack<String>();
while ((recBookingStatus != null) && (recBookingStatus.getEditMode() == DBConstants.EDIT_CURRENT))
{
    strKey = "eventStatus." + recBookingStatus.getField(BookingStatus.DESCRIPTION).toString() + "." + recBookingStatus.getField(BookingStatus.ID).toString();
    if (BooleanField.YES.equals(((PropertiesField)recBooking.getField(BookingModel.PROPERTIES)).getProperty(strKey)))
        break;  // Done
    stack.push(strKey);
    if (BookingStatus.CANCELLED_CODE.equals(recBookingStatus.getField(BookingStatus.CODE).toString()))
        this.getOwner().getRecord().getField(BookingModel.CANCELLED).setState(true);
    recBookingStatus = ((ReferenceField)recBookingStatus.getField(BookingStatus.FOLLOWS_BOOKING_STATUS_ID)).getReference();
}
while (!stack.empty())
{
    strKey = stack.pop();
    int iBookingStatusID = Integer.parseInt(strKey.substring(strKey.lastIndexOf('.') + 1));
    
    this.triggerEvent(m_iTourEventID, iBookingStatusID);

    ((PropertiesField)recBooking.getField(BookingModel.PROPERTIES)).setProperty(strKey, BooleanField.YES);
    bBookingModified = true;
}
if (bBookingModified)
{
    try {
        recBooking.writeAndRefresh();
    } catch (DBException e) {
        e.printStackTrace();
    }
}
recBooking.setOpenMode(iOldOpenMode);

return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6257">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourActionTypeField</MethodClassName>
		<LogicSource><![CDATA[String[][] string = {
    {TRIGGER_EVENT, "Trigger Event"},
    {CREATE_DOCUMENT, "Create document"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6258">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>initField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourActionTypeField</MethodClassName>
		<LogicSource><![CDATA[if (m_objDefault == null)
    return this.setString(CREATE_DOCUMENT, bDisplayOption, Constants.INIT_MOVE);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6259">
		<LastChanged>2012-04-12T16:58:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doAction</MethodName>
		<LogicDescription><![CDATA[Do the action for the current record
@param recTarget The target booking or tour record for this action.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Record recTarget</MethodInterface>
		<MethodClassName>TourEventSchedule</MethodClassName>
		<LogicSource><![CDATA[BookingModel recBooking = null;
TourModel recTour = null;
if (recTarget instanceof BookingModel)
{
    recBooking = (BookingModel)recTarget;
    recTour = (TourModel)((ReferenceField)recBooking.getField(BookingModel.TOUR_ID)).getReference();
}
else if (recTarget instanceof TourModel)
{
    recTour = (TourModel)recTarget;
}
if (TourActionTypeField.TRIGGER_EVENT.equalsIgnoreCase(this.getField(TourEventSchedule.TOUR_ACTION_TYPE).toString()))
    return this.triggerEvent(recBooking, recTour);
if (TourActionTypeField.CREATE_DOCUMENT.equalsIgnoreCase(this.getField(TourEventSchedule.TOUR_ACTION_TYPE).toString()))
    return this.createDocument(recBooking, recTour);
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6260">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getDefaultScreenKeyArea</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEvent</MethodClassName>
		<LogicSource>return TourEvent.ID_KEY;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6261">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getDefaultScreenKeyArea</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName/>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6262">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandPricing</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(LandPricing.LAND_VARIES_ID).addListener(new ManualVariesDefaultCost(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6263">
		<LastChanged>2012-01-31T10:43:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ManualVariesDefaultCost</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;

if (!this.getOwner().isNull())
{
    Record recLandVaries = ((ReferenceField)this.getOwner()).getReference();
    if (recLandVaries != null)
    {
        String strVariesBy = recLandVaries.getField(LandVaries.VARIES_BY).toString();
        if ((VariesByField.MANUAL_FIXED.equals(strVariesBy))
            || (VariesByField.MANUAL_PER_PERSON.equals(strVariesBy))
            || (VariesByField.MANUAL_PER_ROOM.equals(strVariesBy)))
        {
            Record recLandPricing = this.getOwner().getRecord();
            if (recLandPricing.getField(LandPricing.COST).isNull())
                recLandPricing.getField(LandPricing.COST).setValue(1);
        }
    }
}

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6264">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ManualVariesDefaultCost</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6265">
		<LastChanged>2012-02-01T14:25:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getDisplayMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailStatusUpdateHandler</MethodClassName>
		<LogicSource><![CDATA[Record recBaseStatus = this.getOwner().getRecord();
BaseField fldStatusID = recBaseStatus.getReferringField();
Record recBookingDetail = fldStatusID.getRecord(); 
int iStatusID = (int)fldStatusID.getValue();
String strProperty = this.getFieldParam(fldStatusID);
String iFieldSeq = BookingDetail.INFO_STATUS_ID;
if (strProperty.indexOf(BookingDetail.COST_PARAM) != -1)
    iFieldSeq = BookingDetail.COST_STATUS_ID;
else if (strProperty.indexOf(BookingDetail.INVENTORY_PARAM) != -1)
    iFieldSeq = BookingDetail.INVENTORY_STATUS_ID;
else if (strProperty.indexOf(BookingDetail.PRODUCT_PARAM) != -1)
    iFieldSeq = BookingDetail.PRODUCT_STATUS_ID;

String strMessage = fldStatusID.getFieldTip();   // Default display = field help text
if (iStatusID != BaseStatus.MANUAL_REQUEST_REQUIRED)
{
    Map<String,Object> properties = ((PropertiesField)recBookingDetail.getField(BookingDetail.ERROR_PROPERTIES)).getProperties();
    if (properties != null)
    {
        String strErrorKey = this.getFieldParam(fldStatusID);
        strErrorKey = strErrorKey + '.' + BookingDetail.MESSAGE_PARAM + '.' + BookingDetail.ERROR_PARAM;
        strMessage = (String)properties.get(strErrorKey);
        
        RecordOwner recordOwner = recBookingDetail.findRecordOwner();
        PropertiesInput recProperties = new PropertiesInput(recordOwner);
        if (recordOwner != null)
            recordOwner.removeRecord(recProperties);
        recBookingDetail.addListener(new FreeOnFreeHandler(recProperties));
        Map<String,Object> mapKeyDescriptions = new Hashtable<String,Object>();
        Map<String,Object> propErrors = ((PropertiesField)recBookingDetail.getField(BookingDetail.ERROR_PROPERTIES)).getProperties();
        if (propErrors != null)
        {
            String strStartOfParam = this.getFieldParam(fldStatusID);
            strStartOfParam = strStartOfParam + '.' + BookingDetail.MESSAGE_PARAM + '.';
            for (String strKey : propErrors.keySet())
            {
                if (strKey.startsWith(strStartOfParam))
                    if (!strKey.equals(strErrorKey))
                {
                    String DESCRIPTION = ".Description";
                    if (strKey.endsWith(DESCRIPTION))
                    {
                        String strValue = (String)propErrors.get(strKey);
                        strKey = strKey.substring(0, strKey.length() - DESCRIPTION.length());
                        if (propErrors.get(strKey + ".VariesDesc") != null)
                            strValue = strValue + " (" + propErrors.get(strKey + ".VariesDesc") + ")";
                        mapKeyDescriptions.put(strKey, strValue);
                    }
                }                        
            }
        }
        if (mapKeyDescriptions.size() > 0)
        {
            // The following code says, try to recalculate the cost if the user changes the properties.
            FieldListener listener = null;
            recBookingDetail.getField(BookingDetail.PROPERTIES).addListener(listener = new InitOnChangeHandler(recBookingDetail.getField(iFieldSeq + BookingDetail.MESSAGE_KEY_OFFSET)));
            listener.setRespondsToMode(DBConstants.READ_MOVE, false);   // Usually, you only want to move a string on screen change
            listener.setRespondsToMode(DBConstants.INIT_MOVE, false);   // Usually, you only want to move a string on screen change
            recProperties.getField(PropertiesInput.KEY).addListener(new FieldRemoveBOnCloseHandler(listener));
            recBookingDetail.getField(BookingDetail.PROPERTIES).addListener(listener = new CopyDataHandler(recBookingDetail.getField(iFieldSeq + BookingDetail.MESSAGE_REQUEST_OFFSET), Boolean.TRUE, null));
            recProperties.getField(PropertiesInput.KEY).addListener(new FieldRemoveBOnCloseHandler(listener));
            // Display the properties editor
            recProperties.startEditor((PropertiesField)recBookingDetail.getField(BookingDetail.PROPERTIES), false, mapKeyDescriptions);
        }
    }
}
if (iStatusID == BaseStatus.MANUAL_REQUEST_REQUIRED)
{ // Force the manual request to be sent by setting the Manual=True param in the message header.
    strProperty += '.' + BookingDetail.MESSAGE_PARAM + '.' + BaseMessage.HEADER_TAG + '.' + MessageTransport.MANUAL_RESPONSE_PARAM;
    recBookingDetail.getField(iFieldSeq + BookingDetail.MESSAGE_KEY_OFFSET).setString(DBConstants.BLANK);     // Force message change
    String strValue = DBConstants.TRUE;
    ((PropertiesField)recBookingDetail.getField(BookingDetail.PROPERTIES)).setProperty(strProperty, strValue);
    recBookingDetail.getField(iFieldSeq + BookingDetail.MESSAGE_REQUEST_OFFSET).setData(Boolean.TRUE); // Force the request to go!
}
if (strMessage != null)
    return strMessage;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6266">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getFieldParam</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>BaseField fldStatusID</MethodInterface>
		<MethodClassName>BookingDetailStatusUpdateHandler</MethodClassName>
		<LogicSource>return ((BookingDetail)fldStatusID.getRecord()).getFieldParam(fldStatusID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6267">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getDisplayMessage</MethodName>
		<LogicDescription>Get the message to display in the message box</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseStatusUpdateHandler</MethodClassName>
		<LogicSource><![CDATA[String strMessage = this.getOwner().getRecord().getField(BaseStatus.DESCRIPTION).toString();
return strMessage;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6268">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getDisplayMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CostStatusUpdateHandler</MethodClassName>
		<LogicSource><![CDATA[// todo(don) Add code to describe any errors
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6269">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventUpdateScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6270">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventUpdateScreen</MethodClassName>
		<LogicSource>return new TourEventScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6271">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventUpdateScreen</MethodClassName>
		<LogicSource><![CDATA[if (MenuConstants.RUN.equals(strCommand))
{
    Map<String,Object> properties = new HashMap<String,Object>();
    properties.put(DBParams.PROCESS, TourEventUpdateProcess.class.getName());
    for (int iIndex = 0; iIndex < this.getSFieldCount(); iIndex++)
    {
        ScreenField sField = this.getSField(iIndex);
        if (sField.getConverter() != null)
        {
            properties.put(sField.getSFieldParam(null, false), sField.getSFieldValue(false, false));
        }
    }
    Application app = (Application)this.getTask().getApplication();
    String strQueueName = MessageConstants.TRX_SEND_QUEUE;
    String strQueueType = MessageConstants.INTRANET_QUEUE;
    BaseMessage message = new MapMessage(new TrxMessageHeader(strQueueName, strQueueType, properties), properties);
    String strProcess = Utility.propertiesToURL(null, properties);

    if (RunProcessInField.REMOTE_PROCESS.equalsIgnoreCase(this.getScreenRecord().getField(TourEventScreenRecord.RUN_PROCESS_IN).toString()))
    {
        app.getMessageManager().sendMessage(message);
    }
    else if (RunProcessInField.LOCAL_PROCESS.equalsIgnoreCase(this.getScreenRecord().getField(TourEventScreenRecord.RUN_PROCESS_IN).toString()))
    {
        app.getTaskScheduler().addTask(new ProcessRunnerTask(app, strProcess, null));
    }
    else // LOCAL
    {
        new ProcessRunnerTask(app, strProcess, null).run();
    }
    
    return true;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6272">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventUpdateProcess</MethodClassName>
		<LogicSource>return new TourEventScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6273">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventUpdateProcess</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6274">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventUpdateProcess</MethodClassName>
		<LogicSource>return new Tour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6275">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventUpdateProcess</MethodClassName>
		<LogicSource><![CDATA[super;
new Booking(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6276">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventUpdateProcess</MethodClassName>
		<LogicSource><![CDATA[Record screenRecord = this.getScreenRecord();
for (int iIndex = 0; iIndex < screenRecord.getFieldCount(); iIndex++)
{
    BaseField field = screenRecord.getField(iIndex);
    String strFieldName = field.getFieldName(false, true, false);
    if (this.getProperty(strFieldName) != null)
        this.getScreenRecord().getField(iIndex).setString(this.getProperty(strFieldName));
}
if (this.getScreenRecord().getField(TourEventScreenRecord.TOUR_UPDATE).getState())
    this.updateTourEvents();
if (this.getScreenRecord().getField(TourEventScreenRecord.BOOKING_UPDATE).getState())
    this.updateBookingEvents();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6277">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>updateBookingEvents</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventUpdateProcess</MethodClassName>
		<LogicSource><![CDATA[try {
    Record recBooking = this.getRecord(Booking.BOOKING_FILE);
    recBooking.setKeyArea(Booking.NEXT_EVENT_DATE_KEY);
    while (recBooking.hasNext())
    {
        recBooking.next();
        if (recBooking.getField(Booking.NEXT_EVENT_DATE).compareTo(this.getScreenRecord().getField(TourEventScreenRecord.ACTION_CUTOFF_DATE)) > 0)
            break;  // All done
        int iTourEvent = -1;
        while (recBooking.getField(Booking.NEXT_EVENT_DATE).compareTo(this.getScreenRecord().getField(TourEventScreenRecord.ACTION_CUTOFF_DATE)) <= 0)
        {
            if (iTourEvent == recBooking.getField(Booking.TOUR_EVENT_ID).getValue())
            {
                // todo(don) Never! TourEventID didn't update!
                break;
            }
            iTourEvent = (int)recBooking.getField(Booking.TOUR_EVENT_ID).getValue();
            if (iTourEvent == TourEvent.BOOKING)
                recBooking.getField(Booking.BOOKED).setState(true);
            if (iTourEvent == TourEvent.DEPOSIT_DUE)
                recBooking.getField(Booking.DEPOSIT_DUE).setState(true);
            if (iTourEvent == TourEvent.FINAL_PAY_DUE)
                recBooking.getField(Booking.FINAL_PAYMENT_DUE).setState(true);
        }
        if (recBooking.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
            recBooking.set();
    }
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6278">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>updateTourEvents</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventUpdateProcess</MethodClassName>
		<LogicSource><![CDATA[try {
    Record recTour = this.getRecord(Tour.TOUR_FILE);
    recTour.setKeyArea(Tour.NEXT_EVENT_DATE_KEY);
    while (recTour.hasNext())
    {
        recTour.next();
        if (recTour.getField(Tour.NEXT_EVENT_DATE).compareTo(this.getScreenRecord().getField(TourEventScreenRecord.ACTION_CUTOFF_DATE)) > 0)
            break;  // All done
        int iTourEvent = -1;
        while (recTour.getField(Tour.NEXT_EVENT_DATE).compareTo(this.getScreenRecord().getField(TourEventScreenRecord.ACTION_CUTOFF_DATE)) <= 0)
        {
            if (iTourEvent == recTour.getField(Tour.TOUR_EVENT_ID).getValue())
            {
                // todo(don) Never! TourEventID didn't update!
                break;
            }
            iTourEvent = (int)recTour.getField(Tour.TOUR_EVENT_ID).getValue();
            if (iTourEvent == TourEvent.FINALIZATION)
                recTour.getField(Tour.FINALIZED).setState(true);
            if (iTourEvent == TourEvent.FINAL_DOCS)
                recTour.getField(Tour.FINAL_DOCS).setState(true);
            if (iTourEvent == TourEvent.TICKETING)
                recTour.getField(Tour.TICKETS).setState(true);
            if (iTourEvent == TourEvent.SPECIAL_1)
                recTour.getField(Tour.SP_1).setState(true);
            if (iTourEvent == TourEvent.SPECIAL_2)
                recTour.getField(Tour.SP_2).setState(true);
            if (iTourEvent == TourEvent.DEPARTURE)
                recTour.getField(Tour.DEPARTED).setState(true);
            if (iTourEvent == TourEvent.ORDER_COMPONENTS)
                recTour.getField(Tour.ORDER_COMPONENTS).setState(true);
            if (iTourEvent == TourEvent.SERVICES_CONFIRMED)
                recTour.getField(Tour.SERV_CONF).setState(true);
        }
        if (recTour.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
            recTour.set();
    }
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6279">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcBookingActionDateHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6280">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcBookingActionDateHandler</MethodClassName>
		<LogicSource><![CDATA[Booking recBooking = (Booking)this.getOwner().getRecord();
if (recBooking.getEditMode() == DBConstants.EDIT_CURRENT)
{
    if ((recBooking.getOpenMode() | DBConstants.LOCK_STRATEGY_MASK) == 0)
        recBooking.setOpenMode(recBooking.getOpenMode() | DBConstants.OPEN_LOCK_ON_EDIT_STRATEGY);   // Error if already locked
    try {
        if (recBooking.edit() != DBConstants.NORMAL_RETURN)
            return DBConstants.NORMAL_RETURN;   // Nor problem - already locked
    } catch (DBException ex) {
        ex.printStackTrace();
        return DBConstants.NORMAL_RETURN;
    }
}
if (recBooking.getListener(UpdateOnCloseHandler.class) == null)
    recBooking.addListener(new UpdateOnCloseHandler(null)); // Make sure this is updated

BaseField actionType = recBooking.getField(Booking.TOUR_EVENT_ID);
actionType.setValue(TourEvent.NO_EVENT);
recBooking.getField(Booking.NEXT_EVENT_DATE).setToLimit(DBConstants.END_SELECT_KEY);
BaseField actionDate = recBooking.getField(Booking.NEXT_EVENT_DATE);

if (recBooking.getField(Booking.BOOKED).getState() == false)
    if (recBooking.getField(Booking.BOOKING_DATE).compareTo(actionDate) <= 0)
{
    actionDate.moveFieldToThis(recBooking.getField(Booking.BOOKING_DATE));
    actionType.setValue(TourEvent.BOOKING);
}

if (recBooking.getField(Booking.DEPOSIT_DUE).getState() == false)
    if (recBooking.getField(Booking.DEPOSIT_DUE_DATE).compareTo(actionDate) <= 0)
{
    actionDate.moveFieldToThis(recBooking.getField(Booking.DEPOSIT_DUE_DATE));
    actionType.setValue(TourEvent.DEPOSIT_DUE);
}

if (recBooking.getField(Booking.FINAL_PAYMENT_DUE).getState() == false)
    if (recBooking.getField(Booking.FINAL_PAYMENT_DUE_DATE).compareTo(actionDate) <= 0)
{
    actionDate.moveFieldToThis(recBooking.getField(Booking.FINAL_PAYMENT_DUE_DATE));
    actionType.setValue(TourEvent.FINAL_PAY_DUE);
}

return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6281">
		<LastChanged>2012-04-12T17:17:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>getTourEventSchedule</MethodName>
		<LogicDescription>Convenience method</LogicDescription>
		<MethodReturns>TourEventScheduleModel</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Tour</MethodClassName>
		<LogicSource><![CDATA[if (m_recTourEventSchedule == null)
{
    m_recTourEventSchedule = new TourEventSchedule(this.findRecordOwner());
    this.addListener(new FreeOnFreeHandler(m_recTourEventSchedule));
}
return m_recTourEventSchedule;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="6283">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>writeAndRefresh</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[Object bookmark = super;
Record recTour = ((ReferenceField)this.getField(Booking.TOUR_ID)).getReference();
if (recTour != null)
    if ((recTour.getEditMode() == DBConstants.EDIT_CURRENT) || (recTour.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
{
    int iOldOpenMode = recTour.setOpenMode(recTour.getOpenMode() & ~DBConstants.OPEN_READ_ONLY);
    recTour.writeAndRefresh();
    recTour.setOpenMode(iOldOpenMode);
}
return bookmark;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6284">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getScreenRecord().getField(TourClassScreenRecord.TOUR_CLASS_ID).moveFieldToThis(this.getHeaderRecord().getField(TourClass.ID));
((ReferenceField)this.getScreenRecord().getField(TourClassScreenRecord.TOUR_CLASS_ID)).setReferenceRecord(this.getHeaderRecord());
this.getScreenRecord().getField(TourClassScreenRecord.TOUR_CLASS_ID).addListener(new ReadSecondaryHandler(((ReferenceField)this.getScreenRecord().getField(TourClassScreenRecord.TOUR_CLASS_ID)).getReferenceRecord()));
if (this.getHeaderRecord().getField(TourClass.ID).isNull())
    this.getScreenRecord().getField(TourClassScreenRecord.TOUR_CLASS_ID).moveFieldToThis(this.getRecord(BookingControl.BOOKING_CONTROL_FILE).getField(BookingControl.TOUR_CLASS_ID));

this.getMainRecord().getField(TourEventSchedule.TOUR_EVENT_ID).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(TourEventSchedule.BOOKING_STATUS_ID), Integer.toString(TourEvent.BOOKING_STATUS), false));
this.getMainRecord().getField(TourEventSchedule.TOUR_EVENT_ID).addListener(new CopyStringHandler(this.getMainRecord().getField(TourEventSchedule.BOOKING_STATUS_ID), null, null));

this.getMainRecord().getField(TourEventSchedule.TOUR_ACTION_TYPE).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_TOUR_EVENT_ID), TourActionTypeField.TRIGGER_EVENT, false));
this.getMainRecord().getField(TourEventSchedule.TOUR_ACTION_TYPE).addListener(new CopyStringHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_TOUR_EVENT_ID), null, null));
this.getMainRecord().getField(TourEventSchedule.TOUR_ACTION_TYPE).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_MESSAGE_PROCESS_INFO_ID), TourActionTypeField.CREATE_DOCUMENT, false));
this.getMainRecord().getField(TourEventSchedule.TOUR_ACTION_TYPE).addListener(new CopyStringHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_MESSAGE_PROCESS_INFO_ID), null, null));
this.getMainRecord().getField(TourEventSchedule.ACTION_TOUR_EVENT_ID).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_BOOKING_STATUS_ID), Integer.toString(TourEvent.BOOKING_STATUS), false));
this.getMainRecord().getField(TourEventSchedule.ACTION_TOUR_EVENT_ID).addListener(new CopyStringHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_BOOKING_STATUS_ID), null, null));
this.getMainRecord().getField(TourEventSchedule.TOUR_ACTION_TYPE).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_MESSAGE_TRANSPORT_ID), TourActionTypeField.CREATE_DOCUMENT, false));
this.getMainRecord().getField(TourEventSchedule.TOUR_ACTION_TYPE).addListener(new CopyStringHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_MESSAGE_TRANSPORT_ID), null, null));
this.getMainRecord().getField(TourEventSchedule.TOUR_ACTION_TYPE).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_DOCUMENT_NAME), TourActionTypeField.CREATE_DOCUMENT, false));
this.getMainRecord().getField(TourEventSchedule.TOUR_ACTION_TYPE).addListener(new CopyStringHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_DOCUMENT_NAME), null, null));
this.getMainRecord().getField(TourEventSchedule.TOUR_ACTION_TYPE).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_PROPERTIES), TourActionTypeField.CREATE_DOCUMENT, false));
this.getMainRecord().getField(TourEventSchedule.TOUR_ACTION_TYPE).addListener(new CopyStringHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_PROPERTIES), null, null));
this.getMainRecord().getField(TourEventSchedule.TOUR_ACTION_TYPE).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(TourEventSchedule.ACTION_DOCUMENT_TEXT), TourActionTypeField.CREATE_DOCUMENT, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6285">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BookingStatusEventHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>iTourEventID</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingStatusEventHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6286">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EventOrDateField</MethodClassName>
		<LogicSource><![CDATA[String[][] string = {
    {EVENT, "Event"},
    {DATE, "Date"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6287">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingOrTourField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6288">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingOrTourField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = BOOKING;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6289">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EventOrDateField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = EventOrDateField.DATE;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6290">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>EventOrDateField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6297">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaymentEventHandler</MethodClassName>
		<LogicSource><![CDATA[Double doubleOriginalData = (Double)this.getOriginalData();
if (doubleOriginalData == null)
    doubleOriginalData = DoubleField.ZERO;
Record recBooking = this.getOwner().getRecord();
double dNet = recBooking.getField(Booking.NET).getValue();
if (doubleOriginalData.doubleValue() != 0)  // If this was just 0 zero before this change, there is no was this will trigger anything
    if (dNet > 0)
{
    double dBalance = Math.floor(recBooking.getField(Booking.BALANCE).getValue() * 100 + 0.5) / 100;
    double dPaid = Math.floor((dNet - dBalance) * 100 + 0.5) / 100;
    if (dPaid >= recBooking.getField(Booking.DEPOSIT).getValue())
        recBooking.getField(Booking.DEPOSIT_RECEIVED).setState(true);
    if (dBalance <= 0)
        recBooking.getField(Booking.FINAL_PAYMENT_RECEIVED).setState(true);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6298">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaymentEventHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);
this.setRespondsToMode(DBConstants.SCREEN_MOVE, true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6300">
		<LastChanged>2012-04-12T17:33:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>triggerEvent</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BookingModel recBooking, TourModel recTour</MethodInterface>
		<MethodClassName>TourEventSchedule</MethodClassName>
		<LogicSource><![CDATA[switch ((int)this.getField(TourEventSchedule.ACTION_TOUR_EVENT_ID).getValue())
{
    case TourEvent.BOOKING:
    case TourEvent.BOOKING_STATUS:
    case TourEvent.DEPOSIT_DUE:
    case TourEvent.DEPOSIT_RECEIVED:
    case TourEvent.FINAL_PAY_DUE:
    case TourEvent.FINAL_PAYMENT_RECEIVED:
    case TourEvent.CANCELLATION:
    if (recBooking == null)
        return DBConstants.ERROR_RETURN; // Error = can't do a booking update on a tour action
    default:
    break;  // Okay
}
switch ((int)this.getField(TourEventSchedule.ACTION_TOUR_EVENT_ID).getValue())
{
    case TourEvent.BOOKING:
        recBooking.getField(BookingModel.BOOKED).setState(true);
        break;
    case TourEvent.BOOKING_STATUS:
        if (!this.getField(TourEventSchedule.ACTION_BOOKING_STATUS_ID).isNull())
        {
            FieldListener listener = null;
            if (((Record)recBooking).getField(BookingModel.BOOKING_STATUS_ID).getListener(BookingStatusEventHandler.class) != null)
                if (!((Record)recBooking).getField(BookingModel.BOOKING_STATUS_ID).getListener(BookingStatusEventHandler.class).isEnabled())
                    ((BaseField)recBooking.getField(BookingModel.BOOKING_STATUS_ID)).addListener(listener = new BookingStatusEventHandler(TourEvent.BOOKING_STATUS));
            ((Record)recBooking).getField(BookingModel.BOOKING_STATUS_ID).moveFieldToThis(this.getField(TourEventSchedule.ACTION_BOOKING_STATUS_ID));
            if (listener != null)
                listener.free();
        }
        break;
    case TourEvent.DEPOSIT_DUE:
        recBooking.getField(BookingModel.DEPOSIT_DUE).setState(true);
        break;
    case TourEvent.DEPOSIT_RECEIVED:
        recBooking.getField(BookingModel.DEPOSIT).setState(true);
        break;
    case TourEvent.FINAL_PAY_DUE:
        recBooking.getField(BookingModel.FINAL_PAYMENT_DUE).setState(true);
        break;
    case TourEvent.FINAL_PAYMENT_RECEIVED:
        recBooking.getField(BookingModel.FINAL_PAYMENT_RECEIVED).setState(true);
        break;
    case TourEvent.FINALIZATION:
        recTour.getField(TourModel.FINALIZED).setState(true);
        break;
    case TourEvent.TOUR_CLOSED:
        recTour.getField(TourModel.CLOSED).setState(true);
        break;
    case TourEvent.ORDER_COMPONENTS:
        recTour.getField(TourModel.ORDER_COMPONENTS).setState(true);
        break;
    case TourEvent.FINAL_DOCS:
        recTour.getField(TourModel.FINAL_DOCS).setState(true);
        break;
    case TourEvent.TICKETING:
        recTour.getField(TourModel.TICKETS).setState(true);
        break;
    case TourEvent.SPECIAL_1:
        recTour.getField(TourModel.SP_1).setState(true);
        break;
    case TourEvent.SPECIAL_2:
        recTour.getField(TourModel.SP_2).setState(true);
        break;
    case TourEvent.DEPARTURE:
        recTour.getField(TourModel.DEPARTED).setState(true);
        break;
    case TourEvent.CANCELLATION:
        recBooking.getField(BookingModel.CANCELLED).setState(true);
        break;
    case TourEvent.TOUR_CANCELLED:
        recTour.getField(TourModel.CANCELLED).setState(true);
        break;
    case TourEvent.SERVICES_CONFIRMED:
        recTour.getField(TourModel.SERV_CONF).setState(true);    // todo(don) Shouldn't allow this
        break;
    default:
        return DBConstants.ERROR_RETURN; // Error = can't trigger these!
}
// No need to write and refresh - done in TourEventSchedule
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6301">
		<LastChanged>2012-04-12T16:59:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>createDocument</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BookingModel recBooking, TourModel recTour</MethodInterface>
		<MethodClassName>TourEventSchedule</MethodClassName>
		<LogicSource><![CDATA[String strBookingID = recBooking.getField(BookingModel.ID).toString();
String strTourID = recTour.getField(TourModel.ID).toString();
String strTemplate = ((PropertiesField)this.getField(TourEventSchedule.ACTION_PROPERTIES)).getProperty(DBParams.TEMPLATE);
MessageProcessInfo recMessageProcessInfo = (MessageProcessInfo)((ReferenceField)this.getField(TourEventSchedule.ACTION_MESSAGE_PROCESS_INFO_ID)).getReference();
Record recMessageTransport = ((ReferenceField)this.getField(TourEventSchedule.ACTION_MESSAGE_TRANSPORT_ID)).getReference();
if ((recMessageTransport == null) || (recMessageTransport.getEditMode() != DBConstants.EDIT_CURRENT))
    if ((recMessageProcessInfo != null) && (recMessageProcessInfo.getEditMode() == DBConstants.EDIT_CURRENT))
        recMessageTransport = ((ReferenceField)recMessageProcessInfo.getField(MessageProcessInfo.DEFAULT_MESSAGE_TRANSPORT_ID)).getReference();
String strMessageTransport = null;
if ((recMessageTransport != null) && (recMessageTransport.getEditMode() == DBConstants.EDIT_CURRENT))
    strMessageTransport = recMessageTransport.getField(MessageTransport.CODE).toString();
// If the transport is null, that's okay. The message manager will select a transport
String strURL = this.getDisplayURL(strBookingID, strTourID, strTemplate);
{   // Note: properties include SEND_BY and DESTINATION
    // First see if the use specifies a specific message
    if (recMessageProcessInfo == null)
        recMessageProcessInfo = (MessageProcessInfo)((ReferenceField)this.getField(TourEventSchedule.ACTION_MESSAGE_PROCESS_INFO_ID)).getReferenceRecord();
    ProfileModel recProfile = (ProfileModel)((ReferenceField)recBooking.getField(BookingModel.PROFILE_ID)).getReference();
    if ((recProfile.getEditMode() == DBConstants.EDIT_NONE) || (recProfile.getEditMode() == DBConstants.EDIT_ADD))
        recProfile = null;
    Map<String,Object> properties =  new Hashtable<String, Object>();
    properties.put(TrxMessageHeader.REFERENCE_TYPE, recBooking.getTableNames(false));
    properties.put(TrxMessageHeader.REFERENCE_CLASS, recBooking.getClass().getName());
    properties.put(TrxMessageHeader.REFERENCE_ID, recBooking.getCounterField().toString());
    if (recProfile == null)
    {
        if (recBooking.getField(BookingModel.EMAIL).isNull())
            return this.getTask().setLastError(this.getTask().getString("No email address in booking"));
        else
        {
            properties.put(TrxMessageHeader.DESTINATION_PARAM, recBooking.getField(BookingModel.EMAIL).toString());
            properties.put(MessageTransport.SEND_MESSAGE_BY_PARAM, MessageTransport.EMAIL);
        }
    }
    recMessageProcessInfo.createAndSendURLMessage(strMessageTransport, (MessageDetailTarget)recProfile, strURL, properties);
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6303">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleScreen</MethodClassName>
		<LogicSource><![CDATA[if (MessageProcessInfoManualField.LOOKUP_WITH_PARAMS.equalsIgnoreCase(strCommand))
{
    if (this.getTask() != null)
        if (this.getTask().getApplication() != null)
    {
        BasePanel parentScreen = Screen.makeWindow(this.getTask().getApplication());
        Map<String,Object> properties = new Hashtable<String,Object>();
        RequestType recRequestType = new RequestType(this);
        properties.put("RequestTypeID", Integer.toString(recRequestType.getIDFromCode(RequestType.MANUAL)));
        recRequestType.free();
        Record record = ((ReferenceField)this.getMainRecord().getField(TourEventSchedule.ACTION_MESSAGE_PROCESS_INFO_ID)).getReferenceRecord();
        GridScreen screen = (GridScreen)record.makeScreen(null, parentScreen, ScreenConstants.SELECT_MODE, true, true, true, true, properties);
        //x if (record.getScreen() == null)
            screen.setSelectQuery(record, false); // Since this record isn't linked to the screen, manually link it.
        return true;    // Handled
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6304">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (MessageProcessInfoManualField.LOOKUP_WITH_PARAMS.equalsIgnoreCase(strCommand))
{
    if (this.getTask() != null)
        if (this.getTask().getApplication() != null)
    {
        BasePanel parentScreen = Screen.makeWindow(this.getTask().getApplication());
        Map<String,Object> properties = new Hashtable<String,Object>();
        RequestType recRequestType = new RequestType(this);
        properties.put("RequestTypeID", Integer.toString(recRequestType.getIDFromCode(RequestType.MANUAL)));
        recRequestType.free();
        Record record = ((ReferenceField)this.getMainRecord().getField(TourEventSchedule.ACTION_MESSAGE_PROCESS_INFO_ID)).getReferenceRecord();
        GridScreen screen = (GridScreen)record.makeScreen(null, parentScreen, ScreenConstants.SELECT_MODE, true, true, true, true, properties);
        //x if (record.getScreen() == null)
            screen.setSelectQuery(record, false); // Since this record isn't linked to the screen, manually link it.
        return true;    // Handled
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6305">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventSchedule</MethodClassName>
		<LogicSource><![CDATA[super;
this.addPropertiesFieldBehavior(this.getField(TourEventSchedule.ACTION_DOCUMENT_NAME), DBParams.TEMPLATE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6306">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6308">
		<LastChanged>2012-04-12T16:59:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getDisplayURL</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strBookingID, String strTourID, String strTemplate</MethodInterface>
		<MethodClassName>TourEventSchedule</MethodClassName>
		<LogicSource><![CDATA[RecordOwner recordOwner = this.getRecordOwner();
String strURL = DBConstants.DEFAULT_XHTML_SERVLET;
if (recordOwner instanceof ScreenModel)
    strURL = Utility.getServletPath(recordOwner.getTask(), DBParams.XHTMLSERVLET);
strURL = Utility.addURLParam(strURL, DBParams.SCREEN, ITINERARY_REPORT_SCREEN);
strURL = Utility.addURLParam(strURL, "forms", "display");
if ((strTemplate == null) || (strTemplate.length() == 0))
    strTemplate = "itinerary";
strURL = Utility.addURLParam(strURL, DBParams.TEMPLATE, strTemplate);
strURL = Utility.addURLParam(strURL, DBParams.COMMAND, "Submit");
if ((strBookingID != null) && (strBookingID.length() < 0))
    strURL = Utility.addURLParam(strURL, "Booking.ID", strBookingID);
strURL = Utility.addURLParam(strURL, "TourID", strTourID);  // TourID is the screen field for this report
if (this.getTask() != null)
    if (this.getTask().getApplication() != null)
        strURL = this.getTask().getApplication().addUserParamsToURL(strURL);
return strURL;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6309">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourStatusEventHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6354">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DistField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = HOURLY;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6355">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DistField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6356">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MaritalStatusField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6357">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PayTypeField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6358">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PeriodTypeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = WEEKLY;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6359">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PayAtField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6360">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelFreeField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6361">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelFreeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = SINGLE_ROOM;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6362">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandTypeField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6363">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandTypeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = SIGHTSEEING;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6364">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VariesByField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6365">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VariesByField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = AUTO_PER_PERSON;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6366">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ModifyCodeField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6367">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourActionTypeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = TRIGGER_EVENT;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6368">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProfileAnalysisField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = NONE;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6390">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseSOAPMsgReplyOut2006A</MethodClassName>
		<LogicSource><![CDATA[BaseMessage trxMessage = this.getMessage();
HotelRateResponse hotelRateResponseOut = (HotelRateResponse)trxMessage.getMessageDataDesc(null);
TrxMessageHeader messageHeader = (TrxMessageHeader)trxMessage.getMessageHeader();
String strMessageType = (String)hotelRateResponseOut.get(TrxMessageHeader.MESSAGE_CODE);
if (true)//GET_HOTEL_RATE.equalsIgnoreCase(strMessageType))
{
    OTA_HotelAvailRS root = null;

            // create an empty PurchaseOrder
        net.sourceforge.ota_tools.jaxb.ota2006a.custom.ObjectFactory factory = new net.sourceforge.ota_tools.jaxb.ota2006a.custom.ObjectFactory();
        root = factory.createOTA_HotelAvailRS();
//            root = new HITISMessage();
//            Header header = new Header();
//            root.setHeader(header);
//            header.setToURI(this.getDestinationAddress(messageHeader));
//            header.setFromURI(messageHeader.getSourceAddress());
//            header.setReplyToURI(messageHeader.getReplyToAddress());
//            Body body = new Body();
//            root.setBody(body);
//            HITISOperation operation = new HITISOperation();
//            body.setHITISOperation(operation);
        root.setVersion(new java.math.BigDecimal(1.23));

        POS_Type posTypes = null;
        root.setPOS(posTypes = factory.createPOS_Type());
        SourceType source = null;
        posTypes.getSource().add(source = factory.createSourceType());
//+        SourceType.RequestorID uniqueId = null;
//+        source.setRequestorID(uniqueId = factory.createSourceTypeRequestorID());
//+        uniqueId.setID(messageHeader.get(TrxMessageHeader.LOG_TRX_ID).toString());
//+        uniqueId.setType("12");
//                source.setAgentSine("Test Agent");

        SuccessType successType = null;
        root.setSuccess(successType = factory.createSuccessType());

//                ErrorsTypeTypes errorsType = null;
//                root.setErrors(errorsType = ObjectFactory.createErrorsTypeTypes());
//            operation.setOperationName(AVAILABILITY_RESPONSE);    // Need a constant for this
//            AvailabilityResponse availability = new AvailabilityResponse();
//            operation.setAvailabilityResponse(availability);
//            QuotedRateAmount rateAmount = new QuotedRateAmount();
//            availability.setQuotedRateAmount(rateAmount);
        OTA_HotelAvailRS.RoomStays roomStays = factory.createOTA_HotelAvailRSRoomStays();
        root.setRoomStays(roomStays);
        java.util.List listRoomStays = roomStays.getRoomStay();
roomStays.setMoreIndicator("No");
        OTA_HotelAvailRS.RoomStays.RoomStay roomStay = factory.createOTA_HotelAvailRSRoomStaysRoomStay();
        listRoomStays.add(roomStay);
roomStay.setIsAlternate(false);
/*
org.w3._2001.xmlschema.ObjectFactory w3Factory = new org.w3._2001.xmlschema.ObjectFactory();
org.w3._2001.xmlschema.AnyType anyType = w3Factory.createAnyType();
roomStay.setAlternateInfo(anyType);
java.util.List listContent = anyType.getContent();
BasicPropertyInfoTypez propInfo = factory.createBasicPropertyInfoTypez();
roomStay.setBasicPropertyInfo(propInfo);
propInfo.setHotelName("Test Hotel");
//roomStay.setGuestCounts(value);
*/

RoomStayType.RatePlans ratePlans = factory.createRoomStayTypeRatePlans();
roomStay.setRatePlans(ratePlans);

java.util.List listRatePlan = ratePlans.getRatePlan();
RatePlanType ratePlan = factory.createRatePlanType();
listRatePlan.add(ratePlan);

ratePlan.setRatePlanCode("XYZ");
ratePlan.setRateIndicator(RateIndicatorType.ON_REQUEST);

RoomStayType.RoomRates roomRates = factory.createRoomStayTypeRoomRates();
java.util.List listRoomRate = roomRates.getRoomRate();
RoomRateType roomRate = factory.createRoomRateType();
RateType rates = factory.createRateType();
//+        rates.setRateIndicator(RateIndicatorType.ON_REQUEST);
java.util.List listRates = rates.getRate();
RateType.Rate rateType = factory.createRateTypeRate();
try {
    Duration duration = DatatypeFactory.newInstance().newDuration(12345);
    rateType.setDuration(duration);
    rateType.setAgeQualifyingCode("AAA");
    rateType.setAgeTimeUnit(TimeUnitType.DAY);
    //rateType.setAmountAddlInfo(value);
    TotalType types = factory.createTotalType();
    types.setCurrencyCode("USD");
    java.math.BigDecimal bigAfter = new java.math.BigDecimal("20.00");
    types.setAmountAfterTax(bigAfter);
    rateType.setBase(types);
    String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000);
    SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]);
    GregorianCalendar calendar = new GregorianCalendar(pdt);
    calendar.setTime(new Date());
    int iDuration2 = 2;
    XMLGregorianCalendar xmlGregorianCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar);
    rateType.setEffectiveDate(xmlGregorianCalendar);
    calendar.add(Calendar.DATE, iDuration2);
    xmlGregorianCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar);
    rateType.setExpireDate(xmlGregorianCalendar);
} catch (DatatypeConfigurationException ex) {
    ex.printStackTrace();
}
rateType.setGuaranteedInd(true);
Integer bigMax = new Integer("20");
rateType.setMaxAge(bigMax);
Integer bigMin = new Integer("1");
rateType.setMinAge(bigMin);
//rateType.setTPAExtensions(value);
listRates.add(rateType);
roomRate.setRates(rates);
listRoomRate.add(roomRate);
roomStay.setRoomRates(roomRates);
//HotelAvailRSType.RoomStaysTypez.RoomRatesType roomRates = factory.createRoomStayTypezRoomRatesType();
//roomStay.setRoomRates(value);

//roomStay.setRoomStayAddlInfo(value);
//roomStay.setRoomTypes(value);
DateTimeSpanType dateTime = factory.createDateTimeSpanType();
Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
dateTime.setStart(this.dateToStringDateFormat(cal.getTime()));
int iDuration = 2;
cal.add(Calendar.DATE, iDuration);
dateTime.setEnd(this.dateToStringDateFormat(cal.getTime()));
roomStay.setTimeSpan(dateTime);
ProductResponseMessageData messageData = (ProductResponseMessageData)hotelRateResponseOut.getMessageDataDesc(BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);
Double dblCurrency = (Double)messageData.get(BookingDetail.TOTAL_COST);
root.setEchoToken(dblCurrency.toString());
//            double dCurrency = 0.00;
//            if (dblCurrency != null)
//                dCurrency = dblCurrency.doubleValue();
//            rateAmount.setCurrency(dCurrency);        
return root;
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6391">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseSOAPMsgReplyIn2006A</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof OTA_HotelAvailRS)
{
    OTA_HotelAvailRS msg = (OTA_HotelAvailRS)root;

//        if (GET_HOTEL_RATE.equalsIgnoreCase(strMessageType))
//        {
//            properties.put(DESTINATION_MESSAGE_PARAM, "/receiver"); // The URL extension

//            Header header = msg.getHeader();
//            String strTo = header.getToURI();
//            String strFrom = header.getFromURI();
//            String strReplyTo = header.getReplyToURI();

//            Body body = msg.getBody();
//            HITISOperation operation = body.getHITISOperation();
//            String strOperationName = operation.getOperationName();    // Need a constant for this
    String strPrice = msg.getEchoToken();
    Double dblPrice = new Double(strPrice);
//            AvailabilityResponse availability = operation.getAvailabilityResponse();
//            QuotedRateAmount ratePlan = availability.getQuotedRateAmount();
//            double dPrice = ratePlan.getCurrency();

    ProductRateResponse productResponseData = (ProductRateResponse)this.getMessage().getMessageDataDesc(null);
    ProductResponseMessageData productMessageData = (ProductResponseMessageData)this.getMessage().getMessageDataDesc(BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);
    productMessageData.put(BookingDetail.TOTAL_COST, dblPrice);
    if (dblPrice != null)
        if (dblPrice != 0)
            productResponseData.setMessageDataStatus(MessageDataDesc.VALID);
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6392">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequestSOAPMessageIn2006A</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof OTA_HotelAvailRQ)
{       // Always
    OTA_HotelAvailRQ msg = (OTA_HotelAvailRQ)root;

//        if (GET_HOTEL_RATE.equalsIgnoreCase(strMessageType))
//        {
//            properties.put(DESTINATION_MESSAGE_PARAM, "/receiver"); // The URL extension

//            Header header = msg.getHeader();
//            String strTo = header.getToURI();
//            String strFrom = header.getFromURI();
//            String strReplyTo = header.getReplyToURI();
//            Body body = msg.getBody();
//            HITISOperation operation = body.getHITISOperation();
//            String strOperationName = operation.getOperationName();    // Need a constant for this
//            AvailabilityQuery availability = operation.getAvailabilityQuery();
    AvailRequestSegmentsType segments = msg.getAvailRequestSegments();

    java.util.List listSegments = segments.getAvailRequestSegment();
    AvailRequestSegmentsType.AvailRequestSegment segType = null;
    segType = (AvailRequestSegmentsType.AvailRequestSegment)listSegments.get(0);

    DateTimeSpanType dateTime = segType.getStayDateRange();
    Date dateStart = this.dateStringToDateFormat(dateTime.getStart());

    Date dateEnd = this.dateStringToDateFormat(dateTime.getEnd());
    long lmsChange = dateEnd.getTime() - dateStart.getTime();
    long lDuration = (lmsChange + 1000) / DBConstants.KMS_IN_A_DAY;

    RatePlanCandidatesType ratePlanCans = segType.getRatePlanCandidates();
    java.util.List listRatePlan = ratePlanCans.getRatePlanCandidate();
    RatePlanCandidatesType.RatePlanCandidate ratePlan = null;
    ratePlan = (RatePlanCandidatesType.RatePlanCandidate)listRatePlan.get(0);
    String strRatePlan = ratePlan.getRatePlanCode();

    String strHotelName = ratePlan.getPromotionCode();    // NO NO NO

    AvailRequestSegmentsType.AvailRequestSegment.RoomStayCandidates roomStayCands = segType.getRoomStayCandidates();
    java.util.List list = roomStayCands.getRoomStayCandidate();
    RoomStayCandidateType roomStayCand = null;
    roomStayCand = (RoomStayCandidateType)list.get(0);
//            if (roomStays.length() > 3)
//                roomStays = roomStays.substring(0, 3);  // Restriction on length!
    String roomStays = roomStayCand.getRoomCategory();

//            properties.put(TrxMessageHeader.DESTINATION_PARAM, strTo);
//            properties.put(TrxMessageHeader.SOURCE_PARAM, strFrom);
//            properties.put(TrxMessageHeader.REPLY_TO_PARAM, strReplyTo);
//x    HotelRateRequest hotelRateRequestIn = new HotelRateRequest(null, null);
//x    BaseMessage messageIn = new TreeMessage(null, hotelRateRequestIn);
    ProductMessageData messageData = (ProductMessageData)this.getMessage().getMessageDataDesc(HotelRateRequest.PRODUCT_MESSAGE);
    messageData.put(BookingDetail.RATE_ID, strRatePlan);
    messageData.put(BookingDetail.CLASS_ID, roomStays);
    messageData.put(BookingDetail.DETAIL_DATE, dateStart);
    messageData.put(BookingHotel.NIGHTS, new Long(lDuration));
    if (!Utility.isNumeric(strHotelName))
        messageData.put(Product.CODE, strHotelName);
    else
    	messageData.put(BookingDetail.PRODUCT_ID, strHotelName);
//+ Fix this next line!
    PassengerMessageData passengerMessageData = (PassengerMessageData)this.getMessage().getMessageDataDesc(HotelRateRequest.PASSENGER_MESSAGE);
    int iRoomCategory = 2;
    passengerMessageData.put(Product.ROOM_TYPE_PARAM + Integer.toString(iRoomCategory), new Short((short)2));  // Twin ROOM HACK
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6393">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequestSOAPMessageOut2006A</MethodClassName>
		<LogicSource><![CDATA[BaseMessage trxMessage = this.getMessage();
HotelRateRequest hotelRateRequestOut = (HotelRateRequest)trxMessage.getMessageDataDesc(null);
HotelMessageData messageData = (HotelMessageData)hotelRateRequestOut.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
TrxMessageHeader messageHeader = (TrxMessageHeader)trxMessage.getMessageHeader();
String strMessageType = (String)messageHeader.get(TrxMessageHeader.MESSAGE_CODE);
//xif (!MESSAGE_CODE.equalsIgnoreCase(strMessageType))
//x    return null;    // Error, wrong type
OTA_HotelAvailRQ root = null;
    // create a JAXBContext
    // create an empty PurchaseOrder
    ObjectFactory factory = new ObjectFactory();
    root = factory.createOTA_HotelAvailRQ();
//            root = new OTAHotelAvailRQ();
    root.setVersion(new java.math.BigDecimal(1.23));
    OTA_HotelAvailRQ.AvailRequestSegments segments = null;
    root.setAvailRequestSegments(segments = factory.createOTA_HotelAvailRQAvailRequestSegments());

    java.util.List listSegments = segments.getAvailRequestSegment();
    AvailRequestSegmentsType.AvailRequestSegment segType = null;
    listSegments.add(segType = factory.createAvailRequestSegmentsTypeAvailRequestSegment());

    DateTimeSpanType dateTime = null;
    segType.setStayDateRange(dateTime = factory.createDateTimeSpanType());
    Date date = (Date)messageData.get(BookingDetail.DETAIL_DATE);
    Calendar cal = Calendar.getInstance();
    cal.setTime(date);
    dateTime.setStart(this.dateToStringDateFormat(cal.getTime()));

    cal = Calendar.getInstance();
    cal.setTime(date);
    // The default HotelRateRequest.DURATION_DEFAULT is temporary.
    Short shNights = (Short)messageData.get(BookingHotel.NIGHTS);
    if (shNights == null)
        shNights = HotelMessageData.DURATION_DEFAULT;
    int iDuration = shNights.intValue(); 
    cal.add(Calendar.DATE, iDuration);
    dateTime.setEnd(this.dateToStringDateFormat(cal.getTime()));
//?            dateTime.setDuration(strDuration);

//        header.setToURI(this.getMessageDestination(messageHeader));
//        header.setFromURI(messageHeader.getSourceAddress());
//        header.setReplyToURI(messageHeader.getReplyToAddress());
//        operation.setOperationName((String)map.get(EXTERNAL_OPERATION));    // Need a constant for this
    RatePlanCandidatesType ratePlanCans = null;
    segType.setRatePlanCandidates(ratePlanCans = factory.createRatePlanCandidatesType());
    java.util.List listRatePlan = ratePlanCans.getRatePlanCandidate();
    RatePlanCandidatesType.RatePlanCandidate ratePlan = null;
    listRatePlan.add(ratePlan = factory.createRatePlanCandidatesTypeRatePlanCandidate());
    Integer intRatePlan = (Integer)messageData.get(BookingDetail.RATE_ID);
    if (intRatePlan != null)
        ratePlan.setRatePlanCode(intRatePlan.toString());

    String strHotelCode = null;
    if (messageData.get(Product.CODE) != null)
		strHotelCode = messageData.get(Product.CODE).toString();
    if ((strHotelCode == null) || (strHotelCode.length() == 0))
    	strHotelCode = ((Integer)messageData.get(BookingDetail.PRODUCT_ID)).toString();
    ratePlan.setPromotionCode(strHotelCode);    // NO NO NO

    AvailRequestSegmentsType.AvailRequestSegment.RoomStayCandidates roomStayCands = null;
    segType.setRoomStayCandidates(roomStayCands = factory.createAvailRequestSegmentsTypeAvailRequestSegmentRoomStayCandidates());
    java.util.List list = roomStayCands.getRoomStayCandidate();
    RoomStayCandidateType roomStayCand = factory.createRoomStayCandidateType();
    list.add(roomStayCand);
    Integer intRoomStays = (Integer)messageData.get(BookingDetail.CLASS_ID);
    String roomStays = DBConstants.BLANK;
    if (intRoomStays != null)
        roomStays = intRoomStays.toString();
    // NEXT LINES are LAME LAME LAME!
    if (roomStays.length() > 3)
        roomStays = roomStays.substring(0, 3);  // Restriction on length!
    roomStays = roomStays.toUpperCase();
    roomStayCand.setRoomCategory(roomStays);
    // create a Marshaller and marshal to System.out
//            Marshaller m = jc.createMarshaller();
//            m.setProperty( Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE );
//            m.marshal( po, System.out );
return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6394">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodeTableField</MethodClassName>
		<LogicSource>return new OTACodeTable(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6395">
		<LastChanged>2012-03-27T17:42:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodeTable</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DETAIL_MODE) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(OTA_CODES_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = Record.makeNewScreen(OTA_CODE_TABLE_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    screen = Record.makeNewScreen(OTA_CODE_TABLE_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6396">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodeTableScreen</MethodClassName>
		<LogicSource>return new OTACodeTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6398">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodeTableScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.MENU_RESOURCE, true).getString(MenuConstants.FORMDETAIL), MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6399">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodeTableGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, application.getResources(ResourceConstants.MENU_RESOURCE, true).getString(MenuConstants.FORMDETAIL));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6400">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodeTableGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.MENU_RESOURCE, true).getString(MenuConstants.FORMDETAIL), MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6401">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodeTableGridScreen</MethodClassName>
		<LogicSource>return new OTACodeTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6402">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodesGridScreen</MethodClassName>
		<LogicSource>return new OTACodes(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6403">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>OTACodesGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recMain, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>OTACodesGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6404">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodesGridScreen</MethodClassName>
		<LogicSource>return new OTACodeTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6405">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodesGridScreen</MethodClassName>
		<LogicSource>return new OTACodeTableHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6406">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodeTableHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6407">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodesScreen</MethodClassName>
		<LogicSource>return new OTACodes(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6408">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodesScreen</MethodClassName>
		<LogicSource>return new OTACodeTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6409">
		<LastChanged>2012-01-23T08:57:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodesScreen</MethodClassName>
		<LogicSource>return new OTACodeTableHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6410">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>OTACodesScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recMain, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>OTACodesScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6411">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.MENU_RESOURCE, true).getString(MenuConstants.FORMDETAIL), MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6412">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ImportOTACodeTablesProcess</MethodClassName>
		<LogicSource>return new OTACodeTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6413">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ImportOTACodeTablesProcess</MethodClassName>
		<LogicSource><![CDATA[super;
new OTACodes(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6414">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ImportOTACodeTablesProcess</MethodClassName>
		<LogicSource><![CDATA[try {
    OTACodeTable recOTACodeTable = (OTACodeTable)this.getMainRecord();
    OTACodes recOTACodes = (OTACodes)this.getRecord(OTACodes.OTA_CODES_FILE);
    
    String strFilePath = this.getProperty("filepath");
    String NONE = "none";
    String VALUE_PARAM = ".value";
    
    IBindingFactory jc = BindingDirectory.getFactory(CodeTables.class);
    IUnmarshallingContext unmarshaller = jc.createUnmarshallingContext();
    InputStream inStream = new FileInputStream( strFilePath );
    CodeTables codeTables = (CodeTables)unmarshaller.unmarshalDocument( inStream, Constants.URL_ENCODING);
    
    if (codeTables.getCodeTableList() != null)
    for (CodeTables.CodeTable table : codeTables.getCodeTableList())
    {
        String strName = table.getName();
        String strNameCode = table.getNameCode();
        LocalDate calCreate = table.getCreationDate();
        LocalDate calDeletion = table.getMarkedForDeletionDate();
        CodeTables.CodeTable.Descriptions descriptions = table.getDescriptions();
        Map<String,Object> properties = null;
        if (descriptions != null)
            for (FreeText desc : descriptions.getDescriptionList())
            {
                String strLanguage = desc.getLanguage();
                String strValue = desc.getString();
                if ((strLanguage == null) || (strLanguage.length() == 0))
                    strLanguage = NONE;
                if (properties == null)
                    properties = new HashMap<String,Object>();
                properties.put(strLanguage, strValue);
            }
        
        recOTACodeTable.addNew();
        recOTACodeTable.getField(OTACodeTable.NAME).setString(strName);
        recOTACodeTable.getField(OTACodeTable.NAME_CODE).setString(strNameCode);
        if (calCreate != null)
            ((DateField)recOTACodeTable.getField(OTACodeTable.CREATION_DATE)).setDate(calCreate.toDateMidnight().toDate(), true, DBConstants.SCREEN_MOVE);
        if (calDeletion != null)
            ((DateField)recOTACodeTable.getField(OTACodeTable.DELETION_DATE)).setDate(calDeletion.toDateMidnight().toDate(), true, DBConstants.SCREEN_MOVE);
        ((PropertiesField)recOTACodeTable.getField(OTACodeTable.PROPERTIES)).setProperties(properties);
        recOTACodeTable.add();
        Object bookmark = recOTACodeTable.getLastModified(DBConstants.BOOKMARK_HANDLE);
        
        if (table.getCodes() != null)
            if (table.getCodes().getCodeList() != null)
        for (CodeTables.CodeTable.Codes.Code code : table.getCodes().getCodeList())
        {
            String strValue2 = code.getValue();
            LocalDate calCreate2 = code.getCreationDate();
            LocalDate calDeletion2 = code.getMarkedForDeletionDate();
            java.util.List<CodeContent> contents = code.getCodeContentList();
            
            String strNameDefault = null;
            properties = null;
            if (contents != null)
            for (CodeContent contentType : contents)
            {
                String strLanguage = contentType.getLanguage();
                String strName3 = contentType.getName();
                String strValue3 = contentType.getString();
                
                if (((strLanguage == null) || (strLanguage.length() == 0))
                    || (strNameDefault == null))
                strNameDefault = strName3;
                if ((strLanguage == null) || (strLanguage.length() == 0))
                    strLanguage = NONE;
                if (properties == null)
                    properties = new HashMap<String,Object>();
                if ((strName3 != null) && (strName3.length() > 0))
                    properties.put(strLanguage, strName3);
                if ((strValue3 != null) && (strValue3.length() > 0))
                    properties.put(strLanguage + VALUE_PARAM, strValue3);                        
            }
        
            recOTACodes.addNew();
            recOTACodes.getField(OTACodes.OTA_CODE_TABLE_ID).setString(bookmark.toString());
            recOTACodes.getField(OTACodes.VALUE).setString(strValue2);
            recOTACodes.getField(OTACodes.NAME).setString(strNameDefault);
            if (calCreate2 != null)
                ((DateField)recOTACodes.getField(OTACodes.CREATION_DATE)).setDate(calCreate2.toDateMidnight().toDate(), true, DBConstants.SCREEN_MOVE);
            if (calDeletion2 != null)
                ((DateField)recOTACodes.getField(OTACodes.DELETION_DATE)).setDate(calDeletion2.toDateMidnight().toDate(), true, DBConstants.SCREEN_MOVE);
            ((PropertiesField)recOTACodes.getField(OTACodes.PROPERTIES)).setProperties(properties);
            recOTACodes.add();

        }
    }
    
} catch (DBException ex) {
    ex.printStackTrace();
} catch (FileNotFoundException ex) {
    ex.printStackTrace();
} catch (JiBXException e) {
	e.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6442">
		<LastChanged>2012-02-01T11:39:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addSlaveListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new HistoryHandler(BookingHistory.class.getName(), BookingHistory.HISTORY_DATE, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6444">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCar</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(BookingDetail.PRODUCT_TYPE_ID, ProductType.CAR_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6445">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCruise</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(BookingDetail.PRODUCT_TYPE_ID, ProductType.CRUISE_ID)); ]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6446">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotel</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(BookingDetail.PRODUCT_TYPE_ID, ProductType.HOTEL_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6448">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirInventory</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(Inventory.PRODUCT_TYPE_ID, ProductType.AIR_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6449">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarInventory</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(Inventory.PRODUCT_TYPE_ID, ProductType.CAR_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6450">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseInventory</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(Inventory.PRODUCT_TYPE_ID, ProductType.CRUISE_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6451">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInventory</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(Inventory.PRODUCT_TYPE_ID, ProductType.HOTEL_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6452">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemInventory</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(Inventory.PRODUCT_TYPE_ID, ProductType.ITEM_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6453">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInventory</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(Inventory.PRODUCT_TYPE_ID, ProductType.LAND_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6454">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderInventory</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(Inventory.PRODUCT_TYPE_ID, ProductType.TOUR_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6455">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationInventory</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(Inventory.PRODUCT_TYPE_ID, ProductType.TRANSPORTATION_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6456">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderAir</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(TourHeaderDetail.PRODUCT_TYPE_ID, ProductType.AIR_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6458">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderCruise</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(TourHeaderDetail.PRODUCT_TYPE_ID, ProductType.CRUISE_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6459">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderHotel</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(TourHeaderDetail.PRODUCT_TYPE_ID, ProductType.HOTEL_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6460">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderItem</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(TourHeaderDetail.PRODUCT_TYPE_ID, ProductType.ITEM_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6461">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderLand</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(TourHeaderDetail.PRODUCT_TYPE_ID, ProductType.LAND_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6462">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTour</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(TourHeaderDetail.PRODUCT_TYPE_ID, ProductType.TOUR_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6463">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTransportation</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(TourHeaderDetail.PRODUCT_TYPE_ID, ProductType.TRANSPORTATION_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6464">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductRequest</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override to change]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6465">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>9,000</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_ADD;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6466">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingChangeRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_CHANGE;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6469">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getKeyPrefix</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductAvailabilityResponse</MethodClassName>
		<LogicSource>return "message.availability.";</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6472">
		<LastChanged>2012-04-12T10:49:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductCancelRequestMessageInProcessor</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequestInMessage = (ProductRequest)internalMessage.getMessageDataDesc(null);

Product recProduct = (Product)this.getMainRecord();
if (recProduct == null)
    recProduct = this.getProductRecord((String)((ProductMessageData)productRequestInMessage.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE)).get(BookingDetail.PRODUCT_TYPE));
ProductMessageData productMessageDesc = (ProductMessageData)productRequestInMessage.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
BaseMessage messageReply = null;
if (productMessageDesc != null)
{
    for (int index = 1; ;index++)
    {
        productMessageDesc.setNodeIndex(index, null);
        if ((productMessageDesc.get(BookingDetail.PRODUCT_ID) == null) && (productMessageDesc.get(Product.CODE) == null))
            break;  // End of product descriptions
        if (!(productMessageDesc.getProduct(recProduct)))
        {   // Error, product not found
            // pend(don)
        }
        messageReply = (BaseMessage)recProduct.processBookingRequestInMessage(internalMessage, messageReply);
    }
}
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6473">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>Product</MethodReturns>
		<MethodInterface>String strProductType</MethodInterface>
		<MethodClassName>ProductCancelRequestMessageInProcessor</MethodClassName>
		<LogicSource>return Product.getProductRecord(strProductType, this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6474">
		<LastChanged>2012-01-31T10:43:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,005</Sequence>
		<MethodName>productOrdered</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[if (this.getField(BookingDetail.PRODUCT_REQUEST_KEY).isNull())
    return false;
else
    return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6475">
		<LastChanged>2012-04-11T16:00:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CancelRequest</MethodClassName>
		<LogicSource><![CDATA[super;
ProductMessageData productMessage = (ProductMessageData)this.getMessageDataDesc(PRODUCT_MESSAGE);
productMessage.addMessageFieldDesc(BookingDetailModel.REMOTE_BOOKING_NO, String.class, MessageFieldDesc.REQUIRED, MessageFieldDesc.NOT_UNIQUE | MessageFieldDesc.DONT_INIT, null);
// UNIQUE adds this to the key making it different from product order
productMessage.addMessageFieldDesc(BookingDetailModel.PRODUCT_TYPE, String.class, MessageFieldDesc.REQUIRED, MessageFieldDesc.UNIQUE | MessageFieldDesc.DONT_INIT, null);

((MessageFieldDesc)productMessage.getMessageDataDesc(BookingDetailModel.RATE_ID)).setRequired(MessageFieldDesc.OPTIONAL);
((MessageFieldDesc)productMessage.getMessageDataDesc(BookingDetailModel.CLASS_ID)).setRequired(MessageFieldDesc.OPTIONAL);
((MessageFieldDesc)productMessage.getMessageDataDesc(ProductModel.PAX_PARAM)).setRequired(MessageFieldDesc.OPTIONAL);
((MessageFieldDesc)productMessage.getMessageDataDesc(ProductModel.ROOM_TYPE_PARAM)).setRequired(MessageFieldDesc.OPTIONAL);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6476">
		<LastChanged>2012-04-02T10:50:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription>Create the product record for this product type</LogicDescription>
		<MethodReturns>Product</MethodReturns>
		<MethodInterface>String strProductType, RecordOwner recordOwner</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[Product recProduct = null;
if (Hotel.HOTEL_FILE.equalsIgnoreCase(strProductType))
    recProduct = new Hotel(recordOwner);
else if (Land.LAND_FILE.equalsIgnoreCase(strProductType))
    recProduct = new Land(recordOwner);
else if (Air.AIR_FILE.equalsIgnoreCase(strProductType))
    recProduct = new Air(recordOwner);
else if (Transportation.TRANSPORTATION_FILE.equalsIgnoreCase(strProductType))
    recProduct = new Transportation(recordOwner);
else if (Car.CAR_FILE.equalsIgnoreCase(strProductType))
    recProduct = new Car(recordOwner);
else if (Cruise.CRUISE_FILE.equalsIgnoreCase(strProductType))
    recProduct = new Cruise(recordOwner);
else if (Item.ITEM_FILE.equalsIgnoreCase(strProductType))
    recProduct = new Item(recordOwner);
else if (TourHeader.TOUR_HEADER_FILE.equalsIgnoreCase(strProductType))
    recProduct = new TourHeader(recordOwner);
else if (TourModel.TOUR_FILE.equalsIgnoreCase(strProductType))
    recProduct = new TourHeader(recordOwner);  // Yes - Tour header is a tour component
return recProduct;]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6477">
		<LastChanged>2012-04-11T16:00:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourBookingChangeRequest</MethodClassName>
		<LogicSource><![CDATA[super;
((ProductMessageData)this.getMessageDataDesc(PRODUCT_MESSAGE)).addMessageFieldDesc(BookingDetailModel.REMOTE_BOOKING_NO, String.class, MessageFieldDesc.REQUIRED, MessageFieldDesc.NOT_UNIQUE | MessageFieldDesc.DONT_INIT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6478">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourBookingChangeRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_CHANGE;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6479">
		<LastChanged>2012-04-11T16:00:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandBookingChangeRequest</MethodClassName>
		<LogicSource><![CDATA[super;
((ProductMessageData)this.getMessageDataDesc(PRODUCT_MESSAGE)).addMessageFieldDesc(BookingDetailModel.REMOTE_BOOKING_NO, String.class, MessageFieldDesc.REQUIRED, MessageFieldDesc.NOT_UNIQUE | MessageFieldDesc.DONT_INIT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6480">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandBookingChangeRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_CHANGE;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6482">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirBookingChangeRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_CHANGE;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6483">
		<LastChanged>2012-04-11T16:00:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationBookingChangeRequest</MethodClassName>
		<LogicSource><![CDATA[super;
((ProductMessageData)this.getMessageDataDesc(PRODUCT_MESSAGE)).addMessageFieldDesc(BookingDetailModel.REMOTE_BOOKING_NO, String.class, MessageFieldDesc.REQUIRED, MessageFieldDesc.NOT_UNIQUE | MessageFieldDesc.DONT_INIT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6484">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationBookingChangeRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_CHANGE;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6485">
		<LastChanged>2012-04-11T16:00:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarBookingChangeRequest</MethodClassName>
		<LogicSource><![CDATA[super;
((ProductMessageData)this.getMessageDataDesc(PRODUCT_MESSAGE)).addMessageFieldDesc(BookingDetailModel.REMOTE_BOOKING_NO, String.class, MessageFieldDesc.REQUIRED, MessageFieldDesc.NOT_UNIQUE | MessageFieldDesc.DONT_INIT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6486">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarBookingChangeRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_CHANGE;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6487">
		<LastChanged>2012-04-11T16:00:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseBookingChangeRequest</MethodClassName>
		<LogicSource><![CDATA[super;
((ProductMessageData)this.getMessageDataDesc(PRODUCT_MESSAGE)).addMessageFieldDesc(BookingDetailModel.REMOTE_BOOKING_NO, String.class, MessageFieldDesc.REQUIRED, MessageFieldDesc.NOT_UNIQUE | MessageFieldDesc.DONT_INIT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6488">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseBookingChangeRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_CHANGE;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6489">
		<LastChanged>2012-04-11T16:00:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemBookingChangeRequest</MethodClassName>
		<LogicSource><![CDATA[super;
((ProductMessageData)this.getMessageDataDesc(PRODUCT_MESSAGE)).addMessageFieldDesc(BookingDetailModel.REMOTE_BOOKING_NO, String.class, MessageFieldDesc.REQUIRED, MessageFieldDesc.NOT_UNIQUE | MessageFieldDesc.DONT_INIT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6490">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemBookingChangeRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_CHANGE;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6491">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CancelRequest</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingApTrx(record);
if (iErrorCode == DBConstants.NORMAL_RETURN)
    iErrorCode = this.initBookingInventory(record);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6492">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CancelRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_CANCEL;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6493">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandBookingRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_ADD;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6494">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourBookingRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_ADD;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6495">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirBookingRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_ADD;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6496">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarBookingRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_ADD;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6497">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseBookingRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_ADD;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6498">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationBookingRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_ADD;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6499">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6500">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseScreen</MethodClassName>
		<LogicSource>return new HotelInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6501">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailResponseScreen</MethodClassName>
		<LogicSource>return new HotelInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6502">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingResponseScreen</MethodClassName>
		<LogicSource>return new HotelInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6503">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateResponseScreen</MethodClassName>
		<LogicSource>return new LandInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6504">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandAvailResponseScreen</MethodClassName>
		<LogicSource>return new LandInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6505">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandAvailResponseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6506">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateResponseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6507">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>moveMessageParamsToScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6508">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>moveScreenParamsToMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6509">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandBookingResponseScreen</MethodClassName>
		<LogicSource>return new LandInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6510">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandBookingResponseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6511">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>moveMessageParamsToScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandBookingResponseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6512">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>moveScreenParamsToMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandBookingResponseScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6513">
		<LastChanged>2012-01-31T10:43:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>moveMessageParamsToScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductResponseScreen</MethodClassName>
		<LogicSource><![CDATA[Record screenRecord = this.getScreenRecord();
ProductMessageData messageData = (ProductMessageData)message.getMessageDataDesc(null).getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
messageData.getRawFieldData(screenRecord.getField(ProductInfoScreenRecord.PRODUCT_ID));
messageData.getRawFieldData(screenRecord.getField(ProductInfoScreenRecord.RATE_ID));
messageData.getRawFieldData(screenRecord.getField(ProductInfoScreenRecord.CLASS_ID));
messageData.getRawFieldData(screenRecord.getField(ProductInfoScreenRecord.DETAIL_DATE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6514">
		<LastChanged>2012-02-01T03:12:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>moveScreenParamsToMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductResponseScreen</MethodClassName>
		<LogicSource><![CDATA[super;

ProductResponseMessageData messageData = (ProductResponseMessageData)message.getMessageDataDesc(BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);
Double dblCost = (Double)this.getScreenRecord().getField(ProductInfoScreenRecord.TOTAL_COST).getData();
messageData.put(BookingDetail.TOTAL_COST, dblCost);
Integer intAvailability = (Integer)this.getScreenRecord().getField(ProductInfoScreenRecord.AVAILABILITY).getData();
messageData.put(Product.AVAILABILITY_PARAM, intAvailability);
String strConfirmationNo = this.getScreenRecord().getField(ProductInfoScreenRecord.CONFIRMATION_NO).getString();
messageData.put(Product.CONFIRMATION_NO_PARAM, strConfirmationNo);
String strConfirmedBy = this.getScreenRecord().getField(ProductInfoScreenRecord.CONFIRMED_BY).getString();
messageData.put(Product.CONFIRMED_BY_PARAM, strConfirmedBy);

BaseProductResponse productResponseData = (BaseProductResponse)message.getMessageDataDesc(null);
productResponseData.setMessageDataStatus(MessageDataDesc.VALID);  // Change this in the overriding class if not valid      ]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6515">
		<LastChanged>2012-01-31T10:43:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductResponseScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getScreenRecord().getField(ProductInfoScreenRecord.TOTAL_COST).setEnabled(true);
this.getScreenRecord().getField(ProductInfoScreenRecord.AVAILABILITY).setEnabled(true);
this.getScreenRecord().getField(ProductInfoScreenRecord.CONFIRMATION_NO).setEnabled(true);
this.getScreenRecord().getField(ProductInfoScreenRecord.CONFIRMED_BY).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6516">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandAvailResponseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6524">
		<LastChanged>2012-04-11T13:50:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMessageFieldDesc(BookingDetailModel.PRODUCT_ID, Integer.class, MessageFieldDesc.OPTIONAL, null);
this.addMessageFieldDesc(BaseDataStatusModel.DATA_STATUS, Integer.class, MessageFieldDesc.OPTIONAL, null);
this.addMessageFieldDesc(BaseDataStatusModel.DATA_ERROR_MESSAGE, String.class, MessageFieldDesc.OPTIONAL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6525">
		<LastChanged>2012-04-11T00:10:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setAvailability</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iAvailability</MethodInterface>
		<MethodClassName>ProductResponseMessageData</MethodClassName>
		<LogicSource>this.put(ProductModel.AVAILABILITY_PARAM, new Integer(iAvailability));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6526">
		<LastChanged>2012-04-11T00:10:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setProductCost</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>double dCost</MethodInterface>
		<MethodClassName>ProductResponseMessageData</MethodClassName>
		<LogicSource>this.put(BookingDetailModel.TOTAL_COST, new Double(dCost));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6529">
		<LastChanged>2012-04-11T13:51:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[int iInfoStatus = super;
BookingDetailModel recBookingDetail = (BookingDetailModel)record;

String strConfirmedBy = (String)this.get(ProductModel.CONFIRMED_BY_PARAM);
((PropertiesField)recBookingDetail.getField(BookingDetailModel.PROPERTIES)).setProperty(((BaseProductResponse)this.getMessageDataParent()).getKeyPrefix() + ProductModel.CONFIRMED_BY_PARAM, strConfirmedBy);
String strConfirmationNo = (String)this.get(ProductModel.CONFIRMATION_NO_PARAM);
((PropertiesField)recBookingDetail.getField(BookingDetailModel.PROPERTIES)).setProperty(((BaseProductResponse)this.getMessageDataParent()).getKeyPrefix() + ProductModel.CONFIRMATION_NO_PARAM, strConfirmationNo);
if (this.get(BookingDetailModel.REMOTE_BOOKING_NO) != null)
    recBookingDetail.getField(BookingDetailModel.REMOTE_BOOKING_NO).setString((String)this.get(BookingDetailModel.REMOTE_BOOKING_NO).toString());
if (this.get(BookingDetailModel.REMOTE_REFERENCE_NO) != null)
    recBookingDetail.getField(BookingDetailModel.REMOTE_REFERENCE_NO).setString((String)this.get(BookingDetailModel.REMOTE_REFERENCE_NO).toString());

return iInfoStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6530">
		<LastChanged>2012-04-12T11:44:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductResponse</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMessageDataDesc(this.createProductResponseMessageData());
this.addMessageFieldDesc(BaseDataStatusModel.DATA_STATUS, Integer.class, MessageFieldDesc.OPTIONAL, null);
this.addMessageFieldDesc(BaseDataStatusModel.DATA_ERROR_MESSAGE, String.class, MessageFieldDesc.OPTIONAL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6531">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>createProductResponseMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns>ProductResponseMessageData</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseProductResponse</MethodClassName>
		<LogicSource>return new ProductResponseMessageData(this, PRODUCT_RESPONSE_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6532">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getKeyPrefix</MethodName>
		<LogicDescription>Get the key prefix for this type of message</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseProductResponse</MethodClassName>
		<LogicSource>return null;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6533">
		<LastChanged>2012-04-11T09:47:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMessageData</MethodClassName>
		<LogicSource><![CDATA[Record recBooking = (Record)((BookingDetailModel)record).getBooking(true);
int iErrorCode = DBConstants.NORMAL_RETURN;
for (int iFieldSeq = recBooking.getFieldSeq(BookingModel.GENERIC_NAME); iFieldSeq <= recBooking.getFieldSeq(BookingModel.CONTACT); iFieldSeq++)
{
    iErrorCode = this.putRawFieldData(recBooking.getField(iFieldSeq));
    if (iErrorCode != DBConstants.NORMAL_RETURN)
        break;
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6534">
		<LastChanged>2012-04-11T09:48:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMessageData</MethodClassName>
		<LogicSource><![CDATA[Record recBooking = (Record)((BookingDetailModel)record).getBooking(!record.getField(BookingDetailModel.BOOKING_ID).isNull());
for (int iFieldSeq = recBooking.getFieldSeq(BookingModel.GENERIC_NAME); iFieldSeq <= recBooking.getFieldSeq(BookingModel.CONTACT); iFieldSeq++)
{
    this.getRawFieldData(recBooking.getField(iFieldSeq));
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6539">
		<LastChanged>2012-04-11T13:44:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PassengerMessageData</MethodClassName>
		<LogicSource><![CDATA[BookingModel recBooking = ((BookingDetailModel)record).getBooking(true);
int iErrorCode = super.putRawRecordData(recBooking);
for (int iRoomType = PaxCategoryModel.SINGLE_ID; iRoomType <= PaxCategoryModel.CHILD_ID; iRoomType++)
{
    short shPaxOfType = (short)recBooking.getField(((Record)recBooking).getFieldSeq(BookingModel.SINGLE_PAX) + iRoomType - PaxCategoryModel.SINGLE_ID).getValue();
    if (shPaxOfType > 0)
    {
        this.put(ProductModel.ROOM_TYPE_PARAM + Integer.toString(iRoomType), new Short(shPaxOfType));
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6540">
		<LastChanged>2012-04-11T13:44:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PassengerMessageData</MethodClassName>
		<LogicSource><![CDATA[BookingModel recBooking = (BookingModel)((BookingDetailModel)record).getBooking(!record.getField(BookingDetailModel.BOOKING_ID).isNull());
int iErrorCode = super;
for (int iRoomType = PaxCategoryModel.SINGLE_ID; iRoomType <= PaxCategoryModel.CHILD_ID; iRoomType++)
{
    short shPaxOfType = this.getPaxInRoom(iRoomType);
    if (shPaxOfType > 0)
    {
        recBooking.getField(((Record)recBooking).getFieldSeq(BookingModel.SINGLE_PAX) + iRoomType - PaxCategoryModel.SINGLE_ID).setValue(shPaxOfType);
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6541">
		<LastChanged>2012-04-11T00:10:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getTargetPax</MethodName>
		<LogicDescription/>
		<MethodReturns>short</MethodReturns>
		<MethodInterface/>
		<MethodClassName>PassengerMessageData</MethodClassName>
		<LogicSource><![CDATA[Short shortTargetPax = (Short)this.get(ProductModel.PAX_PARAM);
short sTargetPax = 0;
if (shortTargetPax != null)
    sTargetPax = shortTargetPax.shortValue();
if (sTargetPax == 0)
    sTargetPax = 1;
return sTargetPax;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6542">
		<LastChanged>2012-04-11T00:10:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getPaxInRoom</MethodName>
		<LogicDescription/>
		<MethodReturns>short</MethodReturns>
		<MethodInterface>int iRoomCategory</MethodInterface>
		<MethodClassName>PassengerMessageData</MethodClassName>
		<LogicSource><![CDATA[Short shPaxInRoom = (Short)this.get(ProductModel.ROOM_TYPE_PARAM + Integer.toString(iRoomCategory));
if (shPaxInRoom == null)
    return (short)0;
return shPaxInRoom.shortValue();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6543">
		<LastChanged>2012-04-11T00:10:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setPaxInRoom</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iRoomCategory, short shPaxInRoom</MethodInterface>
		<MethodClassName>PassengerMessageData</MethodClassName>
		<LogicSource>this.put(ProductModel.ROOM_TYPE_PARAM + Integer.toString(iRoomCategory), new Short(shPaxInRoom));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6544">
		<LastChanged>2012-04-11T16:00:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductAvailabilityResponse</MethodClassName>
		<LogicSource><![CDATA[super;
ProductResponseMessageData messageData = (ProductResponseMessageData)this.getMessageDataDesc(PRODUCT_RESPONSE_MESSAGE);
messageData.addMessageFieldDesc(ProductModel.AVAILABILITY_PARAM, Integer.class, MessageFieldDesc.REQUIRED, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6545">
		<LastChanged>2012-04-11T01:06:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[super;
new MessageFieldDesc(this, BookingDetailModel.PRODUCT_ID, Integer.class, MessageFieldDesc.REQUIRED, null)
{
    public int getRawFieldData(Converter field)
    {   // Special logic - If there is a product CODE and this field has already been populated, don't move it again.
        if (((BaseMessageRecordDesc)this.getMessageDataParent()).get(ProductModel.CODE) != null)
            if (!field.getField().isNull())
                return DBConstants.NORMAL_RETURN;
        return super.getRawFieldData(field);
    }
};
this.addMessageFieldDesc(BookingDetailModel.RATE_ID, Integer.class, MessageFieldDesc.REQUIRED, null);
this.addMessageFieldDesc(BookingDetailModel.CLASS_ID, Integer.class, MessageFieldDesc.REQUIRED, null);
this.addMessageFieldDesc(BookingDetailModel.DETAIL_DATE, Date.class, MessageFieldDesc.REQUIRED, null);
this.addMessageFieldDesc(ProductModel.PAX_PARAM, Short.class, MessageFieldDesc.OPTIONAL, null);
this.addMessageFieldDesc(ProductModel.ROOM_TYPE_PARAM, Short.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.COMPOUND_PARAM | PaxCategoryModel.CHILD_ID, null);
this.addMessageFieldDesc(OLD_DETAIL_DATE, Date.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.NOT_UNIQUE, null);    // Not in key]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6550">
		<LastChanged>2012-04-11T00:10:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getRateTypeID</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[int iRateType = 0;
try {
    Integer intRateType = (Integer)Converter.convertObjectToDatatype(this.get(BookingDetailModel.RATE_ID), Integer.class, null);
    if (intRateType != null)
        iRateType = intRateType.intValue();
} catch (Exception e) {
}
return iRateType;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6551">
		<LastChanged>2012-04-11T00:10:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getRateClassID</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[int iRateClass = 0;
try {
    Integer intRateClass = (Integer)Converter.convertObjectToDatatype(this.get(BookingDetailModel.CLASS_ID), Integer.class, null);
    if (intRateClass != null)
        iRateClass = intRateClass.intValue();
} catch (Exception e) {
}
return iRateClass;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6552">
		<LastChanged>2012-04-11T02:22:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,100</Sequence>
		<MethodName>convertIDToProductName</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>RecordOwner recordOwner, Object objProductID</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[String strProductName = DBConstants.BLANK;
ProductModel recProduct = this.getProductRecord(recordOwner, false);
try {
    if (recProduct.getTable().setHandle(objProductID, DBConstants.BOOKMARK_HANDLE) != null)
        strProductName = recProduct.getField(ProductModel.DESCRIPTION).toString();
} catch (DBException ex)    {
    ex.printStackTrace();
}
recProduct.free();
return strProductName;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6553">
		<LastChanged>2012-04-11T02:22:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,500</Sequence>
		<MethodName>convertProductNameToID</MethodName>
		<LogicDescription/>
		<MethodReturns>Integer</MethodReturns>
		<MethodInterface>RecordOwner recordOwner, String strProductName</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[Object objProductID = null;
ProductModel recProduct = this.getProductRecord(recordOwner, false);
try {
    recProduct.setKeyArea(ProductModel.DESC_SORT_KEY);
    recProduct.getField(ProductModel.DESCRIPTION).setString(strProductName);
    strProductName = recProduct.getField(ProductModel.DESC_SORT).toString();
    if (recProduct.getTable().seek(">="))
    {
        if (recProduct.getField(ProductModel.DESCRIPTION).toString().toUpperCase().startsWith(strProductName.toUpperCase()))
            objProductID = recProduct.getField(ProductModel.ID).getData();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
recProduct.free();
return (Integer)objProductID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6555">
		<LastChanged>2012-04-11T02:23:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,100</Sequence>
		<MethodName>convertIDToProductClass</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Object objProductClassID</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[String strProductClass = DBConstants.BLANK;
BaseClassModel recProductClass = this.getProductClass(null);
try {
    if (recProductClass.getTable().setHandle(objProductClassID, DBConstants.BOOKMARK_HANDLE) != null)
        strProductClass = recProductClass.getField(BaseClassModel.DESCRIPTION).toString();
} catch (DBException ex)    {
    ex.printStackTrace();
}
recProductClass.free();
return strProductClass;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6556">
		<LastChanged>2012-04-11T02:24:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,200</Sequence>
		<MethodName>convertProductClassCodeToID</MethodName>
		<LogicDescription/>
		<MethodReturns>Integer</MethodReturns>
		<MethodInterface>String strProductClassCode</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[Object objProductClassID = null;
BaseClassModel recProductClass = this.getProductClass(null);
try {
    recProductClass.setKeyArea(BaseClassModel.CODE_KEY);
    recProductClass.getField(BaseClassModel.CODE).setString(strProductClassCode);
    if (recProductClass.getTable().seek(DBConstants.EQUALS))
    {
        if (recProductClass.getField(BaseClassModel.CODE).toString().toUpperCase().startsWith(strProductClassCode.toUpperCase()))
            objProductClassID = recProductClass.getField(BaseClassModel.ID).getData();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
recProductClass.free();
return (Integer)objProductClassID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6557">
		<LastChanged>2012-04-11T02:24:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,300</Sequence>
		<MethodName>convertProductClassNameToID</MethodName>
		<LogicDescription/>
		<MethodReturns>Integer</MethodReturns>
		<MethodInterface>String strProductClassName</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[Object objProductClassID = null;
BaseClassModel recProductClass = this.getProductClass(null);
try {
    recProductClass.setKeyArea(BaseClassModel.DESCRIPTION_KEY);
    recProductClass.getField(BaseClassModel.DESCRIPTION).setString(strProductClassName);
    if (recProductClass.getTable().seek(">="))
    {
        if (recProductClass.getField(BaseClassModel.DESCRIPTION).toString().toUpperCase().startsWith(strProductClassName.toUpperCase()))
            objProductClassID = recProductClass.getField(BaseClassModel.ID).getData();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
recProductClass.free();
return (Integer)objProductClassID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6558">
		<LastChanged>2012-04-11T02:25:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,100</Sequence>
		<MethodName>convertIDToProductRatePlan</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Object objRatePlanID</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[String strProductRate = DBConstants.BLANK;
BaseRateModel recProductRate = this.getProductRate(null);
try {
    if (recProductRate.getTable().setHandle(objRatePlanID, DBConstants.BOOKMARK_HANDLE) != null)
        strProductRate = recProductRate.getField(BaseRateModel.DESCRIPTION).toString();
} catch (DBException ex)    {
    ex.printStackTrace();
}
recProductRate.free();
return strProductRate;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6559">
		<LastChanged>2012-04-11T01:55:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,500</Sequence>
		<MethodName>getProductClass</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseClassModel</MethodReturns>
		<MethodInterface>RecordOwner recordOwner</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6560">
		<LastChanged>2012-04-11T02:25:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,200</Sequence>
		<MethodName>convertProductRatePlanToID</MethodName>
		<LogicDescription/>
		<MethodReturns>Integer</MethodReturns>
		<MethodInterface>String strRatePlanDesc</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[Object objProductRateID = null;
BaseRateModel recProductRate = this.getProductRate(null);
try {
    recProductRate.setKeyArea(BaseRateModel.DESCRIPTION_KEY);
    recProductRate.getField(BaseRateModel.DESCRIPTION).setString(strRatePlanDesc);
    if (recProductRate.getTable().seek(">="))
    {
        if (recProductRate.getField(BaseRateModel.DESCRIPTION).toString().toUpperCase().startsWith(strRatePlanDesc.toUpperCase()))
            objProductRateID = recProductRate.getField(BaseRateModel.ID).getData();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
recProductRate.free();
return (Integer)objProductRateID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6561">
		<LastChanged>2012-04-11T01:55:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,500</Sequence>
		<MethodName>getProductRate</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseRateModel</MethodReturns>
		<MethodInterface>RecordOwner recordOwner</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6563">
		<LastChanged>2012-04-11T00:10:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>getTargetDate</MethodName>
		<LogicDescription/>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource>return (Date)this.get(BookingDetailModel.DETAIL_DATE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6564">
		<LastChanged>2012-04-11T09:32:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>8,000</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = Constants.NORMAL_RETURN;
BookingDetailModel recBookingDetail = (BookingDetailModel)record;

this.getRawFieldData(recBookingDetail.getField(BookingDetailModel.DETAIL_DATE));
if ((this.get(ProductModel.CODE) != null) && (!DBConstants.BLANK.equals(this.get(ProductModel.CODE))))
{
    ProductModel recProduct = recBookingDetail.getProduct();
    int iOldOrder = recProduct.getDefaultOrder();
    try {
        recProduct.getField(ProductModel.CODE).setString((String)this.get(ProductModel.CODE));
        recProduct.setKeyArea(ProductModel.CODE_KEY);
        if (recProduct.getTable().seek(null))
            ((BaseField)recBookingDetail.getField(BookingDetailModel.PRODUCT_ID)).moveFieldToThis((BaseField)recProduct.getField(ProductModel.ID));
    } catch (DBException ex)    {
        ex.printStackTrace();
    } finally {
        ((Record)recProduct).setKeyArea(iOldOrder);
    }
}
if (recBookingDetail.getField(BookingDetailModel.PRODUCT_ID).isNull())
    this.getRawFieldData(recBookingDetail.getField(BookingDetailModel.PRODUCT_ID));

this.getRawFieldData(recBookingDetail.getField(BookingDetailModel.RATE_ID));
this.getRawFieldData(recBookingDetail.getField(BookingDetailModel.CLASS_ID));

iErrorCode = super;

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6565">
		<LastChanged>2012-04-11T09:37:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>8,100</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[String iField = null;
if (record.getField(BookingDetailModel.INFO_STATUS_ID).getValue() != InfoStatusModel.VALID)
{
    iField = BookingDetailModel.INFO_STATUS_ID;        // The information must be valid to lookup the price
    if (this.getMessageDataParent() instanceof ProductRequest)
        if (RequestType.INFORMATION.equalsIgnoreCase(((ProductRequest)this.getMessageDataParent()).getRequestType()))
            iField = null;    // Special case - Info status not required for an info request
}
if (record.getField(BookingDetailModel.DETAIL_DATE).isNull())
    if (this.getMessageFieldDesc(BookingDetailModel.DETAIL_DATE) != null)
        if (this.getMessageFieldDesc(BookingDetailModel.DETAIL_DATE).isRequired())
            iField = BookingDetailModel.DETAIL_DATE;
if (record.getField(BookingDetailModel.PRODUCT_ID).isNull())
    iField = BookingDetailModel.PRODUCT_ID;
if (record.getField(BookingDetailModel.RATE_ID).isNull())
    if (this.getMessageFieldDesc(BookingDetailModel.RATE_ID) != null)
        if (this.getMessageFieldDesc(BookingDetailModel.RATE_ID).isRequired())
            iField = BookingDetailModel.RATE_ID;
if (record.getField(BookingDetailModel.CLASS_ID).isNull())
    if (this.getMessageFieldDesc(BookingDetailModel.CLASS_ID) != null)
        if (this.getMessageFieldDesc(BookingDetailModel.CLASS_ID).isRequired())
            iField = BookingDetailModel.CLASS_ID;
int iStatus = super.checkRequestParams(record);
if (iField != null)
{
    iStatus = CostStatusModel.DATA_REQUIRED;        // The information must be valid to lookup the price
    String strError = "Data required in the {0} field";
    if (record.getTask() != null)
        strError = record.getTask().getApplication().getResources(ThinResourceConstants.ERROR_RESOURCE, true).getString(strError);
    strError = MessageFormat.format(strError, record.getField(iField).getFieldDesc());
    ((BookingDetailModel)record).setErrorMessage((ProductRequest)this.getMessageDataParent(), strError);
}
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6567">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductResponseMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductRateResponse</MethodClassName>
		<LogicSource>return new ProductRateResponseMessageData(this, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6568">
		<LastChanged>2012-04-11T00:10:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductRateResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMessageFieldDesc(BookingDetailModel.TOTAL_COST, Double.class, MessageFieldDesc.REQUIRED, null);
this.addMessageFieldDesc(BookingDetailModel.PP_COST, Double.class, MessageFieldDesc.REQUIRED, null);
this.addMessageFieldDesc(NEW_RATE_CLASS_ID_PARAM, Integer.class, MessageFieldDesc.REQUIRED, null);
//?this.addMessageFieldDesc(BookingDetailModel.CLASS_ID, Integer.class, MessageFieldDesc.REQUIRED, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6569">
		<LastChanged>2012-04-11T14:54:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductRateResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[int iInfoStatus = super;
BookingDetailModel recBookingDetail = (BookingDetailModel)record;
if (recBookingDetail.getField(BookingDetailModel.EXCHANGE).getValue() == 0)
{
    ProductModel recProduct = recBookingDetail.getProduct();
    if (recProduct != null)
    {
        Vendor recVendor = (Vendor)((ReferenceField)recProduct.getField(ProductModel.VENDOR_ID)).getReference();
        if (recVendor != null)
        {
            Currencys recCurrencys = (Currencys)((ReferenceField)recVendor.getField(recVendor.CURRENCYS_ID)).getReference();
            if (recCurrencys != null)
            {
                if (!recCurrencys.getField(Currencys.COSTING_RATE).isNull())
                    ((Record)recBookingDetail).getField(BookingDetailModel.EXCHANGE).moveFieldToThis((BaseField)recCurrencys.getField(Currencys.COSTING_RATE));
                else
                    ((Record)recBookingDetail).getField(BookingDetailModel.EXCHANGE).moveFieldToThis((BaseField)recCurrencys.getField(Currencys.COSTING_RATE));
            }
        }
    }
    if (recBookingDetail.getField(BookingDetailModel.EXCHANGE).getValue() == 0)
        recBookingDetail.getField(BookingDetailModel.EXCHANGE).setValue(1.0);
}
this.getRawFieldData(recBookingDetail.getField(BookingDetailModel.TOTAL_COST));
if (recBookingDetail.getField(BookingDetailModel.MARKUP_FROM_LAST).getValue() > 0)
    recBookingDetail.getField(BookingDetailModel.TOTAL_COST).setValue(Math.floor(recBookingDetail.getField(BookingDetailModel.TOTAL_COST).getValue() * (1 + recBookingDetail.getField(BookingDetailModel.MARKUP_FROM_LAST).getValue()) * 100 + 0.5) / 100);
return iInfoStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6570">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setPPCost</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>double dCost</MethodInterface>
		<MethodClassName>ProductRateResponseMessageData</MethodClassName>
		<LogicSource>this.put(BookingDetailModel.PP_COST, new Double(dCost));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6571">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>setNewRateClassID</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iClassID</MethodInterface>
		<MethodClassName>ProductRateResponseMessageData</MethodClassName>
		<LogicSource>this.put(NEW_RATE_CLASS_ID_PARAM, new Integer(iClassID));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6572">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setRateClassID</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iClassID</MethodInterface>
		<MethodClassName>ProductRateResponseMessageData</MethodClassName>
		<LogicSource>this.put(BookingDetailModel.CLASS_ID, new Integer(iClassID));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6573">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductRequest</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMessageDataDesc(this.createProductMessageData());
this.addMessageDataDesc(new BookingMessageData(this, BOOKING_MESSAGE));
this.addMessageDataDesc(new PassengerMessageData(this, PASSENGER_MESSAGE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6577">
		<LastChanged>2012-04-11T23:09:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>initBookingApTrx</MethodName>
		<LogicDescription>Make sure this BookingDetail is linked to an ApTrx.</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>ProductRequest</MethodClassName>
		<LogicSource><![CDATA[Record recBookingDetail = (Record)record; 
if (!recBookingDetail.getField(BookingDetailModel.AP_TRX_ID).isNull())
{
    int iOldOrder = recBookingDetail.getDefaultOrder();
    FileListener listener = null;
    Object bookmark = null;
    try {
        bookmark = recBookingDetail.getHandle(DBConstants.BOOKMARK_HANDLE);
        ApTrx recApTrx = (ApTrx)((ReferenceField)recBookingDetail.getField(BookingDetailModel.AP_TRX_ID)).getReference();
        Vendor recVendor = (Vendor)((ReferenceField)recApTrx.getField(ApTrx.VENDOR_ID)).getReference();
        Record recTour = (Record)((ReferenceField)recApTrx.getField(ApTrx.TOUR_ID)).getReference();
        if (recBookingDetail.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
            recBookingDetail.set();

        int iProductTypeID = 0;
        if (recVendor != null)
        {
            if ((OperationTypeField.LIKE_TOGETHER_CODE.equalsIgnoreCase(recVendor.getField(Vendor.OPERATION_TYPE_CODE).toString()))
                || (OperationTypeField.INDIVIDUALLY_CODE.equalsIgnoreCase(recVendor.getField(Vendor.OPERATION_TYPE_CODE).toString())))
                    iProductTypeID = (int)recBookingDetail.getField(BookingDetailModel.PRODUCT_TYPE_ID).getValue();
        }
        // Ouch - This is very expensive, but realistically booking orders are not very frequent
        recBookingDetail = Record.makeRecordFromClassName(BookingDetailModel.THICK_CLASS, recBookingDetail.getRecordOwner());

        recBookingDetail.setKeyArea(BookingDetailModel.TOUR_ID_KEY);
        recBookingDetail.addListener(listener = new SubFileFilter(recTour.getField(TourModel.ID), BookingDetailModel.TOUR_ID, recVendor.getField(Vendor.ID), BookingDetailModel.VENDOR_ID, null, null));
        BaseTable tblBookingDetail = recBookingDetail.getTable();
        tblBookingDetail.close();

        while (tblBookingDetail.next() != null)
        {   // Spin until I get to the right product type.
            if (iProductTypeID == 0)
                break;
            if (iProductTypeID == tblBookingDetail.getCurrentTable().getRecord().getField(BookingDetailModel.PRODUCT_TYPE_ID).getValue())
                break;
        }

        recApTrx.updateThisApTrx(tblBookingDetail, recTour, recVendor, iProductTypeID);
        
        if (bookmark != null)
        {
            ((Record)record).setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
            ((Record)record).edit();
        }
    } catch (DBException e) {
        e.printStackTrace();
    } finally {
        if (listener != null)
            recBookingDetail.removeListener(listener, true);
        recBookingDetail.setKeyArea(iOldOrder);
    }
    if (record != recBookingDetail)
        recBookingDetail.free();
    
    return DBConstants.NORMAL_RETURN; // Good already linked to an ApTrx
}
ApTrx recApTrx = (ApTrx)((ReferenceField)recBookingDetail.getField(BookingDetailModel.AP_TRX_ID)).getReferenceRecord();
return recApTrx.linkBookingDetailToApTrx((BookingDetailModel)record);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6579">
		<LastChanged>2012-04-11T10:14:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMessageFieldDesc(BookingHotelModel.NIGHTS, Short.class, MessageFieldDesc.REQUIRED, null);
this.addMessageFieldDesc(ProductModel.ROOM_TYPE_PARAM, Short.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.COMPOUND_PARAM | PaxCategoryModel.CHILD_ID, null);
this.addMessageFieldDesc(HotelModel.MEAL_PLAN_ID_PARAM, Integer.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.COMPOUND_PARAM | 4, null);
this.addMessageFieldDesc(HotelModel.MEAL_PLAN_QTY_PARAM, Short.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.COMPOUND_PARAM | 4, null);
this.addMessageFieldDesc(HotelModel.MEAL_PLAN_DAYS_PARAM, Short.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.COMPOUND_PARAM | 4, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6580">
		<LastChanged>2012-04-11T10:17:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource><![CDATA[int iStatus = super;
if (record.getField(BookingHotelModel.NIGHTS).isNull())
    if (this.getMessageFieldDesc(BookingHotelModel.NIGHTS) != null)
{
    iStatus = CostStatusModel.DATA_REQUIRED;        // The information must be valid to lookup the price
    String strError = "Data required in the {0} field";
    if (record.getTask() != null)
        strError = record.getTask().getApplication().getResources(ThinResourceConstants.ERROR_RESOURCE, true).getString(strError);
    strError = MessageFormat.format(strError, record.getField(BookingHotelModel.NIGHTS).getFieldDesc());
    ((BookingDetailModel)record).setErrorMessage((ProductRequest)this.getMessageDataParent(), strError);
}
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6581">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource><![CDATA[((Record)record).getField(BookingHotelModel.SINGLE_COST).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
((Record)record).getField(BookingHotelModel.DOUBLE_COST).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
((Record)record).getField(BookingHotelModel.TRIPLE_COST).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
((Record)record).getField(BookingHotelModel.QUAD_COST).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
((Record)record).getField(BookingHotelModel.ROOM_COST).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
((Record)record).getField(BookingHotelModel.MEAL_COST).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6582">
		<LastChanged>2012-04-11T14:56:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
BookingDetailModel recBookingDetail = (BookingDetailModel)record;
this.putRawFieldData(recBookingDetail.getField(BookingHotelModel.NIGHTS));
for (int iMealNo = 1; iMealNo <= 4; iMealNo++)
{
    int iFieldSeq = ((Record)recBookingDetail).getFieldSeq(BookingHotelModel.MEAL_PLAN_1ID) + ((iMealNo - 1) * (((Record)recBookingDetail).getFieldSeq(BookingHotelModel.MEAL_PLAN_2ID) - ((Record)recBookingDetail).getFieldSeq(BookingHotelModel.MEAL_PLAN_1ID)));
    int iMealPlanID = (int)recBookingDetail.getField(iFieldSeq).getValue();
    if (iMealPlanID > 0)
    {
        this.put(HotelModel.MEAL_PLAN_ID_PARAM + Integer.toString(iMealNo), recBookingDetail.getField(iFieldSeq).getData());
        Field fieldMeals = recBookingDetail.getField(iFieldSeq + (((Record)recBookingDetail).getFieldSeq(BookingHotelModel.MEAL_PLAN_1_QTY) - ((Record)recBookingDetail).getFieldSeq(BookingHotelModel.MEAL_PLAN_1ID)));
        this.put(HotelModel.MEAL_PLAN_QTY_PARAM + Integer.toString(iMealNo), fieldMeals.getData());
        Field fieldDays = recBookingDetail.getField(iFieldSeq + (((Record)recBookingDetail).getFieldSeq(BookingHotelModel.MEAL_PLAN_1_DAYS) - ((Record)recBookingDetail).getFieldSeq(BookingHotelModel.MEAL_PLAN_1ID)));
        this.put(HotelModel.MEAL_PLAN_DAYS_PARAM + Integer.toString(iMealNo), fieldDays.getData());
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6583">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource><![CDATA[this.put(BookingHotelModel.NIGHTS, propertyOwner.getProperty(BookingHotelModel.NIGHTS));
this.put(BookingHotelModel.CLASS_ID, propertyOwner.getProperty(BookingHotelModel.CLASS_ID));
this.put(BookingHotelModel.RATE_ID, propertyOwner.getProperty(BookingHotelModel.RATE_ID));
this.put(ProductModel.ROOM_TYPE_PARAM, propertyOwner.getProperty(ProductModel.ROOM_TYPE_PARAM));
this.put(BookingHotelModel.DETAIL_DATE, propertyOwner.getProperty(BookingHotelModel.DETAIL_DATE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6584">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource><![CDATA[this.getRawFieldData(((Record)record).getField(BookingHotelModel.NIGHTS));

return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6587">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getNights</MethodName>
		<LogicDescription/>
		<MethodReturns>short</MethodReturns>
		<MethodInterface/>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource><![CDATA[Short shNights = (Short)this.get(BookingHotelModel.NIGHTS);
if (shNights == null)
    shNights = DURATION_DEFAULT;
return shNights.shortValue();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6588">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,600</Sequence>
		<MethodName>getMealPlanID</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>int iMealSeq</MethodInterface>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource><![CDATA[Integer intMealPlanID = (Integer)this.get(HotelModel.MEAL_PLAN_ID_PARAM + Integer.toString(iMealSeq));
if (intMealPlanID == null)
    intMealPlanID = IntegerField.ZERO; 
return intMealPlanID.intValue();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6589">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,700</Sequence>
		<MethodName>getMealQuantity</MethodName>
		<LogicDescription/>
		<MethodReturns>short</MethodReturns>
		<MethodInterface>int iMealSeq</MethodInterface>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource><![CDATA[Short shMealPlanQty = (Short)this.get(HotelModel.MEAL_PLAN_QTY_PARAM + Integer.toString(iMealSeq));
if (shMealPlanQty == null)
    shMealPlanQty = ShortField.ZERO; 
return shMealPlanQty.shortValue();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6590">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,800</Sequence>
		<MethodName>getMealDays</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>int iMealSeq</MethodInterface>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource><![CDATA[Short shMealDays = (Short)this.get(HotelModel.MEAL_PLAN_DAYS_PARAM + Integer.toString(iMealSeq));
if (shMealDays == null)
    shMealDays = ShortField.ZERO; 
return shMealDays.shortValue();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6591">
		<LastChanged>2012-04-11T10:18:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,900</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource><![CDATA[if (bFindFirst)
    if (recordOwner != null)
        if (recordOwner.getRecord(HotelModel.HOTEL_FILE) != null)
            return (HotelModel)recordOwner.getRecord(HotelModel.HOTEL_FILE);
return (HotelModel)Record.makeRecordFromClassName(HotelModel.THICK_CLASS, recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6592">
		<LastChanged>2012-04-11T10:19:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,500</Sequence>
		<MethodName>getProductClass</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource>return (HotelClassModel)Record.makeRecordFromClassName(HotelClassModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6593">
		<LastChanged>2012-04-11T10:19:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>7,500</Sequence>
		<MethodName>getProductRate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource>return (HotelRateModel)Record.makeRecordFromClassName(HotelRateModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6599">
		<LastChanged>2012-04-11T11:17:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateAvailResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[int iInfoStatus = super.getRawRecordData(record);
BookingHotelModel recBookingHotel = (BookingHotelModel)record;

if (iInfoStatus == BaseStatus.VALID)
{
    HotelAvailabilityResponse response = new HotelAvailabilityResponse(this.getMessage(), null);
    iInfoStatus = response.getRawRecordData(record);        
    String iFieldSeq = BookingDetailModel.INVENTORY_STATUS_ID;
    recBookingHotel.getField(iFieldSeq).setValue(iInfoStatus);   // Usually VALID
}

return iInfoStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6600">
		<LastChanged>2012-04-11T14:57:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[int iInfoStatus = super;
BookingHotelModel recBookingHotel = (BookingHotelModel)record;
for (int iFieldSeq = ((Record)recBookingHotel).getFieldSeq(BookingHotelModel.SINGLE_COST), iRoomCategory = PaxCategoryModel.SINGLE_ID; iFieldSeq <= ((Record)recBookingHotel).getFieldSeq(BookingHotelModel.QUAD_COST); iFieldSeq++, iRoomCategory++)
{
    double dRoomCost = this.getRoomCost(iRoomCategory);
    recBookingHotel.getField(iFieldSeq).setValue(dRoomCost);
}
this.getRawFieldData(recBookingHotel.getField(BookingHotelModel.ROOM_COST));
this.getRawFieldData(recBookingHotel.getField(BookingHotelModel.MEAL_COST));
return iInfoStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6601">
		<LastChanged>2012-04-11T11:18:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setRoomCost</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iRoomCategory, double dCost</MethodInterface>
		<MethodClassName>HotelRateResponseMessageData</MethodClassName>
		<LogicSource>this.put(BookingDetailModel.TOTAL_COST + Integer.toString(iRoomCategory - PaxCategoryModel.SINGLE_ID + 1), new Double(dCost));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6602">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>setTotalRoomCost</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>double dCost</MethodInterface>
		<MethodClassName>HotelRateResponseMessageData</MethodClassName>
		<LogicSource>this.put(BookingHotelModel.ROOM_COST, new Double(dCost));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6603">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setTotalMealCost</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>double dCost</MethodInterface>
		<MethodClassName>HotelRateResponseMessageData</MethodClassName>
		<LogicSource>this.put(BookingHotelModel.MEAL_COST, new Double(dCost));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6604">
		<LastChanged>2012-04-11T11:18:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getRoomCost</MethodName>
		<LogicDescription/>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>int iRoomCategory</MethodInterface>
		<MethodClassName>HotelRateResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[Double dblRoomCost = (Double)this.get(BookingDetailModel.TOTAL_COST + Integer.toString(iRoomCategory - PaxCategoryModel.SINGLE_ID + 1));
if (dblRoomCost == null)
    return 0;
return dblRoomCost.doubleValue();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6605">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingRequest</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6606">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductResponseMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponse</MethodClassName>
		<LogicSource>return new HotelRateResponseMessageData(this, BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6608">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns>ProductMessageData</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductRequest</MethodClassName>
		<LogicSource>return new ProductMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6625">
		<LastChanged>2012-04-11T09:38:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PassengerMessageData</MethodClassName>
		<LogicSource><![CDATA[super;

this.addMessageDataDesc(new PassengerDetailMessageData(this, PassengerDetailMessageData.PASSENGER_DETAIL));

this.addMessageFieldDesc(ProductModel.PAX_PARAM, Short.class, MessageFieldDesc.REQUIRED, null);
this.addMessageFieldDesc(ProductModel.ROOM_TYPE_PARAM, Short.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.COMPOUND_PARAM | PaxCategoryModel.CHILD_ID, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6630">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[String strParamOrig = strParam;
if (strParam.startsWith(ProductModel.ROOM_TYPE_PARAM))
    strParam = ProductModel.ROOM_TYPE_PARAM;
MessageDataDesc messageDataDesc = super;
if (messageDataDesc != null)
    if (strParamOrig.startsWith(ProductModel.ROOM_TYPE_PARAM))
        messageDataDesc.setKey(strParamOrig);
return messageDataDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6631">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMessageFieldDesc(BookingDetailModel.TOTAL_COST, Double.class, MessageFieldDesc.OPTIONAL, null);
this.addMessageFieldDesc(BookingHotelModel.ROOM_COST, Double.class, MessageFieldDesc.OPTIONAL, null);
this.addMessageFieldDesc(BookingHotelModel.MEAL_COST, Double.class, MessageFieldDesc.OPTIONAL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6632">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[String strParamOrig = strParam;
if (strParam.startsWith(BookingDetailModel.TOTAL_COST))
    strParam = BookingDetailModel.TOTAL_COST;
MessageDataDesc messageDataDesc = super;
if (strParamOrig.startsWith(BookingDetailModel.TOTAL_COST))
    messageDataDesc.setKey(strParamOrig);
return messageDataDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6640">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>LineMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LineMessageData</MethodClassName>
		<LogicSource><![CDATA[super;
this.setNodeType(NON_UNIQUE_NODE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6641">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PassengerMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PassengerMessageData</MethodClassName>
		<LogicSource><![CDATA[if (strKey == null)
    strKey = PassengerMessageData.PASSENGER_MESSAGE;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6642">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PassengerMessageData</MethodClassName>
		<LogicSource><![CDATA[String strParamOrig = strParam;
if (strParam.startsWith(ProductModel.ROOM_TYPE_PARAM))
    strParam = ProductModel.ROOM_TYPE_PARAM;
MessageDataDesc messageDataDesc = super;
if (strParamOrig.startsWith(ProductModel.ROOM_TYPE_PARAM))
    messageDataDesc.setKey(strParamOrig);
return messageDataDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6643">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[if (strKey == null)
    strKey = ProductMessageData.PRODUCT_MESSAGE;
super;
this.setNodeType(NON_UNIQUE_NODE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6644">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BookingMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingMessageData</MethodClassName>
		<LogicSource><![CDATA[if (strKey == null)
    strKey = BookingMessageData.BOOKING_MESSAGE;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6645">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProductRateResponseMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductRateResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[if (strKey == null)
    strKey = BaseProductResponse.PRODUCT_RESPONSE_MESSAGE;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6646">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PassengerDetailMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PassengerDetailMessageData</MethodClassName>
		<LogicSource><![CDATA[if (strKey == null)
    strKey = PassengerDetailMessageData.PASSENGER_DETAIL;
super;
this.setNodeType(NON_UNIQUE_NODE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6656">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequest</MethodClassName>
		<LogicSource>return new HotelMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6657">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInformationRequest</MethodClassName>
		<LogicSource>return new HotelMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6658">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailabilityRequest</MethodClassName>
		<LogicSource>return new HotelMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6659">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingRequest</MethodClassName>
		<LogicSource>return new HotelMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6660">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirAvailabilityRequest</MethodClassName>
		<LogicSource>return new AirMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6661">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirBookingRequest</MethodClassName>
		<LogicSource>return new AirMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6662">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirInformationRequest</MethodClassName>
		<LogicSource>return new AirMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6663">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirRateRequest</MethodClassName>
		<LogicSource>return new AirMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6664">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarAvailabilityRequest</MethodClassName>
		<LogicSource>return new CarMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6665">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarBookingRequest</MethodClassName>
		<LogicSource>return new CarMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6666">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarInformationRequest</MethodClassName>
		<LogicSource>return new CarMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6667">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarRateRequest</MethodClassName>
		<LogicSource>return new CarMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6668">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseAvailabilityRequest</MethodClassName>
		<LogicSource>return new CruiseMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6669">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseBookingRequest</MethodClassName>
		<LogicSource>return new CruiseMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6670">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseInformationRequest</MethodClassName>
		<LogicSource>return new CruiseMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6671">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseRateRequest</MethodClassName>
		<LogicSource>return new CruiseMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6672">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemAvailabilityRequest</MethodClassName>
		<LogicSource>return new ItemMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6673">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemBookingRequest</MethodClassName>
		<LogicSource>return new ItemMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6674">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemInformationRequest</MethodClassName>
		<LogicSource>return new ItemMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6675">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemRateRequest</MethodClassName>
		<LogicSource>return new ItemMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6676">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandAvailabilityRequest</MethodClassName>
		<LogicSource>return new LandMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6677">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandBookingRequest</MethodClassName>
		<LogicSource>return new LandMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6678">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInformationRequest</MethodClassName>
		<LogicSource>return new LandMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6679">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateRequest</MethodClassName>
		<LogicSource>return new LandMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6680">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourAvailabilityRequest</MethodClassName>
		<LogicSource>return new TourMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6681">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourBookingRequest</MethodClassName>
		<LogicSource>return new TourMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6682">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourInformationRequest</MethodClassName>
		<LogicSource>return new TourMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6683">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourRateRequest</MethodClassName>
		<LogicSource>return new TourMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6684">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationAvailabilityRequest</MethodClassName>
		<LogicSource>return new TransportationMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6685">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationBookingRequest</MethodClassName>
		<LogicSource>return new TransportationMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6686">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationInformationRequest</MethodClassName>
		<LogicSource>return new TransportationMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6687">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationRateRequest</MethodClassName>
		<LogicSource>return new TransportationMessageData(this, PRODUCT_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6691">
		<LastChanged>2012-04-11T13:55:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[int iInfoStatus = super;
BookingLandModel recBookingLand = (BookingLandModel)record;
this.getRawFieldData(recBookingLand.getField(BookingLandModel.PP_COST));
this.getRawFieldData(recBookingLand.getField(BookingLandModel.PMC_COST));
this.getRawFieldData(recBookingLand.getField(BookingLandModel.SIC_COST));
// In case the rate class has changed
// This is some complicated logic... be careful
// If the class has changed, the rate key is not correct, so you must change it now.
if (this.get(NEW_RATE_CLASS_ID_PARAM) != null)
{
    int iRateClass = ((Integer)this.get(NEW_RATE_CLASS_ID_PARAM)).intValue();
    BaseField fldClass = ((Record)record).getField(BookingLandModel.CLASS_ID);
    if (iRateClass != 0)
        if (iRateClass != fldClass.getValue())
    {   // The rate class changed, recalc the rate key.
        BaseMessageHeader sharedMessageHeader = this.getMessage().getMessageHeader();
        BaseMessage tempMessage = new TreeMessage(sharedMessageHeader, null);   // Not kosher to share, but okay for this short use
        LandRateRequest tempRequest = new LandRateRequest(tempMessage, null);
        boolean[] rgbEnabled = fldClass.setEnableListeners(false); // Just being careful
        tempRequest.handlePutRawRecordData(record);
        String strSentMessageKey = tempRequest.getMessageKey(null).toString();
        String strOrigMessageKey = recBookingLand.getField(BookingDetailModel.COST_REQUEST_KEY).toString();
        if (strSentMessageKey.equals(strOrigMessageKey))
        {   // Good, this response matches the original request
            recBookingLand.getField(BookingLandModel.CLASS_ID).setData(this.get(NEW_RATE_CLASS_ID_PARAM));   // Set new class
            recBookingLand.getField(BookingDetailModel.DESCRIPTION).setString(recBookingLand.setupProductDesc());   // The description changes
            String strNewMessageKey = tempRequest.getMessageKey(null).toString();
            recBookingLand.getField(BookingDetailModel.COST_REQUEST_KEY).setString(strNewMessageKey);
        }
        //tempRequest.free();
        tempMessage.setMessageHeader(null);
        tempMessage.free();
        fldClass.setEnableListeners(rgbEnabled);
    }
}
return iInfoStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6692">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setPMCCost</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>double dCost</MethodInterface>
		<MethodClassName>LandRateResponseMessageData</MethodClassName>
		<LogicSource>this.put(BookingLandModel.PMC_COST, new Double(dCost));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6693">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>setSICCost</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>double dCost</MethodInterface>
		<MethodClassName>LandRateResponseMessageData</MethodClassName>
		<LogicSource>this.put(BookingLandModel.SIC_COST, new Double(dCost));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6694">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductResponseMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateResponse</MethodClassName>
		<LogicSource>return new LandRateResponseMessageData(this, BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6698">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,000</Sequence>
		<MethodName>getDays</MethodName>
		<LogicDescription>Get the number of days this car is rented for</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CarMessageData</MethodClassName>
		<LogicSource><![CDATA[Integer intDays = (Integer)this.get(BookingCarModel.DAYS);
if (intDays == null)
    intDays = 1;
return intDays.intValue();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6699">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getKeyPrefix</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CancelResponse</MethodClassName>
		<LogicSource>return "message.cancel.";</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6700">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getKeyPrefix</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingResponse</MethodClassName>
		<LogicSource>return "message.booking.";</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6701">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getKeyPrefix</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInformationResponse</MethodClassName>
		<LogicSource>return "message.information.";</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6702">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getKeyPrefix</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductRateResponse</MethodClassName>
		<LogicSource>return "message.cost.";</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6703">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = Constants.NORMAL_RETURN;
// Do not clear the confirmation fields!
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6704">
		<LastChanged>2012-04-11T16:00:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelBookingChangeRequest</MethodClassName>
		<LogicSource><![CDATA[super;
((ProductMessageData)this.getMessageDataDesc(PRODUCT_MESSAGE)).addMessageFieldDesc(BookingDetailModel.REMOTE_BOOKING_NO, String.class, MessageFieldDesc.REQUIRED, MessageFieldDesc.NOT_UNIQUE | MessageFieldDesc.DONT_INIT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6705">
		<LastChanged>2012-04-11T00:10:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setRemoteBookingNo</MethodName>
		<LogicDescription>Set the remote booking number</LogicDescription>
		<MethodReturns/>
		<MethodInterface>String strRemoteBookingNo</MethodInterface>
		<MethodClassName>ProductResponseMessageData</MethodClassName>
		<LogicSource>this.put(BookingDetailModel.REMOTE_BOOKING_NO, strRemoteBookingNo);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6706">
		<LastChanged>2012-04-11T16:00:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingResponse</MethodClassName>
		<LogicSource><![CDATA[super;
((ProductResponseMessageData)this.getMessageDataDesc(PRODUCT_RESPONSE_MESSAGE)).addMessageFieldDesc(BookingDetailModel.REMOTE_BOOKING_NO, String.class, MessageFieldDesc.REQUIRED, MessageFieldDesc.NOT_UNIQUE | MessageFieldDesc.DONT_INIT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6707">
		<LastChanged>2012-04-11T16:00:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirBookingChangeRequest</MethodClassName>
		<LogicSource><![CDATA[super;
((ProductMessageData)this.getMessageDataDesc(PRODUCT_MESSAGE)).addMessageFieldDesc(BookingDetailModel.REMOTE_BOOKING_NO, String.class, MessageFieldDesc.REQUIRED, MessageFieldDesc.NOT_UNIQUE | MessageFieldDesc.DONT_INIT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6708">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>56</Sequence>
		<MethodName>createSharedDetailRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>String strProductType, RecordOwner recordOwner</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[if (ProductType.HOTEL.equalsIgnoreCase(strProductType))
    return new BookingHotel(recordOwner);
if (ProductType.LAND.equalsIgnoreCase(strProductType))
    return new BookingLand(recordOwner);
if (ProductType.AIR.equalsIgnoreCase(strProductType))
    return new BookingAir(recordOwner);
if (ProductType.CAR.equalsIgnoreCase(strProductType))
    return new BookingCar(recordOwner);
if (ProductType.CRUISE.equalsIgnoreCase(strProductType))
    return new BookingCruise(recordOwner);
if (ProductType.ITEM.equalsIgnoreCase(strProductType))
    return new BookingItem(recordOwner);
if (ProductType.TOUR.equalsIgnoreCase(strProductType))
    return new BookingTour(recordOwner);
if (ProductType.TRANSPORTATION.equalsIgnoreCase(strProductType))
    return new BookingTransportation(recordOwner);
return null;
]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6709">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCancelMsgReplyInProcessor</MethodClassName>
		<LogicSource><![CDATA[BaseMessage messageOrig = this.getOriginalMessage(internalMessage);
BaseProductMessageDesc message = (BaseProductMessageDesc)internalMessage.getMessageDataDesc(null);
if (messageOrig != null)
{   // Open the process message
    if (messageOrig.getMessageDataDesc(null) != null)
        if (messageOrig.getMessageDataDesc(null).getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE) instanceof ProductMessageData)
    {   // Always
        ProductMessageData productRequest = (ProductMessageData)messageOrig.getMessageDataDesc(null).getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
        String strProductType = (String)productRequest.get(BookingDetail.PRODUCT_TYPE);
        this.openProductFile(strProductType);
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6710">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>openProductFile</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>String strProductType</MethodInterface>
		<MethodClassName>BookingCancelMsgReplyInProcessor</MethodClassName>
		<LogicSource><![CDATA[Record record = BookingDetail.createSharedDetailRecord(strProductType, this);
if (record != this.getMainRecord())
{
    this.removeRecord(record);
    this.addRecord(record, true);
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6711">
		<LastChanged>2012-01-31T10:43:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getStatusFieldName</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCancelMsgReplyInProcessor</MethodClassName>
		<LogicSource>return BookingDetail.PRODUCT_STATUS_ID;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6713">
		<LastChanged>2012-04-11T23:12:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>850</Sequence>
		<MethodName>isOrderComponents</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BookingDetailModel recBookingDetail</MethodInterface>
		<MethodClassName>ProductRequest</MethodClassName>
		<LogicSource><![CDATA[Record recTour = ((ReferenceField)recBookingDetail.getField(BookingDetailModel.TOUR_ID)).getReference();
return recTour.getField(TourModel.ORDER_COMPONENTS).getState();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6714">
		<LastChanged>2012-04-11T16:00:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>isOrderComponents</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourBookingRequest</MethodClassName>
		<LogicSource><![CDATA[MessageTransport recMessageTransport = (MessageTransport)((ReferenceField)recBookingDetail.getField(BookingDetailModel.PRODUCT_MESSAGE_TRANSPORT_ID)).getReference();
if (recMessageTransport != null)
    if (recMessageTransport.isDirectTransport())
        return true;    // Special case - For direct tours, add the tour detail immediately
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6715">
		<LastChanged>2012-01-31T10:43:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>604</Sequence>
		<MethodName>getBookingTourHeader</MethodName>
		<LogicDescription>Get the correct remote tour header for this product.</LogicDescription>
		<MethodReturns>TourHeader</MethodReturns>
		<MethodInterface>BookingControl recBookingControl</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource>return (TourHeader)((ReferenceField)recBookingControl.getField(BookingControl.REMOTE_TOUR_HEADER_ID)).getReference();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6716">
		<LastChanged>2012-04-02T10:50:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>602</Sequence>
		<MethodName>addMessageBookingDetail</MethodName>
		<LogicDescription>Add the booking detail that goes with the product in this message</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BookingDetailModel recBookingDetail, BookingModel recBooking, TourModel recTour, String strMessageTransportID, MessageRecordDesc productRequest</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[//+ String strDestination = null;   // todo(don) Need to figure out where this message was sent to (what is my xyz [soap?] address?)

// HACK: I only did direct transport while I was testing since this would cause an endless message loop
//x recBookingDetail.addListener(new SetDirectTransportHandler(null));

return productRequest.handleGetRawRecordData(recBookingDetail);]]></LogicSource>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6717">
		<LastChanged>2012-01-31T10:43:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,304</Sequence>
		<MethodName>getBookingTourHeader</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[if (this.getField(TourHeader.TOUR_SERIES).getState() == true)
    return this;   // This is a valid tour header, don't need to set one up
if (recBookingControl != null)
    if (!recBookingControl.getField(BookingControl.TOUR_HEADER_TOUR_TYPE).isNull())
        if ((this.getEditMode() == DBConstants.EDIT_CURRENT) || (this.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
{
    TourTypeField fldTourType = (TourTypeField)recBookingControl.getField(BookingControl.TOUR_HEADER_TOUR_TYPE);
    int iTourTypeMask = fldTourType.getBitsToCheck();
    int iTourHeaderTourType = (int)recBookingControl.getField(BookingControl.TOUR_HEADER_TOUR_TYPE).getValue();
    if ((iTourHeaderTourType & (int)this.getField(TourHeader.TOUR_TYPE).getValue() & iTourTypeMask) != 0)
        return this;   // This is a valid tour header, don't need to set one up
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6718">
		<LastChanged>2012-04-07T08:43:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,302</Sequence>
		<MethodName>addMessageBookingDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[if (this.getField(TourHeader.TOUR_SERIES).getState() == true)
    productRequest.put(ProductRequest.PRODUCT_MESSAGE, null);   // Don't need to add this detail
if (productRequest != null)
{
    TourMessageData tourMessageData = (TourMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
    if (tourMessageData != null)
    {
        Integer objProductID = (Integer)tourMessageData.get("ProductID");
        Date objDetailDate = (Date)tourMessageData.get("DetailDate");
        if (objDetailDate != null)
        {
            Converter.initGlobals();
            Calendar calendar = Converter.gCalendar;
            calendar.setTime(objDetailDate);
            calendar.set(Calendar.HOUR_OF_DAY, DBConstants.HOUR_DATE_ONLY);
            calendar.set(Calendar.MINUTE, 0);
            calendar.set(Calendar.SECOND, 0);
            calendar.set(Calendar.MILLISECOND, 0);
            objDetailDate = calendar.getTime();
            if (objProductID != null)
                if (objProductID.equals(recTour.getField(TourModel.TOUR_HEADER_ID).getData()))
                    if (objDetailDate != null)
                        if (objDetailDate.equals(recTour.getField(TourModel.DEPARTURE_DATE).getData()))
                            productRequest.put(ProductRequest.PRODUCT_MESSAGE, null);   // Don't need to add this detail
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6719">
		<LastChanged>2012-04-07T12:24:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>350</Sequence>
		<MethodName>deleteTourDetail</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>TourModel recTour, BookingPaxModel recBookingPax, Field fldTourModuleID, Date dateStart</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[BaseField fldBookingPaxID = null;
if (recBookingPax != null)
    fldBookingPaxID = (BaseField)recBookingPax.getField(BookingPax.ID);
else
{
    fldBookingPaxID = new IntegerField(null, "ID", -1, null, null);
    fldBookingPaxID.setData(new Integer(0));
}
BookingAirHeader recBookingAirHeader = new BookingAirHeader(this.findRecordOwner());
recBookingAirHeader.addDetailBehaviors(this, recTour);
int iErrorCode = recBookingAirHeader.deleteAllDetail(this, fldBookingPaxID, (BaseField)fldTourModuleID, dateStart);
recBookingAirHeader.free();
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;

BookingLine recBookingLine = new BookingLine(this.findRecordOwner());
recBookingLine.addDetailBehaviors(this, recTour);
iErrorCode = recBookingLine.deleteAllDetail(this, fldBookingPaxID, (BaseField)fldTourModuleID, dateStart);
recBookingLine.free();
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;

BookingDetail recBookingDetail = new BookingDetail(this.findRecordOwner());
recBookingDetail.addDetailBehaviors(this, recTour);
iErrorCode = recBookingDetail.deleteAllDetail(this, fldBookingPaxID, (BaseField)fldTourModuleID, dateStart);
recBookingDetail.free();
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
if (recBookingPax != null)
    fldBookingPaxID.free();
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6720">
		<LastChanged>2012-03-15T17:00:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>deleteAllDetail</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Booking recBooking, BaseField fldBookingPaxID, BaseField fldTourModuleID, Date dateStart</MethodInterface>
		<MethodClassName>BookingSub</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
int iOldKeyOrder = this.getDefaultOrder();
this.setKeyArea(BookingSub.BOOKING_ID_KEY);
FileListener subFileBehavior = new SubFileFilter(recBooking, true);
this.addListener(subFileBehavior);

try   {
    this.close();
    while (this.hasNext())
    {
        BookingSub recBookingSub2 = (BookingSub)this.next();
        
        BaseField fldDetailModuleID = this.getField(BookingSub.MODULE_ID);
        Date dateDetailStart = ((DateTimeField)this.getField(BookingSub.MODULE_START_DATE)).getDateTime();
        if (this instanceof BookingDetail)
            if (this.getField(BookingDetail.PRODUCT_TYPE_ID).getValue() == ProductType.TOUR_ID)
        {
            fldDetailModuleID = this.getField(BookingDetail.PRODUCT_ID);
            dateDetailStart = ((DateTimeField)this.getField(BookingDetail.DETAIL_DATE)).getDateTime();                    
        }
        if ((fldTourModuleID != null) && (!fldTourModuleID.equals(fldDetailModuleID)))
            continue;
        if ((dateStart != null) && (!dateStart.equals(dateDetailStart)))
            continue;

        recBookingSub2.edit();
        recBookingSub2.remove();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    this.removeListener(subFileBehavior, true);
    this.setKeyArea(iOldKeyOrder);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6721">
		<LastChanged>2012-04-06T08:48:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>603</Sequence>
		<MethodName>changeMessageBookingDetail</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BookingDetailModel recBookingDetail, BookingModel recBooking, TourModel recTour, String strMessageTransportID, MessageRecordDesc productRequest</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[String strDestination = null;   // todo(don) Need to figure out where this message was sent to (what is my xyz [soap?] address?)

// HACK: to make sure the local products were booked directly, otherwise I return a booking in progress to the remote client
//x recBookingDetail.addListener(new SetDirectTransportHandler(null));

return productRequest.handleGetRawRecordData(recBookingDetail);   // Add the booking detail]]></LogicSource>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6722">
		<LastChanged>2012-04-07T08:45:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,303</Sequence>
		<MethodName>changeMessageBookingDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[    if (this.getField(TourHeader.TOUR_SERIES).getState() == true)
    {
        ProductMessageData productMessage = (ProductMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
        Date date = (Date)productMessage.get(BookingDetailModel.DETAIL_DATE);
        if (date != null)
        {   // Departure date change.
            TourClass recTourClass = (TourClass)((ReferenceField)this.getField(TourHeader.TOUR_CLASS_ID)).getReferenceRecord(this.findRecordOwner());
            BaseField fldTourCode = this.getField(TourHeader.CODE);
            DateField fldDepartureDate = (DateField)recTour.getField(TourModel.DEPARTURE_DATE);
            BaseField fldTourDesc = this.getField(TourHeader.DESCRIPTION);
                    
            FieldListener fieldBehavior = null;
            fieldBehavior = new ChangeTourHeaderHandler(this, recTourClass, (TourModel)recTour, (BookingModel)recBooking, fldTourCode, fldDepartureDate, null);
            fldDepartureDate.addListener(fieldBehavior);
            fldDepartureDate.setDateTime(date, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
//          +message.addPassengersToBooking(recBooking);
//          +message.addContactToBooking(recBooking);
        }
        return DBConstants.NORMAL_RETURN;     // For tour headers, the detail is the header, so no detail must be changed
    }
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6723">
		<LastChanged>2012-04-07T12:20:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>325</Sequence>
		<MethodName>changeTourDetail</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>TourModel recTour, BookingPaxModel recBookingPax, TourHeaderModel recTourHeader, Date dateOriginal, Date dateStart</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[BaseField fldBookingPaxID = null;
if (recBookingPax != null)
    fldBookingPaxID = (BaseField)recBookingPax.getField(BookingPax.ID);
else
{
    fldBookingPaxID = new IntegerField(null, "ID", -1, null, null);
    fldBookingPaxID.setData(new Integer(0));
}
BookingAnswer recBookingAnswer = new BookingAnswer(this.findRecordOwner());
recBookingAnswer.addDetailBehaviors(this, recTour);
int iErrorCode = recBookingAnswer.changeAllDetail(this, fldBookingPaxID, (BaseField)recTourHeader.getField(TourHeader.ID), dateOriginal, dateStart);
recBookingAnswer.free();
recBookingAnswer = null;    // The makes answers re-resolve
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;

iErrorCode = this.deleteTourDetail(recTour, recBookingPax, (BaseField)recTourHeader.getField(TourHeader.ID), dateOriginal);
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;

BooleanField fldAskForAnswer = new BooleanField(null, "Ask", DBConstants.DEFAULT_FIELD_LENGTH, null, null);
fldAskForAnswer.setState(false);    // Don't ask, I just moved all the answers to this module
iErrorCode = this.addTourDetail(recTour, recTourHeader, recBookingPax, recBookingAnswer, dateStart, fldAskForAnswer);

fldAskForAnswer.free();
if (recBookingPax != null)
    fldBookingPaxID.free();

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="6724">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>changeAllDetail</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Booking recBooking, BaseField fldBookingPaxID, BaseField fldTourModuleID, Date dateOriginal, Date dateStart</MethodInterface>
		<MethodClassName>BookingSub</MethodClassName>
		<LogicSource><![CDATA[if ((dateStart == null) || (dateStart.equals(dateOriginal)))
    return DBConstants.NORMAL_RETURN;   // No change required
int iDaysChange = (int)((dateStart.getTime() - dateOriginal.getTime() + DBConstants.KMS_IN_A_DAY - 1) / DBConstants.KMS_IN_A_DAY);
int iErrorCode = DBConstants.NORMAL_RETURN;
int iOldKeyOrder = this.getDefaultOrder();
this.setKeyArea(BookingDetail.DETAIL_ACCESS_KEY);
SubFileFilter subFileBehavior = new SubFileFilter(recBooking.getField(Booking.ID), BookingSub.BOOKING_ID, fldBookingPaxID, BookingSub.BOOKING_PAX_ID, fldTourModuleID, BookingSub.MODULE_ID);
this.addListener(subFileBehavior);
try   {
    this.close();
    while (this.hasNext())
    {
        BookingSub recBookingSub2 = (BookingSub)this.next();
        if (((DateTimeField)recBookingSub2.getField(BookingSub.MODULE_START_DATE)).getDateTime().equals(dateOriginal))
        {
            recBookingSub2.edit();
            if (recBookingSub2 instanceof BookingDetail)
            {
                Calendar calDate = ((DateTimeField)recBookingSub2.getField(BookingDetail.DETAIL_DATE)).getCalendar();
                calDate.add(Calendar.DATE, iDaysChange);
                ((DateTimeField)recBookingSub2.getField(BookingDetail.DETAIL_DATE)).setCalendar(calDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
            }
            if (recBookingSub2 instanceof BookingAnswer)
            {
                recBookingSub2.getField(BookingAnswer.DETAIL_ADDED).setState(false);
                if ((recBookingSub2.getField(BookingAnswer.ASK_FOR_ANSWER).getState() == false)
                    || (recBookingSub2.getField(BookingAnswer.ALWAYS_RESOLVE).getState() == true))
                {   // If automatic or forced, must ask again
                    recBookingSub2.remove();
                    continue;
                }
            }
            ((DateTimeField)recBookingSub2.getField(BookingSub.MODULE_START_DATE)).setDateTime(dateStart, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
            recBookingSub2.set();
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    this.removeListener(subFileBehavior, true);
    this.setKeyArea(iOldKeyOrder);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6725">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PricingStatusField</MethodClassName>
		<LogicSource>return new PricingStatus(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6726">
		<LastChanged>2012-01-31T10:43:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineStatusHandler</MethodClassName>
		<LogicSource><![CDATA[int iNewPricingStatusID = (int)this.getOwner().getField(BookingLine.PRICING_STATUS_ID).getValue();
switch (iChangeType)
{
    case DBConstants.AFTER_REQUERY_TYPE:
        this.setMainStatus(PricingStatus.VALID);
        break;
    case DBConstants.SELECT_EOF_TYPE:
        break;
    case DBConstants.MOVE_NEXT_TYPE:
        if (iNewPricingStatusID == PricingStatus.NOT_VALID)
            this.setMainStatus(PricingStatus.NOT_VALID);
        break;
    case DBConstants.AFTER_ADD_TYPE:
    case DBConstants.AFTER_UPDATE_TYPE:
        if (iNewPricingStatusID != m_iOldPricingStatusID)
        {
            if (m_iOldPricingStatusID == PricingStatus.NOT_VALID)
                if ((iNewPricingStatusID == PricingStatus.VALID) || (iNewPricingStatusID == PricingStatus.MANUAL))
                    this.rescanStatus();
            if (iNewPricingStatusID == PricingStatus.NOT_VALID)
                this.setMainStatus(PricingStatus.NOT_VALID);
        }
        break;
    case DBConstants.AFTER_DELETE_TYPE:
        if (m_iOldPricingStatusID == PricingStatus.NOT_VALID)
            this.rescanStatus();
        break;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6728">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineStatusHandler</MethodClassName>
		<LogicSource><![CDATA[m_iOldPricingStatusID = PricingStatus.NULL_STATUS;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6729">
		<LastChanged>2012-01-31T10:43:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineStatusHandler</MethodClassName>
		<LogicSource><![CDATA[m_iOldPricingStatusID = (int)this.getOwner().getField(BookingLine.PRICING_STATUS_ID).getValue();

super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6730">
		<LastChanged>2012-03-27T21:45:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>rescanStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineStatusHandler</MethodClassName>
		<LogicSource><![CDATA[Record recBookingLine = this.getOwner();
RecordOwner screen = this.getOwner().getRecordOwner();
if (screen instanceof GridScreenParent)
{
    ((GridScreenParent)screen).reSelectRecords();
}
else if (screen != null)
{
    Record recBooking = (Record)screen.getRecord(Booking.BOOKING_FILE);
    if (recBooking != null)
    {   // Always
        this.setMainStatus(PricingStatus.VALID);
        FileListener listener = new SubFileFilter(recBooking);
        recBookingLine.addListener(listener);
        int iOldKeyArea = recBookingLine.getDefaultOrder();
        recBookingLine.setKeyArea(BookingLine.BOOKING_ID_KEY);
        recBookingLine.close();
        try {
            while (recBookingLine.hasNext())
            {
                recBookingLine.next();
            }
        } catch (DBException ex) {
            ex.printStackTrace();
        } finally {
            recBookingLine.removeListener(listener, true);
            recBookingLine.setKeyArea(iOldKeyArea);
        }
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6731">
		<LastChanged>2012-01-31T10:43:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setMainStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iMainStatus</MethodInterface>
		<MethodClassName>BookingLineStatusHandler</MethodClassName>
		<LogicSource><![CDATA[RecordOwner screen = this.getOwner().getRecordOwner();
if (screen != null)
{
    Record recBooking = (Record)screen.getRecord(Booking.BOOKING_FILE);
    if (recBooking != null)
        recBooking.getField(Booking.PRICING_STATUS_ID).setValue(iMainStatus);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6732">
		<LastChanged>2012-04-06T00:51:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ChangePricingTypeHandler</MethodClassName>
		<LogicSource><![CDATA[Booking recBooking = null;
BaseField fldTourModuleID = null;
Date dateStart = null;
if (this.getOwner().getRecord() instanceof Booking)
{
    recBooking = (Booking)this.getOwner().getRecord();
    Record recPricingType = ((ReferenceField)this.getOwner()).getReference();
    if ((recPricingType == null)
        || (recPricingType.getEditMode() == DBConstants.EDIT_NONE) || (recPricingType.getEditMode() == DBConstants.EDIT_ADD))
    {   // Can't have a null booking pricing type
        PricingType recPricingType2 = new PricingType(recBooking.findRecordOwner());
        PricingType recPricingType3 = recPricingType2.getPricingType(PricingType.COMPONENT_COST_PRICING);
        if (recPricingType3 != null)
            this.getOwner().moveFieldToThis(recPricingType3.getField(PricingType.ID));
        recPricingType2.free();                
    }
}
else if (this.getOwner().getRecord() instanceof BookingDetail)
{
    try {
        this.getOwner().getRecord().writeAndRefresh();  // Since I will be reading through the detail
    } catch (DBException e) {
        e.printStackTrace();
    }
    recBooking = (Booking)((BookingDetail)this.getOwner().getRecord()).getBooking(true);
    fldTourModuleID = this.getOwner().getRecord().getField(BookingDetail.PRODUCT_ID);
    dateStart = ((DateTimeField)this.getOwner().getRecord().getField(BookingDetail.DETAIL_DATE)).getDateTime();
    recBooking.getTourPricingType(null, fldTourModuleID, dateStart);    // This will clear the cache
}
if (!recBooking.getField(Booking.TOUR_ID).isNull())
{   // Always
    Tour recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
    BookingLine recBookingLine = new BookingLine(recBooking.findRecordOwner());            
    recBookingLine.addDetailBehaviors(recBooking, recTour);
    
    // First step, delete the old pricing detail
    recBookingLine.deleteAllDetail(recBooking, null, fldTourModuleID, dateStart);
    // Next step, add the new pricing detail
    int iErrorCode = recBooking.addBookingDetailPricing(recTour, recBookingLine, fldTourModuleID, dateStart, false);

    if (recBookingLine != null)
        recBookingLine.free();

    if (iErrorCode != DBConstants.NORMAL_RETURN)
        return iErrorCode;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6733">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ChangePricingTypeHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6735">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>375</Sequence>
		<MethodName>addBookingDetailPricing</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Tour recTour, BookingLine recBookingLine, BaseField fldTourModuleID, Date dateStart, boolean bRecost</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
BookingDetail recBookingDetails = null;
BookingAnswer recBookingAnswer = null;
TourHeaderLine recTourHeaderPricing = null;

try {
    // If you just changed to TourPricing, add the main tour pricing:
    recBookingDetails = new BookingDetail(this.findRecordOwner());
    recBookingDetails.addDetailBehaviors(this, recTour);
    
    while (recBookingDetails.hasNext())
    {
        BookingDetail recBookingDetail = (BookingDetail)recBookingDetails.next();
        
        BaseField fldDetailModuleID = recBookingDetail.getField(BookingDetail.MODULE_ID);
        Date dateDetailStart = ((DateTimeField)recBookingDetail.getField(BookingDetail.MODULE_START_DATE)).getDateTime();
        if (recBookingDetail.getField(BookingDetail.PRODUCT_TYPE_ID).getValue() == ProductType.TOUR_ID)
        {
            fldDetailModuleID = recBookingDetail.getField(BookingDetail.PRODUCT_ID);
            dateDetailStart = ((DateTimeField)recBookingDetail.getField(BookingDetail.DETAIL_DATE)).getDateTime();                    
        }
        if ((fldTourModuleID != null) && (!fldTourModuleID.equals(fldDetailModuleID)))
            continue;
        if ((dateStart != null) && (!dateStart.equals(dateDetailStart)))
            continue;

        int iTourPricingType = this.getTourPricingType(recTour, fldDetailModuleID, dateDetailStart);

        boolean bPricingListenerState = true;
        if (this.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class) != null)
            bPricingListenerState = this.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class).setEnabledListener(false);
        if (bRecost)
        {
            boolean bListenerState = true;
            if (recBookingDetail.getListener(BookingDetailPriceChangeHandler.class) != null)
                bListenerState = recBookingDetail.getListener(BookingDetailPriceChangeHandler.class).setEnabledListener(false);
            recBookingDetail.edit();
            recBookingDetail.getField(BookingDetail.INFO_STATUS_REQUEST).setState(true); // Information changed, recost if required.
            recBookingDetail.set();
            if (recBookingDetail.getListener(BookingDetailPriceChangeHandler.class) != null)
                recBookingDetail.getListener(BookingDetailPriceChangeHandler.class).setEnabledListener(bListenerState);
        }
        boolean bTourDetailPricingType = !recBookingDetail.getField(BookingDetail.TOUR_HEADER_OPTION_ID).isNull();
        if (iTourPricingType == PricingType.OPTION_PRICING)
            if (bTourDetailPricingType)
        {
            if (this.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class) != null)
                this.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class).setEnabledListener(bPricingListenerState);
            continue;   // I'm going to add the price for this in the next step
        }
        recBookingDetail.getField(BookingDetail.TOTAL_COST_LOCAL).setModified(true); // This will fake a cost change
        recBookingDetail.handlePriceChange(DBConstants.UPDATE_TYPE);
        if (this.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class) != null)
            this.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class).setEnabledListener(bPricingListenerState);
    }

    int iTourPricingType = this.getTourPricingType(recTour, fldTourModuleID, dateStart);
    if (iTourPricingType == PricingType.OPTION_PRICING)
    {
        BaseField fldBookingPaxID = new IntegerField(null, "ID", -1, null, null);
        recBookingAnswer = new BookingAnswer(this.findRecordOwner());
        TourHeader recTourHeader = (TourHeader)((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReference();
        BookingPax recBookingPax = new BookingPax(this.findRecordOwner());
        recBookingPax.getField(BookingPax.ID).setValue(0);
        recTourHeaderPricing = new TourHeaderLine(this.findRecordOwner());
        Date dateDeparture = ((DateField)recTour.getField(Tour.DEPARTURE_DATE)).getDateTime();
        recBookingAnswer.addDetailBehaviors(this, recTour);
        while (recBookingAnswer.hasNext())
        {
            recBookingAnswer.next();
            
            BaseField fldDetailModuleID = recBookingAnswer.getField(BookingAnswer.MODULE_ID);
            Date dateDetailStart = ((DateTimeField)recBookingAnswer.getField(BookingAnswer.MODULE_START_DATE)).getDateTime();
            if ((fldTourModuleID != null) && (!fldTourModuleID.equals(fldDetailModuleID)))
                continue;
            if ((dateStart != null) && (!dateStart.equals(dateDetailStart)))
                continue;

            boolean bSetupDetail = false;
            if (recBookingAnswer.getField(BookingAnswer.SELECTED).getState() == true)
                if (recBookingAnswer.getField(BookingAnswer.DETAIL_PRICE_EXISTS).getState() == true)
            {
                if ((recTour.getField(Tour.TOUR_HEADER_ID).equals(fldDetailModuleID))
                    && (recTour.getField(Tour.DEPARTURE_DATE).equals(recBookingAnswer.getField(BookingAnswer.MODULE_START_DATE))))
                        bSetupDetail = true;
                else
                {
                    if (this.getTourPricingType(recTour, fldDetailModuleID, dateDetailStart) == PricingType.OPTION_PRICING)
                        bSetupDetail = true;                                
                }
            }
            if (bSetupDetail)
                iErrorCode = recBookingLine.setupAllDetail(recTourHeaderPricing, this, recTour, recBookingPax.getField(BookingPax.ID), recBookingAnswer.getField(BookingAnswer.TOUR_HEADER_OPTION_ID), fldDetailModuleID, dateDetailStart);
            if (iErrorCode != DBConstants.NORMAL_RETURN)
                return iErrorCode;
        }
        
        BooleanField fldAskForAnswer = new BooleanField(null, "Ask", DBConstants.DEFAULT_FIELD_LENGTH, null, null);
        fldAskForAnswer.setState(false);    // Don't ask, Use the current values
        iErrorCode = this.addTourDetail(recTour, recTourHeader, recBookingPax, recBookingAnswer, dateDeparture, fldAskForAnswer);
        
        fldAskForAnswer.free();
        fldBookingPaxID.free();
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    if (recBookingAnswer != null)
        recBookingAnswer.free();
    if (recTourHeaderPricing != null)
        recTourHeaderPricing.free();
    if (recBookingDetails != null)
        recBookingDetails.free();
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6736">
		<LastChanged>2012-01-31T10:43:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>deleteAllDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLine</MethodClassName>
		<LogicSource><![CDATA[CompareFileFilter filter = new CompareFileFilter(BookingLine.PRICING_STATUS_ID, Integer.toString(PricingStatus.MANUAL), FileListener.NOT_EQUAL, null, true);
this.addListener(filter);   // Don't delete manually entered items
int iErrorCode = super;
this.removeListener(filter, true);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6738">
		<LastChanged>2012-02-01T11:30:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>430</Sequence>
		<MethodName>setRecordDataStatus</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Record record, String iFieldSeq, int iStatus</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = Constants.NORMAL_RETURN;
int iRecordCount = this.getRecordCount(record);

Rec recTargetRecord = this.setDataIndex(RESET_INDEX, record);   // Reset index if multiple

for (int index = 1; index <= iRecordCount; index++)
{
    Record recNext = (Record)this.setDataIndex(index, recTargetRecord);
    if (recNext == null)
        break;
    
    try {
        recNext.edit();
        recNext.getField(iFieldSeq).setValue(iStatus);
        if (iFieldSeq.equals(m_iSyncedSourceFieldSeq))
            recNext.getField(m_iSyncedDestFieldSeq).setValue(iStatus);  // Special synced status fields
        // No need to update recNext as setDataIndex does.
    } catch (DBException e) {
        e.printStackTrace();
    }
}
this.setDataIndex(END_OF_NODES, recTargetRecord);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6739">
		<LastChanged>2012-02-01T12:40:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>440</Sequence>
		<MethodName>updateMessageKeys</MethodName>
		<LogicDescription>Update the message key (in the booking detail) to match the message detail in this message.</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Record record, String iStatusType</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[boolean bChanged = false;
int iRecordCount = this.getRecordCount(record);

Rec recTargetRecord = this.setDataIndex(RESET_INDEX, record);   // Reset index if multiple

for (int index = 1; index <= iRecordCount; index++)
{
    Record recNext = (Record)this.setDataIndex(index, recTargetRecord);
    if (recNext == null)
        break;
    
    try {
        recNext.edit();
        if (recNext.getRecordName().equals(record.getRecordName()))
            if (recNext.getCounterField().equals(record.getCounterField()))
                if (this.updateMessageKey(recNext, iStatusType))   // Make sure the current record has all the updates.
                    bChanged = true;
        if (this.updateMessageKey(recNext, iStatusType))   // Usually VALID
            bChanged = true;
        if (!this.isCurrentDataRecord(recNext))
            recNext.set();
    } catch (DBException e) {
        e.printStackTrace();
    }
}
this.setDataIndex(END_OF_NODES, recTargetRecord);
return bChanged;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6740">
		<LastChanged>2012-05-26T16:55:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>445</Sequence>
		<MethodName>updateMessageKey</MethodName>
		<LogicDescription>Update this message key to match the message key in this message.</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Record record, String statusType</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[String strMessageKeyLastTime = record.getField(record.getFieldSeq(statusType) + BookingDetailModel.MESSAGE_KEY_OFFSET).toString();
String strMessageKey = this.getMessageKey(null).toString();
if (((strMessageKeyLastTime == null) && (strMessageKeyLastTime == strMessageKey))
    || (strMessageKeyLastTime.equals(strMessageKey)))
{ // No actual changes, return the status to the orig value
    return false; // If the data hasn't changed, don't change the status.
}
record.getField(record.getFieldSeq(statusType) + BookingDetailModel.MESSAGE_KEY_OFFSET).setString(strMessageKey);
return true;    // Key changed]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6741">
		<LastChanged>2012-04-11T02:21:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>450</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription><![CDATA[Move the fields of this record to this message
(a single Booking Detail record)]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;	// Note: You MUST call SUPER here to keep from looping endlessly

BookingDetailModel recBookingDetail = (BookingDetailModel)record;
if (recBookingDetail.getField(BookingDetailModel.MARKUP_FROM_LAST).isNull())
    this.putRawFieldData(recBookingDetail.getField(BookingDetailModel.DETAIL_DATE));
else
{
    DateTimeField field = (DateTimeField)recBookingDetail.getField(BookingDetailModel.DETAIL_DATE);
    String strKey = this.getFullKey(field.getFieldName());
    Calendar calendar = field.getCalendar();
    calendar.add(Calendar.YEAR, -1);
    Object objValue = calendar.getTime();
    Class<?> classData = this.getMessage().getNativeClassType(field.getField().getDataClass());
    try {
        objValue = Converter.convertObjectToDatatype(objValue, classData, null);  // I do this just to be careful.
    } catch (Exception ex) {
        objValue = null;
    }
    this.getMessage().putNative(strKey, objValue);
}
this.putRawFieldData(recBookingDetail.getField(BookingDetailModel.PRODUCT_ID));
Record recProduct = ((ReferenceField)recBookingDetail.getField(BookingDetailModel.PRODUCT_ID)).getReference();
if (recProduct != null)
{
    if (!recProduct.getField(ProductModel.OPERATORS_CODE).isNull())  // Operator's product code
        this.put(ProductModel.CODE, recProduct.getField(ProductModel.OPERATORS_CODE).toString());
    this.put(ProductModel.PRODUCT_NAME_PARAM, recProduct.getField(ProductModel.DESCRIPTION).toString());
}
// Get the old date
FieldDataScratchHandler fieldDataScratchHandler = (FieldDataScratchHandler)((Record)recBookingDetail).getField(BookingDetailModel.DETAIL_DATE).getListener(FieldDataScratchHandler.class);
if (fieldDataScratchHandler != null)
{
    Date dateOriginal = (Date)fieldDataScratchHandler.getOriginalData();  // Make sure you know the original date
    if (dateOriginal != null)
        this.put(OLD_DETAIL_DATE, dateOriginal);
}

this.put(ProductModel.PAX_PARAM, new Short(recBookingDetail.getNoPax()));
for (int iRoomType = PaxCategoryModel.SINGLE_ID; iRoomType <= PaxCategoryModel.CHILD_ID; iRoomType++)
{
    short shPaxOfType = (short)recBookingDetail.getPaxInRoom(iRoomType);
    if (shPaxOfType > 0)
    {
        this.put(ProductModel.ROOM_TYPE_PARAM + Integer.toString(iRoomType), new Short(shPaxOfType));
    }
}

try   {
    if (recBookingDetail.getEditMode() == DBConstants.EDIT_ADD)
    {       // Then refresh the record so I have and object ID.
        recBookingDetail.getTable().add(recBookingDetail);
        Object bookmark = recBookingDetail.getTable().getLastModified(DBConstants.OBJECT_ID_HANDLE);
        recBookingDetail.getTable().setHandle(bookmark, DBConstants.OBJECT_ID_HANDLE);
        recBookingDetail.getTable().edit();
    }
    if (recBookingDetail.getTable().getHandle(DBConstants.OBJECT_ID_HANDLE) != null)
        this.put(DBConstants.STRING_OBJECT_ID_HANDLE, recBookingDetail.getTable().getHandle(DBConstants.OBJECT_ID_HANDLE));
    this.put(DBParams.RECORD, recBookingDetail.getTableNames(false));
    this.putRawFieldData(recBookingDetail.getField(BookingDetailModel.LAST_CHANGED));
} catch (DBException ex)    {
    ex.printStackTrace();
}
this.putRawFieldData(recBookingDetail.getField(BookingDetailModel.RATE_ID));
Record recRateType = ((ReferenceField)recBookingDetail.getField(BookingDetailModel.RATE_ID)).getReference();
if (recRateType != null)
    this.put(ProductModel.RATE_TYPE_DESC_PARAM, recRateType.getField(BaseRateModel.DESCRIPTION).getString());
this.putRawFieldData(recBookingDetail.getField(BookingDetailModel.CLASS_ID));
Record recRateClass = ((ReferenceField)recBookingDetail.getField(BookingDetailModel.CLASS_ID)).getReference();
if (recRateClass != null)
    this.put(ProductModel.RATE_CLASS_DESC_PARAM, recRateClass.getField(BaseClassModel.DESCRIPTION).toString());

if (!recBookingDetail.getField(BookingDetailModel.ACK_DAYS).isNull())
{
    int iAckTime = (int)recBookingDetail.getField(BookingDetailModel.ACK_DAYS).getValue();
    if (this.getMessage() != null)
        if (this.getMessage().getMessageHeader() instanceof TrxMessageHeader)
        {   // Always
            int iMultiplier = 1;
            try {
                iMultiplier = ((Integer)Converter.convertObjectToDatatype(this.getMessage().getMessageHeader().get("timeoutMultiplier"), Integer.class, new Integer(1))).intValue();
            } catch (Exception e) {
                iMultiplier = 1;
            }
            iAckTime = iAckTime * iMultiplier;  // In seconds
            ((TrxMessageHeader)this.getMessage().getMessageHeader()).put(TrxMessageHeader.MESSAGE_TIMEOUT, Integer.toString(iAckTime));
        }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6743">
		<LastChanged>2012-02-01T11:41:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>fixBasedFields</MethodName>
		<LogicDescription>Update this record to reflect all the data in the based tour classes.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClass</MethodClassName>
		<LogicSource><![CDATA[if (this.getField(TourClass.BASED_CLASS_ID).isNull())
    return;
if ((this.getEditMode() != DBConstants.EDIT_CURRENT) && (this.getEditMode() != DBConstants.EDIT_IN_PROGRESS))
    return; // Must be a current record
if (this.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
{   // Unlikely
    if (this.isModified())
        return; // Can't be modified
    try {   // Change to EDIT_CURRENT
        Object bookmark = this.getHandle(DBConstants.BOOKMARK_HANDLE);
        this.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}
int iOldOpenMode = this.getOpenMode();
if ((iOldOpenMode | DBConstants.OPEN_LOCK_ON_CHANGE_STRATEGY) == DBConstants.OPEN_LOCK_ON_CHANGE_STRATEGY)
    this.setOpenMode(iOldOpenMode & ~DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);    // Make sure I don't change this
Object[] fieldListenerStatus = this.setEnableFieldListeners(false);
boolean[] listenerStatus = this.setEnableListeners(false);

Object bookmark = this.getField(TourClass.BASED_CLASS_ID).getData();
TourClass recTourClass = new TourClass(this.findRecordOwner());
try {
    while (bookmark != null)
    {
        if (recTourClass.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE) == null)
            return;
        // Now, move the default fields up to the main record
        for (int iFieldSeq = this.getFieldSeq(TourClass.DEPOSIT_DUE_DAYS); iFieldSeq < this.getFieldCount(); iFieldSeq++)
        {
            if (this.getField(iFieldSeq).isNull())
                this.getField(iFieldSeq).moveFieldToThis(recTourClass.getField(iFieldSeq));
        }
        bookmark = recTourClass.getField(TourClass.BASED_CLASS_ID).getData();
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    this.setOpenMode(iOldOpenMode);
    this.setEnableFieldListeners(fieldListenerStatus);
    this.setEnableListeners(listenerStatus);
    recTourClass.free();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6745">
		<LastChanged>2012-03-29T07:45:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addArDetail</MethodName>
		<LogicDescription><![CDATA[Add the ArTrx and BookingLine detail files if they don't already exist.
Also add all the listeners for these files.
@param bForceRecount If true, make sure the booking totals are correct, especially if this record is in an indeterminate state]]></LogicDescription>
		<MethodReturns>ArTrxModel</MethodReturns>
		<MethodInterface>ArTrxModel recArTrx, BookingLineModel recBookingLine, boolean bForceRecount</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[FreeOnFreeHandler listener = (FreeOnFreeHandler)this.getListener(FreeOnFreeHandler.class);
if (recBookingLine == null)
{
    while (listener != null)
    {
        if (listener.getDependentObject() instanceof BookingLine)
        {
            recBookingLine = (BookingLine)listener.getDependentObject();
            break;
        }
        listener = (FreeOnFreeHandler)listener.getListener(FreeOnFreeHandler.class);
    }
}
if (recBookingLine == null)
{
    recBookingLine = new BookingLine(this.findRecordOwner());
    this.addListener(new FreeOnFreeHandler(recBookingLine));
}
if (((Record)recBookingLine).getListener(SubFileFilter.class) == null)
    ((BookingLine)recBookingLine).addDetailBehaviors(this, (Tour)((ReferenceField)this.getField(Booking.TOUR_ID)).getReferenceRecord());
RecountOnValidHandler recountOnValidHandler = (RecountOnValidHandler)((Record)recBookingLine).getListener(RecountOnValidHandler.class);
if (recountOnValidHandler == null)
{
    int iCurrentEditMode = this.setEditMode(DBConstants.EDIT_NONE);    // This keeps a recount from happening on addListener.
    this.addListener(recountOnValidHandler = new RecountOnValidHandler((Record)recBookingLine, true));
    this.setEditMode(iCurrentEditMode);            
}
if (bForceRecount)
    if (!this.getCounterField().isNull())
        recountOnValidHandler.recountRecords();
listener = (FreeOnFreeHandler)this.getListener(FreeOnFreeHandler.class);
if (recArTrx == null)
{
    while (listener != null)
    {
        if (listener.getDependentObject() instanceof ArTrx)
        {
            recArTrx = (ArTrx)listener.getDependentObject();
            break;
        }
        listener = (FreeOnFreeHandler)listener.getListener(FreeOnFreeHandler.class);
    }
}
if (recArTrx == null)
{
    recArTrx = new ArTrx(this.findRecordOwner());
    this.addListener(new FreeOnFreeHandler(recArTrx));
}
if (((Record)recArTrx).getListener(SubFileFilter.class) == null)
    recArTrx.addDetailBehaviors(this);
recountOnValidHandler = (RecountOnValidHandler)((Record)recBookingLine).getListener(RecountOnValidHandler.class);
if (recountOnValidHandler == null)
{
    int iCurrentEditMode = this.setEditMode(DBConstants.EDIT_NONE);    // This keeps a recount from happening on addListener.
    this.addListener(recountOnValidHandler = new RecountOnValidHandler((Record)recArTrx, true));
    this.setEditMode(iCurrentEditMode);            
}
if (bForceRecount)
    if (!this.getCounterField().isNull())
        recountOnValidHandler.recountRecords();
return recArTrx;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="6746">
		<LastChanged>2012-02-03T19:55:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ArTrxInvoiceSubCountHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null, null, null, fieldMain, ifsToCount, bRecountOnSelect, bVerifyOnEOF, false</MethodReturns>
		<MethodInterface>BaseField fieldMain, String ifsToCount, boolean bRecountOnSelect, boolean bVerifyOnEOF</MethodInterface>
		<MethodClassName>ArTrxInvoiceSubCountHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6747">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getFieldValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxInvoiceSubCountHandler</MethodClassName>
		<LogicSource><![CDATA[if (iInvoiceTrxStatus == -1)
    this.firstTime();
if ((this.getOwner().getField(ArTrx.TRX_STATUS_ID).getValue() == iInvoiceTrxStatus)
    || (this.getOwner().getField(ArTrx.TRX_STATUS_ID).getValue() == iInvoiceModTrxStatus)) // Amount of old Price
{
    iTrxStatus = iInvoiceModTrxStatus;      // Invoice Mod
    return super;
}
return 0;   // This is not an invoice or invoice mod]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6748">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>resetCount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxInvoiceSubCountHandler</MethodClassName>
		<LogicSource><![CDATA[if (iInvoiceTrxStatus == -1)
    this.firstTime();
iTrxStatus = iInvoiceTrxStatus;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6749">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getTrxStatus</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ArTrxInvoiceSubCountHandler</MethodClassName>
		<LogicSource><![CDATA[if (iInvoiceTrxStatus == -1)
{
    this.firstTime();
    iTrxStatus = iInvoiceTrxStatus;
}
return iTrxStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6750">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>firstTime</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxInvoiceSubCountHandler</MethodClassName>
		<LogicSource><![CDATA[try {
    TrxStatus recTrxStatus = (TrxStatus)((ReferenceField)this.getOwner().getField(ArTrx.TRX_STATUS_ID)).getReferenceRecord();
    Object bookmark = null;
    if ((recTrxStatus.getEditMode() == DBConstants.EDIT_CURRENT) || (recTrxStatus.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
        bookmark = recTrxStatus.getHandle(DBConstants.BOOKMARK_HANDLE);
    boolean[] brgFieldListeners = recTrxStatus.setEnableListeners(false);
    iInvoiceTrxStatus = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.INVOICE);
    iInvoiceModTrxStatus = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.INVOICE_MODIFICATION);
    if (bookmark == null)
        recTrxStatus.addNew();
    else
        recTrxStatus.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
    recTrxStatus.setEnableListeners(brgFieldListeners);
} catch (DBException e) {
    e.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6751">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxInvoiceSubCountHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
switch (iChangeType)
{
    case DBConstants.AFTER_ADD_TYPE:
        if (iTrxStatus == iInvoiceTrxStatus)
            if (iTrxStatus != this.getOwner().getField(ArTrx.TRX_STATUS_ID).getValue())
        {   // The first entry is not an "Invoice" entry, so I need to add the invoice entries first
            this.addInvoiceEntry();
        }
        break;
    default:        
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6752">
		<LastChanged>2012-03-29T09:52:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>addInvoiceEntry</MethodName>
		<LogicDescription>Add the A/R trx entry for the total invoice amount.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ArTrxInvoiceSubCountHandler</MethodClassName>
		<LogicSource><![CDATA[ArTrx recArTrx = (ArTrx)this.getOwner();
Calendar calTrxDate = ((DateTimeField)this.getOwner().getField(ArTrx.TRX_DATE)).getCalendar();
if (calTrxDate != null)
    calTrxDate.add(Calendar.MINUTE, -1);    // Just so it will come before the previous entry
boolean bOldState = this.setEnabledListener(true);  // This method IS disabled, but must be enabled if I update this record (so count is correct)
try {
    SubFileFilter filter = (SubFileFilter)this.getOwner().getListener(SubFileFilter.class);
    BookingModel recBooking = (BookingModel)filter.getMainRecord();
    recBooking.addArDetail(recArTrx, null, false);      // Being careful
    recArTrx.addNew();
    double dBalance = recBooking.getField(BookingModel.NET).getValue();
    recArTrx.getField(ArTrx.AMOUNT).setValue(dBalance);
    ((DateTimeField)recArTrx.getField(ArTrx.TRX_DATE)).setCalendar(calTrxDate, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);   // Just before the previous entry.
    recArTrx.getField(ArTrx.TRX_STATUS_ID).setValue(iInvoiceTrxStatus);
    recArTrx.getField(ArTrx.COMMENTS).moveFieldToThis(((ReferenceField)recArTrx.getField(ArTrx.TRX_STATUS_ID)).getReference().getField(TrxStatus.STATUS_DESC));
    recArTrx.add();
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    this.setEnabledListener(bOldState);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6753">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClassScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(TourEventSchedule.EVENTS), Booking.BUTTON_LOCATION + "Document", MenuConstants.FORMDETAIL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6754">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[if ((MenuConstants.RESET.equalsIgnoreCase(strCommand))
    || (MenuConstants.DELETE.equalsIgnoreCase(strCommand))
    || (MenuConstants.FIRST.equalsIgnoreCase(strCommand))
    || (MenuConstants.PREVIOUS.equalsIgnoreCase(strCommand))
    || (MenuConstants.NEXT.equalsIgnoreCase(strCommand))
    || (MenuConstants.LAST.equalsIgnoreCase(strCommand))
    || (MenuConstants.REQUERY.equalsIgnoreCase(strCommand))
    || (MenuConstants.SUBMIT).equalsIgnoreCase(strCommand))
        return false;   // I NEVER handle file a command (send it to the sub screen!)
if (BookingScreenHandler.BOOKING_LOOKUP.equalsIgnoreCase(strCommand))
{
    BasePanel parentScreen = Screen.makeWindow(this.getTask().getApplication());
    Record record = this.getMainRecord();
    Map<String,Object> properties = null;
    record.makeScreen(null, parentScreen, ScreenConstants.SELECT_MODE, true, true, true, true, properties);
    return true;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6755">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, application.getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION));
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, LinkTrx.SOURCE, LinkTrx.SOURCE, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(LinkTrx.SOURCE));
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6756">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(LinkTrx.SOURCE), LinkTrx.SOURCE, LinkTrx.SOURCE, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6757">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>doSetData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingPaymentEventHandler</MethodClassName>
		<LogicSource><![CDATA[this.setOriginalData(this.getOwner().getData());
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6758">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>setProperty</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
if (BookingScreenHandler.SUB_SCREEN_PARAM.equalsIgnoreCase(strProperty))
{ // Special logic to synchronize the screen number with the actual screen number
try {
        int value = Integer.parseInt(strValue);
        SwitchSubScreenHandler listener = (SwitchSubScreenHandler)this.getScreenRecord().getField(BookingScreenRecord.BK_SUB_SCREEN).getListener(BookingScreenHandler.class);
        if (listener != null)
            listener.setCurrentScreenNo(value);
        boolean[] rgbEnabled = this.getScreenRecord().getField(BookingScreenRecord.BK_SUB_SCREEN).setEnableListeners(false);
        this.getScreenRecord().getField(BookingScreenRecord.BK_SUB_SCREEN).setValue(value);
        this.getScreenRecord().getField(BookingScreenRecord.BK_SUB_SCREEN).setEnableListeners(rgbEnabled);
    } catch (Exception ex) {
        // Ignore
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6760">
		<LastChanged>2012-02-01T10:50:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SyncBookingFieldHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>String iTourFieldSeq</MethodInterface>
		<MethodClassName>SyncBookingFieldHandler</MethodClassName>
		<LogicSource><![CDATA[super;
m_iTourFieldSeq = iTourFieldSeq;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6761">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SyncBookingFieldHandler</MethodClassName>
		<LogicSource><![CDATA[Booking recBooking = (Booking)this.getOwner().getRecord();
Tour recTour = null;
if (!recBooking.getField(Booking.TOUR_ID).isNull())
    recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
if (recTour != null)
    if ((recTour.getEditMode() == DBConstants.EDIT_CURRENT) || (recTour.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
    {
        Record recTourHeader = ((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReference();
        if (recTourHeader != null)
            if (recTourHeader.getField(TourHeader.TOUR_SERIES).getState() == false)
            {
                if (recBooking.getListener(WriteOnUpdateHandler.class) == null)
                    recBooking.addListener(new WriteOnUpdateHandler(recTour, false));
                boolean[] rgbEnabled = recTour.getField(m_iTourFieldSeq).setEnableListeners(false);
                recTour.getField(m_iTourFieldSeq).moveFieldToThis(this.getOwner());
                recTour.getField(m_iTourFieldSeq).setEnableListeners(rgbEnabled);
            }
    }
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6762">
		<LastChanged>2012-03-31T21:41:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SyncTourFieldHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Record recBooking, String iBookingFieldSeq</MethodInterface>
		<MethodClassName>SyncTourFieldHandler</MethodClassName>
		<LogicSource><![CDATA[super;
m_iBookingFieldSeq = iBookingFieldSeq;
m_recBooking = recBooking;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6763">
		<LastChanged>2012-03-31T21:42:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SyncTourFieldHandler</MethodClassName>
		<LogicSource><![CDATA[Record recTour = this.getOwner().getRecord();
if (m_recBooking != null)
    if (m_recBooking.getField(BookingModel.TOUR_ID).equals(recTour.getCounterField()))
        if ((m_recBooking.getEditMode() == DBConstants.EDIT_CURRENT) || (m_recBooking.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
    {
        Record recTourHeader = ((ReferenceField)recTour.getField(TourModel.TOUR_HEADER_ID)).getReference();
        if (recTourHeader != null)
            if (recTourHeader.getField(TourHeaderModel.TOUR_SERIES).getState() == false)
            {
                boolean[] rgbEnabled = m_recBooking.getField(m_iBookingFieldSeq).setEnableListeners(false);
                m_recBooking.getField(m_iBookingFieldSeq).moveFieldToThis(this.getOwner());
                m_recBooking.getField(m_iBookingFieldSeq).setEnableListeners(rgbEnabled);
            }
    }
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6764">
		<LastChanged>2012-04-06T09:36:27</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>setupDefaultDesc</MethodName>
		<LogicDescription>Setup the default booking description and code</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Rec recTourHeader, Field fldDepDate</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[String strDesc = DBConstants.BLANK;
if (!this.getCounterField().isNull())
{
    if (this.getField(Booking.PAX).getValue() > 0)
    {   // Get last name from pax list
        BookingPax recBookingPax = new BookingPax(this.findRecordOwner());
        try {
            recBookingPax.addListener(new SubFileFilter(this));
            if (recBookingPax.next() != null)
                strDesc = recBookingPax.getField(BookingPax.SUR_NAME).toString();
        } catch (DBException ex) {
            ex.printStackTrace();
        } finally {
            recBookingPax.free();
        }
    } 
    else if (!this.getField(Booking.GENERIC_NAME).isNull())
        strDesc = this.getField(Booking.GENERIC_NAME).toString();
    else
        strDesc = this.getField(Booking.CONTACT).toString();
}
if (strDesc.length() > 0)
    strDesc += " - ";
String strTourDesc = recTourHeader.getField(TourHeader.DESCRIPTION).toString();
String strDate = fldDepDate.toString();
int iLen = strDesc.length() + strTourDesc.length() + 3 + strDate.length();
if (iLen > this.getField(Booking.DESCRIPTION).getMaxLength())
    strTourDesc = strTourDesc.substring(0, strTourDesc.length() - Math.max(0, Math.max(0, iLen - this.getField(Booking.DESCRIPTION).getMaxLength())));
if (strTourDesc.length() > 0)
    strDesc += strTourDesc + " - ";
strDesc += strDate;
int iOldOpenMode = this.getOpenMode();
this.setOpenMode(iOldOpenMode & ~DBConstants.OPEN_REFRESH_AND_LOCK_ON_CHANGE_STRATEGY);
boolean[] rgbEnabled = this.getField(Booking.DESCRIPTION).setEnableListeners(false);
this.getField(Booking.DESCRIPTION).setString(strDesc);
this.getField(Booking.DESCRIPTION).setEnableListeners(rgbEnabled);
this.setOpenMode(iOldOpenMode);
return strDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="6765">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6766">
		<LastChanged>2012-01-23T08:57:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderTourGridScreen</MethodClassName>
		<LogicSource>return new ProductHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6767">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourScreen</MethodClassName>
		<LogicSource>return new Tour(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6768">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourScreen</MethodClassName>
		<LogicSource>return new TourHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6769">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TourScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6770">
		<LastChanged>2012-01-23T08:57:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourScreen</MethodClassName>
		<LogicSource>return new ProductHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6771">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourScreen</MethodClassName>
		<LogicSource>return new TourHeaderScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6772">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>140</Sequence>
		<MethodName>addScreenListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Tour</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(Tour.SERV_CONF).setEnabled(false);
if (this.getField(Tour.MANUAL_TOUR_STATUS).getListener(DisableOnFieldHandler.class) == null)
    this.getField(Tour.MANUAL_TOUR_STATUS).addListener(new DisableOnFieldHandler(this.getField(Tour.TOUR_STATUS_ID), BooleanField.YES, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6773">
		<LastChanged>2012-02-01T10:28:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setFieldCount</MethodName>
		<LogicDescription><![CDATA[set the field count.
@param bDisableListeners Disable the field listeners (used for grid count verification)
@return An error code]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>int iFieldSeq, double dFieldCount, boolean bDisableListeners</MethodInterface>
		<MethodClassName>PaxSelectHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
if (m_fldMain != null)
{
    boolean[] rgbEnabled = null;
    if (bDisableListeners)
        rgbEnabled = m_fldMain.getRecord().getField(iFieldSeq).setEnableListeners(false);
    int iOriginalValue = (int)m_fldMain.getRecord().getField(iFieldSeq).getValue();
    boolean bOriginalModified = m_fldMain.getRecord().getField(iFieldSeq).isModified();
    iErrorCode = m_fldMain.getRecord().getField(iFieldSeq).setValue(dFieldCount, true, DBConstants.INIT_MOVE); // Set in main file's field if the record is not current (init move will not trigger refresh and write).
    if (iOriginalValue == (int)m_fldMain.getRecord().getField(iFieldSeq).getValue())
        if (bOriginalModified == false)
            m_fldMain.getRecord().getField(iFieldSeq).setModified(bOriginalModified);   // Make sure this didn't change if change was just null to 0.
    if (rgbEnabled != null)
        m_fldMain.getRecord().getField(iFieldSeq).setEnableListeners(rgbEnabled);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6774">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepositTypeField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {DepositTypeField.NONE, "None"},
    {DepositTypeField.PERCENTAGE, "Percentage"},
    {DepositTypeField.AMOUNT, "Amount"},
    {DepositTypeField.IN_FULL, "In full"},
    {DepositTypeField.NIGHTS, "Nights"},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6775">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepositTypeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super.getDefault();
if (objDefault == null)
    objDefault = DepositTypeField.NONE;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6776">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepositField</MethodClassName>
		<LogicSource>return new Deposit(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6777">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DepositField</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6778">
		<LastChanged>2012-04-01T00:11:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrxStatusHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;

if ((iChangeType == DBConstants.AFTER_ADD_TYPE)
    || (iChangeType == DBConstants.AFTER_UPDATE_TYPE)
    || (iChangeType == DBConstants.AFTER_DELETE_TYPE))
{
    Record recApTrx = this.getOwner();
    if (ApTrx.DEP_ESTIMATE.equalsIgnoreCase(((ReferenceField)recApTrx.getField(ApTrx.TRX_STATUS_ID)).getReference().getField(TrxStatus.STATUS_CODE).toString()))
    {
        Record recVendor = ((ReferenceField)recApTrx.getField(ApTrx.VENDOR_ID)).getReference();
        if (recVendor != null)
            if ((recVendor.getEditMode() == DBConstants.EDIT_CURRENT) || (recVendor.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
        {
            Record recDeposit = ((ReferenceField)recVendor.getField(Vendor.DEPOSIT_ID)).getReference();
            if (recDeposit != null)
                if ((recDeposit.getEditMode() == DBConstants.EDIT_CURRENT) || (recDeposit.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
            {
                String strDepositType = recDeposit.getField(Deposit.DEPOSIT_TYPE).toString();
                if ((DepositTypeField.AMOUNT.equalsIgnoreCase(strDepositType))
                    || (DepositTypeField.PERCENTAGE.equalsIgnoreCase(strDepositType))
                    || (DepositTypeField.IN_FULL.equalsIgnoreCase(strDepositType)))
                {
                    double dAmount = recApTrx.getField(ApTrx.DEPARTURE_ESTIMATE).getValue();
                    if (dAmount != 0)
                    {
                        if (DepositTypeField.AMOUNT.equalsIgnoreCase(strDepositType))
                            dAmount = recDeposit.getField(Deposit.QUANTITY).getValue();
                        if (DepositTypeField.PERCENTAGE.equalsIgnoreCase(strDepositType))
                            dAmount = Math.floor(dAmount * recDeposit.getField(Deposit.QUANTITY).getValue() * 100) / 100;
                        ApTrx recApTrxNew = null;
                        try {
                            Object bookmark = recApTrx.getLastModified(DBConstants.BOOKMARK_HANDLE);
                            int iVendorID = (int)recApTrx.getField(ApTrx.VENDOR_ID).getValue();
                            int iTourID = (int)recApTrx.getField(ApTrx.TOUR_ID).getValue();
                            String strDesc = DBConstants.BLANK;
                            if (((ReferenceField)recApTrx.getField(ApTrx.TOUR_ID)).getReference() != null)
                                strDesc = ((ReferenceField)recApTrx.getField(ApTrx.TOUR_ID)).getReference().getField(TourModel.DESCRIPTION).toString();
                            Date dateStartService = ((DateField)recApTrx.getField(ApTrx.START_SERVICE_DATE)).getDateTime();
                            recApTrxNew = new ApTrx(this.getOwner().findRecordOwner());
                            Object bookmarkPP = null;
                            if (!recApTrx.getField(ApTrx.PREPAYMENT_AP_TRX_ID).isNull())
                            {
                                bookmarkPP = recApTrx.getField(ApTrx.PREPAYMENT_AP_TRX_ID).getData();
                                if (recApTrxNew.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE) == null)
                                    return DBConstants.ERROR_RETURN;
                                recApTrxNew.edit();
                                if (iChangeType == DBConstants.AFTER_DELETE_TYPE)
                                {
                                    recApTrxNew.remove();
                                    return DBConstants.NORMAL_RETURN;
                                }
                            }
                            else
                                recApTrxNew.addNew();
                            if (iChangeType == DBConstants.AFTER_DELETE_TYPE)
                                return DBConstants.NORMAL_RETURN;
                            
                            TrxStatus recTrxStatus = (TrxStatus)((ReferenceField)recApTrxNew.getField(ApTrx.TRX_STATUS_ID)).getReferenceRecord();
                            int iTrxStatus = recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.PREPAYMENT_REQUEST);
                            if (recApTrxNew.getEditMode() != DBConstants.EDIT_ADD)
                                if (recApTrxNew.getField(ApTrx.TRX_STATUS_ID).getValue() != iTrxStatus)
                                    return DBConstants.ERROR_RETURN;    // Prepayment request probably already paid!
                            recApTrxNew.getField(ApTrx.TRX_STATUS_ID).setValue(iTrxStatus);
                            recApTrxNew.getField(ApTrx.VENDOR_ID).setValue(iVendorID);
                            PrepaymentAcctHandler listener = null;
                            recApTrxNew.getField(ApTrx.TOUR_ID).addListener(listener = new PrepaymentAcctHandler(null));
                            recApTrxNew.getField(ApTrx.TOUR_ID).setValue(iTourID);
                            recApTrxNew.getField(ApTrx.TOUR_ID).removeListener(listener, true);
                            ((DateField)recApTrxNew.getField(ApTrx.START_SERVICE_DATE)).setDate(dateStartService, bDisplayOption, DBConstants.SCREEN_MOVE);
                            BaseApplication application = (BaseApplication)recApTrx.getTask().getApplication();
                            String strPrepaymentFor = application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString("Prepayment for");
                            recApTrxNew.getField(ApTrx.DESCRIPTION).setString(strPrepaymentFor + ' ' + strDesc);

                            recApTrxNew.getField(ApTrx.INVOICE_AMOUNT).setValue(dAmount);
                            recApTrxNew.getField(ApTrx.AMOUNT_SELECTED).setValue(dAmount);
                            recApTrxNew.getField(ApTrx.PREPAYMENT_AP_TRX_ID).setString(bookmark.toString());
                            
                            if (recApTrxNew.getEditMode() == DBConstants.EDIT_ADD)
                            {
                                recApTrxNew.add();
                                bookmarkPP = recApTrxNew.getLastModified(DBConstants.BOOKMARK_HANDLE);

                                recApTrx.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
                                recApTrx.edit();
                                recApTrx.getField(ApTrx.PREPAYMENT_AP_TRX_ID).setString(bookmarkPP.toString());
                                recApTrx.set();
                            }
                            else
                                recApTrxNew.set();
                        } catch (DBException ex) {
                            ex.printStackTrace();
                        } finally {
                            if (recApTrxNew != null)
                                recApTrxNew.free();
                        }
                    }
                }
            }
        }
    }
}

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6780">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherReportScreen</MethodClassName>
		<LogicSource><![CDATA[return new Booking(this);	// Since Tour is the header]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6781">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherReportScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Tour(this);

new ApTrx(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6782">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherReportScreen</MethodClassName>
		<LogicSource>return new ItineraryScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6783">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherReportScreen</MethodClassName>
		<LogicSource><![CDATA[super;

((ReferenceField)this.getScreenRecord().getField(ItineraryScreenRecord.TOUR_ID)).addListener(new ReadSecondaryHandler(this.getRecord(Tour.TOUR_FILE)));

this.getRecord(Booking.BOOKING_FILE).addListener(new SubFileFilter(this.getRecord(Tour.TOUR_FILE)));

this.getRecord(ApTrx.AP_TRX_FILE).addListener(new SubFileFilter(this.getRecord(Tour.TOUR_FILE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6784">
		<LastChanged>2012-01-23T09:38:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherReportScreen</MethodClassName>
		<LogicSource>return new ItineraryToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6785">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherReportScreen</MethodClassName>
		<LogicSource><![CDATA[Record recBooking = this.getRecord(Booking.BOOKING_FILE);
((ReferenceField)recBooking.getField(Booking.TOUR_ID)).setReferenceRecord(this.getRecord(Tour.TOUR_FILE));
for (int iFieldSeq = 0; iFieldSeq < recBooking.getFieldCount(); iFieldSeq++)
{
    BaseField field = recBooking.getField(iFieldSeq);
    this.addColumn(field);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6787">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherReportScreen</MethodClassName>
		<LogicSource><![CDATA[TourReportScreen tourReportScreen = new TourReportScreen(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | HtmlConstants.HEADING_SCREEN, null); 
// Add this A/P Trx detail screen
VoucherDetailReportScreen voucherDetailReportScreen = new VoucherDetailReportScreen(null, null, tourReportScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | HtmlConstants.HEADING_SCREEN, null);

return tourReportScreen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6788">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getServletPath</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherReportScreen</MethodClassName>
		<LogicSource>return super.getServletPath(DBParams.XHTMLSERVLET); // Use cocoon</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6789">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherReportScreen</MethodClassName>
		<LogicSource><![CDATA[// Pax detail
return new BookingPaxReportDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | HtmlConstants.HEADING_SCREEN, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6790">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherDetailReportScreen</MethodClassName>
		<LogicSource>return new ApTrx(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6791">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherDetailReportScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new SubFileFilter(this.getRecord(Tour.TOUR_FILE)));

Record recVendor = ((ReferenceField)this.getMainRecord().getField(ApTrx.VENDOR_ID)).getReferenceRecord(this);
this.getMainRecord().getField(ApTrx.VENDOR_ID).addListener(new ReadSecondaryHandler(recVendor));

this.getRecord(BookingDetail.BOOKING_DETAIL_FILE).addListener(new SubFileFilter(this.getRecord(ApTrx.AP_TRX_FILE)));
this.getRecord(BookingDetail.BOOKING_DETAIL_FILE).setKeyArea(BookingDetail.AP_TRX_ID_KEY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6792">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherDetailReportScreen</MethodClassName>
		<LogicSource><![CDATA[Record recApTrx = this.getMainRecord();
((ReferenceField)recApTrx.getField(ApTrx.TOUR_ID)).setReferenceRecord(this.getRecord(Tour.TOUR_FILE));
for (int iFieldSeq = 0; iFieldSeq < recApTrx.getFieldCount(); iFieldSeq++)
{
    BaseField field = recApTrx.getField(iFieldSeq);
    this.addColumn(field);
}

Record recVendor = ((ReferenceField)this.getMainRecord().getField(ApTrx.VENDOR_ID)).getReferenceRecord(this);
for (int iFieldSeq = 0; iFieldSeq < recVendor.getFieldCount(); iFieldSeq++)
{
    BaseField field = recVendor.getField(iFieldSeq);
    this.addColumn(field);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6793">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherDetailReportScreen</MethodClassName>
		<LogicSource><![CDATA[super;

new BookingDetail(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6794">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VoucherDetailReportScreen</MethodClassName>
		<LogicSource><![CDATA[//      Booking detail record
return new BookingDetailReportScreen(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | HtmlConstants.HEADING_SCREEN, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6799">
		<LastChanged>2012-04-11T00:10:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>350</Sequence>
		<MethodName>setTargetPax</MethodName>
		<LogicDescription>Set the pax count</LogicDescription>
		<MethodReturns/>
		<MethodInterface>short sPax</MethodInterface>
		<MethodClassName>PassengerMessageData</MethodClassName>
		<LogicSource>this.put(ProductModel.PAX_PARAM, new Short(sPax));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6800">
		<LastChanged>2012-04-08T10:48:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>moveRequestInfoToReply</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductResponse</MethodClassName>
		<LogicSource><![CDATA[super;

BaseProductMessageDesc baseProductMessage = (BaseProductMessageDesc)((BaseMessage)messageRequest).getMessageDataDesc(null); // This is a given
ProductMessageData productMessageDesc = (ProductMessageData)baseProductMessage.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
int iNodeIndex = 0;
if (productMessageDesc != null)
	iNodeIndex = productMessageDesc.getNodeIndex();
ProductResponseMessageData reponseMessageData = (ProductResponseMessageData)this.getMessageDataDesc(PRODUCT_RESPONSE_MESSAGE);
reponseMessageData.setDataIndex(iNodeIndex, null);    // Match the message node index

this.put(DBConstants.STRING_OBJECT_ID_HANDLE, baseProductMessage.get(DBConstants.STRING_OBJECT_ID_HANDLE));
this.put(DBParams.RECORD, baseProductMessage.get(DBParams.RECORD));
if (this.get(DBParams.TIMESTAMP) == null)
    this.put(DBParams.TIMESTAMP, baseProductMessage.get(DBParams.TIMESTAMP));
if (this.getMessageFieldDesc(MESSAGE_TIMESTAMP) != null)
    if (this.get(MESSAGE_TIMESTAMP) == null)
        this.getMessageFieldDesc(MESSAGE_TIMESTAMP).put(this.getXMLTimeStamp());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6801">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addMessageDesc</MethodName>
		<LogicDescription>Add message description</LogicDescription>
		<MethodReturns>ProductRateResponse</MethodReturns>
		<MethodInterface>BaseMessage message</MethodInterface>
		<MethodClassName>ProductRateMessageListener</MethodClassName>
		<LogicSource>return new ProductRateResponse(message, null);  // Override this if you can</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6802">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>addMessageDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateMessageListener</MethodClassName>
		<LogicSource>return new HotelRateResponse(message, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6803">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addMessageDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirRateMessageListener</MethodClassName>
		<LogicSource>return new AirRateResponse(message, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6804">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>addMessageDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateMessageListener</MethodClassName>
		<LogicSource>return new LandRateResponse(message, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6805">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>fixMessageMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderRateMessageListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6806">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>addMessageDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderRateMessageListener</MethodClassName>
		<LogicSource>return new TourRateResponse(message, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6807">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addMessageDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationRateMessageListener</MethodClassName>
		<LogicSource>return new TransportationRateResponse(message, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6808">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addMessageDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseRateMessageListener</MethodClassName>
		<LogicSource>return new CruiseRateResponse(message, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6809">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fixMessageMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarRateMessageListener</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6810">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addMessageDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarRateMessageListener</MethodClassName>
		<LogicSource>return new CarRateResponse(message, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6811">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fixMessageMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemRateMessageListener</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6812">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addMessageDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemRateMessageListener</MethodClassName>
		<LogicSource>return new ItemRateResponse(message, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6813">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStudioField</MethodClassName>
		<LogicSource>return new DanceStudio(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6814">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceTeacherField</MethodClassName>
		<LogicSource>return new DanceTeacher(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6815">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceClassField</MethodClassName>
		<LogicSource>return new DanceClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6816">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceAlignmentField</MethodClassName>
		<LogicSource>return new DanceAlignment(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6817">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceDirectionField</MethodClassName>
		<LogicSource>return new DanceDirection(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6818">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceFootField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
        {"", ""}, 
        {"L", "Left"},
        {"R", "Right"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6819">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceArtisticClassField</MethodClassName>
		<LogicSource>return new DanceArtisticClass(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6820">
		<LastChanged>2012-04-11T00:10:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>getMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelMessageData</MethodClassName>
		<LogicSource><![CDATA[String strParamOrig = strParam;
if (strParam.startsWith(HotelModel.MEAL_PLAN_ID_PARAM))
    strParam = HotelModel.MEAL_PLAN_ID_PARAM;
if (strParam.startsWith(HotelModel.MEAL_PLAN_QTY_PARAM))
    strParam = HotelModel.MEAL_PLAN_QTY_PARAM;
if (strParam.startsWith(HotelModel.MEAL_PLAN_DAYS_PARAM))
    strParam = HotelModel.MEAL_PLAN_DAYS_PARAM;
MessageDataDesc messageDataDesc = super;
if (messageDataDesc != null)
    if ((strParamOrig.startsWith(HotelModel.MEAL_PLAN_ID_PARAM))
            || (strParamOrig.startsWith(HotelModel.MEAL_PLAN_QTY_PARAM))
            || (strParamOrig.startsWith(HotelModel.MEAL_PLAN_DAYS_PARAM)))
        messageDataDesc.setKey(strParamOrig);
return messageDataDesc;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6937">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepScreen</MethodClassName>
		<LogicSource><![CDATA[String strURL = super;
strURL = Utility.addFieldParam(strURL, this.getScreenRecord().getField(DanceScreenRecord.DANCE_FOOT_IN));
strURL = Utility.addFieldParam(strURL, this.getScreenRecord().getField(DanceScreenRecord.DANCE_DIRECTION_ID));
strURL = Utility.addFieldParam(strURL, this.getScreenRecord().getField(DanceScreenRecord.MOVE_CLASS_ID));
return strURL;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6938">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DanceStepScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Utility.restoreFieldParam(this, this.getScreenRecord().getField(DanceScreenRecord.DANCE_FOOT_IN));
Utility.restoreFieldParam(this, this.getScreenRecord().getField(DanceScreenRecord.DANCE_DIRECTION_ID));
Utility.restoreFieldParam(this, this.getScreenRecord().getField(DanceScreenRecord.MOVE_CLASS_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6952">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SpecialFormatField</MethodClassName>
		<LogicSource><![CDATA[m_recSpecialFormat = null;	// QueryConverter closed this
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6953">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>NumberFormatField</MethodClassName>
		<LogicSource><![CDATA[m_recNumberFormat = null;	// QueryConverter closed this
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6954">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SpecialFunctionField</MethodClassName>
		<LogicSource><![CDATA[m_recSpecialFunction = null;	// QueryConverter closed this
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6955">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FinStmtReportScreenRecord</MethodClassName>
		<LogicSource><![CDATA[if (m_recPeriod != null)
    m_recPeriod.free();
m_recPeriod = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6956">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetailDistGroupGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new AcctDetail(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6957">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>clone</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BatchSequenceHandler</MethodClassName>
		<LogicSource>return new BatchSequenceHandler(m_fldDest, m_fldSource, m_fldBalance);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6958">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchDetailScreen</MethodClassName>
		<LogicSource>return new BankTrxBatch(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6959">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ReadLinkedTrxHandler</MethodClassName>
		<LogicSource><![CDATA[Record recTrxDesc = ((ReferenceField)this.getOwner().getRecord().getField(PaymentHistory.LINKED_TRX_DESC_ID)).getReference();
if (recTrxDesc != null)
    if (BankTrx.BANK_TRX_FILE.equalsIgnoreCase(recTrxDesc.getField(TrxDesc.DESC_CODE).toString()))
        return super;
try {
    m_record.addNew();
} catch (DBException e) {
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6960">
		<LastChanged>2012-07-19T14:16:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ReadLinkedTrxHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null, record, null, true, false, true</MethodReturns>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>ReadLinkedTrxHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6961">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrxDistGridScreen</MethodClassName>
		<LogicSource><![CDATA[this.getMainRecord().setKeyArea(AcctDetailDist.TRX_DESC_ID_KEY);

m_fldTrxDescID = new TrxDescField(null, "TrxDesc", Constants.DEFAULT_FIELD_LENGTH, null, null);
m_fldTrxID = new TrxIDField(null, "TrxID", Constants.DEFAULT_FIELD_LENGTH, null, null);

if ((this.getHeaderRecord().getEditMode() == DBConstants.EDIT_NONE) || (this.getHeaderRecord().getEditMode() == DBConstants.EDIT_ADD))
    this.syncHeaderToMain();

Record recTrxStatus = ((ReferenceField)this.getHeaderRecord().getField(BaseTrx.TRX_STATUS_ID)).getReference();
if (recTrxStatus != null)
    m_fldTrxDescID.moveFieldToThis(recTrxStatus.getField(TrxStatus.TRX_DESC_ID));
m_fldTrxID.moveFieldToThis(this.getHeaderRecord().getField(BaseTrx.ID));
m_fldTrxID.setReferenceRecord(this.getHeaderRecord());
this.getMainRecord().addListener(new SubFileFilter(m_fldTrxDescID, AcctDetailDist.TRX_DESC_ID, m_fldTrxID, AcctDetailDist.TRX_ID, null, null));
m_fldTrxDescID.addListener(new FieldReSelectHandler(this));
m_fldTrxID.addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6962">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LinkTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strURL = super.getScreenURL();
strURL = Utility.addURLParam(strURL, DBParams.HEADER_RECORD, this.getHeaderRecord().getTableNames(false));
return strURL;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6963">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourChangeHandler</MethodClassName>
		<LogicSource><![CDATA[super;
boolean bBookingOkay = false;
if ((m_recBooking.getEditMode() == DBConstants.EDIT_CURRENT) ||(m_recBooking.getEditMode() == DBConstants.EDIT_CURRENT))
{
    if (m_recBooking.getField(Booking.TOUR_ID).equals(this.getOwner().getField(Tour.ID)))
        bBookingOkay = true;
}
if (!bBookingOkay)
{   // Sync booking with tour
    Record recTourHeader = ((ReferenceField)this.getOwner().getField(Tour.TOUR_HEADER_ID)).getReference();
    if (recTourHeader != null)
    {   // Always
        if (recTourHeader.getField(TourHeader.TOUR_SERIES).getState() == true)
        {   // Not series, sync the booking with the tour
            //+ Read the booking for this tour
        }
        else
        {   // Is series... leave booking alone?
            
        }
    }
}
else
{
//+    m_recBooking.addNew();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6964">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourChangeHandler</MethodClassName>
		<LogicSource><![CDATA[super;
//+    m_recBooking.addNew();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6965">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>TourChangeHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Booking recBooking</MethodInterface>
		<MethodClassName>TourChangeHandler</MethodClassName>
		<LogicSource>m_recBooking = recBooking;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6967">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>isNewTrx</MethodName>
		<LogicDescription><![CDATA[Is this a new transaction (or a modification of a current transaction).
If it is not new, the system will calculate the current posting and do an adjusting entry.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>int iChangeType</MethodInterface>
		<MethodClassName>UpdateAcctDetailHandler</MethodClassName>
		<LogicSource>return true;    // Override this!</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6968">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>550</Sequence>
		<MethodName>modifyDetailTrx</MethodName>
		<LogicDescription><![CDATA[Modify this detail transaction.
First calculate the current amount posted for this type of trx, then
call addDetailTrx with the current balance.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>TransactionType recTransactionType, AcctDetailDist recAcctDetailDist, AcctDetail recAcctDetail, Period recPeriod</MethodInterface>
		<MethodClassName>UpdateAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[recAcctDetailDist.setKeyArea(AcctDetailDist.TRX_DESC_ID_KEY);
BaseField fldTrxDescID = recTransactionType.getField(TransactionType.TRX_DESC_ID);
BaseField fldTrxID = this.getOwner().getField(Trx.ID);
BaseField fldTrxTypeID = recTransactionType.getField(TransactionType.ID);
FileListener listener = null;
recAcctDetailDist.addListener(listener = new SubFileFilter(fldTrxDescID, AcctDetailDist.TRX_DESC_ID, fldTrxID, AcctDetailDist.TRX_ID, fldTrxTypeID, AcctDetailDist.TRX_TYPE_ID));
recAcctDetailDist.close();
double dCurrentTotal = 0.00;
try {
    while (recAcctDetailDist.hasNext())
    {
        recAcctDetailDist.next();
        dCurrentTotal = dCurrentTotal + recAcctDetailDist.getField(AcctDetailDist.AMOUNT).getValue();
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    recAcctDetailDist.removeListener(listener, true);
}
this.addDetailTrx(recTransactionType, recAcctDetailDist, recAcctDetail, recPeriod, dCurrentTotal);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6969">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>isNewTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateDepEstHandler</MethodClassName>
		<LogicSource>return (iChangeType == DBConstants.AFTER_ADD_TYPE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6970">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getTrxDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateDepEstHandler</MethodClassName>
		<LogicSource>return this.getOwner().getField(ApTrx.DEPARTURE_DATE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6971">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,000</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription>New record = unknown trx id</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateApTrxHandler</MethodClassName>
		<LogicSource><![CDATA[m_iOrigTrxStatusID = 0;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6972">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,100</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription>Read a valid record = this is the orig trx status ID</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateApTrxHandler</MethodClassName>
		<LogicSource><![CDATA[m_iOrigTrxStatusID = (int)this.getOwner().getField(ApTrx.TRX_STATUS_ID).getValue();
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6973">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,500</Sequence>
		<MethodName>getTrxStatusID</MethodName>
		<LogicDescription>Utility to get the trx status ID for this code</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>String strTrxStatus</MethodInterface>
		<MethodClassName>UpdateApTrxHandler</MethodClassName>
		<LogicSource>return this.getTrxStatus().getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, strTrxStatus);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6974">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>isNewTrx</MethodName>
		<LogicDescription><![CDATA[Is this a new (invoice) trx?
It is if is a new record or is being changed from an estimate]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateInvoiceHandler</MethodClassName>
		<LogicSource><![CDATA[if (iChangeType == DBConstants.AFTER_ADD_TYPE)
    return true;
if (this.getOwner().getField(ApTrx.TRX_STATUS_ID).getValue() == this.getTrxStatusID(ApTrx.DEPARTURE_EST_MANUAL))
    return true;
if (this.getOwner().getField(ApTrx.TRX_STATUS_ID).getValue() == this.getTrxStatusID(ApTrx.DEP_ESTIMATE))
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6975">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApJournalVendorTotals</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6976">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MoveEstimateHandler</MethodClassName>
		<LogicSource><![CDATA[super;
Record recApTrx = this.getOwner();
if (m_iDepartureEstimate == -1)
{
    TrxStatus recTrxStatus = new TrxStatus(this.getOwner().findRecordOwner());  // Rarely, but if it doesn't exist in the screen, add it!
    m_iDepartureEstimate = recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.DEP_ESTIMATE);
    m_iDepartureEstimateManual = recTrxStatus.getTrxStatusID(TransactionType.ACCTPAY, ApTrx.AP_TRX_FILE, ApTrx.DEPARTURE_EST_MANUAL);
    recTrxStatus.free();
}
if ((recApTrx.getField(ApTrx.TRX_STATUS_ID).getValue() == m_iDepartureEstimate)
    || (recApTrx.getField(ApTrx.TRX_STATUS_ID).getValue() == m_iDepartureEstimateManual))
{
    recApTrx.getField(ApTrx.INVOICE_AMOUNT).moveFieldToThis(recApTrx.getField(ApTrx.DEPARTURE_ESTIMATE));
    recApTrx.getField(ApTrx.INVOICE_BALANCE).moveFieldToThis(recApTrx.getField(ApTrx.DEPARTURE_ESTIMATE));
    recApTrx.getField(ApTrx.INVOICE_BALANCE_LOCAL).moveFieldToThis(recApTrx.getField(ApTrx.DEPARTURE_ESTIMATE_LOCAL));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6977">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>getSharedRecordTypeKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrx</MethodClassName>
		<LogicSource>return this.getField(ApTrx.AP_TRX_TYPE_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6978">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>createSharedRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ApTrx</MethodClassName>
		<LogicSource><![CDATA[try {
    int iApTrxTypeID = (Integer) Converter.convertObjectToDatatype(objKey, Integer.class, 0);
    if (iApTrxTypeID == ApTrx.AP_TRX_TYPE)
        return this;
    if (iApTrxTypeID == ApTrx.TICKET_TRX_TYPE)
        return new TicketTrx(recordOwner);
} catch (Exception ex) {
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6979">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketTrx</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(ApTrx.AP_TRX_TYPE_ID, ApTrx.TICKET_TRX_TYPE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6981">
		<LastChanged>2012-07-19T14:16:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ForceSignHandler</MethodName>
		<LogicDescription><![CDATA[Constructor.
1 = Sign forced to positive
-1 = Sign is forced to negative.]]></LogicDescription>
		<MethodReturns>null, null, null</MethodReturns>
		<MethodInterface>int iTargetSign</MethodInterface>
		<MethodClassName>ForceSignHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (iTargetSign != -1)
	iTargetSign = 1;
m_iTargetSign = iTargetSign;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6982">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getFieldValue</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InvoiceAmountSubCountHandler</MethodClassName>
		<LogicSource><![CDATA[double dMainValue = super;
Record recApTrx = this.getOwner();
Record recTrxStatus = ((ReferenceField)recApTrx.getField(ApTrx.TRX_STATUS_ID)).getReference();
if (recTrxStatus != null)
    if (recTrxStatus.getField(TrxStatus.STATUS_CODE).toString().indexOf(ApTrx.INVOICE) == -1)
        dMainValue = 0; // Don't total non-invoice types
return dMainValue;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6983">
		<LastChanged>2012-02-03T19:57:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>InvoiceAmountSubCountHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null, null, null, fieldMain, ifsToCount, bRecountOnSelect, bVerifyOnEOF, bResetOnBreak</MethodReturns>
		<MethodInterface>BaseField fieldMain, String ifsToCount, boolean bRecountOnSelect, boolean bVerifyOnEOF, boolean bResetOnBreak</MethodInterface>
		<MethodClassName>InvoiceAmountSubCountHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6985">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doLocalCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FilterApTrxDateRange</MethodClassName>
		<LogicSource><![CDATA[boolean bFlag = super;
if (bFlag == true)
{
    BaseField fldDepartureDate = this.getOwner().getField(m_iFieldSeq);
    boolean[] rgbEnabled = fldDepartureDate.setEnableListeners(true);
    if (!m_fldStart.isNull())
    {
        if ((fldDepartureDate.getData() != null) && (fldDepartureDate.compareTo(m_fldStart) >= 0))
            bFlag = true;
        else
            bFlag = false;
    }
    if (bFlag == true)
        if (!m_fldEnd.isNull())
    {
        if ((fldDepartureDate.getData() == null) || (fldDepartureDate.compareTo(m_fldEnd) <= 0))
            bFlag = true;
        else
            bFlag = false;
    }
    fldDepartureDate.setEnableListeners(rgbEnabled);
}
return bFlag;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6986">
		<LastChanged>2012-02-01T14:49:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>FilterApTrxDateRange</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>String iFieldSeq, BaseField fldStart, BaseField fldEnd</MethodInterface>
		<MethodClassName>FilterApTrxDateRange</MethodClassName>
		<LogicSource><![CDATA[super;
m_iFieldSeq = iFieldSeq;
m_fldStart = fldStart;
m_fldEnd = fldEnd;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6987">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketTrxScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6988">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TicketTrxScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(TicketTrx.TICKET_NUMBER).setEnabled(false);
this.getMainRecord().getField(TicketTrx.ISSUE_DATE).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6989">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setState</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OverridePaidCheckbox</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    if (bState == true) if (this.getState() == false)
        ((BaseField)this.getField()).moveFieldToThis(((BaseField)this.getField()).getRecord().getField(TicketTrx.OVERRIDE_AMOUNT));
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6990">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getTrxDate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateOverrideAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[Record recTicketTrx = this.getOwner();
return recTicketTrx.getField(TicketTrx.OVERRIDE_PAID_DATE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6991">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getTrxStatus</MethodName>
		<LogicDescription/>
		<MethodReturns>TrxStatus</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UpdateAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[RecordOwner recordOwner = this.getOwner().findRecordOwner();
TrxStatus recTrxStatus = (TrxStatus)recordOwner.getRecord(TrxStatus.TRX_STATUS_FILE);
if (recTrxStatus == null)
{
    recTrxStatus = new TrxStatus(recordOwner);  // Rarely, but if it doesn't exist in the screen, add it!
    this.getOwner().addListener(new FreeOnFreeHandler(recTrxStatus));
}
return recTrxStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6992">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getDiffAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateOverrideAcctDetailHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getOwner().getRecordOwner().getRecord(ApControl.AP_CONTROL_FILE).getField(ApControl.OVERRIDE_GAIN_LOSS_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6993">
		<LastChanged>2012-02-01T15:20:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>isNewTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateOverrideAcctDetailHandler</MethodClassName>
		<LogicSource><![CDATA[if (this.getOwner().getField(ApTrx.TRX_STATUS_ID).getValue() == this.getTrxStatusID(TicketTrx.OVER_RIDE_PAID))
    return false;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6994">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getTrxStatusID</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateOverrideAcctDetailHandler</MethodClassName>
		<LogicSource>return this.getTrxStatus().getTrxStatusID(TransactionType.AIR, TicketTrx.TICKET_TRX_FILE, strTrxStatus);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6995">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ScfToHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScfToHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.READ_MOVE, false);
this.setRespondsToMode(DBConstants.INIT_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6996">
		<LastChanged>2012-03-29T08:15:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>InitArTrxHandler</MethodClassName>
		<LogicSource><![CDATA[super;
// Booking->Tour->TourHeader->ProductCat P/P  vs  A/R
Record recTour = ((ReferenceField)m_recBooking.getField(BookingModel.TOUR_ID)).getReference();
BaseField fldDepartureDate = recTour.getField(TourModel.DEPARTURE_DATE);
this.getOwner().getField(ArTrx.DEPARTURE_DATE).moveFieldToThis(fldDepartureDate, DBConstants.DISPLAY, DBConstants.INIT_MOVE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6997">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>InitArTrxHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>Record recBooking</MethodInterface>
		<MethodClassName>InitArTrxHandler</MethodClassName>
		<LogicSource><![CDATA[m_recBooking = recBooking;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6998">
		<LastChanged>2012-03-29T08:13:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>210</Sequence>
		<MethodName>getDepartureDrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns>ReferenceField</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UpdateArTrxAcctDetailHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getProductCategory().getField(ProductCategoryModel.PP_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6999">
		<LastChanged>2012-03-29T08:13:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>220</Sequence>
		<MethodName>getDepartureCrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns>ReferenceField</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UpdateArTrxAcctDetailHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getProductCategory().getField(ProductCategoryModel.INCOME_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7000">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getRecord(ArTrx.AR_TRX_FILE) != null)
    return this.getRecord(ArTrx.AR_TRX_FILE);
return new ArTrx(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7001">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxScreen</MethodClassName>
		<LogicSource><![CDATA[super;        

this.setAppending(false);
this.setEditing(false);

ArTrx recArTrx = (ArTrx)this.getRecord(ArTrx.AR_TRX_FILE);
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
recBooking.addArDetail(recArTrx, null, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7002">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolbar = super;

ToolScreen toolbar2 = new EmptyToolbar(this.getNextLocation(ScreenConstants.LAST_LOCATION, ScreenConstants.DONT_SET_ANCHOR), this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
BaseField converter = null;
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.GROSS);
ScreenComponent sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.STD_COMMISSION);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.NET);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);

converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.DEPOSIT);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.DEPOSIT_DUE_DATE);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);

converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.FINAL_PAYMENT_DUE_DATE);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);
converter = this.getRecord(Booking.BOOKING_FILE).getField(Booking.BALANCE);
sField = converter.setupDefaultView(toolbar2.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.ANCHOR_DEFAULT), toolbar2, ScreenConstants.DEFAULT_DISPLAY);
sField.setEnabled(false);

return toolbar;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7003">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(LinkTrx.SOURCE), LinkTrx.SOURCE, LinkTrx.SOURCE, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTREC_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7004">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7005">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>createDistRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>CashBatchDist</MethodReturns>
		<MethodInterface>RecordOwner recordOwner</MethodInterface>
		<MethodClassName>CashDistConverter</MethodClassName>
		<LogicSource>return new CashBatchDist(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7006">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>updateBaseTrx</MethodName>
		<LogicDescription><![CDATA[Update the base trx to the new status.
@return true if successful]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[return true;	// Default = success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7007">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>updateBaseTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchPost</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = false;
// Now post the total deposit amount
BaseTrx recBaseTrx = this.getBaseTrx();
Record recCashBatch = this.getMainRecord();
TrxStatus recTrxStatus = (TrxStatus)((ReferenceField)recBaseTrx.getField(BankTrx.TRX_STATUS_ID)).getReferenceRecord();
try   {
// Step 2a - Create and write the bank transaction (in BankTrx).
    recBaseTrx.addNew();
    int iTrxStatusID = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.PAYMENT);
    recBaseTrx.getField(BankTrx.TRX_STATUS_ID).setValue(iTrxStatusID);
    recBaseTrx.getField(BankTrx.PAYEE_NAME).moveFieldToThis(recTrxStatus.getField(TrxStatus.STATUS_DESC));
    recBaseTrx.getField(BankTrx.TRX_DATE).moveFieldToThis(recCashBatch.getField(CashBatch.DETAIL_DATE));
    recBaseTrx.getField(BankTrx.AMOUNT_LOCAL).setValue(recCashBatch.getField(CashBatch.BATCH_TOTAL_ACTUAL).getValue());
    recBaseTrx.getField(BankTrx.TRX_ENTRY).initField(DBConstants.DONT_DISPLAY);
    recBaseTrx.getField(BankTrx.BANK_ACCT_ID).moveFieldToThis(recCashBatch.getField(CashBatch.BANK_ACCT_ID));
    recBaseTrx.getField(BankTrx.AMOUNT).setValue(recCashBatch.getField(CashBatch.BATCH_TOTAL_ACTUAL).getValue());
    recBaseTrx.getField(BankTrx.EXCHANGE).initField(DBConstants.DONT_DISPLAY);
    recBaseTrx.getField(BankTrx.COMMENTS).moveFieldToThis(recTrxStatus.getField(TrxStatus.STATUS_DESC));
    // Step 2 - Post it to the G/L
    //+recAcctDetail.getDatabase().startTrx();
    // Step 2a - Create and write the bank transaction (in BankTrx).
    bSuccess = recBaseTrx.onPostTrx();
    if (!bSuccess)
        return bSuccess;
} catch (DBException ex) {
    ex.printStackTrace();
    return false;
}
return bSuccess;    // Success]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7008">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,700</Sequence>
		<MethodName>updateDetailTrx</MethodName>
		<LogicDescription><![CDATA[(Optionally) update this detail transaction.
@return true if success]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[return true;	// Success (override to update the trx)]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7009">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>updateDetailTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoPost</MethodClassName>
		<LogicSource><![CDATA[Record recDetail = this.getDetailRecord();
try {
    recDetail.edit();
    recDetail.getField(Mco.TRX_STATUS_ID).setValue(m_iTrxStatusEntered);
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7010">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>updateDetailTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardPost</MethodClassName>
		<LogicSource><![CDATA[Record recDetail = this.getDetailRecord();
try {
    recDetail.edit();
    recDetail.getField(Mco.TRX_STATUS_ID).setValue(m_iTrxStatusEntered);
} catch (DBException ex)    {
    ex.printStackTrace();
    return false;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7016">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CardFilter</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), Card.ID_KEY, Card.DESCRIPTION, true, false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7017">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCollectScreen</MethodClassName>
		<LogicSource>return new CreditCard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7018">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCollectScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ArControl(this);
new TrxStatus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7019">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCollectScreen</MethodClassName>
		<LogicSource>return new McoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7020">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addTrxSpecificListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseArTrxPostScreen</MethodClassName>
		<LogicSource>// Override this to add listeners for this type</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7021">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseArTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addTrxSpecificListeners();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7022">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardEntryScreen</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.FORM)) || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
	return (this.onForm(null, CreditCard.ENTRY_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7023">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.FORM)) || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
	return (this.onForm(null, Mco.ENTRY_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7025">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoEntryScreen</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.FORM)) || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
	return (this.onForm(null, Mco.ENTRY_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7026">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7027">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7028">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7029">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION), AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7030">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>McoGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7031">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreditCardGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, AcctDetailDist.DIST_DISTRIBUTION, AcctDetailDist.DIST_DISTRIBUTION, application.getResources(ResourceConstants.ACCTPAY_RESOURCE, true).getString(AcctDetailDist.DIST_DISTRIBUTION));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7032">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>setEnabled</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxStatusField</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getReferenceRecord(null, false) != null)
    this.getReferenceRecord().getField(TrxStatus.STATUS_DESC).setEnabled(bEnable);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7034">
		<LastChanged>2012-03-27T15:25:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,000</Sequence>
		<MethodName>createTourHeaderPopup</MethodName>
		<LogicDescription>Create a popup control using this record</LogicDescription>
		<MethodReturns>ScreenComponent</MethodReturns>
		<MethodInterface>ScreenLoc itsLocation, ComponentParent parentScreen, Converter converter, int iDisplayFieldDesc, BaseField fldDepartureDate, BaseField fldStartDate, BaseField fldEndDate, BaseField fldTourType</MethodInterface>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[Date dateTarget = new Date();
long ltargetDate = (long)dateTarget.getTime();
if ((long)fldDepartureDate.getValue() != 0) if ((long)fldDepartureDate.getValue() < ltargetDate)
    ltargetDate = (long)fldDepartureDate.getValue();
fldStartDate.setValue(ltargetDate);   
Calendar nextYear = Calendar.getInstance();
nextYear.add(Calendar.YEAR, 1);
nextYear.set(Calendar.HOUR_OF_DAY, 0);
nextYear.set(Calendar.MINUTE, 0);
nextYear.set(Calendar.SECOND, 0);
nextYear.set(Calendar.MILLISECOND, 0);
ltargetDate = nextYear.getTime().getTime();
fldEndDate.setValue(Math.max(ltargetDate, (long)fldDepartureDate.getValue()));

FileListener fileBehavior = new ExtractRangeFilter(TourHeader.START_DATE, fldStartDate, TourHeader.END_DATE, fldEndDate, ExtractRangeFilter.PAD_DEFAULT);
this.addListener(fileBehavior);
this.setKeyArea(TourHeader.DESC_SORT_KEY);
ScreenComponent screenField = BaseField.createScreenComponent(ScreenModel.POPUP_BOX, itsLocation, parentScreen, converter, iDisplayFieldDesc, null);
this.removeListener(fileBehavior, true);
return screenField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7036">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.restoreScreenParam(LookupScreenRecord.TOUR_HDR_START_DATE);
this.restoreScreenParam(LookupScreenRecord.TOUR_HDR_END_DATE);
this.restoreScreenParam(LookupScreenRecord.TOUR_HDR_TOUR_TYPE);
this.restoreScreenParam(LookupScreenRecord.TOUR_HEADER_ID);
this.restoreScreenParam(LookupScreenRecord.TOUR_STATUS_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7037">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckTourSeriesHandler</MethodClassName>
		<LogicSource><![CDATA[BaseField fldTourTypeID = this.getOwner();
if (!fldTourTypeID.isNull())
{
    if ((TourType.SERIES & (int)this.getOwner().getValue()) != 0)
        this.getOwner().getRecord().getField(TourHeader.TOUR_SERIES).setState(true);
    else
        this.getOwner().getRecord().getField(TourHeader.TOUR_SERIES).setState(false);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7038">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckTourSeriesHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7039">
		<LastChanged>2012-01-31T21:06:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addSlaveListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLine</MethodClassName>
		<LogicSource><![CDATA[super;
HistoryHandler histBehavior = new HistoryHandler(BookingLineHistory.class.getName(), BookingLineHistory.HISTORY_DATE, null);
this.addListener(histBehavior);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7040">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>checkSecurity</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductResponseScreen</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
{   // Okay, their group can access this screen, but can this user access this data?
    BaseMessage message = this.getMessage();
    String strContactID = (String)message.getMessageHeader().get(TrxMessageHeader.CONTACT_ID);
    String strContactType = (String)message.getMessageHeader().get(TrxMessageHeader.CONTACT_TYPE);
    iErrorCode = this.checkContactSecurity(strContactType, strContactID);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7042">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setRecordDataStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHotelRateAvailMsgReplyInProcessor</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
if (iFieldSeq == BookingDetail.INVENTORY_STATUS_ID)
    iErrorCode = productRequest.setRecordDataStatus(record, BookingDetail.COST_STATUS_ID, iStatus);  // Make sure all the detail has this status
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7043">
		<LastChanged>2012-02-01T15:48:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setRecordDataStatus</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Record record, String iFieldSeq, int iStatus, ProductMessageData productRequest</MethodInterface>
		<MethodClassName>ProductResponseMsgReplyInProcessor</MethodClassName>
		<LogicSource>return productRequest.setRecordDataStatus(record, iFieldSeq, iStatus);  // Make sure all the detail has this status</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7044">
		<LastChanged>2012-04-12T06:45:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,102</Sequence>
		<MethodName>setErrorMessage*1</MethodName>
		<LogicDescription>Set the error message in this record for this message type.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>MessageDataParent messageData, String strError</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>((PropertiesField)this.getField(BookingDetail.ERROR_PROPERTIES)).setProperty(((BaseProductMessageDesc)messageData).getMessageTypeParam() + '.' + BookingDetail.MESSAGE_PARAM + '.' + BookingDetail.ERROR_PARAM, strError, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="7045">
		<LastChanged>2012-02-01T10:48:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,104</Sequence>
		<MethodName>setErrorMessage*2</MethodName>
		<LogicDescription>Set the error message in this record for this status type.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>String iStatusType, String strError</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>((PropertiesField)this.getField(BookingDetail.ERROR_PROPERTIES)).setProperty(this.getFieldParam(this.getField(iStatusType)) + '.' + BookingDetail.MESSAGE_PARAM + '.' + BookingDetail.ERROR_PARAM, strError, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7048">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMessageOutErrorProcessor</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7050">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductUpdateMessageOutErrorProcessor</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7055">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductMessageErrorProcessor</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7056">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductReplyInErrorProcessor</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7057">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductReplyInUpdateErrorProcessor</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7058">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductReplyOutErrorProcessor</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7059">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductReplyOutUpdateErrorProcessor</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7060">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMessageInErrorProcessor</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7061">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductUpdateMessageInErrorProcessor</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7062">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductReplyErrorProcessor</MethodClassName>
		<LogicSource><![CDATA[if (internalMessage == null)
    return null;
String strErrorMessage = (String)internalMessage.getMessageHeader().get(TrxMessageHeader.MESSAGE_ERROR);

BaseMessage errorMessage = internalMessage;
if (errorMessage.getMessageDataDesc(null) != null)
{   // Always
    BaseProductResponse productResponse = (BaseProductResponse)errorMessage.getMessageDataDesc(null);
    productResponse.setMessageDataStatus(MessageDataDesc.ERROR);
    productResponse.setMessageDataError(strErrorMessage);
}
return errorMessage;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7063">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductMessageErrorProcessor</MethodClassName>
		<LogicSource><![CDATA[if (internalMessage == null)
    return null;
ProductRequest productRequest = (ProductRequest)internalMessage.getMessageDataDesc(null);

String strErrorMessage = (String)internalMessage.getMessageHeader().get(TrxMessageHeader.MESSAGE_ERROR);
String strReturnQueueName = null;
if (internalMessage.getMessageHeader() instanceof TrxMessageHeader)
    strReturnQueueName = (String)((TrxMessageHeader)internalMessage.getMessageHeader()).getMessageHeaderMap().get(MessageConstants.RETURN_QUEUE_NAME);
if (strReturnQueueName == null)
    strReturnQueueName = MessageConstants.TRX_RETURN_QUEUE;
TrxMessageHeader messageReplyHeader = null;

if (internalMessage.getMessageHeader() instanceof TrxMessageHeader)
    messageReplyHeader = ((TrxMessageHeader)internalMessage.getMessageHeader()).createReplyHeader();
else
    messageReplyHeader = new TrxMessageHeader(strReturnQueueName, MessageConstants.INTERNET_QUEUE, null);
messageReplyHeader.setQueueName(strReturnQueueName);
if (internalMessage.getMessageHeader().getRegistryIDMatch() != null)
    messageReplyHeader.setRegistryIDMatch(internalMessage.getMessageHeader().getRegistryIDMatch());
 
MessageProcessInfo recMessageProcessInfo = (MessageProcessInfo)this.getRecord(MessageProcessInfo.MESSAGE_PROCESS_INFO_FILE);
if (recMessageProcessInfo == null)
    recMessageProcessInfo = new MessageProcessInfo(this);
BaseMessage errorMessage = (BaseMessage)recMessageProcessInfo.createReplyMessage(internalMessage);
errorMessage.setMessageHeader(messageReplyHeader);
if (errorMessage.getMessageDataDesc(null) != null)
{   // Always
    BaseProductResponse productResponse = (BaseProductResponse)errorMessage.getMessageDataDesc(null);
    productResponse.moveRequestInfoToReply(errorMessage);
    productResponse.setMessageDataStatus(MessageDataDesc.ERROR);
    productResponse.setMessageDataError(strErrorMessage);
}
return errorMessage;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7069">
		<LastChanged>2012-01-31T10:43:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>NotifyTimeoutProcess</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_ADD_TYPE) || (iChangeType == DBConstants.AFTER_UPDATE_TYPE))
    if (!this.getOwner().getField(MessageLog.TIMEOUT_TIME).isNull())
{

}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7073">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>NewBookingHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.ADD_TYPE) || (iChangeType == DBConstants.UPDATE_TYPE) || (iChangeType == DBConstants.AFTER_REFRESH_TYPE))
{
    Booking recBooking = (Booking)this.getOwner();
    // This code is only run when this record is added because of a BookingDetail add
    Date date = null;   // Departure date
    // First look through the dependent listeners for a subFileFilter
    BaseListener nextListener = recBooking.getListener(FileRemoveBOnCloseHandler.class.getName());
    while (nextListener != null)
    {
        if (((FileRemoveBOnCloseHandler)nextListener).getDependentListener() instanceof SubFileFilter)
        {
            SubFileFilter subFileFilter = (SubFileFilter)((FileRemoveBOnCloseHandler)nextListener).getDependentListener();
            if (subFileFilter.getOwner() instanceof BookingDetail)
            {
//x              if ((subFileFilter.getOwner().getEditMode() != DBConstants.EDIT_NONE) && (subFileFilter.getOwner().getEditMode() != DBConstants.EDIT_ADD))
                {
                    date = ((DateTimeField)subFileFilter.getOwner().getField(BookingDetail.DETAIL_DATE)).getDateTime();
                    if (date == null)
                        date = ((DateTimeField)subFileFilter.getOwner().getTable().getCurrentTable().getRecord().getField(BookingDetail.DETAIL_DATE)).getDateTime();
                    if (date != null)
                        break;  // Found, done
                }
            }
        }
        nextListener = nextListener.getListener(FileRemoveBOnCloseHandler.class.getName());
    }
    if (date != null)
    {
        RecordOwner recordOwner = recBooking.getRecordOwner();
        Tour recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
        TourHeader recTourHeader = (TourHeader)((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReference();
        
        int iErrorCode = DBConstants.NORMAL_RETURN;
        if ((recTourHeader == null)
            || ((recTourHeader.getEditMode() == DBConstants.EDIT_ADD) || (recTourHeader.getEditMode() == DBConstants.EDIT_NONE)))
        {   // No tour header, use the default tour header
            if (recBooking.getField(Booking.TOUR_ID).isNull())
            {
                Record recBookingControl = (Record)recordOwner.getRecord(BookingControl.BOOKING_CONTROL_FILE);
                if (m_bUseThinTourHeader)
                    recTourHeader = (TourHeader)((ReferenceField)recBookingControl.getField(BookingControl.THIN_TOUR_HEADER_ID)).getReference();
               else
                    recTourHeader = (TourHeader)((ReferenceField)recBookingControl.getField(BookingControl.TOUR_HEADER_ID)).getReference();
                if ((recTourHeader == null)
                    || ((recTourHeader.getEditMode() != DBConstants.EDIT_CURRENT) && (recTourHeader.getEditMode() != DBConstants.EDIT_IN_PROGRESS)))
                        return recordOwner.getTask().setLastError("Must have a default tour header selected in the Booking Control file");
            }
        }
        else
        {
            if (!recBooking.getField(Booking.TOUR_ID).isNull())
                return DBConstants.NORMAL_RETURN;      // A tour is already set up for this booking
        }
            // Setup this tour from a top-level tour header
        DateField fldDepDate = new DateField(null, null, DBConstants.DEFAULT_FIELD_LENGTH, null, null);
        fldDepDate.setDateTime(date, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
        if (recBooking.getField(Booking.TOUR_ID).isNull())
            iErrorCode = recTour.setupTourFromHeader(recTourHeader, fldDepDate, DBConstants.BLANK, DBConstants.BLANK);
        if (iErrorCode != DBConstants.NORMAL_RETURN)
        {
            fldDepDate.free();
            return iErrorCode;
        }
        try {
            if ((recBooking.getEditMode() == DBConstants.EDIT_ADD) || (recBooking.getEditMode() == DBConstants.EDIT_NONE))
            {   // Never (since updating the tour refreshes and locks a new record)
                boolean[] rgbEnabled = recBooking.setEnableListeners(false);
                Object[] rgobjEnabled = recBooking.setEnableFieldListeners(false);
                recBooking.addNew();
                recBooking.setEnableListeners(rgbEnabled);
                recBooking.setEnableFieldListeners(rgobjEnabled);
            }
            else
                recBooking.edit();
        recBooking.calcBookingDates(recTour, recTourHeader);
        recBooking.getField(Booking.TOUR_ID).moveFieldToThis(recTour.getField(Tour.ID));
        recBooking.setupDefaultDesc(recTourHeader, fldDepDate);
        recBooking.getField(Booking.CODE).handleFieldChanged(DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
        iErrorCode = recBooking.addTourDetail(recTour, recTourHeader, null, null, fldDepDate.getDateTime(), recBooking.getField(Booking.ASK_FOR_ANSWER));
        fldDepDate.free();
        if (iErrorCode != DBConstants.NORMAL_RETURN)
            return iErrorCode;
        if ((recBooking.getEditMode() == DBConstants.EDIT_ADD) || (recBooking.getEditMode() == DBConstants.EDIT_NONE))
            recBooking.add();
        else
            recBooking.set();
        Object bookmark = recBooking.getLastModified(DBConstants.OBJECT_ID_HANDLE);    // Success
        recBooking.setHandle(bookmark, DBConstants.OBJECT_ID_HANDLE);
        } catch (DBException e) {
            e.printStackTrace();
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7075">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getComponent</MethodName>
		<LogicDescription/>
		<MethodReturns>ScreenField</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ManualProductInfoHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_sField == null)
{
    BaseField fldProductDesc = ((ReferenceField)this.getOwner().getRecord().getField(BookingDetail.PRODUCT_ID)).getReferenceRecord().getField(Product.DESCRIPTION);
    m_sField = (ScreenField)fldProductDesc.getComponent(0);
}
return m_sField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7076">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ManualProductInfoHandler</MethodClassName>
		<LogicSource><![CDATA[boolean bFlag = this.compareFieldToString();
if (m_bDisableIfMatch)
    bFlag = !bFlag;
String strProperty = "hotelName";
BaseField fldTransportID = this.getOwner();
BaseField oldFldToDisable = m_fldToDisable;
BaseField fldProductDesc = ((ReferenceField)fldTransportID.getRecord().getField(BookingDetail.PRODUCT_ID)).getReferenceRecord().getField(Product.DESCRIPTION);
BaseField fldProperties = fldTransportID.getRecord().getField(BookingDetail.PROPERTIES);
if (bFlag)
    m_fldToDisable = fldProperties;
else
    m_fldToDisable = fldProductDesc;
if (oldFldToDisable != m_fldToDisable)
{   // Need to switch Hotel display field
    ScreenField sField = this.getComponent();
    FieldConverter converter = (FieldConverter)sField.getConverter();  // Field length converter
        
    if (bFlag)
    {   // Enable (properties)
        PropertiesConverter propConverter = new PropertiesConverter(fldProperties, strProperty);
        converter.setNextConverter(propConverter);
    }
    else
    {   // Disable (Hotel display)
        if (converter instanceof FieldConverter)
            if (((FieldConverter)converter).getNextConverter() instanceof PropertiesConverter)
        { // Always
            ((FieldConverter)converter).getNextConverter().free();
            converter.setNextConverter(fldProductDesc);
        }
    }
    oldFldToDisable.removeComponent(sField);
    m_fldToDisable.addComponent(sField);
    // sField.setConverter(converter); // No need to change the converter
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7077">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ManualProductInfoHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null, fieldToDisable, strCompareString, bDisableIfMatch</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ManualProductInfoHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7078">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>41</Sequence>
		<MethodName>addScreenListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[super;
String strManualTransportID = Integer.toString(((ReferenceField)this.getField(BookingDetail.COST_MESSAGE_TRANSPORT_ID)).getIDFromCode(MessageTransport.MANUAL));
if (((ReferenceField)this.getField(BookingDetail.PRODUCT_ID)).getReferenceRecord() != null)
    this.getField(BookingDetail.INFO_MESSAGE_TRANSPORT_ID).addListener(new ManualProductInfoHandler(((ReferenceField)this.getField(BookingDetail.PRODUCT_ID)).getReferenceRecord().getField(Product.DESCRIPTION), strManualTransportID, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7084">
		<LastChanged>2012-02-02T22:50:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailHistory</MethodClassName>
		<LogicSource><![CDATA[// Don't call inherited
this.addListener(new UniqueKeyHandler(this.getField(BookingDetailHistory.HISTORY_DATE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7085">
		<LastChanged>2012-01-31T21:05:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>42</Sequence>
		<MethodName>addSlaveListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new HistoryHandler(BookingDetailHistory.class.getName(), BookingDetailHistory.HISTORY_DATE, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7086">
		<LastChanged>2012-02-02T19:54:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderHistory</MethodClassName>
		<LogicSource><![CDATA[// Don't call inherited
this.addListener(new UniqueKeyHandler(this.getField(BookingAirHeaderHistory.HISTORY_DATE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7087">
		<LastChanged>2012-02-01T10:53:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addSlaveListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeader</MethodClassName>
		<LogicSource><![CDATA[super;
HistoryHandler histBehavior = new HistoryHandler(BookingAirHeaderHistory.class.getName(), BookingAirHeaderHistory.HISTORY_DATE, null);
this.addListener(histBehavior);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7088">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailabilityRequest</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7091">
		<LastChanged>2012-04-11T09:41:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PassengerDetailMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
Record recBookingPax = (Record)record;
if (this.get(BookingPaxModel.SOURCE_REFERENCE_NO) != null)
	recBookingPax.getField(BookingPaxModel.REMOTE_REFERENCE_NO).setString(this.get(BookingPaxModel.SOURCE_REFERENCE_NO).toString());
FirstMLastConverter converter = new FirstMLastConverter(recBookingPax, BookingPaxModel.NAME_PREFIX, BookingPaxModel.FIRST_NAME, BookingPaxModel.MIDDLE_NAME, BookingPaxModel.SUR_NAME);
String strFullName = (String)this.get(converter.getFieldDesc());
converter.setString(strFullName);
converter.free();
this.getRawFieldData(recBookingPax.getField(BookingPaxModel.SMOKER));
PaxCategoryModel recPaxCategory = (PaxCategoryModel)((ReferenceField)recBookingPax.getField(BookingPaxModel.PAX_CATEGORY_ID)).getReferenceRecord();
String strParam = recPaxCategory.getField(PaxCategoryModel.DESCRIPTION).getFieldName();
String strPaxCategory = (String)this.get(strParam);
String strPaxCategoryID = recPaxCategory.convertNameToID(strPaxCategory);
if (strPaxCategoryID != null)
    recBookingPax.getField(BookingPaxModel.PAX_CATEGORY_ID).setString(strPaxCategoryID);
//    for (int iFieldSeq = BookingPaxModel.NAME_PREFIX; iFieldSeq <= BookingPaxModel.SUR_NAME; iFieldSeq++)
{
//        this.getRawFieldData(cat.getFieldInfo(iFieldSeq));
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7093">
		<LastChanged>2012-04-11T09:42:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PassengerDetailMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;

Record recBookingPax =  (Record)record;
FirstMLastConverter converter = new FirstMLastConverter(recBookingPax, BookingPaxModel.NAME_PREFIX, BookingPaxModel.FIRST_NAME, BookingPaxModel.MIDDLE_NAME, BookingPaxModel.SUR_NAME);
this.put(converter.getFieldDesc(), converter.toString());   // Full Name
for (int iFieldSeq = recBookingPax.getFieldSeq(BookingPaxModel.NAME_PREFIX); iFieldSeq <= recBookingPax.getFieldSeq(BookingPaxModel.SUR_NAME); iFieldSeq++)
{
    this.putRawFieldData(recBookingPax.getField(iFieldSeq));
}
this.putRawFieldData(recBookingPax.getField(BookingPaxModel.SMOKER));
this.putRawFieldData(recBookingPax.getField(BookingPaxModel.PAX_CATEGORY_ID));
this.putRawFieldData(((ReferenceField)recBookingPax.getField(BookingPaxModel.PAX_CATEGORY_ID)).getReference().getField(PaxCategoryModel.DESCRIPTION));
this.putRawFieldData(recBookingPax.getField(BookingPaxModel.PAX_CATEGORY_ID));
this.put(BookingPaxModel.SOURCE_REFERENCE_NO, recBookingPax.getField(BookingPaxModel.ID).toString());  // Reference for remote system
converter.free();

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7094">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>isSingleDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PassengerDetailMessageData</MethodClassName>
		<LogicSource><![CDATA[return false;	// Force read thru]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7096">
		<LastChanged>2012-04-11T01:53:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LineMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super; // Create new node
Record recBookingLine = (Record)record;
this.putRawFieldData(recBookingLine.getField(BookingLineModel.DESCRIPTION));
this.putRawFieldData(recBookingLine.getField(BookingLineModel.PRICE));
this.putRawFieldData(recBookingLine.getField(BookingLineModel.QUANTITY));
this.putRawFieldData(recBookingLine.getField(BookingLineModel.GROSS));
this.putRawFieldData(recBookingLine.getField(BookingLineModel.COMMISSION));
this.putRawFieldData(recBookingLine.getField(BookingLineModel.NET));
this.put(BookingLineModel.SOURCE_REFERENCE_NO, recBookingLine.getField(BookingLineModel.ID).toString());  // Reference for remote system
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7097">
		<LastChanged>2012-04-11T01:53:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LineMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
Record recBookingLine = (Record)record;
this.getRawFieldData(recBookingLine.getField(BookingLineModel.DESCRIPTION));
this.getRawFieldData(recBookingLine.getField(BookingLineModel.PRICE));
this.getRawFieldData(recBookingLine.getField(BookingLineModel.QUANTITY));
this.getRawFieldData(recBookingLine.getField(BookingLineModel.GROSS));
this.getRawFieldData(recBookingLine.getField(BookingLineModel.COMMISSION));
this.getRawFieldData(recBookingLine.getField(BookingLineModel.NET));
if (this.get(BookingLineModel.SOURCE_REFERENCE_NO) != null)
    recBookingLine.getField(BookingLineModel.REMOTE_REFERENCE_NO).setString(this.get(BookingLineModel.SOURCE_REFERENCE_NO).toString());
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7100">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>isSingleDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LineMessageData</MethodClassName>
		<LogicSource><![CDATA[return false;	// Force read thru]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7102">
		<LastChanged>2012-04-11T02:05:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>isSingleDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductMessageData</MethodClassName>
		<LogicSource><![CDATA[boolean bSingleDetail = super;
if (bSingleDetail == false)	// Default is true
	return bSingleDetail;
ProductRequest productRequest = (ProductRequest)this.getMessageDataParent();
String requestType = productRequest.getRequestType();
if ((RequestType.BOOKING_CANCEL.equalsIgnoreCase(requestType))
    || (RequestType.BOOKING_ADD.equalsIgnoreCase(requestType))
    || (RequestType.BOOKING_CHANGE.equalsIgnoreCase(requestType)))  // For now - Add rate and avail later (probably set up a finalization est)
        if (!record.getField(BookingDetailModel.AP_TRX_ID).isNull())
            bSingleDetail = false;  // Multiple detail
return bSingleDetail;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7103">
		<LastChanged>2012-04-11T02:06:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
Record recBookingDetail = (Record)record;
if (this.get(BookingDetailModel.SOURCE_REFERENCE_NO) != null)
    recBookingDetail.getField(BookingDetailModel.REMOTE_REFERENCE_NO).setString(this.get(BookingDetailModel.SOURCE_REFERENCE_NO).toString());
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7104">
		<LastChanged>2012-04-11T02:06:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;

Record recBookingDetail =  (Record)record;
this.put(BookingDetailModel.SOURCE_REFERENCE_NO, recBookingDetail.getField(BookingDetailModel.ID).toString());  // Reference for remote system

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7105">
		<LastChanged>2012-04-11T02:17:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>createSubDataRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductMessageData</MethodClassName>
		<LogicSource><![CDATA[Record recBookingDetail = Record.makeRecordFromClassName(BookingDetailModel.THICK_CLASS, ((Record)record).findRecordOwner());  // Note I'm safe using this recordowner, since I'll be freeing this in a second.
String strApTrxID = record.getField(BookingDetailModel.AP_TRX_ID).getString();

recBookingDetail.setKeyArea(BookingDetailModel.AP_TRX_ID_KEY);
recBookingDetail.addListener(new StringSubFileFilter(strApTrxID, BookingDetailModel.AP_TRX_ID, null, null, null, null));
return recBookingDetail;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7106">
		<LastChanged>2012-04-11T02:15:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>140</Sequence>
		<MethodName>createSubNodeRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductMessageData</MethodClassName>
		<LogicSource><![CDATA[BookingDetailModel recBookingDetail = (BookingDetailModel)record;
if (((Record)recBookingDetail).getListener(SubFileFilter.class) == null)
{
    BookingModel recBooking = recBookingDetail.getBooking(false);    // Booking should already be current
    TourModel recTour = (TourModel)((ReferenceField)recBooking.getField(BookingModel.TOUR_ID)).getReferenceRecord();
    recBookingDetail.addDetailBehaviors(recBooking, recTour);
}
return recBookingDetail;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7107">
		<LastChanged>2012-04-11T02:14:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>readCurrentRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductMessageData</MethodClassName>
		<LogicSource><![CDATA[try {
    Record recBookingDetail = (Record)record;
    if (this.get(BookingDetailModel.REMOTE_REFERENCE_NO) != null)
    {   // A remote reference is the ID of this item (I am remote)
        recBookingDetail.getField(BookingDetailModel.ID).setString(this.get(BookingDetailModel.REMOTE_REFERENCE_NO).toString());
        recBookingDetail.setKeyArea(BookingDetailModel.ID_KEY);
        if (recBookingDetail.seek(null))
        { // Good
            recBookingDetail.edit();
        }
        else
        {
            if (record != null)
                if (record.getTask() != null)
                    record.getTask().setLastError("Remote reference not found");
            return null;
        }
    }
    else if (this.get(BookingDetailModel.SOURCE_REFERENCE_NO) != null)
    {   // A Source reference is the reference of the remote pax.
        recBookingDetail.close();
        if (!ADD_RECORD.equalsIgnoreCase((String)this.get(MESSAGE_RECORD_TYPE)))
        {
            while (recBookingDetail.hasNext())
            {
                recBookingDetail.next();
                if (this.get(BookingDetailModel.SOURCE_REFERENCE_NO).equals(recBookingDetail.getField(BookingDetailModel.REMOTE_REFERENCE_NO).toString()))
                {
                    recBookingDetail.edit();
                    break;
                }
            }
        }
        if (recBookingDetail.getEditMode() != DBConstants.EDIT_IN_PROGRESS)
        {
            if ((CHANGE_RECORD.equalsIgnoreCase((String)this.get(MESSAGE_RECORD_TYPE)))
                    || (DELETE_RECORD.equalsIgnoreCase((String)this.get(MESSAGE_RECORD_TYPE))))
            {
                if (record != null)
                    if (record.getTask() != null)
                        record.getTask().setLastError("Remote reference not found");
                return null;
            }
            else
            {
                recBookingDetail.addNew();
            }
        }
    }
    if (recBookingDetail.getEditMode() == DBConstants.EDIT_ADD)
    {
        BookingModel recBooking = ((BookingDetailModel)recBookingDetail).getBooking(false);    // Booking should already be current
        TourModel recTour = (TourModel)((ReferenceField)recBooking.getField(BookingModel.TOUR_ID)).getReferenceRecord();
        ((BookingDetailModel)recBookingDetail).initBookingDetailFields(recBooking, recTour, false);
    }
    return recBookingDetail;
} catch (DBException ex) {
    ex.printStackTrace();
    if (record != null)
        if (record.getTask() != null)
            record.getTask().setLastError(ex.getMessage());
    return null;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7111">
		<LastChanged>2012-04-11T09:46:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>createSubDataRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LineMessageData</MethodClassName>
		<LogicSource><![CDATA[Record recBooking = (Record)((BookingDetailModel)record).getBooking(true);
Record recBookingLine = Record.makeRecordFromClassName(BookingLineModel.THICK_CLASS, recBooking.findRecordOwner());  // Note I'm safe using this recordowner, since I'll be freeing this in a second.
recBookingLine.addListener(new SubFileFilter(recBooking));
return recBookingLine;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7112">
		<LastChanged>2012-04-11T13:41:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>readCurrentRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LineMessageData</MethodClassName>
		<LogicSource><![CDATA[try {
    Record recBookingLine = (Record)record;
    if (this.get(BookingLineModel.REMOTE_REFERENCE_NO) != null)
    {   // A remote reference is the ID of this item (I am remote)
        recBookingLine.getField(BookingLineModel.ID).setString(this.get(BookingLineModel.REMOTE_REFERENCE_NO).toString());
        recBookingLine.setKeyArea(BookingLineModel.ID_KEY);
        if (recBookingLine.seek(null))
        { // Good
            recBookingLine.edit();
        }
        else
        {
            if (record != null)
                if (record.getTask() != null)
                    record.getTask().setLastError("Remote reference not found");
            return null;
        }
    }
    else if (this.get(BookingLineModel.SOURCE_REFERENCE_NO) != null)
    {   // A Source reference is the reference of the remote pax.
        recBookingLine.close();
        if (!ADD_RECORD.equalsIgnoreCase((String)this.get(MESSAGE_RECORD_TYPE)))
        {
            while (recBookingLine.hasNext())
            {
                recBookingLine.next();
                if (this.get(BookingLineModel.SOURCE_REFERENCE_NO).equals(recBookingLine.getField(BookingLineModel.REMOTE_REFERENCE_NO).toString()))
                {
                    recBookingLine.edit();
                    break;
                }
            }
        }
        if (recBookingLine.getEditMode() != DBConstants.EDIT_IN_PROGRESS)
        {
            if ((CHANGE_RECORD.equalsIgnoreCase((String)this.get(MESSAGE_RECORD_TYPE)))
                    || (DELETE_RECORD.equalsIgnoreCase((String)this.get(MESSAGE_RECORD_TYPE))))
            {
                if (record != null)
                    if (record.getTask() != null)
                        record.getTask().setLastError("Remote reference not found");
                return null;
            }
            else
            {
                recBookingLine.addNew();
            }
        }
    }
} catch (DBException ex) {
    ex.printStackTrace();
    record = null;
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7113">
		<LastChanged>2012-04-11T09:43:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>createSubDataRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PassengerDetailMessageData</MethodClassName>
		<LogicSource><![CDATA[BookingDetailModel recBookingDetail = (BookingDetailModel)record;
Record recBooking = (Record)recBookingDetail.getBooking(!record.getField(BookingDetailModel.BOOKING_ID).isNull());
Record recBookingPax = Record.makeRecordFromClassName(BookingPaxModel.THICK_CLASS, recBooking.findRecordOwner());  // Note I'm safe using this recordowner, since I'll be freeing this in a second.
recBookingPax.addListener(new SubFileFilter(recBooking));
return recBookingPax;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7114">
		<LastChanged>2012-04-11T09:44:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>readCurrentRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PassengerDetailMessageData</MethodClassName>
		<LogicSource><![CDATA[try {
    Record recBookingPax = (Record)record;
    recBookingPax.addNew();
    if (this.get(BookingPaxModel.REMOTE_REFERENCE_NO) != null)
    {   // A remote reference is the ID of this item (I am remote)
        recBookingPax.getField(BookingPaxModel.ID).setString(this.get(BookingPaxModel.REMOTE_REFERENCE_NO).toString());
        recBookingPax.setKeyArea(BookingPaxModel.ID_KEY);
        if (recBookingPax.seek(null))
        { // Good
            recBookingPax.edit();
        }
        else
        {
            if (record != null)
                if (record.getTask() != null)
                    record.getTask().setLastError("Remote reference not found");
            return null;
        }
    }
    else if (this.get(BookingPaxModel.SOURCE_REFERENCE_NO) != null)
    {   // A Source reference is the reference of the remote pax.
        recBookingPax.close();
        if (!ADD_RECORD.equalsIgnoreCase((String)this.get(MESSAGE_RECORD_TYPE)))
        {
            while (recBookingPax.hasNext())
            {
                recBookingPax.next();
                if (this.get(BookingPaxModel.SOURCE_REFERENCE_NO).equals(recBookingPax.getField(BookingPaxModel.REMOTE_REFERENCE_NO).toString()))
                {
                    recBookingPax.edit();
                    break;
                }
            }
        }
        if (recBookingPax.getEditMode() != DBConstants.EDIT_IN_PROGRESS)
        {
            if ((CHANGE_RECORD.equalsIgnoreCase((String)this.get(MESSAGE_RECORD_TYPE)))
                    || (DELETE_RECORD.equalsIgnoreCase((String)this.get(MESSAGE_RECORD_TYPE))))
            {
                if (record != null)
                    if (record.getTask() != null)
                        record.getTask().setLastError("Remote reference not found");
                return null;
            }
            else
            {
                recBookingPax.addNew();
            }
        }
    }
} catch (DBException ex) {
    ex.printStackTrace();
    record = null;
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7116">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>160</Sequence>
		<MethodName>freeSubNodeRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductMessageData</MethodClassName>
		<LogicSource><![CDATA[m_recTargetFieldList = null;
// Do NOT call inherited (Do NOT free the sub node record!)
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7117">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>isCurrentNodeRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductMessageData</MethodClassName>
		<LogicSource>return false;    // Even though I use the current record, I want the record to be updated/written like a separate record</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7120">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInventoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen screen = super.addToolbars();

this.getScreenRecord().getField(ProductScreenRecord.START_DATE).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), screen, ScreenConstants.DEFAULT_DISPLAY);

return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7121">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductPricingGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen screen = super.addToolbars();

this.getScreenRecord().getField(ProductScreenRecord.START_DATE).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), screen, ScreenConstants.DEFAULT_DISPLAY);

return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7134">
		<LastChanged>2012-04-12T12:34:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>initBookingApTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourBookingChangeRequest</MethodClassName>
		<LogicSource><![CDATA[BookingDetailModel recBookingDetail = (BookingDetailModel)record; 
if (recBookingDetail.getField(BookingDetailModel.VENDOR_ID).isNull())
    return DBConstants.NORMAL_RETURN;   // Vendor not required for tour detail
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7135">
		<LastChanged>2012-04-12T12:34:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>initBookingApTrx</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourBookingRequest</MethodClassName>
		<LogicSource><![CDATA[BookingDetailModel recBookingDetail = (BookingDetailModel)record; 
if (recBookingDetail.getField(BookingDetailModel.VENDOR_ID).isNull())
    return DBConstants.NORMAL_RETURN;   // Vendor not required for tour detail
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7138">
		<LastChanged>2012-04-12T11:48:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>checkBookingRequestParams</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>ProductRequest</MethodClassName>
		<LogicSource><![CDATA[BookingDetailModel recBookingDetail = (BookingDetailModel)record; 
int iStatus = BaseDataStatusModel.DATA_VALID;
if (this.isOrderComponents(recBookingDetail) == false)
{
    iStatus = BaseDataStatusModel.PROPOSAL;        // The information must be valid to lookup the price
    String strError = "The Order components event must occur";
    strError = this.getString((Record)recBookingDetail, ResourceConstants.BOOKING_RESOURCE, strError);
    recBookingDetail.setErrorMessage(this, strError);
}
else
{
    String strError = null;
    if (recBookingDetail.getField(BookingDetailModel.INVENTORY_STATUS_ID).getValue() != BaseDataStatusModel.OKAY)
        strError = "Inventory Status must be okay";
    if (recBookingDetail.getField(BookingDetailModel.COST_STATUS_ID).getValue() != BaseDataStatusModel.OKAY)
        strError = "Cost Status must be okay";
    if (recBookingDetail.getField(BookingDetailModel.INFO_STATUS_ID).getValue() != BaseDataStatusModel.OKAY)
        strError = "Info Status must be okay";
    if (strError == null)
    {
        // Double-check to make sure inventory and cost requests are up-to-date
        // NOTE: This is a big performance hit... but required for now.
        // If info is changed, cost status is changed which triggers a booking update
        // The booking update can be called before the inventory update is done (since the inventory status is hasn't been changed from okay)
        if (iStatus == BaseDataStatusModel.DATA_VALID)
        {
            String strOldKey = recBookingDetail.getField(BookingDetailModel.INVENTORY_REQUEST_KEY).toString();
            boolean bOldIsModified = recBookingDetail.getField(BookingDetailModel.INVENTORY_REQUEST_KEY).isModified();
            BaseProductMessageDesc message = (BaseProductMessageDesc)recBookingDetail.checkMessageRequired(BookingDetailModel.INVENTORY_STATUS_ID);
            if (message != null)
                if (recBookingDetail.getField(BookingDetailModel.INVENTORY_REQUEST_KEY).isModified())
                    if (!recBookingDetail.getField(BookingDetailModel.INVENTORY_REQUEST_KEY).toString().equals(strOldKey))
            {
                recBookingDetail.getField(BookingDetailModel.INVENTORY_REQUEST_KEY).setString(strOldKey);
                recBookingDetail.getField(BookingDetailModel.INVENTORY_REQUEST_KEY).setModified(bOldIsModified);                    
                strError = "Waiting for Inventory Status";
            }
            else
            {
                strOldKey = recBookingDetail.getField(BookingDetailModel.COST_REQUEST_KEY).toString();
                bOldIsModified = recBookingDetail.getField(BookingDetailModel.COST_REQUEST_KEY).isModified();
                message = (BaseProductMessageDesc)recBookingDetail.checkMessageRequired(BookingDetailModel.COST_STATUS_ID);
                if (message != null)
                    if (recBookingDetail.getField(BookingDetailModel.COST_REQUEST_KEY).isModified())
                        if (!recBookingDetail.getField(BookingDetailModel.COST_REQUEST_KEY).toString().equals(strOldKey))
                {
                    recBookingDetail.getField(BookingDetailModel.COST_REQUEST_KEY).setString(strOldKey);
                    recBookingDetail.getField(BookingDetailModel.COST_REQUEST_KEY).setModified(bOldIsModified);                    
                    strError = "Waiting for Cost Status";
                }                        
            }
        }
    }
    if (strError != null)
    {
        iStatus = BaseDataStatusModel.DATA_REQUIRED;        // The information must be valid to lookup the price
        strError = this.getString((Record)recBookingDetail, ResourceConstants.BOOKING_RESOURCE, strError);
        recBookingDetail.setErrorMessage(this, strError);
    }
}
return iStatus;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7139">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInfoRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Hotel(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7140">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription><![CDATA[Create the product record.
Override in the concrete classes.]]></LogicDescription>
		<MethodReturns>Product</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductInfoRequestMessageInProcessor</MethodClassName>
		<LogicSource>return null;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7141">
		<LastChanged>2012-04-12T10:48:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInfoRequestMessageInProcessor</MethodClassName>
		<LogicSource><![CDATA[ProductRequest productRequestInMessage = (ProductRequest)internalMessage.getMessageDataDesc(null);

Product recProduct = (Product)this.getMainRecord();
if (recProduct == null)
    recProduct = this.getProductRecord();
ProductMessageData productMessageDesc = (ProductMessageData)productRequestInMessage.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
BaseMessage messageReply = null;
if (productMessageDesc != null)
{
    for (int index = 1; ;index++)
    {
        productMessageDesc.setNodeIndex(index, null);
        if ((productMessageDesc.get(BookingDetail.PRODUCT_ID) == null) && (productMessageDesc.get(Product.CODE) == null))
            break;  // End of product descriptions
        if (!(productMessageDesc.getProduct(recProduct)))
        {   // Error, product not found
            // pend(don)
        }
        messageReply = (BaseMessage)recProduct.processInfoRequestInMessage(internalMessage, messageReply);
    }
}
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7142">
		<LastChanged>2012-04-12T13:36:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>257</Sequence>
		<MethodName>processInfoRequestInMessage</MethodName>
		<LogicDescription>Process this product information request (override this).</LogicDescription>
		<MethodReturns>Message</MethodReturns>
		<MethodInterface>Message messageIn, Message messageReply</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[MessageRecordDesc productRequest = (ProductRequest)((BaseMessage)messageIn).getMessageDataDesc(null);
MessageRecordDesc messageData = (ProductMessageData)productRequest.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);

BaseProductResponse responseMessage = null;
if (messageReply == null)
    messageReply = (BaseMessage)this.getMessageProcessInfo().createReplyMessage((BaseMessage)messageData.getMessage());
responseMessage = (BaseProductResponse)((BaseMessage)messageReply).getMessageDataDesc(null);
responseMessage.moveRequestInfoToReply(messageIn);

int iProductStatus = InventoryStatus.VALID;
//?String strErrorMessage = null;

//?this.getField(Product.DISPLAY_INFO_STATUS_ID).setValue(iProductStatus);
responseMessage.setMessageDataStatus(iProductStatus);
//?if (strErrorMessage != null)
//?    responseMessage.setMessageDataError(strErrorMessage);
return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7143">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInformationRequest</MethodClassName>
		<LogicSource>return RequestType.INFORMATION;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7144">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductAvailabilityRequest</MethodClassName>
		<LogicSource>return RequestType.AVAILABILITY;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7145">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductRateRequest</MethodClassName>
		<LogicSource>return RequestType.PRICE;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7146">
		<LastChanged>2012-04-11T16:00:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInformationResponse</MethodClassName>
		<LogicSource><![CDATA[super;
ProductResponseMessageData messageData = (ProductResponseMessageData)this.getMessageDataDesc(PRODUCT_RESPONSE_MESSAGE);
messageData.addMessageFieldDesc(ProductModel.PRODUCT_NAME_PARAM, String.class, MessageFieldDesc.REQUIRED, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7147">
		<LastChanged>2012-04-12T07:31:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInformationResponse</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;

if (iErrorCode == DBConstants.NORMAL_RETURN)
{
    BookingDetailModel recBookingDetail = (BookingDetailModel)record;
    boolean[] rgbListeners = ((BaseField)recBookingDetail.getField(BookingDetailModel.INFO_STATUS_REQUEST)).setEnableListeners(false); // No Echo
    iErrorCode = recBookingDetail.setDetailProductInfo(null, null, null, null, null, null, null);
    ((Record)recBookingDetail).getField(BookingDetailModel.INFO_STATUS_REQUEST).setEnableListeners(rgbListeners);
    if (iErrorCode != DBConstants.NORMAL_RETURN)
    {
        int iMessageStatus = BaseDataStatusModel.NOT_VALID;
        this.setMessageDataStatus(iMessageStatus);
        String setError = "Error";
        if (((Record)recBookingDetail).getRecordOwner() != null)
            if (((Record)recBookingDetail).getRecordOwner().getTask() != null)
                ((Record)recBookingDetail).getRecordOwner().getTask().getLastError(iErrorCode);
        recBookingDetail.setErrorMessage(this, setError);
    }                
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7148">
		<LastChanged>2012-04-11T16:00:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInformationRequest</MethodClassName>
		<LogicSource><![CDATA[ProductMessageData productMessageData = null;
this.addMessageDataDesc(productMessageData = this.createProductMessageData());
productMessageData.removeMessageDataDesc(BookingDetailModel.RATE_ID);    // No required for information
productMessageData.removeMessageDataDesc(BookingDetailModel.CLASS_ID);
// Don't need the booking and pax info.]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7149">
		<LastChanged>2012-04-11T16:00:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>createProductMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductInformationRequest</MethodClassName>
		<LogicSource><![CDATA[return new ProductMessageData(this, PRODUCT_MESSAGE)
{
    public void setupMessageDataDesc()
    {
        // For now, just use these fields in the message
        this.addMessageFieldDesc(BookingDetailModel.PRODUCT_ID, Integer.class, MessageFieldDesc.REQUIRED, null);
        this.addMessageFieldDesc(BookingDetailModel.DETAIL_DATE, Date.class, MessageFieldDesc.REQUIRED, null);
        this.addMessageFieldDesc(ProductModel.OPERATORS_CODE, String.class, MessageFieldDesc.OPTIONAL, null);
        this.addMessageFieldDesc(ProductModel.PRODUCT_NAME_PARAM, String.class, MessageFieldDesc.OPTIONAL, null);
    }
};]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7183">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestMessageInProcessor</MethodClassName>
		<LogicSource><![CDATA[if (internalMessage.getMessageDataDesc(null) == null)
    internalMessage.addMessageDataDesc(new BaseProductMessageDesc(null, null));
BaseMessageHeader inMessageHeader = internalMessage.getMessageHeader();
String strMessage = (String)internalMessage.get(MESSAGE_PARAM);
BaseMessageHeader messageReplyHeader = null;
messageReplyHeader = new TrxMessageHeader(inMessageHeader.getQueueName(), inMessageHeader.getQueueType(), null);

BaseMessage messageReply = new TreeMessage(messageReplyHeader, null);
BaseProductResponse productResponse = new BaseProductResponse(null, null);
messageReply.addMessageDataDesc(productResponse);
if (strMessage != null)
    messageReply.put(MESSAGE_PARAM, strMessage);
else
{   // Error - Empty message
    String strErrorMessage = null;
    if (internalMessage.getMessageHeader() instanceof TrxMessageHeader) // Always
        if (((TrxMessageHeader)internalMessage.getMessageHeader()).get(TrxMessageHeader.MESSAGE_ERROR) != null)
            strErrorMessage = ((TrxMessageHeader)internalMessage.getMessageHeader()).get(TrxMessageHeader.MESSAGE_ERROR).toString();    // Rare
    if (strErrorMessage == null)
        strErrorMessage = "Error - No data to PING";
    productResponse.setMessageDataStatus(MessageDataDesc.ERROR);
    productResponse.setMessageDataError(strErrorMessage);
}
productResponse.moveRequestInfoToReply(internalMessage);

return messageReply;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7186">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,100</Sequence>
		<MethodName>setProperty</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strKey, String strProperty</MethodInterface>
		<MethodClassName>Vendor</MethodClassName>
		<LogicSource><![CDATA[if (TrxMessageHeader.DESTINATION_PARAM.equalsIgnoreCase(strKey))
    this.getField(Vendor.WEB).setString(strProperty);
else
    ((PropertiesField)this.getField(Vendor.PROPERTIES)).setProperty(strKey, strProperty);
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7187">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addPropertyListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Vendor</MethodClassName>
		<LogicSource><![CDATA[BaseField fldProperties = this.getField(Vendor.PROPERTIES);
BaseField fldDisplay = this.getField(Vendor.MESSAGE_SERVER);
FieldListener listener = new CopyConvertersHandler(new PropertiesConverter(fldProperties, TrxMessageHeader.DESTINATION_MESSAGE_PARAM));
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
fldDisplay.addListener(listener);
listener = new CopyConvertersHandler(fldDisplay, new PropertiesConverter(fldProperties, TrxMessageHeader.DESTINATION_MESSAGE_PARAM));
fldProperties.addListener(listener);

fldDisplay = this.getField(Vendor.WSDL_PATH);
listener = new CopyConvertersHandler(new PropertiesConverter(fldProperties, TrxMessageHeader.WSDL_PATH));
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
fldDisplay.addListener(listener);
listener = new CopyConvertersHandler(fldDisplay, new PropertiesConverter(fldProperties, TrxMessageHeader.WSDL_PATH));
fldProperties.addListener(listener);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7188">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>setProperty</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strKey, String strProperty</MethodInterface>
		<MethodClassName>ApControl</MethodClassName>
		<LogicSource><![CDATA[return false;	// Not supported for control files]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7189">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,100</Sequence>
		<MethodName>setProperty</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strKey, String strProperty</MethodInterface>
		<MethodClassName>ProfileControl</MethodClassName>
		<LogicSource><![CDATA[return false;	// Not supported for control files]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7190">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,100</Sequence>
		<MethodName>setProperty</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strKey, String strProperty</MethodInterface>
		<MethodClassName>Profile</MethodClassName>
		<LogicSource><![CDATA[if (TrxMessageHeader.DESTINATION_PARAM.equalsIgnoreCase(strKey))
    this.getField(Profile.WEB).setString(strProperty);
else
    ((PropertiesField)this.getField(Profile.PROPERTIES)).setProperty(strKey, strProperty);
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7191">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,100</Sequence>
		<MethodName>setProperty</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strKey, String strProperty</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[((PropertiesField)this.getField(Product.PROPERTIES)).setProperty(strKey, strProperty);
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7192">
		<LastChanged>2013-01-22T05:50:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorScreen</MethodClassName>
		<LogicSource><![CDATA[if (MenuConstants.REFRESH.equalsIgnoreCase(strCommand))
{
    if ((this.getMainRecord().getEditMode() == DBConstants.EDIT_CURRENT) || (this.getMainRecord().getEditMode() == DBConstants.EDIT_IN_PROGRESS))
    {
        if ((this.getMainRecord().getField(Vendor.WEB).isModified())
            || (this.getMainRecord().getField(Vendor.PROPERTIES).isModified()))
        {
            try {
                this.getMainRecord().writeAndRefresh();
            } catch (DBException e) {
                e.printStackTrace();
            }
        }
        Map<String,Object> map = new Hashtable<String,Object>();
        map.put(MenuConstants.RECORD, this.getMainRecord().getClass().getName());
        try {
            map.put(DBConstants.OBJECT_ID, this.getMainRecord().getHandle(DBConstants.OBJECT_ID_HANDLE).toString());
        } catch (DBException e) {
            e.printStackTrace();
        }
        
        map.put(DBParams.PROCESS, "org.jbundle.main.msg.wsdl.GetWSDL");   // Default
        Application app = (Application)this.getTask().getApplication();
        String strQueueName = MessageConstants.TRX_SEND_QUEUE;
        String strQueueType = MessageConstants.INTRANET_QUEUE;
    
        if (m_intRegistryID == null)
        {
            MessageManager messageManager = app.getMessageManager();
            if (messageManager != null)
            {
                Object source = this;
                BaseMessageFilter filter = new BaseMessageFilter(MessageConstants.TRX_RETURN_QUEUE, MessageConstants.INTERNET_QUEUE, source, null);
                filter.addMessageListener(this);
                messageManager.addMessageFilter(filter);
                m_intRegistryID = filter.getRegistryID();
            }
        }
        if (m_intRegistryID != null)
            map.put(TrxMessageHeader.REGISTRY_ID, m_intRegistryID);    // The return Queue ID
        BaseMessage message = new MapMessage(new TrxMessageHeader(strQueueName, strQueueType, map), map);
        app.getMessageManager().sendMessage(message);
        
        String strMessage = app.getResources(ResourceConstants.DEFAULT_RESOURCE, true).getString("Remote action queued");
        this.getTask().setStatusText(strMessage, Constants.WAIT);
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7194">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,200</Sequence>
		<MethodName>getProperty</MethodName>
		<LogicDescription>Get this property</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>Vendor</MethodClassName>
		<LogicSource><![CDATA[if (TrxMessageHeader.DESTINATION_PARAM.equalsIgnoreCase(strKey))
    return this.getField(Vendor.WEB).toString();
else
    return ((PropertiesField)this.getField(Vendor.PROPERTIES)).getProperty(strKey);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7195">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,200</Sequence>
		<MethodName>getProperty</MethodName>
		<LogicDescription>Get this property</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>Profile</MethodClassName>
		<LogicSource><![CDATA[if (TrxMessageHeader.DESTINATION_PARAM.equalsIgnoreCase(strKey))
    return this.getField(Profile.WEB).toString();
else
    return ((PropertiesField)this.getField(Profile.PROPERTIES)).getProperty(strKey);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7196">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,200</Sequence>
		<MethodName>getProperty</MethodName>
		<LogicDescription>Get this property</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource>return ((PropertiesField)this.getField(Product.PROPERTIES)).getProperty(strKey);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7197">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,200</Sequence>
		<MethodName>getProperty</MethodName>
		<LogicDescription>Get this property</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>ProfileControl</MethodClassName>
		<LogicSource>return null;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7198">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,200</Sequence>
		<MethodName>getProperty</MethodName>
		<LogicDescription>Get this propery</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>ApControl</MethodClassName>
		<LogicSource>return null;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7218">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>handleMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorScreen</MethodClassName>
		<LogicSource><![CDATA[if (message != null)
    if (message.getMessageHeader().getRegistryIDMatch() != null)    // My private message
        if (message.getMessageHeader().getRegistryIDMatch().equals(m_intRegistryID))    // My private message
{
    Application app = (Application)this.getTask().getApplication();
    String strMessage = app.getResources(ResourceConstants.DEFAULT_RESOURCE, true).getString("Remote action completed");
    this.getTask().setStatusText(strMessage, Constants.INFORMATION);
    message.consume();
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7223">
		<LastChanged>2012-04-11T16:00:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarInformationRequest</MethodClassName>
		<LogicSource><![CDATA[super;
ProductMessageData productMessageData = (ProductMessageData)this.getMessageDataDesc(PRODUCT_MESSAGE);
// productMessageData.removeMessageDataDesc(BookingCarModel.DAYS);    // Yes - Days is required for the END DATE Not required for information
productMessageData.removeMessageDataDesc(BookingCarModel.QUANTITY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7224">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelInformationRequest</MethodClassName>
		<LogicSource><![CDATA[super;
// Note: I am including the number of nights in the information since the description and end data depend on it]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7225">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransInfoRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Transportation(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7226">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourInfoRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new TourHeader(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7227">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandInfoRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Land(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7228">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemInfoRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Item(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7229">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseInfoRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Cruise(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7230">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarInfoRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Car(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7231">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirInfoRequestMessageInProcessor</MethodClassName>
		<LogicSource>return new Air(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7234">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>initField</MethodName>
		<LogicDescription>Don't let PricingTypeField set a default.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PricingTypeSelect</MethodClassName>
		<LogicSource><![CDATA[if ((this.getDefault() == null) || (this.getDefault() instanceof String))
    return this.setString((String)this.getDefault(), bDisplayOption, Constants.INIT_MOVE);   // zero out the field
return this.setData(this.getDefault(), bDisplayOption, Constants.INIT_MOVE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7237">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>getTourPricingType</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Tour recTour, BaseField fldTourModuleID, Date dateStart</MethodInterface>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[Record recPricingType = null;
int iTourPricingType = 0;

if ((fldTourModuleID != null) && (dateStart != null))
{
    if (recTour == null)
        recTour = (Tour)((ReferenceField)this.getField(Booking.TOUR_ID)).getReference();
    if (!fldTourModuleID.equals(recTour.getCounterField()))
    {   // This is a module, get the pricing type for this module
        BookingDetail recBookingDetailModule = m_recBookingDetailModule;
        boolean bFound = false;
        if ((fldTourModuleID.getRecord() instanceof BookingDetail) && (fldTourModuleID == fldTourModuleID.getRecord().getField(BookingDetail.PRODUCT_ID)))
        {
            bFound = true;
            recBookingDetailModule = (BookingDetail)fldTourModuleID.getRecord();
            if (m_recBookingDetailModule != null)
                if (recBookingDetailModule.getField(BookingDetail.ID).equals(m_recBookingDetailModule.getField(BookingDetail.ID)))
                if (!recBookingDetailModule.getField(BookingDetail.PRICING_TYPE_ID).equals(m_recBookingDetailModule.getField(BookingDetail.PRICING_TYPE_ID)))
                {
                    try {
                        m_recBookingDetailModule.addNew();  // Clear the cached record if pricing type has changed!
                    } catch (DBException e) {
                        e.printStackTrace();
                    }
                }
        }
        else if (recBookingDetailModule == null)
        {   // This is rather expensive, but it shouldn't be done too often.
            m_recBookingDetailModule = new BookingDetail(this.findRecordOwner());
            if (m_recBookingDetailModule.getRecordOwner() != null)
                m_recBookingDetailModule.getRecordOwner().removeRecord(m_recBookingDetailModule);
            this.addListener(new FreeOnFreeHandler(m_recBookingDetailModule)
            {
                public void setOwner(ListenerOwner owner)
                {
                    if (owner == null)
                        m_recBookingDetailModule = null;
                    super.setOwner(owner);
                }
            });
            recBookingDetailModule = m_recBookingDetailModule;
            recBookingDetailModule.setEnableFieldListeners(false);  // Won't be needing these to do a seek!
            recBookingDetailModule.setEnableListeners(false);
        }
        try {
            if (!bFound)
            {
                if ((recBookingDetailModule.getEditMode() == DBConstants.EDIT_CURRENT)
                    && (recBookingDetailModule.getField(BookingDetail.PRODUCT_TYPE_ID).getValue() == ProductType.TOUR_ID)
                    && (recBookingDetailModule.getField(BookingDetail.PRODUCT_ID).equals(fldTourModuleID))
                    && (dateStart.equals(((DateTimeField)recBookingDetailModule.getField(BookingDetail.DETAIL_DATE)).getDateTime()))
                    && (this.getField(Booking.ID).equals(recBookingDetailModule.getField(BookingDetail.BOOKING_ID))))
                        bFound = true;
                else
                {
                    recBookingDetailModule.getField(BookingDetail.PRODUCT_TYPE_ID).setValue(ProductType.TOUR_ID);
                    recBookingDetailModule.addNew();
                    recBookingDetailModule.setKeyArea(BookingDetail.PRODUCT_ID_KEY);
                    recBookingDetailModule.getField(BookingDetail.PRODUCT_ID).moveFieldToThis(fldTourModuleID);
                    ((DateTimeField)recBookingDetailModule.getField(BookingDetail.DETAIL_DATE)).setDateTime(dateStart, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
                    recBookingDetailModule.getField(BookingDetail.BOOKING_ID).moveFieldToThis(this.getField(Booking.ID));
                    bFound = recBookingDetailModule.seek(DBConstants.EQUALS);
                }
            }
            if (bFound)
            {
                recPricingType = ((ReferenceField)recBookingDetailModule.getField(BookingDetail.PRICING_TYPE_ID)).getReference();
                if (recPricingType != null)
                    iTourPricingType = (int)recPricingType.getField(PricingType.PRICING_CODES).getValue();
            }
        } catch (DBException e) {
            e.printStackTrace();
        }
    }
}
if (iTourPricingType == 0)
    recPricingType = ((ReferenceField)this.getField(Booking.TOUR_PRICING_TYPE_ID)).getReference();

if (recPricingType != null)
    iTourPricingType = (int)recPricingType.getField(PricingType.PRICING_CODES).getValue();

return iTourPricingType;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7238">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,100</Sequence>
		<MethodName>setupDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
{
    BookingDetail recBookingDetail = (BookingDetail)this.getTable().getCurrentTable().getRecord();
    if (recBookingDetail.getEditMode() != DBConstants.EDIT_NONE)    // May have been deleted
        recBookingDetail.checkRequestRequired(BookingDetail.INFO_STATUS_ID);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7240">
		<LastChanged>2012-05-26T17:00:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductResponseMsgReplyInProcessor</MethodClassName>
		<LogicSource><![CDATA[super;
Record recBookingDetail = (BookingDetail)this.getMainRecord();
if (recBookingDetail != null)
    if (!BookingDetail.INFO_STATUS_ID.equalsIgnoreCase(this.getStatusFieldName()))    // An info change CAN trigger a pricing change
{
    Record recBooking = ((ReferenceField)recBookingDetail.getField(BookingDetail.BOOKING_ID)).getReferenceRecord();
    FieldListener listener = recBooking.getField(Booking.TOUR_PRICING_TYPE_ID).getListener(ChangePricingTypeHandler.class);
    if (listener != null)
        listener.setEnabledListener(false); // A price change from a message can't change the pricing scheme
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7241">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourChangeHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7242">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourChangeHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
if ((this.getOwner().getValue() == BaseDataStatus.OKAY) || (this.getOwner().getValue() == BaseDataStatus.CANCELED))
{
    BookingDetail recBookingDetail = (BookingDetail)this.getOwner().getRecord();
    iErrorCode = recBookingDetail.setupDirectDetail(DBConstants.FIELD_CHANGED_TYPE);
}
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7244">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addLookupListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTour</MethodClassName>
		<LogicSource><![CDATA[super;

BookingTourChangeHandler listener = null;
this.getField(BookingDetail.INFO_STATUS_ID).addListener(listener = new BookingTourChangeHandler(null));
listener.setDependentStateListener(this.getListener(CopyDataHandler.class));  // Make sure this is disabled when all classes are disabled
BookingTourDeleteHandler deleteHandler = null;
this.addListener(deleteHandler = new BookingTourDeleteHandler(null));
deleteHandler.setDependentStateListener(this.getListener(UpdateTourStatusHandler.class));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7245">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setRecordDataStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourInfoMsgReplyInProcessor</MethodClassName>
		<LogicSource><![CDATA[if (iStatus == BaseDataStatus.OKAY)
{
    FieldDataScratchHandler fieldDataScratchHandler = (FieldDataScratchHandler)record.getField(BookingDetail.DETAIL_DATE).getListener(FieldDataScratchHandler.class, false);
    if (fieldDataScratchHandler != null)
    { // Always
        Date dateOriginal = (Date)productRequest.get(ProductMessageData.OLD_DETAIL_DATE);
        fieldDataScratchHandler.setOriginalData(dateOriginal);  // Make sure you know the original date
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7246">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTour</MethodClassName>
		<LogicSource><![CDATA[super;

ChangePricingTypeHandler listener = null;
this.getField(BookingTour.PRICING_TYPE_ID).addListener(listener = new ChangePricingTypeHandler(null));
listener.setDependentStateListener(this.getField(BookingDetail.STATUS_SUMMARY).getListener(StatusHandler.class));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7247">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPricingType</MethodName>
		<LogicDescription>Get the pricing type for this component</LogicDescription>
		<MethodReturns>PricingType</MethodReturns>
		<MethodInterface>int iPricingCode</MethodInterface>
		<MethodClassName>PricingType</MethodClassName>
		<LogicSource><![CDATA[try {
    this.close();
    while (this.hasNext())
    {
        this.next();
        if (this.getField(PricingType.PRICING_CODES).getValue() == iPricingCode)
            return this;
    }
} catch (DBException ex) {
    ex.printStackTrace();
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7250">
		<LastChanged>2012-04-06T00:44:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,100</Sequence>
		<MethodName>setupDirectDetail</MethodName>
		<LogicDescription><![CDATA[If there are any detail items to add/change/delete when this detail is added, do it.
Override this to set up any detail info for this detail (ie., a direct TourHeader).]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>int iChangeType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource><![CDATA[BookingAnswer recBookingAnswer = null;  // This causes addTourDetail to resolve the answers automatically
BookingPax recBookingPax = null;
Booking recBooking = (Booking)this.getBooking(true);
if ((recBooking == null)
        || (recBooking.getEditMode() == DBConstants.EDIT_NONE))
    return DBConstants.ERROR_RETURN;
Tour recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
if ((recTour == null)
        || (recTour.getEditMode() == DBConstants.EDIT_NONE))
    return DBConstants.ERROR_RETURN;
TourHeader recTourHeader = (TourHeader)this.getProduct();
if ((recTourHeader == null)
        || (recTourHeader.getEditMode() == DBConstants.EDIT_NONE))
    return DBConstants.ERROR_RETURN;
Date dateStart = ((DateTimeField)this.getField(BookingDetail.DETAIL_DATE)).getDateTime();
if (dateStart == null)
    return DBConstants.ERROR_RETURN;
try {
    recTour.writeAndRefresh();
    recBooking.writeAndRefresh();
} catch (DBException ex) {
    ex.printStackTrace();
}

int iErrorCode = DBConstants.NORMAL_RETURN;

FieldDataScratchHandler fieldDataScratchHandler = (FieldDataScratchHandler)this.getField(BookingDetail.DETAIL_DATE).getListener(FieldDataScratchHandler.class);
Date dateOriginal = (Date)fieldDataScratchHandler.getOriginalData();

if (iChangeType == DBConstants.AFTER_DELETE_TYPE)
{   // Deleted/canceled
    iErrorCode = recBooking.deleteTourDetail(recTour, recBookingPax, this.getField(BookingTour.PRODUCT_ID), dateStart);
}
else if ((dateOriginal == null) || (dateOriginal.equals(dateStart)))
{   // New
    iErrorCode = recBooking.addTourDetail(recTour, recTourHeader, recBookingPax, recBookingAnswer, dateStart, this.getField(BookingTour.ASK_FOR_ANSWER));
}
else
{   // Changed
    iErrorCode = recBooking.changeTourDetail(recTour, recBookingPax, recTourHeader, dateOriginal, dateStart);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7251">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingTourDeleteHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
if (iChangeType == DBConstants.AFTER_DELETE_TYPE)
{   // Note: Soft delete is handled in messaging
    BookingDetail recBookingDetail = (BookingDetail)this.getOwner();
    iErrorCode = recBookingDetail.setupDirectDetail(iChangeType);
}
if (iErrorCode != DBConstants.NORMAL_RETURN)
    return iErrorCode;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7252">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineGridScreen</MethodClassName>
		<LogicSource><![CDATA[Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReferenceRecord(this);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7253">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[return new BookingDetail(this);	// Never - always called from product screen]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7254">
		<LastChanged>2012-02-01T12:45:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
SubFileFilter listener = null;
this.getMainRecord().addListener(listener = new SubFileFilter(this.getScreenRecord().getField(ProductScreenRecord.START_DATE), BookingDetail.DETAIL_DATE, null, null, null, null));
listener.setEndKey(false);

if (this.getScreenRecord().getField(ProductScreenRecord.START_DATE).isNull())
    this.getScreenRecord().getField(ProductScreenRecord.START_DATE).setValue(DateTimeField.currentTime(), DBConstants.DISPLAY, DBConstants.INIT_MOVE);

this.getScreenRecord().getField(ProductScreenRecord.START_DATE).addListener(new FieldReSelectHandler(this));
this.setAppending(false);
this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7255">
		<LastChanged>2012-01-23T08:57:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingDetailGridScreen</MethodClassName>
		<LogicSource>return new ProductHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7256">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7257">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>ProductBookingDetailGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProductBookingDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7258">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingDetailGridScreen</MethodClassName>
		<LogicSource>return new ProductScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7259">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ProductType(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7260">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[// Override this if it is not correct.
this.getMainRecord().setKeyArea(BookingDetail.PRODUCT_ID_KEY);
Product recProduct = (Product)this.getHeaderRecord();
ProductType recProductType = (ProductType)this.getRecord(ProductType.PRODUCT_TYPE_FILE);
recProductType.getProductTypeID(recProduct);
this.getMainRecord().addListener(new SubFileFilter(recProductType.getField(ProductType.ID), BookingDetail.PRODUCT_TYPE_ID, this.getHeaderRecord().getField(Product.ID), BookingDetail.PRODUCT_ID, null, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7261">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strProductType = this.getProperty(Product.PRODUCT_FILE);
return Product.getProductRecord(strProductType, this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7262">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strURL = super;
if (this.getRecord(ProductType.PRODUCT_TYPE_FILE).getEditMode() == DBConstants.EDIT_CURRENT)
{   // Always
    strURL = Utility.addURLParam(strURL, Product.PRODUCT_FILE, this.getHeaderRecord().getTableNames(false));
}
return strURL;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7263">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductBookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen screen = super;
this.getScreenRecord().getField(ProductScreenRecord.START_DATE).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), screen, ScreenConstants.DEFAULT_DISPLAY);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7264">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getRecord(BookingControl.BOOKING_CONTROL_FILE) == null)
    new BookingControl(this);
new TourType(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7265">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>useThinTourHeader</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>boolean bUseThinTourHeader</MethodInterface>
		<MethodClassName>NewBookingHandler</MethodClassName>
		<LogicSource>m_bUseThinTourHeader = bUseThinTourHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7266">
		<LastChanged>2012-04-12T16:50:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>addSubFileIntegrityHandlers</MethodName>
		<LogicDescription><![CDATA[This will add methods that make sure the sub-records are deleted with the main record.
These listeners are not added automatically, since there is such a big overhead.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOption</MethodClassName>
		<LogicSource><![CDATA[this.addListener(new SubFileIntegrityHandler(TourHeaderDetailModel.THICK_CLASS, true));
this.addListener(new SubFileIntegrityHandler(TourHeaderLineModel.THICK_CLASS, true));
this.addListener(new SubFileIntegrityHandler(TourHeaderAirHeaderModel.THICK_CLASS, true));
this.addListener(new SubFileIntegrityHandler(TourHeaderOptionModel.THICK_CLASS, true)
{
    public Record getSubRecord()
    {
        if (m_recDependent == null)
            m_recDependent = this.createSubRecord();
        if (m_recDependent != null)
        {
            m_recDependent.setKeyArea(TourHeaderOption.TOUR_OR_OPTION_KEY);
            StringField fldTourOrOption = new StringField(null, TourHeaderOption.TOUR_OR_OPTION, 1, null, null);
            m_recDependent.addListener(new FreeOnFreeHandler(fldTourOrOption));
            fldTourOrOption.setString(TourHeaderOption.OPTION);
            if (m_recDependent.getListener(SubFileFilter.class.getName()) == null)
                m_recDependent.addListener(new SubFileFilter(fldTourOrOption, TourHeaderOption.TOUR_OR_OPTION, (BaseField)this.getOwner().getCounterField(), TourHeaderOption.TOUR_OR_OPTION_ID, null, null));
        }
        return m_recDependent;
    }
    public Record createSubRecord()
    {
        TourHeaderOption record = (TourHeaderOption)super.createSubRecord();
        record.addSubFileIntegrityHandlers();
        return record;
    }
});]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7267">
		<LastChanged>2012-04-07T08:45:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>8,000</Sequence>
		<MethodName>addSubFileIntegrityHandlers</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeader</MethodClassName>
		<LogicSource><![CDATA[this.addListener(new SubFileIntegrityHandler(TourModel.class.getName(), false));
this.addListener(new SubFileIntegrityHandler(TourHeaderInventoryModel.class.getName(), false));
this.addListener(new SubFileIntegrityHandler(TourHeaderOption.class.getName(), false)
{
    public Record getSubRecord()
    {
        if (m_recDependent == null)
            m_recDependent = this.createSubRecord();
        if (m_recDependent != null)
        {
            m_recDependent.setKeyArea(TourHeaderOption.TOUR_OR_OPTION_KEY);
            StringField fldTourOrOption = new StringField(null, TourHeaderOption.TOUR_OR_OPTION, 1, null, null);
            m_recDependent.addListener(new FreeOnFreeHandler(fldTourOrOption));
            fldTourOrOption.setString(TourHeaderOption.TOUR);
            if (m_recDependent.getListener(SubFileFilter.class.getName()) == null)
                m_recDependent.addListener(new SubFileFilter(fldTourOrOption, TourHeaderOption.TOUR_OR_OPTION, (BaseField)this.getOwner().getCounterField(), TourHeaderOption.TOUR_OR_OPTION_ID, null, null));
        }
        return m_recDependent;
    }
    public Record createSubRecord()
    {
        TourHeaderOption record = (TourHeaderOption)super.createSubRecord();
        record.addSubFileIntegrityHandlers();
        return record;
    }
});]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7268">
		<LastChanged>2012-02-01T14:22:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setDetailProperty</MethodName>
		<LogicDescription>Set the (fieldseq) property for this BookingDetail item</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recBookingDetail, String iFieldSeq, int iChangeType</MethodInterface>
		<MethodClassName>TourStatusSummaryField</MethodClassName>
		<LogicSource><![CDATA[String strKey = this.getKeyFromRecord(recBookingDetail, iFieldSeq);
String strValue = this.getValueFromRecord(recBookingDetail, iFieldSeq, iChangeType);
this.setProperty(strKey, strValue);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7269">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>mergeKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourStatusSummaryField</MethodClassName>
		<LogicSource><![CDATA[if (this.getTimestampFromProperty(strCurrentValue) > this.getTimestampFromProperty(strReadValue))
    return strCurrentValue;
// Okay, it isn't clear what the key value should be, so I just look it up. This is expensive, but it shouldn't happen often
BookingDetail recBookingDetail = new BookingDetail(this.getRecord().getRecordOwner());
String strID = this.getIDFromKey(strKey);
recBookingDetail.setKeyArea(BookingDetail.ID_KEY);
recBookingDetail.getField(BookingDetail.ID).setString(strID);
try {
    if (recBookingDetail.seek(DBConstants.EQUALS))
    {
        String strStatus = this.getStatusFromKey(strKey);
        for (int iFieldSeq = 0; iFieldSeq < recBookingDetail.getFieldCount(); iFieldSeq++)
        {
            if (recBookingDetail.getField(iFieldSeq).getFieldName().equalsIgnoreCase(strStatus))
            {
                return this.getValueFromRecord(recBookingDetail, recBookingDetail.getField(iFieldSeq).getFieldName(), DBConstants.AFTER_UPDATE_TYPE);
            }
        }
    }
} catch (DBException e) {
    e.printStackTrace();
}
recBookingDetail.free();
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7271">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getHighStatusKey</MethodName>
		<LogicDescription>Go through all the items and get the highest status key</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>TourStatusSummaryField</MethodClassName>
		<LogicSource><![CDATA[String strStatusKey = null;
Map<String,Object> properties = this.getProperties();
if (properties != null)
{
    int iHighStatus = BaseStatus.NO_STATUS;
    for (String strKey : properties.keySet())
    {
        int iDot = strKey.indexOf('.');
        if (iDot != -1)
        {
            int iValue = this.getStatusFromProperty((String)properties.get(strKey));
            if (iValue > iHighStatus)
            {
                iHighStatus = iValue;
                strStatusKey = strKey;
            }
        }
    }
}
return strStatusKey;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7272">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getStatusFromProperty</MethodName>
		<LogicDescription>Given this retrieved property, extract the status value</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>String strValue</MethodInterface>
		<MethodClassName>TourStatusSummaryField</MethodClassName>
		<LogicSource><![CDATA[if (strValue != null)
    if (strValue.indexOf(',') != -1)
        strValue = strValue.substring(0, strValue.indexOf(','));
if (DELETED_VALUE.equals(strValue))
    return 0;
try {
    return ((Integer)Converter.convertObjectToDatatype(strValue, Integer.class, IntegerField.ZERO)).intValue();
} catch (Exception ex) {
}
return 0;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7273">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getTimestampFromProperty</MethodName>
		<LogicDescription>Given this property value, get the timestamp value</LogicDescription>
		<MethodReturns>long</MethodReturns>
		<MethodInterface>String strValue</MethodInterface>
		<MethodClassName>TourStatusSummaryField</MethodClassName>
		<LogicSource><![CDATA[if (strValue != null)
    if (strValue.indexOf(',') != -1)
{
    strValue = strValue.substring(strValue.indexOf(',') + 1);
    try {
        return Long.parseLong(strValue);
    } catch (NumberFormatException e) {
    }
}
return 0;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7274">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ChangeTourHeaderHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (owner != null)
    if (this.getOwner().getListener() != this)  // Prevents endless loop (listener is already the first in the list)
        if (this.getOwner().getRecord() == m_recTour)
{   // This is special weird logic - This must be the first in the listener list
    this.getOwner().removeListener(this, false);
    super.setOwner(owner);  // Set it back
    this.setNextListener(this.getOwner().getListener());
    this.getOwner().setListener(this);  // This MUST be the first listener on the list.
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7275">
		<LastChanged>2012-01-31T10:43:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailSession</MethodClassName>
		<LogicSource><![CDATA[super;
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
recTour.setOpenMode(recTour.getOpenMode() & ~DBConstants.OPEN_READ_ONLY);    // Need to be able to change this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7277">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OperationsBookingDetailGridScreen</MethodClassName>
		<LogicSource>return new BookingDetailQuery(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7278">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OperationsBookingDetailGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7279">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OperationsBookingDetailGridScreen</MethodClassName>
		<LogicSource>return new LookupScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7280">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OperationsBookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

BookingDetail recBookingDetail = (BookingDetail)this.getRecord(BookingDetail.BOOKING_DETAIL_FILE);
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);
Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
Record screenRecord = this.getScreenRecord();

SortOrderHandler behQueryKeyHandler = new SortOrderHandler(this)
{
    public int setupGridOrder()
    {
        int iErrorCode = super.setupGridOrder();
        
        if (m_recGrid != null)
        {
            if ((m_recGrid.getKeyArea().getKeyName().equals(m_recGrid.getField(BookingDetail.BOOKING_DETAIL_FILE, BookingDetail.DETAIL_DATE).getFieldName()))
                && (!getScreenRecord().getField(LookupScreenRecord.VENDOR_ID).isNull()))
                    m_recGrid.setKeyArea(m_iKeyAreaArray.length - 1);   // Vendor key
            else if ((m_recGrid.getKeyArea().getKeyName().equals(m_recGrid.getField(BookingDetail.BOOKING_DETAIL_FILE, BookingDetail.VENDOR_ID).getFieldName()))
                && (getScreenRecord().getField(LookupScreenRecord.VENDOR_ID).isNull()))
                    m_recGrid.setKeyArea(2);   // DetailDate key
        }

        return iErrorCode;
    }
};
behQueryKeyHandler.setGridTable(BookingDetail.ID_KEY, recBookingDetail, -1);
behQueryKeyHandler.setGridTable(BookingDetail.DETAIL_DATE_KEY, recBookingDetail, -1);
behQueryKeyHandler.setGridTable(Tour.DESCRIPTION_KEY, recTour, -1);
behQueryKeyHandler.setGridTable(Tour.DEPARTURE_DATE_KEY, recTour, -1);
behQueryKeyHandler.setGridTable(Booking.CODE_KEY, recBooking, -1);
behQueryKeyHandler.setGridTable(Booking.CODE_KEY, recBooking, -1);
behQueryKeyHandler.setGridTable(Booking.DESCRIPTION_KEY, recBooking, -1);
behQueryKeyHandler.setGridTable(Booking.BOOKING_DATE_KEY, recBooking, -1);
behQueryKeyHandler.setGridTable(Booking.BOOKING_DATE_KEY, recBooking, -1);
behQueryKeyHandler.setGridTable(Booking.BOOKING_DATE_KEY, recBooking, -1);
behQueryKeyHandler.setGridTable(BookingDetail.VENDOR_ID_KEY, recBookingDetail, -1);

if (this.isContactDisplay())
    screenRecord.getField(LookupScreenRecord.QUERY_KEY).setValue(11);   // Vendor key

screenRecord.getField(LookupScreenRecord.QUERY_KEY).addListener(behQueryKeyHandler);

this.getMainRecord().addListener(new CompareFileFilter(recBooking.getField(Booking.EMPLOYEE_ID), screenRecord.getField(LookupScreenRecord.CURRENT_AGENT), "=", null, true));
screenRecord.getField(LookupScreenRecord.CURRENT_AGENT).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(recBooking.getField(Booking.BOOKING_DATE), screenRecord.getField(LookupScreenRecord.START_BK_DATE), ">=", null, true));
screenRecord.getField(LookupScreenRecord.START_BK_DATE).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.DEPARTURE_DATE), screenRecord.getField(LookupScreenRecord.TOUR_HDR_START_DATE), ">=", null, true));
screenRecord.getField(LookupScreenRecord.TOUR_HDR_START_DATE).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.DEPARTURE_DATE), screenRecord.getField(LookupScreenRecord.TOUR_HDR_END_DATE), "<=", null, true));
screenRecord.getField(LookupScreenRecord.TOUR_HDR_END_DATE).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new StartSearchFilter(screenRecord.getField(LookupScreenRecord.START_TARGET_FIELD)));

this.getMainRecord().addListener(new CompareFileFilter(recBooking.getField(Booking.BOOKING_STATUS_ID), screenRecord.getField(LookupScreenRecord.BOOKING_STATUS_ID), "=", null, true));
screenRecord.getField(LookupScreenRecord.BOOKING_STATUS_ID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.TOUR_STATUS_ID), screenRecord.getField(LookupScreenRecord.TOUR_STATUS_ID), "=", null, true));
screenRecord.getField(LookupScreenRecord.TOUR_STATUS_ID).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(BookingDetail.PRODUCT_TYPE_ID), screenRecord.getField(LookupScreenRecord.PRODUCT_TYPE_ID), "=", null, true));
screenRecord.getField(LookupScreenRecord.PRODUCT_TYPE_ID).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new CompareFileFilter(recTour.getField(Tour.TOUR_HEADER_ID), screenRecord.getField(LookupScreenRecord.TOUR_HEADER_ID), "=", null, true));
screenRecord.getField(LookupScreenRecord.TOUR_HEADER_ID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(BookingDetail.VENDOR_ID), screenRecord.getField(LookupScreenRecord.VENDOR_ID), "=", null, true));
screenRecord.getField(LookupScreenRecord.VENDOR_ID).addListener(new FieldReSelectHandler(this));
screenRecord.getField(LookupScreenRecord.VENDOR_ID).addListener(new ChangeOnChangeHandler(this.getScreenRecord().getField(LookupScreenRecord.QUERY_KEY)));  // Check key

this.setAppending(false);
this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7281">
		<LastChanged>2012-02-01T07:59:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OperationsBookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen toolScreen = new EmptyToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
toolScreen.setupStartSFields();     // Back button
toolScreen.setupDisplaySFields();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Booking entry", Booking.BUTTON_LOCATION + "Booking", "Booking entry", null);
toolScreen.setupEndSFields();
if (!this.isContactDisplay())
{
    this.getScreenRecord().getField(LookupScreenRecord.START_BK_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
    this.getScreenRecord().getField(LookupScreenRecord.BOOKING_STATUS_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
    this.getScreenRecord().getField(LookupScreenRecord.CURRENT_AGENT).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
    this.getScreenRecord().getField(LookupScreenRecord.TOUR_HDR_START_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
    this.getScreenRecord().getField(LookupScreenRecord.TOUR_STATUS_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
    this.getScreenRecord().getField(LookupScreenRecord.TOUR_HEADER_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
    this.getScreenRecord().getField(LookupScreenRecord.TOUR_HDR_END_DATE).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
    this.getScreenRecord().getField(LookupScreenRecord.PRODUCT_TYPE_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
    this.getScreenRecord().getField(LookupScreenRecord.VENDOR_ID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.AT_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
}
return toolScreen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7282">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OperationsBookingDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7283">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailQuery</MethodClassName>
		<LogicSource><![CDATA[this.addTable(new BookingDetail(recordOwner));
this.addTable(new Booking(recordOwner));
this.addTable(new Tour(recordOwner));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7284">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailQuery</MethodClassName>
		<LogicSource><![CDATA[this.setSelected(false);
super;
this.getField(BookingDetail.BOOKING_DETAIL_FILE, BookingDetail.ID).setSelected(true);
this.getField(BookingDetail.BOOKING_DETAIL_FILE, BookingDetail.PRODUCT_TYPE_ID).setSelected(true);
this.getField(BookingDetail.BOOKING_DETAIL_FILE, BookingDetail.STATUS_SUMMARY).setSelected(true);
this.getField(BookingDetail.BOOKING_DETAIL_FILE, BookingDetail.DETAIL_DATE).setSelected(true);
this.getField(BookingDetail.BOOKING_DETAIL_FILE, BookingDetail.DESCRIPTION).setSelected(true);
this.getField(BookingDetail.BOOKING_DETAIL_FILE, BookingDetail.BOOKING_ID).setSelected(true);
this.getField(BookingDetail.BOOKING_DETAIL_FILE, BookingDetail.VENDOR_ID).setSelected(true);
this.getField(Tour.TOUR_FILE, Tour.DEPARTURE_DATE).setSelected(true);
this.getField(Tour.TOUR_FILE, Tour.TOUR_STATUS_ID).setSelected(true);
this.getField(Tour.TOUR_FILE, Tour.TOUR_HEADER_ID).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.GENERIC_NAME).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.BOOKING_DATE).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.MOD_DATE).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.EMPLOYEE_ID).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.EMPLOYEE_MOD_ID).setSelected(true);
this.getField(Booking.BOOKING_FILE, Booking.BOOKING_STATUS_ID).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7285">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>setupKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailQuery</MethodClassName>
		<LogicSource><![CDATA[KeyArea keyArea = null;
if (iKeyArea == DBConstants.MAIN_KEY_AREA)
{
    keyArea = this.makeIndex(DBConstants.UNIQUE, "PrimaryKey");
    keyArea.addKeyField(this.getField(BookingDetail.BOOKING_DETAIL_FILE, BookingDetail.ID), DBConstants.ASCENDING);
}
return keyArea;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7286">
		<LastChanged>2012-02-01T08:21:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>setupRelationships</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingDetailQuery</MethodClassName>
		<LogicSource><![CDATA[this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(BookingDetail.BOOKING_DETAIL_FILE), this.getRecord(Booking.BOOKING_FILE), BookingDetail.BOOKING_ID, Booking.ID);
this.addRelationship(DBConstants.LEFT_OUTER, this.getRecord(BookingDetail.BOOKING_DETAIL_FILE), this.getRecord(Tour.TOUR_FILE), BookingDetail.TOUR_ID, Tour.ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7287">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductTypeSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), ProductType.DESCRIPTION, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7291">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>27</Sequence>
		<MethodName>checkSecurity</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OperationsBookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
{   // Okay, their group can access this screen, but can this user access this data?
    String strUserContactType = this.getProperty(DBParams.CONTACT_TYPE);
    String strUserContactID = this.getProperty(DBParams.CONTACT_ID);

    String strContactID = this.getScreenRecord().getField(LookupScreenRecord.VENDOR_ID).toString();
    if (Vendor.VENDOR_FILE.equalsIgnoreCase(strUserContactType))
    {
        if ((strContactID == null) || (strContactID.length() == 0))
            if ((strUserContactID != null) && (strUserContactID.length() > 0))
                this.getScreenRecord().getField(LookupScreenRecord.VENDOR_ID).setString(strContactID = strUserContactID);
        iErrorCode = this.checkContactSecurity(Vendor.VENDOR_FILE, strContactID);
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7292">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>28</Sequence>
		<MethodName>isContactDisplay</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>OperationsBookingDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strUserContactType = this.getProperty(DBParams.CONTACT_TYPE);
String strUserContactID = this.getProperty(DBParams.CONTACT_ID);

String strContactID = this.getScreenRecord().getField(LookupScreenRecord.VENDOR_ID).toString();

if ((strUserContactID != null) && (strUserContactID.equals(strContactID)))
    if (Vendor.VENDOR_FILE.equalsIgnoreCase(strUserContactType))
        return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7293">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>45</Sequence>
		<MethodName>checkSecurity</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VendorApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
{   // Okay, their group can access this screen, but can this user access this data?
    String strUserContactType = this.getProperty(DBParams.CONTACT_TYPE);
    String strUserContactID = this.getProperty(DBParams.CONTACT_ID);

    String strContactID = this.getHeaderRecord().getField(Vendor.ID).toString();
    if (Vendor.VENDOR_FILE.equalsIgnoreCase(strUserContactType))
    {
        if ((strContactID == null) || (strContactID.length() == 0))
            if ((strUserContactID != null) && (strUserContactID.length() > 0))
                this.getHeaderRecord().getField(Vendor.ID).setString(strContactID = strUserContactID);
        iErrorCode = this.checkContactSecurity(Vendor.VENDOR_FILE, strContactID);
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7294">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>46</Sequence>
		<MethodName>isContactDisplay</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>VendorApTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strUserContactType = this.getProperty(DBParams.CONTACT_TYPE);
String strUserContactID = this.getProperty(DBParams.CONTACT_ID);

String strContactID = this.getHeaderRecord().getField(Vendor.ID).toString();

if ((strUserContactID != null) && (strUserContactID.equals(strContactID)))
    if (Vendor.VENDOR_FILE.equalsIgnoreCase(strUserContactType))
        return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7295">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItinerary</MethodClassName>
		<LogicSource><![CDATA[m_sHtmlView.free();
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7296">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>handleMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingItinerary</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super; // Have the view handle this message.
class RefreshItin implements Runnable
{
    BookingItinerary m_screen = null;
    Date m_timeRequested = null;
    public RefreshItin(BookingItinerary screen)
    {
        m_screen = screen;
        m_timeRequested = new Date();
    }
    public void run()
    {
        m_screen.refreshText(m_timeRequested);
    }
}
RefreshItin doLater = new RefreshItin(this);
SwingUtilities.invokeLater(doLater);
return iErrorCode; // Override this to process change]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7297">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineSession</MethodClassName>
		<LogicSource>return new BookingLine(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7298">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineSession</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7299">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingLineSession</MethodClassName>
		<LogicSource><![CDATA[super;
Booking recBooking = (Booking)this.getRecord(Booking.BOOKING_FILE);

this.getRecord(BookingLine.BOOKING_LINE_FILE).addListener(new SubFileFilter(recBooking, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7300">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,000</Sequence>
		<MethodName>markupPriceFromCost</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>double dMarkup, boolean bMarkupOnlyIfNoPrice</MethodInterface>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[if ((!bMarkupOnlyIfNoPrice) || (this.getField(Product.PRODUCT_PRICE_LOCAL).getValue() == 0))
{
    if (dMarkup == 0.00)
        this.getField(Product.PRODUCT_PRICE_LOCAL).setData(null);
    else
        this.getField(Product.PRODUCT_PRICE_LOCAL).setValue(Math.floor(this.getField(Product.PRODUCT_COST_LOCAL).getValue() * (1 + dMarkup) * 100 + 0.5) / 100);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7301">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>9,000</Sequence>
		<MethodName>markupPriceFromCost</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Hotel</MethodClassName>
		<LogicSource><![CDATA[super;
if (dMarkup == 0.00)
{
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Hotel.SINGLE_PRICE_LOCAL).getValue() == 0))
        this.getField(Hotel.SINGLE_PRICE_LOCAL).setData(null);
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Hotel.DOUBLE_PRICE_LOCAL).getValue() == 0))
        this.getField(Hotel.DOUBLE_PRICE_LOCAL).setData(null);
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Hotel.TRIPLE_PRICE_LOCAL).getValue() == 0))
        this.getField(Hotel.TRIPLE_PRICE_LOCAL).setData(null);
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Hotel.QUAD_PRICE_LOCAL).getValue() == 0))
        this.getField(Hotel.QUAD_PRICE_LOCAL).setData(null);
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Hotel.ROOM_PRICE_LOCAL).getValue() == 0))
        this.getField(Hotel.ROOM_PRICE_LOCAL).setData(null);
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Hotel.MEAL_PRICE_LOCAL).getValue() == 0))
        this.getField(Hotel.MEAL_PRICE_LOCAL).setData(null);
}
else
{
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Hotel.SINGLE_PRICE_LOCAL).getValue() == 0))
        this.getField(Hotel.SINGLE_PRICE_LOCAL).setValue(Math.floor(this.getField(Hotel.SINGLE_COST_LOCAL).getValue() * (1 + dMarkup) * 100 + 0.5) / 100);
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Hotel.DOUBLE_PRICE_LOCAL).getValue() == 0))
        this.getField(Hotel.DOUBLE_PRICE_LOCAL).setValue(Math.floor(this.getField(Hotel.DOUBLE_COST_LOCAL).getValue() * (1 + dMarkup) * 100 + 0.5) / 100);
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Hotel.TRIPLE_PRICE_LOCAL).getValue() == 0))
        this.getField(Hotel.TRIPLE_PRICE_LOCAL).setValue(Math.floor(this.getField(Hotel.TRIPLE_COST_LOCAL).getValue() * (1 + dMarkup) * 100 + 0.5) / 100);
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Hotel.QUAD_PRICE_LOCAL).getValue() == 0))
        this.getField(Hotel.QUAD_PRICE_LOCAL).setValue(Math.floor(this.getField(Hotel.QUAD_COST_LOCAL).getValue() * (1 + dMarkup) * 100 + 0.5) / 100);
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Hotel.ROOM_PRICE_LOCAL).getValue() == 0))
        this.getField(Hotel.ROOM_PRICE_LOCAL).setValue(Math.floor(this.getField(Hotel.ROOM_COST_LOCAL).getValue() * (1 + dMarkup) * 100 + 0.5) / 100);
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Hotel.MEAL_PRICE_LOCAL).getValue() == 0))
        this.getField(Hotel.MEAL_PRICE_LOCAL).setValue(Math.floor(this.getField(Hotel.MEAL_COST_LOCAL).getValue() * (1 + dMarkup) * 100 + 0.5) / 100);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7302">
		<LastChanged>2012-02-02T22:47:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>9,100</Sequence>
		<MethodName>markupPriceFromCost</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Land</MethodClassName>
		<LogicSource><![CDATA[super;
if (dMarkup == 0.00)
{
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Land.PMC_PRICE_HOME).getValue() == 0))
        this.getField(Land.PMC_PRICE_HOME).setData(null);
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Land.SIC_PRICE_HOME).getValue() == 0))
        this.getField(Land.SIC_PRICE_HOME).setData(null);
}
else
{
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Land.PMC_PRICE_HOME).getValue() == 0))
        this.getField(Land.PMC_PRICE_HOME).setValue(Math.floor(this.getField(Land.PMC_COST_HOME).getValue() * (1 + dMarkup) * 100 + 0.5) / 100);
    if ((!bMarkupOnlyIfNoPrice) || (this.getField(Land.SIC_PRICE_HOME).getValue() == 0))
        this.getField(Land.SIC_PRICE_HOME).setValue(Math.floor(this.getField(Land.SIC_COST_HOME).getValue() * (1 + dMarkup) * 100 + 0.5) / 100);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7303">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addPriceListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Product recProduct</MethodInterface>
		<MethodClassName>ProductSearchSession</MethodClassName>
		<LogicSource>recProduct.getField(Product.PRODUCT_PRICE_LOCAL).addListener(new AddCommissionHandler(null));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7304">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AddCommissionHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7305">
		<LastChanged>2012-04-07T12:30:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doSetData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AddCommissionHandler</MethodClassName>
		<LogicSource><![CDATA[if (objData instanceof Double)
{   // Always
    Record recProduct = this.getOwner().getRecord();
    RecordOwner recordOwner = recProduct.getRecordOwner();
    if (recordOwner != null)
    {
        double dCommission = 0.00;
        Record recBooking = (Record)recordOwner.getRecord(BookingModel.BOOKING_FILE);
        if ((recBooking != null)
            && ((recBooking.getEditMode() == DBConstants.EDIT_CURRENT) || (recBooking.getEditMode() == DBConstants.EDIT_IN_PROGRESS)))
        {
            dCommission = recBooking.getField(BookingModel.STD_COMMISSION).getValue();
        }
        else
        {
            Record recBookingControl = (Record)recordOwner.getRecord(BookingControl.BOOKING_CONTROL_FILE);
            if (recBookingControl == null)
                recBookingControl = new BookingControl(recordOwner);
            dCommission = recBookingControl.getField(BookingControl.AGENCY_COMM).getValue();
        }
        if (dCommission != 0.00)
        {
            double dNet = ((Double)objData).doubleValue();
            double dGross = Math.floor(dNet / (1 - dCommission) * 100 + 0.5) / 100;
            objData = new Double(dGross);
        }
    }                
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7306">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addPriceListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
recProduct.getField(Hotel.SINGLE_PRICE_LOCAL).addListener(new AddCommissionHandler(null));
recProduct.getField(Hotel.DOUBLE_PRICE_LOCAL).addListener(new AddCommissionHandler(null));
recProduct.getField(Hotel.TRIPLE_PRICE_LOCAL).addListener(new AddCommissionHandler(null));
recProduct.getField(Hotel.QUAD_PRICE_LOCAL).addListener(new AddCommissionHandler(null));
recProduct.getField(Hotel.ROOM_PRICE_LOCAL).addListener(new AddCommissionHandler(null));
recProduct.getField(Hotel.MEAL_PRICE_LOCAL).addListener(new AddCommissionHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7307">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addPriceListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandSearchSession</MethodClassName>
		<LogicSource><![CDATA[super;
recProduct.getField(Land.PMC_PRICE_HOME).addListener(new AddCommissionHandler(null));
recProduct.getField(Land.SIC_PRICE_HOME).addListener(new AddCommissionHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7345">
		<LastChanged>2011-10-13T01:43:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProductMessageDesc</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMessageFieldDesc("AltLangID", String.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.STANDARD_PARAM | MessageFieldDesc.ECHO_PARAM, null);
this.addMessageFieldDesc("EchoToken", String.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.STANDARD_PARAM | MessageFieldDesc.ECHO_PARAM, null);
this.addMessageFieldDesc("PrimaryLangID", String.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.STANDARD_PARAM | MessageFieldDesc.ECHO_PARAM, null);
this.addMessageFieldDesc("SequenceNmbr", Float.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.STANDARD_PARAM | MessageFieldDesc.ECHO_PARAM, null);
this.addMessageFieldDesc("Target", String.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.STANDARD_PARAM | MessageFieldDesc.ECHO_PARAM, null);
this.addMessageFieldDesc(MESSAGE_TIMESTAMP, XMLGregorianCalendar.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.STANDARD_PARAM | MessageFieldDesc.ECHO_PARAM, null);
this.addMessageFieldDesc("TransactionIdentifier", String.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.STANDARD_PARAM | MessageFieldDesc.ECHO_PARAM, null);
this.addMessageFieldDesc("TransactionStatusCode", String.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.STANDARD_PARAM | MessageFieldDesc.ECHO_PARAM, null);
this.addMessageFieldDesc("Version", Float.class, MessageFieldDesc.OPTIONAL, MessageFieldDesc.STANDARD_PARAM | MessageFieldDesc.ECHO_PARAM, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7346">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getXMLTimeStamp</MethodName>
		<LogicDescription/>
		<MethodReturns>XMLGregorianCalendar</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseProductResponse</MethodClassName>
		<LogicSource><![CDATA[GregorianCalendar cal = new GregorianCalendar();
DatatypeFactory dt;
try {
    dt = DatatypeFactory.newInstance();
    return dt.newXMLGregorianCalendar(cal);
} catch (DatatypeConfigurationException e) {
    e.printStackTrace();
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7382">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingResponseJaxbMessageOut2010A</MethodClassName>
		<LogicSource><![CDATA[BaseMessage message = this.getMessage();
String strMessage = message.getString(PingRequestMessageInProcessor.MESSAGE_PARAM);

ObjectFactory factory = new ObjectFactory();
OTAPingRS root = factory.createOTAPingRS();

if (strMessage != null)
{
    SuccessType successType = factory.createSuccessType();
    root.getSuccessAndWarningsAndEchoData().add(successType);
    root.getSuccessAndWarningsAndEchoData().add(strMessage);
}
else
{
    ErrorsType errorsType = factory.createErrorsType();
    root.setErrors(errorsType);
    ErrorType errorType = factory.createErrorType();
    errorsType.getError().add(errorType);
    String strErrorMessage = null;
    if (message.getMessageDataDesc(null) instanceof BaseProductResponse)
    {   // Always
        BaseProductResponse productResponse = (BaseProductResponse)message.getMessageDataDesc(null);
        if (productResponse.getMessageDataStatus() == MessageDataDesc.ERROR)
        {   // Always
            strErrorMessage = productResponse.getMessageDataError();
        }
    }
    if (strErrorMessage == null)
        strErrorMessage = "Error - No data to PING";
    errorType.setShortText(strErrorMessage);
    errorType.setType("1");
    errorType.setLanguage("en");    // TODO
}

this.setPayloadProperties(message, root);

return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7383">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingResponseJaxbMessageIn2010A</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof OTAPingRS)
{       // Always
    OTAPingRS msg = (OTAPingRS)root;
    java.util.List<?> list = msg.getSuccessAndWarningsAndEchoData();
    String strMessage = null;
    boolean bSuccess = true;    // Who uses this?
    for (Object data : list)
    {
        if (data instanceof String)
            strMessage = (String)data;
        if (data instanceof SuccessType)
            bSuccess = true;
    }
    
    BaseMessage message = this.getMessage();
    message.put(PingRequestMessageInProcessor.MESSAGE_PARAM, strMessage);
    
    this.addPayloadProperties(msg, message);
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7384">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestJaxbMessageOut2010A</MethodClassName>
		<LogicSource><![CDATA[BaseMessage message = this.getMessage();
String strMessage = message.getString(PingRequestMessageInProcessor.MESSAGE_PARAM);

ObjectFactory factory = new ObjectFactory();
OTAPingRQ root = factory.createOTAPingRQ();
root.setEchoData(strMessage);

this.setPayloadProperties(message, root);

return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7385">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestJaxbMessageIn2010A</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof OTAPingRQ)
{       // Always
    OTAPingRQ msg = (OTAPingRQ)root;
    String strMessage = msg.getEchoData();
    
    BaseMessage message = this.getMessage();
    message.put(PingRequestMessageInProcessor.MESSAGE_PARAM, strMessage);

    this.addPayloadProperties(msg, message);
    return DBConstants.NORMAL_RETURN;
}
else
    return DBConstants.ERROR_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7386">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CardTypeScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = new OTACode();
record.setTableNames("CDT");
record.init(this);
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7387">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>applyMappedFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACode</MethodClassName>
		<LogicSource><![CDATA[Record recOTACodes = new OTACodes(this.getRecordOwner());
Record recOTACodeTable = ((ReferenceField)recOTACodes.getField(OTACodes.OTA_CODE_TABLE_ID)).getReferenceRecord();
recOTACodeTable.setKeyArea(OTACodeTable.NAME_CODE_KEY);
recOTACodes.addListener(new SubFileFilter(recOTACodeTable));
recOTACodes.addListener(new CompareFileFilter(OTACodes.DELETION_DATE, (String)null, FileListener.EQUALS, null, false));
recOTACodeTable.getField(OTACodeTable.NAME_CODE).setString(this.getTableNames(false));
try {
    if (!recOTACodeTable.seek(DBConstants.EQUALS))
        return null;    // Error!
} catch (DBException e) {
    recOTACodes.free();      // Frees both      
    e.printStackTrace();
    return null;
}
return recOTACodes;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7388">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>moveDataToThin</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACode</MethodClassName>
		<LogicSource><![CDATA[if (!record.getField(OTACodes.VALUE).isNull())
    fieldList.getField(record.getField(OTACode.ID).getFieldName()).setString(record.getField(OTACodes.VALUE).toString());
this.moveFieldToThin(fieldList.getField(record.getField(OTACodes.NAME).getFieldName()), null, record);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7389">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>freeMappedRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACode</MethodClassName>
		<LogicSource>record.free();      // Frees both</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7393">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AMCTypeScreen</MethodClassName>
		<LogicSource>return new OTACodez(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7394">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SeatPreferenceScreen</MethodClassName>
		<LogicSource>return new OTASeatPreference(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7396">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>OTACodeField</MethodClassName>
		<LogicSource><![CDATA[OTACode record = new OTACode();
record.setTableNames(this.getTableNames());
record.init(recordOwner);
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7397">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getTableNames</MethodName>
		<LogicDescription>The three letter code from the code table</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>OTACodeField</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7398">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SeatPreferenceScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getTable().getCurrentTable().setProperty(DBParams.SUPRESSREMOTEDBMESSAGES, DBConstants.FALSE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7399">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailGridScreen</MethodClassName>
		<LogicSource>return new HotelAvail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7406">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CardTypeScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(OTACode.NAME_KEY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7407">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestSOAPMessageIn2006A</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof OTA_PingRQ)
{       // Always
    OTA_PingRQ msg = (OTA_PingRQ)root;
    String strMessage = msg.getEchoData();
    
    BaseMessage message = this.getMessage();
    message.put(PingRequestMessageInProcessor.MESSAGE_PARAM, strMessage);

    this.addPayloadProperties(msg, message);
    return DBConstants.NORMAL_RETURN;
}
else
    return DBConstants.ERROR_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom>PingRequestJaxbMessageIn2010A</CopyFrom>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7408">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestSOAPMessageOut2006A</MethodClassName>
		<LogicSource><![CDATA[BaseMessage message = this.getMessage();
String strMessage = message.getString(PingRequestMessageInProcessor.MESSAGE_PARAM);

ObjectFactory factory = new ObjectFactory();
OTA_PingRQ root = factory.createOTA_PingRQ();
root.setEchoData(strMessage);

this.setPayloadProperties(message, root);

return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom>PingRequestJaxbMessageOut2010A</CopyFrom>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7409">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingResponseSOAPMsgReplyOut2006A</MethodClassName>
		<LogicSource><![CDATA[BaseMessage message = this.getMessage();
String strMessage = message.getString(PingRequestMessageInProcessor.MESSAGE_PARAM);

ObjectFactory factory = new ObjectFactory();
OTA_PingRS root = factory.createOTA_PingRS();

if (strMessage != null)
{
    SuccessType successType = factory.createSuccessType();
    root.getSuccessAndWarningsAndEchoData().add(successType);
    root.getSuccessAndWarningsAndEchoData().add(strMessage);
}
else
{
    ErrorsType errorsType = factory.createErrorsType();
    root.setErrors(errorsType);
    ErrorType errorType = factory.createErrorType();
    errorsType.getError().add(errorType);
    String strErrorMessage = null;
    if (message.getMessageDataDesc(null) instanceof BaseProductResponse)
    {   // Always
        BaseProductResponse productResponse = (BaseProductResponse)message.getMessageDataDesc(null);
        if (productResponse.getMessageDataStatus() == MessageDataDesc.ERROR)
        {   // Always
            strErrorMessage = productResponse.getMessageDataError();
        }
    }
    if (strErrorMessage == null)
        strErrorMessage = "Error - No data to PING";
    errorType.setShortText(strErrorMessage);
    errorType.setType("1");
    errorType.setLanguage("en");    // TODO
}

this.setPayloadProperties(message, root);

return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom>PingResponseJaxbMessageOut2010A</CopyFrom>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7410">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingResponseSOAPMsgReplyIn2006A</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof OTA_PingRS)
{       // Always
    OTA_PingRS msg = (OTA_PingRS)root;
    java.util.List<?> list = msg.getSuccessAndWarningsAndEchoData();
    String strMessage = null;
    boolean bSuccess = true;    // Who uses this?
    for (Object data : list)
    {
        if (data instanceof String)
            strMessage = (String)data;
        if (data instanceof SuccessType)
            bSuccess = true;
    }
    
    BaseMessage message = this.getMessage();
    message.put(PingRequestMessageInProcessor.MESSAGE_PARAM, strMessage);
    
    this.addPayloadProperties(msg, message);
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom>PingResponseJaxbMessageIn2010A</CopyFrom>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7414">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestSOAPMessageIn2004B</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom>PingRequestJaxbMessageIn2010A</CopyFrom>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7415">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestSOAPMessageOut2004B</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom>PingRequestJaxbMessageOut2010A</CopyFrom>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7416">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription>Note: This code is not the same as 2008A</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingResponseSOAPMsgReplyOut2004B</MethodClassName>
		<LogicSource><![CDATA[BaseMessage message = this.getMessage();
String strMessage = message.getString(PingRequestMessageInProcessor.MESSAGE_PARAM);

ObjectFactory factory = new ObjectFactory();
OTAPingRS root = factory.createOTAPingRS();

if (strMessage != null)
{
    SuccessType successType = factory.createSuccessType();
    root.setSuccess(successType);
    root.setEchoData(strMessage);
}
else
{
    ErrorsType errorsType = factory.createErrorsType();
    root.setErrors(errorsType);
    ErrorType errorType = factory.createErrorType();
    errorsType.getError().add(errorType);
    String strErrorMessage = null;
    if (message.getMessageDataDesc(null) instanceof BaseProductResponse)
    {   // Always
        BaseProductResponse productResponse = (BaseProductResponse)message.getMessageDataDesc(null);
        if (productResponse.getMessageDataStatus() == MessageDataDesc.ERROR)
        {   // Always
            strErrorMessage = productResponse.getMessageDataError();
        }
    }
    if (strErrorMessage == null)
        strErrorMessage = "Error - No data to PING";
    errorType.setValue(strErrorMessage);
    errorType.setType("1");
}

this.setPayloadProperties(message, root);

return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7417">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription>Note: This code is not the same as PingResponseSOAPMsgReplyIn2008A</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingResponseSOAPMsgReplyIn2004B</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof OTAPingRS)
{       // Always
    OTAPingRS msg = (OTAPingRS)root;
    String strMessage = msg.getEchoData();
    SuccessType successType = msg.getSuccess();
    boolean bSuccess = true;    // Who uses this?
    
    BaseMessage message = this.getMessage();
    message.put(PingRequestMessageInProcessor.MESSAGE_PARAM, strMessage);
    
    this.addPayloadProperties(msg, message);
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7418">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequestSOAPMessageIn2004B</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof OTAHotelAvailRQ)
{       // Always
    OTAHotelAvailRQ msg = (OTAHotelAvailRQ)root;

    AvailRequestSegmentsType segments = msg.getAvailRequestSegments();

    java.util.List<AvailRequestSegmentsType.AvailRequestSegment> listSegments = segments.getAvailRequestSegment();
    for (AvailRequestSegmentsType.AvailRequestSegment segType : listSegments)
    {
        if (!"Room".equalsIgnoreCase(segType.getAvailReqType()))
            continue;
        DateTimeSpanType dateTime = segType.getStayDateRange();
        Date dateStart = this.dateStringToDateFormat(dateTime.getStart());

        Date dateEnd = this.dateStringToDateFormat(dateTime.getEnd());
        long lmsChange = dateEnd.getTime() - dateStart.getTime();
        long lDuration = (lmsChange + 1000) / DBConstants.KMS_IN_A_DAY;
    
        String adultCode = this.getOTACode("AQC", "Adult", "10");
        int pax = 0;
        int rooms = 0;
        String roomStays = null;
        String strRatePlan = null;
        AvailRequestSegmentsType.AvailRequestSegment.RoomStayCandidates roomStayCands = segType.getRoomStayCandidates();
        if (roomStayCands != null)
        {
            java.util.List<RoomStayCandidateType> list = roomStayCands.getRoomStayCandidate();
            for (RoomStayCandidateType roomStayCand : list)
            {
                rooms = roomStayCand.getQuantity();
                GuestCountType guestCountType = roomStayCand.getGuestCounts();
                java.util.List<GuestCountType.GuestCount> guestCounts = guestCountType.getGuestCount();
                for (GuestCountType.GuestCount guestCount : guestCounts)
                {
                    String ageCode = guestCount.getAgeQualifyingCode();
                    pax = pax + guestCount.getCount();
                }
                roomStays = roomStayCand.getRoomCategory();
            }
        }
        //+ Fix this next line!
        PassengerMessageData passengerMessageData = (PassengerMessageData)this.getMessage().getMessageDataDesc(HotelRateRequest.PASSENGER_MESSAGE);
        int iRoomCategory = 2;
        passengerMessageData.put(Product.ROOM_TYPE_PARAM + Integer.toString(iRoomCategory), new Short((short)pax));  // Twin ROOM HACK

        RatePlanCandidatesType ratePlanCans = segType.getRatePlanCandidates();
        if (ratePlanCans != null)
        {
            java.util.List<RatePlanCandidatesType.RatePlanCandidate> listRatePlan = ratePlanCans.getRatePlanCandidate();
            for (RatePlanCandidatesType.RatePlanCandidate ratePlan : listRatePlan)
            {
                strRatePlan = ratePlan.getRatePlanCode();
            }
        }

        ProductMessageData messageData = (ProductMessageData)this.getMessage().getMessageDataDesc(HotelRateRequest.PRODUCT_MESSAGE);

        String strHotelID = null;
        HotelSearchCriteriaType hotelSearchCriteriaType = segType.getHotelSearchCriteria();
        if (hotelSearchCriteriaType != null)
        {
            java.util.List<HotelSearchCriterionType> criteria = hotelSearchCriteriaType.getCriterion();
            for (HotelSearchCriterionType hotelSearchCriterionType : criteria)
            {
                ItemSearchCriterionType.HotelRef hotelRef = hotelSearchCriterionType.getHotelRef();
                String strChainCode = hotelRef.getChainCode();
                String strHotelCode = hotelRef.getHotelCode();
                strHotelID = messageData.getProductID(recordOwner, strChainCode, strHotelCode);
            }
        }

        messageData.put(BookingDetail.RATE_ID, strRatePlan);
        messageData.put(BookingDetail.CLASS_ID, roomStays);
        messageData.put(BookingDetail.DETAIL_DATE, dateStart);
        messageData.put(BookingHotel.NIGHTS, new Long(lDuration));
        messageData.put(BookingDetail.PRODUCT_ID, strHotelID);
    }
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7419">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequestSOAPMessageOut2004B</MethodClassName>
		<LogicSource><![CDATA[BaseMessage trxMessage = this.getMessage();
HotelRateRequest hotelRateRequestOut = (HotelRateRequest)trxMessage.getMessageDataDesc(null);
HotelMessageData messageData = (HotelMessageData)hotelRateRequestOut.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
TrxMessageHeader messageHeader = (TrxMessageHeader)trxMessage.getMessageHeader();
String strMessageType = (String)messageHeader.get(TrxMessageHeader.MESSAGE_CODE);
String strLogID = (String)messageHeader.get(TrxMessageHeader.LOG_TRX_ID);
//xif (!MESSAGE_CODE.equalsIgnoreCase(strMessageType))
//x    return null;    // Error, wrong type

// create an empty HoteAvailRQ
ObjectFactory factory = new ObjectFactory();
OTAHotelAvailRQ root = factory.createOTAHotelAvailRQ();
        
root.setVersion(new java.math.BigDecimal(1.003));
root.setEchoToken(strLogID);

POSType pos = factory.createPOSType();
root.setPOS(pos);
SourceType sourceType = factory.createSourceType();
pos.getSource().add(sourceType);
//+ UniqueID_Type uniqueID_Type = factory.createUniqueID_Type();
//+ sourceType.setRequestorID(uniqueID_Type);
//+ uniqueID_Type.setType(this.getOTACode("UIT", "Other", "18"));    // Other
//+ uniqueID_Type.setID(strLogID);
//+ uniqueID_Type.setURL("http://www.kayak.com");

OTAHotelAvailRQ.AvailRequestSegments segments = factory.createOTAHotelAvailRQAvailRequestSegments();
root.setAvailRequestSegments(segments);
    
java.util.List<AvailRequestSegmentsType.AvailRequestSegment> listSegments = segments.getAvailRequestSegment();
AvailRequestSegmentsType.AvailRequestSegment segType = factory.createAvailRequestSegmentsTypeAvailRequestSegment();
listSegments.add(segType);

segType.setAvailReqType("Room");

DateTimeSpanType dateTime = factory.createDateTimeSpanType();
segType.setStayDateRange(dateTime);
Date date = (Date)messageData.get(BookingDetail.DETAIL_DATE);
dateTime.setStart(this.dateToStringDateFormat(date));

Calendar cal = Calendar.getInstance();
cal.setTime(date);
    // The default HotelRateRequest.DURATION_DEFAULT is temporary.
Short shNights = (Short)messageData.get(BookingHotel.NIGHTS);
if (shNights == null)
    shNights = HotelMessageData.DURATION_DEFAULT;
int iDuration = shNights.intValue(); 
cal.add(Calendar.DATE, iDuration);
dateTime.setEnd(this.dateToStringDateFormat(cal.getTime()));

AvailRequestSegmentsType.AvailRequestSegment.RoomStayCandidates roomStayCands = factory.createAvailRequestSegmentsTypeAvailRequestSegmentRoomStayCandidates();
segType.setRoomStayCandidates(roomStayCands);
java.util.List<RoomStayCandidateType> list = roomStayCands.getRoomStayCandidate();

RoomStayCandidateType roomStayCand = factory.createRoomStayCandidateType();
list.add(roomStayCand);
PassengerMessageData passengerMessageData = (PassengerMessageData)hotelRateRequestOut.getMessageDataDesc(HotelRateRequest.PASSENGER_MESSAGE);

int rooms = 0;
int adults = 0;
int children = 0;
for (int iRoomCategory = PaxCategory.SINGLE_ID, iFieldSeq = Hotel.SINGLE_COST, iPriceFieldSeq = Hotel.SINGLE_PRICE_LOCAL; iRoomCategory <= PaxCategory.CHILD_ID; iRoomCategory++, iFieldSeq++, iPriceFieldSeq++)
{
    int iPaxInRoom = passengerMessageData.getPaxInRoom(iRoomCategory);
    int iRoomCapacity = iRoomCategory;
    if (iRoomCategory == PaxCategory.CHILD_ID)
    {
        iRoomCapacity = 1;
        children = children + iPaxInRoom;
    }
    else
        adults = adults + iPaxInRoom;
    rooms = rooms + (iPaxInRoom / iRoomCapacity);
}
roomStayCand.setQuantity(rooms);
GuestCountType guestCountType = factory.createGuestCountType();
roomStayCand.setGuestCounts(guestCountType);
guestCountType.setIsPerRoom(false); // Constant

java.util.List<GuestCountType.GuestCount> guestCounts = guestCountType.getGuestCount();
GuestCountType.GuestCount guestCount = factory.createGuestCountTypeGuestCount();
guestCounts.add(guestCount);
guestCount.setCount(adults + children);
guestCount.setAgeQualifyingCode(this.getOTACode("AQC", "Adult", "10"));  // Adult
    
HotelSearchCriteriaType hotelSearchCriteriaType = factory.createHotelSearchCriteriaType();
segType.setHotelSearchCriteria(hotelSearchCriteriaType);
java.util.List<HotelSearchCriterionType> criteria = hotelSearchCriteriaType.getCriterion();
HotelSearchCriterionType hotelSearchCriterionType = factory.createHotelSearchCriterionType();
criteria.add(hotelSearchCriterionType);
ItemSearchCriterionType.HotelRef hotelRef = factory.createItemSearchCriterionTypeHotelRef();
hotelSearchCriterionType.setHotelRef(hotelRef);
    
ProductMessageData productMessageData = (ProductMessageData)hotelRateRequestOut.getMessageDataDesc(HotelRateRequest.PRODUCT_MESSAGE);

Hotel recHotel = (Hotel)recordOwner.getRecord(Hotel.HOTEL_FILE);
if (recHotel == null)
    recHotel = new Hotel(recordOwner);
if (productMessageData.getProduct(recHotel))
{
    hotelRef.setHotelCode(recHotel.getOperatorsCode());
    hotelRef.setChainCode(recHotel.getChainCode());
}
this.setPayloadProperties(trxMessage, root);
   
return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7420">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseSOAPMessageIn2004B</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof OTAHotelAvailRS)
{
    OTAHotelAvailRS msg = (OTAHotelAvailRS)root;

    POSType posTypes = msg.getPOS();
    for (SourceType source : posTypes.getSource())
    {
        UniqueIDType uniqueId = source.getRequestorID();
        String strLogID = uniqueId.getID();
        String strType = uniqueId.getType();
        String strURL = uniqueId.getURL();
    }
    
    SuccessType successType = msg.getSuccess();
    if (successType == null)
    {
        ErrorsType errorsType = msg.getErrors();
        if (errorsType != null)
        {
            for (ErrorType errorType : errorsType.getError())
            {
                String strCode = errorType.getCode();
                String strType = errorType.getType();
                String strText = errorType.getShortText();
            }
        }
        else
        {
            WarningsType warningsType = msg.getWarnings();
            for (WarningType warningType : warningsType.getWarning())
            {
                String strCode = warningType.getCode();
                String strType = warningType.getType();
                String strText = warningType.getShortText();
            }
        }
        return DBConstants.ERROR_RETURN;    // Error return
    }
    
    OTAHotelAvailRS.RoomStays roomStays = msg.getRoomStays();
    for (OTAHotelAvailRS.RoomStays.RoomStay roomStay : roomStays.getRoomStay())
    {
        TotalType total = roomStay.getTotal();
        java.math.BigDecimal afterTax = total.getAmountAfterTax();
        java.math.BigDecimal beforeTax = total.getAmountBeforeTax();
        String strCurrency = total.getCurrencyCode();
        
        ProductRateResponse productResponseData = (ProductRateResponse)this.getMessage().getMessageDataDesc(null);
        ProductResponseMessageData productMessageData = (ProductResponseMessageData)this.getMessage().getMessageDataDesc(BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);
        productMessageData.put(BookingDetail.TOTAL_COST, afterTax.doubleValue());
        if (afterTax != null)
            if (afterTax.doubleValue() != 0)
                productResponseData.setMessageDataStatus(MessageDataDesc.VALID);

        BasicPropertyInfoType basicPropertyInfoType = roomStay.getBasicPropertyInfo();
        String strChainCode = basicPropertyInfoType.getChainCode();
        String strProductCode = basicPropertyInfoType.getHotelCode();
        
        String strHotelID = productMessageData.getProductID(recordOwner, strChainCode, strProductCode);
        productMessageData.put(BookingDetail.PRODUCT_ID, strHotelID);

        TPAExtensionsType tpa_Extensions_Type = roomStay.getTPAExtensions();
        for (Element element : tpa_Extensions_Type.getAny())
        {
            
        }
    }
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7421">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseSOAPMessageOut2004B</MethodClassName>
		<LogicSource><![CDATA[BaseMessage trxMessage = this.getMessage();
HotelRateResponse hotelRateResponseOut = (HotelRateResponse)trxMessage.getMessageDataDesc(null);
HotelRateResponseMessageData responseMessageData =  (HotelRateResponseMessageData)hotelRateResponseOut.getMessageDataDesc(BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);
TrxMessageHeader messageHeader = (TrxMessageHeader)trxMessage.getMessageHeader();
String strMessageType = (String)hotelRateResponseOut.get(TrxMessageHeader.MESSAGE_CODE);
if (true)//GET_HOTEL_RATE.equalsIgnoreCase(strMessageType))
{
    OTAHotelAvailRS root = null;

        // create an empty Hotel Avail Response
    ObjectFactory factory = new ObjectFactory();
    root = factory.createOTAHotelAvailRS();
    root.setVersion(new java.math.BigDecimal(1.003));
    // Note echo token is handled in payload setup

    POSType posTypes = factory.createPOSType();
    root.setPOS(posTypes);
    SourceType source = factory.createSourceType();
    posTypes.getSource().add(source);
    UniqueIDType uniqueId = factory.createUniqueIDType();
    source.setRequestorID(uniqueId);
    String strLogID = messageHeader.get(TrxMessageHeader.LOG_TRX_ID).toString();
    uniqueId.setType(this.getOTACode("UIT", "Other", "18"));    // Other
    uniqueId.setID(strLogID);
    uniqueId.setURL("http://www.kayak.com");

    boolean bSuccess = true;
    if (!bSuccess)  // Errors
    {
        ErrorsType errorsType = factory.createErrorsType();
        root.setErrors(errorsType);
        ErrorType errorType = factory.createErrorType();
        String code = null;
        errorType.setCode(code);
        String type = null;
        errorType.setType(type);
        String text = null;
        errorType.setShortText(text);
        errorsType.getError().add(errorType);
    }
    else if (false)         // Warnings
    {
        WarningsType warningsType = factory.createWarningsType();
        root.setWarnings(warningsType);
        WarningType warningType = factory.createWarningType();
        String code = null;
        warningType.setCode(code);
        String type = null;
        warningType.setType(type);
        String text = null;
        warningType.setShortText(text);
        warningsType.getWarning().add(warningType);
    }
    else
    {
        SuccessType successType = factory.createSuccessType();
        root.setSuccess(successType);

        OTAHotelAvailRS.RoomStays roomStays = factory.createOTAHotelAvailRSRoomStays();
        root.setRoomStays(roomStays);
        java.util.List<OTAHotelAvailRS.RoomStays.RoomStay> listRoomStays = roomStays.getRoomStay();
        OTAHotelAvailRS.RoomStays.RoomStay roomStay = factory.createOTAHotelAvailRSRoomStaysRoomStay();
        listRoomStays.add(roomStay);
        
        ProductResponseMessageData messageData = (ProductResponseMessageData)hotelRateResponseOut.getMessageDataDesc(BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);
        Double dblCurrency = (Double)messageData.get(BookingDetail.TOTAL_COST);
        TotalType total = factory.createTotalType();
        roomStay.setTotal(total);
        total.setAmountBeforeTax(new java.math.BigDecimal(dblCurrency));
        total.setAmountAfterTax(new java.math.BigDecimal(dblCurrency));
        total.setCurrencyCode("USD");
        
        BasicPropertyInfoType basicPropertyInfoType = factory.createBasicPropertyInfoType();
        roomStay.setBasicPropertyInfo(basicPropertyInfoType);
        Hotel recHotel = (Hotel)responseMessageData.getProductRecord(recordOwner, true);
        if (responseMessageData.getProduct(recHotel))
        {
            basicPropertyInfoType.setHotelCode(recHotel.getOperatorsCode());
            basicPropertyInfoType.setChainCode(recHotel.getChainCode());
        }
        
        TPAExtensionsType tpa_Extensions_Type = factory.createTPAExtensionsType();
        roomStay.setTPAExtensions(tpa_Extensions_Type);
        
        DocumentBuilder db = Utility.getDocumentBuilder();
        Document doc = null;
        synchronized (db)
        {
            doc = db.newDocument();

            Element tree = (Element)doc.createElement("BookItLink");
            doc.appendChild(tree);
            tree.setAttribute("Method", "GET");
            Element newChild = (Element)doc.createElement("BookItArguments");
            tree.appendChild(newChild);

            String myNamespace = null;
//            QName qname = new QName(myNamespace, "Bob", "gmd");
//            JAXBElement element = new JAXBElement(qname, Element.class, null);
            tpa_Extensions_Type.getAny().add(tree);
//            Utility.copyTreeToNode(tree, node);
//            tpa_Extensions_Type.getAny().add(elRoot);
//            new JAXBResult(tpa_Extensions_Type.getAny());
        }
        
        this.setPayloadProperties(trxMessage, root);

        return root;
    }
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7422">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingResponseXmlbeansMessageOut2010A</MethodClassName>
		<LogicSource><![CDATA[BaseMessage message = this.getMessage();
String strMessage = message.getString(PingRequestMessageInProcessor.MESSAGE_PARAM);

OTAPingRSDocument root = OTAPingRSDocument.Factory.newInstance();
OTAPingRSDocument.OTAPingRS pingRS = root.addNewOTAPingRS();

if (strMessage != null)
{
    pingRS.addNewSuccess();
    pingRS.addEchoData(strMessage);
}
else
{
    ErrorsType errorsType = pingRS.addNewErrors();
    ErrorType errorType = errorsType.addNewError();
    
    String strErrorMessage = null;
    if (message.getMessageDataDesc(null) instanceof BaseProductResponse)
    {   // Always
        BaseProductResponse productResponse = (BaseProductResponse)message.getMessageDataDesc(null);
        if (productResponse.getMessageDataStatus() == MessageDataDesc.ERROR)
        {   // Always
            strErrorMessage = productResponse.getMessageDataError();
        }
    }
    if (strErrorMessage == null)
        strErrorMessage = "Error - No data to PING";
    errorType.setShortText(strErrorMessage);
    errorType.setType("1");
    errorType.setLanguage("en");    // TODO
}

//+        this.setPayloadProperties(message, root);

return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7425">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestXmlbeansMessageOut2010A</MethodClassName>
		<LogicSource><![CDATA[BaseMessage message = this.getMessage();
String strMessage = message.getString(PingRequestMessageInProcessor.MESSAGE_PARAM);

OTAPingRQDocument root = OTAPingRQDocument.Factory.newInstance();
root.addNewOTAPingRQ().setEchoData(strMessage);

//+this.setPayloadProperties(message, root);

return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7426">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestXmlbeansMessageIn2010A</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof OTAPingRQ)
{       // Always
    OTAPingRQ msg = (OTAPingRQ)root;
    String strMessage = msg.getEchoData();
    
    BaseMessage message = this.getMessage();
    message.put(PingRequestMessageInProcessor.MESSAGE_PARAM, strMessage);

//+    this.addPayloadProperties(msg, message);
    return DBConstants.NORMAL_RETURN;
}
else
    return DBConstants.ERROR_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7432">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>unmarshalRootElement</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestXmlbeansMessageIn2010A</MethodClassName>
		<LogicSource><![CDATA[// Bind the incoming XML to an XMLBeans type.
OTAPingRQ ping = null;
OTAPingRQDocument doc = OTAPingRQDocument.Factory.parse(inStream);
ping = doc.getOTAPingRQ();
return ping;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7433">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingResponseXmlbeansMessageIn2010A</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof OTAPingRS)
{       // Always
    OTAPingRS msg = (OTAPingRS)root;
    String strMessage = null;
    boolean bSuccess = true;    // Who uses this?

    SuccessType[] rgSuccessType = msg.getSuccessArray();
    String[] rgEchoData = msg.getEchoDataArray();
    if (rgSuccessType.length > 0)
        bSuccess = true;
    if (rgEchoData.length > 0)
        strMessage = rgEchoData[0];
    
    BaseMessage message = this.getMessage();
    message.put(PingRequestMessageInProcessor.MESSAGE_PARAM, strMessage);
    
//+    this.addPayloadProperties(msg, message);
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7434">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>unmarshalRootElement</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingResponseXmlbeansMessageIn2010A</MethodClassName>
		<LogicSource><![CDATA[// Bind the incoming XML to an XMLBeans type.
OTAPingRSDocument doc = OTAPingRSDocument.Factory.parse(inStream);
OTAPingRS ping = doc.getOTAPingRS();
return ping;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7442">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>unmarshalRootElement*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingResponseXmlbeansMessageIn2010A</MethodClassName>
		<LogicSource><![CDATA[// Bind the incoming XML to an XMLBeans type.
OTAPingRSDocument doc = OTAPingRSDocument.Factory.parse(node);
OTAPingRS ping = doc.getOTAPingRS();
return ping;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7443">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>unmarshalRootElement*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestXmlbeansMessageIn2010A</MethodClassName>
		<LogicSource><![CDATA[// Bind the incoming XML to an XMLBeans type.
OTAPingRQ ping = null;
OTAPingRQDocument doc = OTAPingRQDocument.Factory.parse(node);
ping = doc.getOTAPingRQ();
return ping;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7444">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelChainField</MethodClassName>
		<LogicSource>return new HotelChain(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7452">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CarChainField</MethodClassName>
		<LogicSource>return new CarChain(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7453">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CruiseChainField</MethodClassName>
		<LogicSource>return new CruiseChain(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7454">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderChainField</MethodClassName>
		<LogicSource>return new TourHeaderChain(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7455">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AirChainField</MethodClassName>
		<LogicSource>return new AirChain(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7456">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandChainField</MethodClassName>
		<LogicSource>return new LandChain(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7457">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationChainField</MethodClassName>
		<LogicSource>return new TransportationChain(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7458">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemChainField</MethodClassName>
		<LogicSource>return new ItemChain(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7459">
		<LastChanged>2012-04-11T01:58:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription><![CDATA[Get/Create the product record.
@param bFindFirst If true, try to lookup the record first.
@return The product record]]></LogicDescription>
		<MethodReturns>ProductModel</MethodReturns>
		<MethodInterface>RecordOwner recordOwner, boolean bFindFirst</MethodInterface>
		<MethodClassName>BaseProductMessageData</MethodClassName>
		<LogicSource>return null;    // Override!</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7460">
		<LastChanged>2012-04-11T02:04:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getProductID</MethodName>
		<LogicDescription>Get the product from the product's operator code and chain code</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>RecordOwner recordOwner, String strChainCode, String strProductCode</MethodInterface>
		<MethodClassName>BaseProductMessageData</MethodClassName>
		<LogicSource><![CDATA[Record recProduct = (Record)this.getProductRecord(recordOwner, true);
recProduct.setKeyArea(ProductModel.OPERATORS_CODE_KEY);
recProduct.getField(ProductModel.OPERATORS_CODE).setString(strProductCode);
String strProductID = null;
try {
    while (recProduct.seek(">="))
    {
        if (!strProductCode.equalsIgnoreCase(recProduct.getField(ProductModel.OPERATORS_CODE).toString()))
            break;
        if ((strChainCode != null) && (strChainCode.length() > 0))
        {
            Record recProductChain = ((ReferenceField)recProduct.getField(ProductModel.PRODUCT_CHAIN_ID)).getReference();
            if (recProductChain != null)
                if ((recProductChain.getEditMode() == DBConstants.EDIT_CURRENT) || (recProductChain.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
            {
                if (strChainCode.equalsIgnoreCase(recProductChain.getField(ProductChainModel.CODE).toString()))
                    return recProduct.getField(ProductModel.ID_KEY).toString();  // Found!
            }
        }
        strProductID = recProduct.getField(ProductModel.ID_KEY).toString();  // Probably it.
    }
    if (strProductID != null)
        return strProductID;
    recProduct.setKeyArea(ProductModel.CODE_KEY);
    recProduct.getField(ProductModel.CODE).setString(strProductCode);
    if (recProduct.seek(DBConstants.EQUALS))
        return recProduct.getField(ProductModel.ID_KEY).toString();  // Found!
    recProduct.setKeyArea(ProductModel.DESC_SORT_KEY);
    recProduct.getField(ProductModel.DESCRIPTION).setString(strProductCode);
    if (recProduct.seek(DBConstants.EQUALS))
        return recProduct.getField(ProductModel.ID_KEY).toString();  // Found!
} catch (DBException e) {
    e.printStackTrace();
}
return null;    // Not found]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7461">
		<LastChanged>2012-04-11T10:08:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourMessageData</MethodClassName>
		<LogicSource><![CDATA[if (bFindFirst)
    if (recordOwner != null)
        if (recordOwner.getRecord(TourHeaderModel.TOUR_HEADER_FILE) != null)
            return (TourHeaderModel)recordOwner.getRecord(TourHeaderModel.TOUR_HEADER_FILE);
return (TourHeaderModel)Record.makeRecordFromClassName(TourHeaderModel.THICK_CLASS, recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7462">
		<LastChanged>2012-04-11T11:19:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[if (bFindFirst)
    if (recordOwner != null)
        if (recordOwner.getRecord(HotelModel.HOTEL_FILE) != null)
            return (HotelModel)recordOwner.getRecord(HotelModel.HOTEL_FILE);
return (HotelModel)Record.makeRecordFromClassName(HotelModel.THICK_CLASS, recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7463">
		<LastChanged>2012-04-11T13:55:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getProductRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LandRateResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[if (bFindFirst)
    if (recordOwner != null)
        if (recordOwner.getRecord(LandModel.LAND_FILE) != null)
            return (LandModel)recordOwner.getRecord(LandModel.LAND_FILE);
return (LandModel)Record.makeRecordFromClassName(LandModel.THICK_CLASS, recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7464">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>getOperatorsCode</MethodName>
		<LogicDescription>Get this product's code in the vendor's system and fake it if it doesn't exist</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[String strProductCode = null;
if (!this.getField(Product.OPERATORS_CODE).isNull())
    strProductCode = this.getField(Product.OPERATORS_CODE).toString();
else if (!this.getField(Product.CODE).isNull())
    strProductCode = this.getField(Product.CODE).toString();
else
    strProductCode = this.getField(Product.DESCRIPTION).toString();    // Hopefully not.
return strProductCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7465">
		<LastChanged>2012-01-31T10:43:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,550</Sequence>
		<MethodName>getChainCode</MethodName>
		<LogicDescription>Get the product vendor's chain code</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Product</MethodClassName>
		<LogicSource><![CDATA[String strChainCode = null;
Record recProductChain = ((ReferenceField)this.getField(Product.PRODUCT_CHAIN_ID)).getReference();
if (recProductChain != null)
    if ((recProductChain.getEditMode() == DBConstants.EDIT_CURRENT) || (recProductChain.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
        if (!recProductChain.getField(ProductChain.CODE).isNull())
            strChainCode = recProductChain.getField(ProductChain.CODE).toString();
if ((strChainCode == null) || (strChainCode.length() == 0))
    return this.getOperatorsCode();
return strChainCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7466">
		<LastChanged>2012-04-11T02:09:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getProduct</MethodName>
		<LogicDescription>Using the productID in this message, read the product record</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Record recProduct</MethodInterface>
		<MethodClassName>BaseProductMessageData</MethodClassName>
		<LogicSource><![CDATA[int iOldOrder = recProduct.getDefaultOrder();
try {
    if ((this.get(ProductModel.CODE) != null) && (!DBConstants.BLANK.equals(this.get(ProductModel.CODE))))
    {   // Use code if it is available
        recProduct.addNew();
        recProduct.getField(ProductModel.CODE).setString((String)this.get(ProductModel.CODE));
        recProduct.setKeyArea(ProductModel.CODE_KEY);
        boolean bSuccess = recProduct.seek(null);
        if (bSuccess)
            return bSuccess;
        
        recProduct.getField(ProductModel.DESCRIPTION).setString((String)this.get(ProductModel.CODE));
        recProduct.setKeyArea(ProductModel.DESC_SORT_KEY);
        bSuccess = recProduct.seek(null);
        if (bSuccess)
            return bSuccess;

        if (Utility.isNumeric(this.get(ProductModel.CODE).toString()))
            if (this.get(BookingDetailModel.PRODUCT_ID) == null)
                this.put(BookingDetailModel.PRODUCT_ID, Integer.parseInt(this.get(ProductModel.CODE).toString()));
    }
    if (this.get(BookingDetailModel.PRODUCT_ID) != null)
    {
        Integer intProductID = (Integer)this.get(BookingDetailModel.PRODUCT_ID);
        int iProductID = 0;
        if (intProductID != null)
            iProductID = intProductID.intValue();
        if (iProductID == 0)
            return false;
        recProduct.getField(ProductModel.ID).setValue(iProductID);
        recProduct.setKeyArea(ProductModel.ID_KEY);
        return recProduct.seek(null);
    }
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    recProduct.setKeyArea(iOldOrder);
}
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7467">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvail</MethodClassName>
		<LogicSource><![CDATA[if ((this.getTableNames(false) == null) || (this.getTableNames(false).length() == 0))
    this.setTableNames("HotelAvail" + Double.toString(Math.random()).substring(2));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7468">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Run updater", MenuConstants.FORMDETAIL, "Run updater", null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7469">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ("Run updater".equalsIgnoreCase(strCommand))
    return this.runUpdater();
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7470">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>runUpdater</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>HotelAvailGridScreen</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> properties = new HashMap<String,Object>();
String strTableName = this.getMainRecord().getTableNames(false);
properties.put(DBParams.PROCESS, HotelAvailProcess.class.getName());
properties.put(DBParams.TABLE, strTableName);

Application app = (Application)this.getTask().getApplication();
String strQueueName = MessageConstants.TRX_SEND_QUEUE;
String strQueueType = MessageConstants.INTRANET_QUEUE;
BaseMessage message = new MapMessage(new TrxMessageHeader(strQueueName, strQueueType, properties), properties);

app.getMessageManager().sendMessage(message);

return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7471">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailProcess</MethodClassName>
		<LogicSource><![CDATA[int MULTIPLIER = 250;
for (int i = 10; i > 0; i--)
{
    this.startProcess(HotelAvailAddProcess.class.getName(), i);
    synchronized(this)
    {
        try {
            this.wait(i * MULTIPLIER); // Start with 2.5 seconds, and drop
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7472">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>startProcess</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strProcessName, int iCount</MethodInterface>
		<MethodClassName>HotelAvailProcess</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> properties = new HashMap<String,Object>();
properties.put(DBParams.PROCESS, strProcessName);
properties.put(DBParams.TABLE, this.getProperty(DBParams.TABLE));
properties.put("count", iCount);
Application app = (Application)this.getTask().getApplication();
String strQueueName = MessageConstants.TRX_SEND_QUEUE;
String strQueueType = MessageConstants.INTRANET_QUEUE;
BaseMessage message = new MapMessage(new TrxMessageHeader(strQueueName, strQueueType, properties), properties);

app.getMessageManager().sendMessage(message);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7473">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelAvailAddProcess</MethodClassName>
		<LogicSource><![CDATA[int iCount = Integer.parseInt(this.getProperty("count"));
String strTableName = this.getProperty(DBParams.TABLE);
HotelAvail recHotelAvail = new HotelAvail();
recHotelAvail.setTableNames(strTableName);
recHotelAvail.init(this);

try {
    recHotelAvail.addNew();
    
    recHotelAvail.getField(HotelAvail.AMOUNT_BEFORE_TAX).setValue(Math.random());
    recHotelAvail.getField(HotelAvail.AMOUNT_AFTER_TAX).setValue(iCount);
    
    recHotelAvail.add();
} catch (DBException e) {
    e.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7482">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CityTypeField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
        {"", ""}, 
        {AIRPORT, "Airport"},
        {CITY, "City"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7498">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScanCity</MethodClassName>
		<LogicSource>return new City(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7499">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fixRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScanCity</MethodClassName>
		<LogicSource><![CDATA[super;
this.fixCapitalization(record.getField(City.DESCRIPTION));
this.fixCapitalization(record.getField(City.TICKET_CITY_DESC));
record.getField(City.CITY_TYPE).setString(CityTypeField.AIRPORT);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7500">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeCity</MethodClassName>
		<LogicSource>return new City(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7501">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>readDestRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeCity</MethodClassName>
		<LogicSource><![CDATA[boolean bFound = super;
if (!bFound)
    return bFound;
if (!recSource.getField(City.COUNTRY_ID).isNull())
    if (!recDest.getField(City.COUNTRY_ID).isNull())
        if (!recSource.getField(City.COUNTRY_ID).equals(recDest.getField(City.COUNTRY_ID)))
            return false;   // Not a match
return bFound;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7502">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>mergeSourceData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeCity</MethodClassName>
		<LogicSource><![CDATA[super;
if (!bFound)
    recDest.getField(City.CITY_TYPE).setString(CityTypeField.CITY);
if ((recDest.getField(City.TICKET_CITY_DESC).isNull()) || (recDest.getField(City.TICKET_CITY_DESC).toString().equalsIgnoreCase(recSource.getField(City.TICKET_CITY_DESC).toString())))
    recDest.getField(City.TICKET_CITY_DESC).moveFieldToThis(recSource.getField(City.TICKET_CITY_DESC));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7503">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>main</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String[] args</MethodInterface>
		<MethodClassName>MergeSkymap</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> properties = null;
if (args != null)
{
    properties = new Hashtable<String,Object>();
    Utility.parseArgs(properties, args);
}
MergeSkymap convert = new MergeSkymap(null, null, properties);
convert.run();]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7504">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getSource</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeSkymap</MethodClassName>
		<LogicSource><![CDATA[String strSource = this.getProperty("source");
if (strSource == null)
    strSource = System.getProperty("user.home") + "/workspace/tourgeek/data/java/tour/externaldata/skymap/Location.dat";
File file = new File(strSource);

LineNumberReader reader = null;
try {
    FileInputStream fileIn = new FileInputStream(file);
    InputStreamReader inStream = new InputStreamReader(fileIn, "8859_1");
    reader = new LineNumberReader(inStream);
} catch (FileNotFoundException e) {
    e.printStackTrace();
} catch (UnsupportedEncodingException e) {
    e.printStackTrace();
}

Record record = new City(this);
return new SkymapSource(reader, record);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7505">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SkymapSource</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>LineNumberReader reader, Record record</MethodInterface>
		<MethodClassName>SkymapSource</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7507">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>moveDataToRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>SkymapSource</MethodClassName>
		<LogicSource><![CDATA[try {
    m_record.addNew();
    
    StringTokenizer st = new StringTokenizer(m_string, ",");
    String strLatitude = null;
    if (st.hasMoreTokens())
        strLatitude = st.nextToken();
    String strLongitude = null;
    if (st.hasMoreTokens())
        strLongitude = st.nextToken();
    if (strLongitude != null)
        if (strLongitude.length() > 0)
        {   // Change the sign
            if (strLongitude.startsWith("-"))
                strLongitude = strLongitude.substring(1);
            else
                strLongitude = "-" + strLongitude;
        }
    String strGMTOffset = null;
    if (st.hasMoreTokens())
        strGMTOffset = st.nextToken();
    String strCountry = null;
    if (st.hasMoreTokens())
        strCountry = st.nextToken();
    String strState = null;
    if (st.hasMoreTokens())
        strState = st.nextToken();
    else
    {
        strState = strCountry;
        strCountry = null;
    }
    String strCity = null;
    if (st.hasMoreTokens())
        strCity = st.nextToken();
    else
    {
        strCity = strState;
        strState = null;
    }
    
    if ((strCity == null) || (strCity.length() == 0))
    {
        //
    }
    else
    {
        if (strCity.startsWith(" "))
            strCity = strCity.substring(1);
    }
    
    m_record.getField(City.LATITUDE).setString(strLatitude);
    m_record.getField(City.LONGITUDE).setString(strLongitude);
    m_record.getField(City.GMT_OFFSET).setString(strGMTOffset);
    Record recCountry = BaseFixData.getRecordFromDescription(m_record.getField(City.COUNTRY_ID), strCountry);
    if (recCountry != null)
        m_record.getField(City.COUNTRY_ID).moveFieldToThis(recCountry.getCounterField());
    Record recState = BaseFixData.getRecordFromCode(m_record.getField(City.STATE_ID), strState, "StatePostalCode");
    if (recState != null)
        m_record.getField(City.STATE_ID).moveFieldToThis(recState.getCounterField());
    m_record.getField(City.DESCRIPTION).setString(strCity);
} catch (DBException e) {
    e.printStackTrace();
}

return m_record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7509">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>convertString</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String string</MethodInterface>
		<MethodClassName>SkymapSource</MethodClassName>
		<LogicSource><![CDATA[int iColons = 0;
for (int i = 1; i < string.length(); i++)
{
    if ((string.charAt(i - 1) == ' ') && (string.charAt(i) == ' '))
    {   // Get rid of double spaces.
        string = string.substring(0, i) + string.substring(i + 1);
        i--;                
    }
    if (string.charAt(i) == ':')
        iColons++;
}
int iCount = 0;
for (int i = 0; i < string.length(); i++)
{
    if ((iCount < 3)
        && ((string.charAt(i) == ' ') || (string.charAt(i) == '\t')))
    {
        iCount++;
        string = string.substring(0, i) + ',' + string.substring(i + 1);
    }
    else if (string.charAt(i) == ':')
    {
        iCount++;
        string = string.substring(0, i) + ',' + string.substring(i + 1);                
        if (string.charAt(i + 1) == ' ')
        {
            string = string.substring(0, i + 1) + string.substring(i + 2);
            i--;
        }
        if (iCount == 4)
            if (iColons < 2)
        {
            string = string.substring(0, i + 1) + ',' + string.substring(i + 1);
            i++;
        }
    }
}
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7518">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>parseNextLine</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SkymapSource</MethodClassName>
		<LogicSource><![CDATA[try {
    m_string = ((LineNumberReader)m_reader).readLine();
} catch (IOException e) {
    e.printStackTrace();
}
if (m_string == null)
    return false;
m_string = convertString(m_string);
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7524">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TidyHtml</MethodClassName>
		<LogicSource><![CDATA[boolean xmlOut = true;
String errOutFileName = this.getProperty("errorOutFilename");
if (errOutFileName == null)
    errOutFileName = "/tmp/errorout";   // NO
String url = this.getProperty("source");
String outFileName = this.getProperty("destination");
URL u;
BufferedInputStream in;
FileOutputStream out;
Tidy tidy = new Tidy();
tidy.setXmlOut(xmlOut);
try { 
    tidy.setErrout(new PrintWriter(new FileWriter(errOutFileName), true)); 
    u = new URL(url);
    in = new BufferedInputStream(u.openStream());
    out = new FileOutputStream(outFileName);
    tidy.parse(in, out);
} catch ( IOException e ) {
    System.out.println( this.toString() + e.toString() );
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7535">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeForexCurrency</MethodClassName>
		<LogicSource>return new Currencys(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7536">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>readDestRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeForexCurrency</MethodClassName>
		<LogicSource><![CDATA[recDest.getField(Currencys.CURRENCY_CODE).moveFieldToThis(recSource.getField("Alphabetic code"));
recDest.setKeyArea(Currencys.CURRENCY_CODE_KEY);
try {
    return (recDest.seek(DBConstants.EQUALS));
} catch (DBException e) {
    e.printStackTrace();
}
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7537">
		<LastChanged>2012-02-01T19:02:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>mergeSourceData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeForexCurrency</MethodClassName>
		<LogicSource><![CDATA[if ((recSource.getField("Alphabetic code").isNull())
        || (recSource.getField("Currency").isNull())
        || (!Character.isLetter(recSource.getField("Currency").toString().charAt(0))))
{
    try {
        recDest.addNew();
    } catch (DBException e) {
    }
    return;
}
if (recDest.getField(Currencys.CURRENCY_CODE).isNull())
    recDest.getField(Currencys.CURRENCY_CODE).moveFieldToThis(recSource.getField("Alphabetic code"));
if (recDest.getField(Currencys.DESCRIPTION).isNull())
    recDest.getField(Currencys.DESCRIPTION).moveFieldToThis(recSource.getField("Currency"));
if (!recSource.getField("Symbol").isNull())
    recDest.getField(Currencys.SIGN).moveFieldToThis(recSource.getField("Symbol"));
if (!recSource.getField("Subdivision").isNull())
{
    String strSubdivision = recSource.getField("Subdivision").toString();
    String strDesc = null;
    if (strSubdivision.indexOf(' ') != -1)
    {
        strDesc = strSubdivision.substring(0, strSubdivision.indexOf(' '));
        strSubdivision = strSubdivision.substring(strSubdivision.indexOf(' ') + 1);
    }
    if (strDesc != null)
        recDest.getField(Currencys.FRACTION_AMOUNT).setString(strDesc);
    recDest.getField(Currencys.FRACTION_DESC).setString(strSubdivision);
}
if (!recSource.getField("Currency").isNull())
    recDest.getField(Currencys.INTEGER_DESC).moveFieldToThis(recSource.getField("Currency"));

String strCountry = recSource.getField("Country").toString();
Record recCountry = this.getRecord(Country.COUNTRY_FILE);
recCountry.setKeyArea(Country.NAME_KEY);
recCountry.getField(Country.NAME).setString(strCountry);
try {
    if (recDest.getCounterField().isNull())
    {
        recDest.setAutoSequence(false);  // Disable autoseq temporarily
        recDest.getField(Currencys.ID).moveFieldToThis(recSource.getField("Numeric code"));
        recDest.add();
        recDest.setKeyArea(Currencys.ID_KEY);
        recDest.seek(DBConstants.EQUALS);
        recDest.setAutoSequence(true);
    }
    if (recCountry.seek(DBConstants.EQUALS))
    {   // Default currency
        recCountry.edit();
        recCountry.getField(Country.CURRENCYS_ID).moveFieldToThis(recDest.getCounterField());
        recCountry.set();
    }
} catch (DBException e) {
    e.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7538">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeForexCurrency</MethodClassName>
		<LogicSource><![CDATA[super;
new Country(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7539">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyUpdateProcess</MethodClassName>
		<LogicSource>this.updateAllCurrencies();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7540">
		<LastChanged>2020-01-20T21:27:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>updateAllCurrencies</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyUpdateProcess</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
record.close();
try {
    while (record.hasNext())
    {
        record.next();
        if (record.getField(Currencys.DELETED).getState() == true)
            continue;
        record.edit();
        
        double dRate = 0.0; // this.getConversionRate(record.getField(Currencys.CURRENCY_CODE).toString());
        if (dRate != 0.0)
            record.getField(Currencys.LAST_RATE).setValue(1 / dRate);
        
        record.set();
    }
} catch (DBException e) {
    e.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7541">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyUpdateProcess</MethodClassName>
		<LogicSource>return new Currencys(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7542">
		<LastChanged>2020-01-20T21:25:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyRequestSOAPMessageOut</MethodClassName>
		<LogicSource><![CDATA[/*
BaseMessage message = this.getMessage();
String currencyCode = message.getString(ManualMessage.MESSAGE_PARAM);

ConversionRate root = new ConversionRate();
org.jibx.schema.net.webservicex.currencyconvertor.Currency currency = org.jibx.schema.net.webservicex.currencyconvertor.Currency.valueOf(currencyCode);
if (currency == null)
    return null;
root.setFromCurrency(org.jibx.schema.net.webservicex.currencyconvertor.Currency.USD);
root.setToCurrency(currency);

return root;
*/
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7543">
		<LastChanged>2020-01-20T21:43:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CurrencyResponseSOAPMessageIn</MethodClassName>
		<LogicSource><![CDATA[/*
if (root instanceof ConversionRateResponse)
{       // Always
    ConversionRateResponse msg = (ConversionRateResponse)root;
    double rate = msg.getConversionRateResult();

    BaseMessage message = this.getMessage();
    message.put(ManualMessage.MESSAGE_PARAM, rate);
}
*/
return DBConstants.NORMAL_RETURN;
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7544">
		<LastChanged>2020-01-20T21:40:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getConversionRate</MethodName>
		<LogicDescription/>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>String currencyCode</MethodInterface>
		<MethodClassName>CurrencyUpdateProcess</MethodClassName>
		<LogicSource><![CDATA[/*
ConversionRate root = new ConversionRate();
org.jibx.schema.net.webservicex.currencyconvertor.Currency currency = null;
try {
    currency = org.jibx.schema.net.webservicex.currencyconvertor.Currency.valueOf(currencyCode);
} catch (Exception e) {
    currency = null;    // Ignore
}
if (currency == null)
    return 0.0;
root.setFromCurrency(org.jibx.schema.net.webservicex.currencyconvertor.Currency.USD);
root.setToCurrency(currency);

TrxMessageHeader messageHeader = new TrxMessageHeader(null, null);
BaseMessage message = new TreeMessage(messageHeader, null);
messageHeader.put(SOAPMessageTransport.SOAP_PACKAGE, "net.webservicex.currencyconverter");
messageHeader.put(TrxMessageHeader.MESSAGE_MARSHALLER_CLASS, JibxConvertToNative.class.getName());
String strDest = "http://www.webservicex.com/CurrencyConvertor.asmx";
messageHeader.put(TrxMessageHeader.DESTINATION_PARAM, strDest);
messageHeader.put("SOAPAction", "http://www.webserviceX.NET/ConversionRate");

new SoapTrxMessageOut(message, root);
SOAPMessageTransport transport = new SOAPMessageTransport(this.getTask());
BaseMessage messageIn = transport.sendMessageRequest(message);
if (messageIn.getMessageHeader() == null)   // Yes
    messageIn.setMessageHeader(new TrxMessageHeader(null, null));
/*
SoapTrxMessageIn externalMessageIn = (SoapTrxMessageIn)messageIn.getExternalMessage();
TrxMessageHeader messageHeaderIn = (TrxMessageHeader)messageIn.getMessageHeader();
messageHeaderIn.put(SOAPMessageTransport.SOAP_PACKAGE, "net.webservicex.currencyconverter");
messageHeaderIn.put(TrxMessageHeader.MESSAGE_MARSHALLER_CLASS, JibxConvertToMessage.class.getName());

ConversionRateResponse rootIn = (ConversionRateResponse)externalMessageIn.convertToMessage();
if (rootIn == null)
    return 0.0;
return rootIn.getConversionRateResult();
*/
return 0.0;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7547">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMergeRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeCodeTable</MethodClassName>
		<LogicSource><![CDATA[String code = this.getProperty("code");
if (code != null)
{    // Always
    Record record = new OTACode();
    record.setTableNames(code);
    record.init(this);
    return record;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7548">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>readDestRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeCodeTable</MethodClassName>
		<LogicSource><![CDATA[String sourceKeyField = this.getProperty("sourceKeyField");
String destKeyField = this.getProperty("destKeyField");
if ((sourceKeyField != null) && (destKeyField != null))
{
    FieldInfo fldPrimary = recSource.getField(sourceKeyField);
    BaseField fldSecond = recDest.getField(destKeyField);
    if ((fldSecond == null) || (fldPrimary == null))
        return false;
    recDest.setKeyArea(fldSecond);
    fldSecond.moveFieldToThis(fldPrimary);
    try {
        if (recDest.seek(DBConstants.EQUALS))
            return true;
    } catch (DBException e) {
        e.printStackTrace();
    }
    return false;   // Must be a new record
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7549">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>mergeSourceData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeCodeTable</MethodClassName>
		<LogicSource><![CDATA[// First, move same fields
for (int i = 0; i < recDest.getFieldCount(); i++)
{
    if (recSource.getField(recDest.getField(i).getFieldName()) != null)
        if (recDest.getField(i).isNull())
            recDest.getField(i).moveFieldToThis(recSource.getField(recDest.getField(i).getFieldName()));
}
// Now move explicitly specified fields
for (int i = 1; ; i++)
{
    String source = this.getProperty(SOURCE + Integer.toString(i));
    String dest = this.getProperty(DEST + Integer.toString(i));
    if ((source == null) || (dest == null))
        break;  // Done
    if (recDest.getField(dest) != null)
        if (recDest.getField(dest).isNull())
            if (recSource.getField(source) != null)
                recDest.getField(dest).moveFieldToThis(recSource.getField(source));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7556">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchTypeField</MethodClassName>
		<LogicSource>return new ProductSearchType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7557">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchCategoryField</MethodClassName>
		<LogicSource>return new ProductSearchCategory(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7558">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchTypeScreen</MethodClassName>
		<LogicSource>return new ProductSearchType(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7559">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchTypeGridScreen</MethodClassName>
		<LogicSource>return new ProductSearchType(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7560">
		<LastChanged>2012-03-27T21:51:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchType</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DETAIL_MODE) == ScreenConstants.DETAIL_MODE)
    screen = Record.makeNewScreen(ProductSearchCategory.PRODUCT_SEARCH_CATEGORY_GRID_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
    screen = Record.makeNewScreen(PRODUCT_SEARCH_TYPE_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) != 0)
    screen = Record.makeNewScreen(PRODUCT_SEARCH_TYPE_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7561">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchTypeScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7562">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchTypeGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7563">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchTypeGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7564">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchCategoryScreen</MethodClassName>
		<LogicSource>return new ProductSearchCategory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7565">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchCategoryGridScreen</MethodClassName>
		<LogicSource>return new ProductSearchCategory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7566">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProductSearchCategoryGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recDetail, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProductSearchCategoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7567">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchTypeHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7568">
		<LastChanged>2012-01-23T08:57:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchCategoryGridScreen</MethodClassName>
		<LogicSource>return new ProductSearchTypeHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7569">
		<LastChanged>2012-02-01T19:02:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchCategoryGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(ProductSearchType.PRODUCT_SEARCH_TYPE_FILE).getField(ProductSearchType.ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7570">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchCategoryGridScreen</MethodClassName>
		<LogicSource>return new ProductSearchType(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7571">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchCategoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7572">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchCategoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7573">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProductSearchCategoryScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recDetail, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProductSearchCategoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7574">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchCategoryScreen</MethodClassName>
		<LogicSource>return new ProductSearchType(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7575">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchCategoryScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7576">
		<LastChanged>2012-01-23T08:57:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchCategoryScreen</MethodClassName>
		<LogicSource>return new ProductSearchTypeHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7577">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeCodeTableSearch</MethodClassName>
		<LogicSource>return new ProductSearchCategory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7578">
		<LastChanged>2012-02-01T19:02:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>readDestRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeCodeTableSearch</MethodClassName>
		<LogicSource><![CDATA[try {
    String strCode = this.getProperty("code");
    if (strCode == null)
        return false;   // Never
    Record recOTACodeTable = this.getRecord(OTACodeTable.OTA_CODE_TABLE_FILE);
    recOTACodeTable.setKeyArea(OTACodeTable.NAME_CODE_KEY);
    recOTACodeTable.getField(OTACodeTable.NAME_CODE).setString(strCode);
    if (!recOTACodeTable.seek(DBConstants.EQUALS))
        return false;   // Never
    String strCodeName = recOTACodeTable.getField(OTACodeTable.NAME).toString();
    
    Record recProductSearchType = this.getRecord(ProductSearchType.PRODUCT_SEARCH_TYPE_FILE);
    recProductSearchType.setKeyArea(ProductSearchType.DESCRIPTION_KEY);
    recProductSearchType.getField(ProductSearchType.DESCRIPTION).setString(strCodeName);
    if (!recProductSearchType.seek(DBConstants.EQUALS))
    {
        recProductSearchType.addNew();
        recProductSearchType.getField(ProductSearchType.DESCRIPTION).setString(strCodeName);
        recProductSearchType.writeAndRefresh();
    }
    
    recDest.getField(ProductSearchCategory.DESCRIPTION).moveFieldToThis(recSource.getField(OTACode.NAME));
    recDest.getField(ProductSearchCategory.PRODUCT_SEARCH_TYPE_ID).moveFieldToThis(recProductSearchType.getField(ProductSearchType.ID));
    recDest.setKeyArea(ProductSearchCategory.PRODUCT_SEARCH_TYPE_ID_KEY);

    return recDest.seek(DBConstants.EQUALS);
} catch (DBException e) {
    e.printStackTrace();
    return false;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7579">
		<LastChanged>2012-02-01T19:02:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>mergeSourceData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeCodeTableSearch</MethodClassName>
		<LogicSource><![CDATA[recDest.getField(ProductSearchCategory.DESCRIPTION).moveFieldToThis(recSource.getField(OTACode.NAME));
Record recProductSearchType = this.getRecord(ProductSearchType.PRODUCT_SEARCH_TYPE_FILE);
recDest.getField(ProductSearchCategory.PRODUCT_SEARCH_TYPE_ID).moveFieldToThis(recProductSearchType.getField(ProductSearchType.ID));
recDest.getField(ProductSearchCategory.VALUE).moveFieldToThis(recSource.getField(OTACode.ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7580">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeCodeTableSearch</MethodClassName>
		<LogicSource><![CDATA[super;
new OTACodeTable(this);
new ProductSearchType(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7581">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchTypeScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7582">
		<LastChanged>2012-03-27T22:37:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupProductTypeCheckboxes</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>ScreenParent screen</MethodInterface>
		<MethodClassName>ProductSearchType</MethodClassName>
		<LogicSource><![CDATA[ProductType recProductType = (ProductType)screen.getRecord(ProductType.PRODUCT_TYPE_FILE);
if (recProductType == null)
    recProductType = new ProductType((RecordOwner)screen);
recProductType.setupProductTypeCheckboxes(screen, this, DBConstants.BLANK);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7583">
		<LastChanged>2012-03-27T22:36:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setupProductTypeCheckboxes</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>ScreenParent screen, Record record, String strFieldSuffix</MethodInterface>
		<MethodClassName>ProductType</MethodClassName>
		<LogicSource><![CDATA[try {
    this.close();
    while (this.hasNext())
    {
        this.next();
        BaseField field = record.getField(this.getField(ProductType.DESCRIPTION).toString() + strFieldSuffix);
        if (field != null)
            BaseField.createScreenComponent(ScreenModel.CHECK_BOX, screen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), screen, field, ScreenConstants.DEFAULT_DISPLAY, null);
    }
} catch (DBException e) {
    e.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7584">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen screen = super;

this.addProductTypeFilter((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_SEARCH_TYPE_ID));
this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_SEARCH_TYPE_ID).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), screen, ScreenConstants.DEFAULT_DISPLAY);

return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7585">
		<LastChanged>2012-01-23T08:57:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailGridScreen</MethodClassName>
		<LogicSource>return new ProductHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7586">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7587">
		<LastChanged>2012-02-01T19:02:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
// Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_ID)).syncReference(this.getHeaderRecord());
// Sub file stuff
this.getMainRecord().setKeyArea(ProductSearchDetail.PRODUCT_ID_KEY);
Product recProduct = (Product)this.getHeaderRecord();
ProductType recProductType = (ProductType)((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_TYPE_ID)).getReferenceRecord();
int iProductTypeID = recProductType.getProductTypeID(recProduct);
this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_TYPE_ID).setValue(iProductTypeID);
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord().getField(Product.ID), ProductSearchDetail.PRODUCT_ID, this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_TYPE_ID), ProductSearchDetail.PRODUCT_TYPE_ID, this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_SEARCH_TYPE_ID), ProductSearchDetail.PRODUCT_SEARCH_TYPE_ID));

if (Boolean.TRUE.toString().equalsIgnoreCase(this.getProperty(this.getScreenRecord().getField(ProductScreenRecord.READ_ONLY).getFieldName())))
{
    this.setAppending(false);
    this.setEditing(false);
}

this.addProductTypeFilter((ReferenceField)this.getRecord(ProductSearchDetail.PRODUCT_SEARCH_DETAIL_FILE).getField(ProductSearchDetail.PRODUCT_SEARCH_TYPE_ID));    
SPopupBox control = (SPopupBox)this.getRecord(ProductSearchDetail.PRODUCT_SEARCH_DETAIL_FILE).getField(ProductSearchDetail.PRODUCT_SEARCH_TYPE_ID).getComponent(0);
control.reSelectRecords();
this.getRecord(ProductSearchDetail.PRODUCT_SEARCH_DETAIL_FILE).getField(ProductSearchDetail.PRODUCT_SEARCH_TYPE_ID).addListener(new InitFieldHandler(this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_SEARCH_TYPE_ID)));

this.getHeaderRecord().getField(Product.ID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_SEARCH_TYPE_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7588">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[return new ProductSearchDetail(this);	// Never]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7589">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailGridScreen</MethodClassName>
		<LogicSource>return new ProductScreenRecord(this); // Override this if you need more</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7590">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProductSearchDetailGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recProduct, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProductSearchDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7592">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7593">
		<LastChanged>2012-01-23T08:57:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailScreen</MethodClassName>
		<LogicSource>return new ProductHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7594">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addProductTypeFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>ReferenceField field</MethodInterface>
		<MethodClassName>ProductSearchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[Record recProductSearchType = field.getReferenceRecord();
String strProductType = this.getHeaderRecord().getTableNames(false);
BaseField fldToCheck = recProductSearchType.getField(strProductType);
BaseField fldToCompare = new BooleanField(null, "TrueField", -1, null, null);
fldToCompare.setState(true);
recProductSearchType.addListener(new FreeOnFreeHandler(fldToCompare));
recProductSearchType.addListener(new CompareFileFilter(fldToCheck, fldToCompare, DBConstants.EQUALS));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7595">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen screen = super;

this.addProductTypeFilter((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_SEARCH_TYPE_ID));
this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_SEARCH_TYPE_ID).setupDefaultView(screen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), screen, ScreenConstants.DEFAULT_DISPLAY);

return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7596">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailScreen</MethodClassName>
		<LogicSource>return new ProductScreenRecord(this); // Override this if you need more</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7598">
		<LastChanged>2012-02-01T19:02:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;
// Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_ID)).syncReference(this.getHeaderRecord());
// Sub file stuff
this.getMainRecord().setKeyArea(ProductSearchDetail.PRODUCT_ID_KEY);
Product recProduct = (Product)this.getHeaderRecord();
ProductType recProductType = (ProductType)((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_TYPE_ID)).getReferenceRecord();
int iProductTypeID = recProductType.getProductTypeID(recProduct);
this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_TYPE_ID).setValue(iProductTypeID);
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord().getField(Product.ID), ProductSearchDetail.PRODUCT_ID, this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_TYPE_ID), ProductSearchDetail.PRODUCT_TYPE_ID, this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_SEARCH_TYPE_ID), ProductSearchDetail.PRODUCT_SEARCH_TYPE_ID));

if (Boolean.TRUE.toString().equalsIgnoreCase(this.getProperty(this.getScreenRecord().getField(ProductScreenRecord.READ_ONLY).getFieldName())))
{
    this.setAppending(false);
    this.setEditing(false);
}

this.addProductTypeFilter((ReferenceField)this.getRecord(ProductSearchDetail.PRODUCT_SEARCH_DETAIL_FILE).getField(ProductSearchDetail.PRODUCT_SEARCH_TYPE_ID));    
SPopupBox control = (SPopupBox)this.getRecord(ProductSearchDetail.PRODUCT_SEARCH_DETAIL_FILE).getField(ProductSearchDetail.PRODUCT_SEARCH_TYPE_ID).getComponent(0);
control.reSelectRecords();
this.getRecord(ProductSearchDetail.PRODUCT_SEARCH_DETAIL_FILE).getField(ProductSearchDetail.PRODUCT_SEARCH_TYPE_ID).addListener(new InitFieldHandler(this.getScreenRecord().getField(ProductScreenRecord.PRODUCT_SEARCH_TYPE_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7599">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailScreen</MethodClassName>
		<LogicSource>return new ProductSearchDetail(this); // Never</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7600">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchCategoryField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.makeReferenceRecord();
return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, ProductSearchCategory.PRODUCT_SEARCH_TYPE_ID_KEY, ProductSearchCategory.DESCRIPTION, true, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7601">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addProductTypeFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>ReferenceField field</MethodInterface>
		<MethodClassName>ProductSearchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record recProductSearchType = field.getReferenceRecord();
String strProductType = this.getHeaderRecord().getTableNames(false);
BaseField fldToCheck = recProductSearchType.getField(strProductType);
BaseField fldToCompare = new BooleanField(null, "TrueField", -1, null, null);
fldToCompare.setState(true);
recProductSearchType.addListener(new FreeOnFreeHandler(fldToCompare));
recProductSearchType.addListener(new CompareFileFilter(fldToCheck, fldToCompare, DBConstants.EQUALS));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7602">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetail</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(ProductSearchDetail.PRODUCT_ID).addListener(new SetProductTypeHandler(this.getField(ProductSearchDetail.PRODUCT_TYPE_ID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7603">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SetProductTypeHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField fldProductType</MethodInterface>
		<MethodClassName>SetProductTypeHandler</MethodClassName>
		<LogicSource><![CDATA[m_fldProductType = fldProductType;
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7604">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetProductTypeHandler</MethodClassName>
		<LogicSource><![CDATA[if (!this.getOwner().isNull())
{
    Product recProduct = (Product)((ReferenceField)this.getOwner()).getReferenceRecord();
    ProductType recProductType = (ProductType)((ReferenceField)m_fldProductType).getReferenceRecord();
    if ((recProduct != null) && (recProductType != null))
    {
        int iProductType = recProductType.getProductTypeID(recProduct);
        m_fldProductType.setValue(iProductType, bDisplayOption, iMoveMode);
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7605">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[Record recProductSearchDetail = this.getMainRecord();
String strProductType = this.getProperty(Product.PRODUCT_FILE);
if (strProductType == null)
{
    Record recProductType = ((ReferenceField)recProductSearchDetail.getField(ProductSearchDetail.PRODUCT_TYPE_ID)).getReference();
    strProductType = recProductType.getField(ProductType.DESCRIPTION).toString();
}
Product recProduct = Product.getProductRecord(strProductType, this);
return recProduct;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7606">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record recProductSearchDetail = this.getMainRecord();
String strProductType = this.getProperty(Product.PRODUCT_FILE);
if (strProductType == null)
{
    Record recProductType = ((ReferenceField)recProductSearchDetail.getField(ProductSearchDetail.PRODUCT_TYPE_ID)).getReference();
    strProductType = recProductType.getField(ProductType.DESCRIPTION).toString();
}
Product recProduct = Product.getProductRecord(strProductType, this);
return recProduct;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7607">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailScreen</MethodClassName>
		<LogicSource><![CDATA[String strURL = super;
strURL = Utility.addURLParam(strURL, Product.PRODUCT_FILE, this.getHeaderRecord().getTableNames(false));
return strURL;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7608">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductSearchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strURL = super;
strURL = Utility.addURLParam(strURL, Product.PRODUCT_FILE, this.getHeaderRecord().getTableNames(false));
return strURL;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7614">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetDepreciationScreen</MethodClassName>
		<LogicSource>return new Asset(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7615">
		<LastChanged>2012-01-23T08:57:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AssetDepreciationScreen</MethodClassName>
		<LogicSource>return new AssetHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7616">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconPostScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.POST, MenuConstants.POST, MenuConstants.POST, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7617">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconPostScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setProperty("swingResizeHack", DBConstants.TRUE); // Swing doesn't layout this screen correctly]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7618">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankReconPostScreen</MethodClassName>
		<LogicSource><![CDATA[this.setProperty("swingResizeHack", null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7619">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
{	// This is special logic to write the current empty record (with the default account id) first
    if (this.getMainRecord().getEditMode() == DBConstants.EDIT_ADD)
    {
        if (this.getMainRecord().getField(BankTrxBatch.BANK_ACCT_ID).isNull())
            return false;
        if (this.getScreenFieldView().getSelectedRow() == -1)
            return false;
        try {
            this.getMainRecord().getField(BankTrxBatch.BANK_ACCT_ID).setModified(true);
            this.getMainRecord().writeAndRefresh();
        } catch (DBException e) {
            e.printStackTrace();
        }
    }
}
else if (strCommand.equalsIgnoreCase(MenuConstants.POST))
{
    if (this.getMainRecord().getEditMode() == DBConstants.EDIT_ADD)
        return false;   // No entry or new entry;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7620">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BankTrxBatchScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
{ // This is special logic to write the current empty record (with the default account id) first
    if (this.getMainRecord().getEditMode() == DBConstants.EDIT_ADD)
    {
        if (this.getMainRecord().getField(BankTrxBatch.BANK_ACCT_ID).isNull())
            return false;
        try {
            this.getMainRecord().getField(BankTrxBatch.BANK_ACCT_ID).setModified(true);
            this.getMainRecord().writeAndRefresh();
        } catch (DBException e) {
            e.printStackTrace();
        }
    }
}
else if (strCommand.equalsIgnoreCase(MenuConstants.POST))
{
    if (this.getMainRecord().getEditMode() == DBConstants.EDIT_ADD)
        return false;   // No entry or new entry;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7621">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
{ // This is special logic to write the current empty record (with the default account id) first
    if (this.getMainRecord().getEditMode() == DBConstants.EDIT_ADD)
    {
        if (this.getMainRecord().getField(CashBatch.BANK_ACCT_ID).isNull())
            return false;
        try {
            this.getMainRecord().getField(CashBatch.BANK_ACCT_ID).setModified(true);
            this.getMainRecord().writeAndRefresh();
        } catch (DBException e) {
            e.printStackTrace();
        }
    }
}
else if (strCommand.equalsIgnoreCase(MenuConstants.POST))
{
    if (this.getMainRecord().getEditMode() == DBConstants.EDIT_ADD)
        return false;   // No entry or new entry;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7622">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CashBatchGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
{	// This is special logic to write the current empty record (with the default account id) first
    if (this.getMainRecord().getEditMode() == DBConstants.EDIT_ADD)
    {
        if (this.getMainRecord().getField(CashBatch.BANK_ACCT_ID).isNull())
            return false;
        if (this.getScreenFieldView().getSelectedRow() == -1)
            return false;
        try {
            this.getMainRecord().getField(CashBatch.BANK_ACCT_ID).setModified(true);
            this.getMainRecord().writeAndRefresh();
        } catch (DBException e) {
            e.printStackTrace();
        }
    }
}
else if (strCommand.equalsIgnoreCase(MenuConstants.POST))
{
    if (this.getMainRecord().getEditMode() == DBConstants.EDIT_ADD)
        return false;   // No entry or new entry;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7623">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (LinkTrx.SOURCE.equalsIgnoreCase(strCommand))
{
    try   {
        int iSelection = this.getScreenFieldView().getSelectedRow();
        if (iSelection != -1)
        {
            this.finalizeThisScreen();  // Validate current control, update record, get ready to close screen.
            LinkTrx recAtTarget = (LinkTrx)((GridTable)this.getMainRecord().getTable()).get(iSelection);
            if (recAtTarget != null)
                strCommand = recAtTarget.getSourceCommand();
        }
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7624">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxScreen</MethodClassName>
		<LogicSource><![CDATA[if (LinkTrx.SOURCE.equalsIgnoreCase(strCommand))
{
    LinkTrx recLinkTrx = (LinkTrx)this.getMainRecord();
    strCommand = recLinkTrx.getSourceCommand();
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7625">
		<LastChanged>2012-06-17T00:03:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseTrxPostScreen</MethodClassName>
		<LogicSource><![CDATA[super;

Record recTrxStatusRef = ((ReferenceField)this.getBaseTrx().getField(Trx.TRX_STATUS_ID)).getReferenceRecord(); // Make sure this TrxStatus is different from the one I use for a key.
this.removeRecord(recTrxStatusRef);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7626">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getDatabaseType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourLookupQuery</MethodClassName>
		<LogicSource><![CDATA[return DBConstants.MANUAL_QUERY;	// Since Tour and TourHeader are in different databases]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7628">
		<LastChanged>2012-02-01T08:27:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourClassHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(TourClassScreenRecord.TOUR_CLASS_ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7629">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleGridScreen</MethodClassName>
		<LogicSource>return new TourClassScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7630">
		<LastChanged>2012-02-01T19:02:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(TourClassScreenRecord.TOUR_CLASS_ID).moveFieldToThis(this.getHeaderRecord().getField(TourClass.ID));
((ReferenceField)this.getScreenRecord().getField(TourClassScreenRecord.TOUR_CLASS_ID)).setReferenceRecord(this.getHeaderRecord());
this.getScreenRecord().getField(TourClassScreenRecord.TOUR_CLASS_ID).addListener(new ReadSecondaryHandler(((ReferenceField)this.getScreenRecord().getField(TourClassScreenRecord.TOUR_CLASS_ID)).getReferenceRecord()));
if (this.getHeaderRecord().getField(TourClass.ID).isNull())
    this.getScreenRecord().getField(TourClassScreenRecord.TOUR_CLASS_ID).moveFieldToThis(this.getRecord(BookingControl.BOOKING_CONTROL_FILE).getField(BookingControl.TOUR_CLASS_ID));

this.getScreenRecord().getField(TourClassScreenRecord.TOUR_CLASS_ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7631">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new BookingControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7632">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new BookingControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7633">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourEventScheduleScreen</MethodClassName>
		<LogicSource>return new TourClassScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7634">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BrokerDistScreen</MethodClassName>
		<LogicSource>return new Vendor(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7635">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateNonTourInvoiceHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iErrorCode == DBConstants.NORMAL_RETURN)
    if ((iChangeType == DBConstants.AFTER_UPDATE_TYPE)
        || (iChangeType == DBConstants.AFTER_ADD_TYPE))
{
    try {
        this.getOwner().setHandle(this.getOwner().getHandle(DBConstants.DATA_SOURCE_HANDLE), DBConstants.DATA_SOURCE_HANDLE);
        this.getOwner().edit();
        this.getOwner().getField(ApTrx.ACCOUNT_ID).moveFieldToThis(this.getCrAccount());
        this.getOwner().set();
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7636">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctDetail</MethodClassName>
		<LogicSource><![CDATA[super;
// Make sure amount is added on merge
this.getField(AcctDetail.AMOUNT_LOCAL).addListener(new MergeDataAddHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7644">
		<LastChanged>2012-04-02T22:22:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doMergeData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseDataStatusField</MethodClassName>
		<LogicSource><![CDATA[if (objData instanceof Integer) // Always
    if (((Integer)objData).intValue() == BaseStatus.DATA_REQUIRED)
    {
        if (this.getRecord() instanceof BookingDetailModel)
        {
            BookingDetailModel recBookingDetail = (BookingDetailModel)this.getRecord();
            for (int iStatusType = 0; iStatusType < recBookingDetail.getFieldCount(); iStatusType++)
            {
                if (recBookingDetail.getField(iStatusType) == this)
                {
                    if (recBookingDetail.checkRequiredParams(this.getFieldName()) == null) // Possible that the data is okay now, check it.
                    {   // If I say data required, but the refresh says something else, use the refresh status and recheck the data
                        recBookingDetail.getField(iStatusType + BookingDetailModel.MESSAGE_REQUEST_OFFSET).setState(true);
                        return DBConstants.NORMAL_RETURN;
                    }
                    break;
                }
            }
        }
    }
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7645">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequestMessage</MethodClassName>
		<LogicSource><![CDATA[super.init(messageHeader, data);
if (messageHeader != null)
    ((TrxMessageHeader)messageHeader).put(TrxMessageHeader.MESSAGE_PROCESSOR_CLASS, HotelRateRequestMessageOutProcessor.class.getName());    // From the hotel file
//this.getMap().put(TrxMessageHeader.MESSAGE_CODE, HotelRateRequestMessageOutProcessor.MESSAGE_CODE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7646">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequestMessage</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7647">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RecordMapTrxMessage</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7648">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addRecordProperty</MethodName>
		<LogicDescription>Utility method to add the data in this screen field to this key in the property object</LogicDescription>
		<MethodReturns/>
		<MethodInterface>String strKey, Record record, int iFieldSeq</MethodInterface>
		<MethodClassName>RecordMapTrxMessage</MethodClassName>
		<LogicSource>this.put(strKey, record.getField(iFieldSeq).getData());</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7649">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingStatusGridScreen</MethodClassName>
		<LogicSource>return new BookingStatus(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7650">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingStatusGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7651">
		<LastChanged>2012-04-06T22:58:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductField</MethodClassName>
		<LogicSource><![CDATA[if (m_recordReference == null)
    if (this.getRecord() instanceof BookingDetailModel)
{
    ProductTypeField fldProductType = (ProductTypeField)this.getRecord().getField(BookingDetailModel.PRODUCT_TYPE_ID);
    ProductType recProductType = (ProductType)fldProductType.getReference();
    String strProductType = recProductType.getField(ProductType.DESCRIPTION).toString();
    if ("Tour".equalsIgnoreCase(strProductType))
        strProductType = "TourHeader";
    if (recProductType != null)
        return Product.getProductRecord(strProductType, recordOwner);
}
return super;	// Return current reference]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7652">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>logic</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>nothing</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7653">
		<LastChanged>2012-03-28T23:02:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CheckBookingStatusHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BookingModel recBooking</MethodInterface>
		<MethodClassName>CheckBookingStatusHandler</MethodClassName>
		<LogicSource>m_recBooking = recBooking;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7654">
		<LastChanged>2012-03-29T09:49:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckBookingStatusHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_ADD_TYPE) || (iChangeType == DBConstants.AFTER_UPDATE_TYPE))
{	// Has to be 'after' since I use the same ArTrx file.
	if ((m_recBooking.getEditMode() == DBConstants.EDIT_CURRENT) || (m_recBooking.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
	{
        Record recBookingStatus = ((ReferenceField)m_recBooking.getField(BookingModel.BOOKING_STATUS_ID)).getReference();
        if ((BookingStatusModel.NO_STATUS_CODE.equalsIgnoreCase(recBookingStatus.getField(BookingStatusModel.CODE).toString()))
                || (BookingStatusModel.PROPOSAL_CODE.equalsIgnoreCase(recBookingStatus.getField(BookingStatusModel.CODE).toString())))
        {
    		if (!this.getOwner().getField(ArTrx.TRX_STATUS_ID).isNull())
    			if (!ArTrx.INVOICE.equalsIgnoreCase(((TrxStatusField)this.getOwner().getField(ArTrx.TRX_STATUS_ID)).getReference().getField(TrxStatus.DESC_CODE).toString()))
        			if (!ArTrx.INVOICE_MODIFICATION.equalsIgnoreCase(((TrxStatusField)this.getOwner().getField(ArTrx.TRX_STATUS_ID)).getReference().getField(TrxStatus.DESC_CODE).toString()))
    					if (this.getOwner().getField(ArTrx.AMOUNT).getValue() < 0)
    					{
    						if (m_recBooking.getEditMode() == DBConstants.EDIT_CURRENT)
    						{
    							if ((m_recBooking.getOpenMode() & DBConstants.OPEN_READ_ONLY) != 0)
    								m_recBooking.setOpenMode(m_recBooking.getOpenMode() & ~DBConstants.OPEN_READ_ONLY);
    							try {
									m_recBooking.getTable().edit();
								} catch (DBException e) {
									e.printStackTrace();
								}
    						}
    						int iAcceptedID = ((ReferenceField)m_recBooking.getField(BookingModel.BOOKING_STATUS_ID)).getIDFromCode(BookingStatusModel.ACCEPTED_CODE);
    						if (iAcceptedID > 0)
    							m_recBooking.getField(BookingModel.BOOKING_STATUS_ID).setValue(iAcceptedID);
    					}
        }
	}
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7655">
		<LastChanged>2012-04-06T08:46:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,101</Sequence>
		<MethodName>getErrorMessage</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String iStatusType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>return ((PropertiesField)this.getField(BookingDetail.ERROR_PROPERTIES)).getProperty(this.getFieldParam(this.getField(iStatusType)) + '.' + BookingDetail.MESSAGE_PARAM + '.' + BookingDetail.ERROR_PARAM);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>5</IncludeScope>
	</LogicFile>
	<LogicFile ID="7656">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingArTrxScreen</MethodClassName>
		<LogicSource><![CDATA[parentScreen.setProperty(BookingScreenHandler.SUB_SCREEN_PARAM, Integer.toString(BookingScreenHandler.AR_TRX_SCREEN));
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7657">
		<LastChanged>2012-02-01T14:22:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>getKeyFromRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Record recBookingDetail, String iFieldSeq</MethodInterface>
		<MethodClassName>TourStatusSummaryField</MethodClassName>
		<LogicSource><![CDATA[String bookmark = recBookingDetail.getCounterField().toString();
BaseField fieldTarget = recBookingDetail.getField(iFieldSeq);
String strFieldType = fieldTarget.getFieldName();
if ((bookmark == null) || (bookmark.length() == 0))
    bookmark = recBookingDetail.getLastModified(DBConstants.BOOKMARK_HANDLE).toString();
String strKey = strFieldType + '.' + bookmark;
return strKey;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7658">
		<LastChanged>2012-02-01T14:22:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>140</Sequence>
		<MethodName>getValueFromRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Record recBookingDetail, String iFieldSeq, int iChangeType</MethodInterface>
		<MethodClassName>TourStatusSummaryField</MethodClassName>
		<LogicSource><![CDATA[BaseField fieldTarget = recBookingDetail.getField(iFieldSeq);
String strValue = fieldTarget.toString();
if (iChangeType == DBConstants.AFTER_DELETE_TYPE)
    strValue = DELETED_VALUE;
String strLastChanged = null;
if (!recBookingDetail.getField(BookingDetail.LAST_CHANGED).isNull())
    strLastChanged = Long.toString((long)recBookingDetail.getField(BookingDetail.LAST_CHANGED).getValue());
if ((strValue != null) && (strLastChanged != null))
    strValue = strValue + "," + strLastChanged;
return strValue;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7659">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>320</Sequence>
		<MethodName>getIDFromKey</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>TourStatusSummaryField</MethodClassName>
		<LogicSource><![CDATA[if (strKey.indexOf('.') != -1)
    return strKey.substring(strKey.indexOf('.') + 1);
return strKey;  // Never]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7660">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>340</Sequence>
		<MethodName>getStatusFromKey</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>TourStatusSummaryField</MethodClassName>
		<LogicSource><![CDATA[if (strKey.indexOf('.') != -1)
    return strKey.substring(0, strKey.indexOf('.'));
return strKey;  // Never]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7661">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[super;

this.getField(Booking.NET).addListener(new MergeDataAddHandler(null));
this.getField(Booking.COMMISSION).addListener(new MergeDataAddHandler(null));
this.getField(Booking.GROSS).addListener(new MergeDataAddHandler(null));
this.getField(Booking.BALANCE).addListener(new MergeDataAddHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7662">
		<LastChanged>2012-03-29T08:07:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCancelledEventHandler</MethodClassName>
		<LogicSource><![CDATA[if (this.getOwner().getState() == true)
{
    Booking recBooking = (Booking)this.getOwner().getRecord();
    ArTrx recArTrx = (ArTrx)recBooking.addArDetail(null, null, true);
    if (recBooking.getField(Booking.BALANCE).getValue() != recBooking.getField(Booking.NET).getValue())
    {   // Create a cancellation charge
        Tour recTour = (Tour)((ReferenceField)recBooking.getField(Booking.TOUR_ID)).getReference();
        if (recTour != null)
            if ((recTour.getEditMode() == DBConstants.EDIT_CURRENT) || (recTour.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
        {
            Record recTourHeader = ((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReference();
            if (recTourHeader != null)
                if ((recTourHeader.getEditMode() == DBConstants.EDIT_CURRENT) || (recTourHeader.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
            {
                Record recTourClass = ((ReferenceField)recTourHeader.getField(TourHeader.TOUR_CLASS_ID)).getReference();
                if (recTourClass != null)
                    if ((recTourClass.getEditMode() == DBConstants.EDIT_CURRENT) || (recTourClass.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
                {
                    double dCancellationCharge = recTourClass.getField(TourClass.CANCEL_CHARGE).getValue();
                    double dAmountPaid = recBooking.getField(Booking.NET).getValue() - recBooking.getField(Booking.BALANCE).getValue();
                    dCancellationCharge = Math.min(dCancellationCharge, dAmountPaid);
                    try {
                        TrxStatus recTrxStatus = (TrxStatus)((ReferenceField)recArTrx.getField(ArTrx.TRX_STATUS_ID)).getReferenceRecord();
                        int iInvoiceModification = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.INVOICE_MODIFICATION);
                        int iRefundPendingTrxStatus = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.REFUND_SUBMITTED);
                        int iCancelTrxStatus = recTrxStatus.getTrxStatusID(TransactionType.ACCTREC, ArTrx.AR_TRX_FILE, ArTrx.CANCELLATION_CHARGE);
                        double dDate = DateTimeField.currentTime();
                        
                        // Cancel all charges
                        recArTrx.addNew();
                        recArTrx.getField(ArTrx.AMOUNT).setValue(-recBooking.getField(Booking.NET).getValue());
                        ((DateTimeField)recArTrx.getField(ArTrx.TRX_DATE)).setValue(dDate);
                        recArTrx.getField(ArTrx.TRX_STATUS_ID).setValue(iInvoiceModification);
                        recArTrx.getField(ArTrx.COMMENTS).moveFieldToThis(((ReferenceField)recArTrx.getField(ArTrx.TRX_STATUS_ID)).getReference().getField(TrxStatus.STATUS_DESC));
                        recArTrx.add();
                        // Add cancellation charge
                        if (dCancellationCharge > 0)
                        {
                            boolean bOldState = recArTrx.getListener(UpdateArTrxAcctDetailHandler.class, true).setEnabledListener(false);    // Since I will be doing the updating
                            recArTrx.addListener(new UpdateCancelationAcctDetailHandler(recBooking));
                            recArTrx.addNew();
                            recArTrx.getField(ArTrx.AMOUNT).setValue(dCancellationCharge);
                            dDate = dDate + 1000;   // One second later
                            ((DateTimeField)recArTrx.getField(ArTrx.TRX_DATE)).setValue(dDate);
                            recArTrx.getField(ArTrx.TRX_STATUS_ID).setValue(iCancelTrxStatus);
                            recArTrx.getField(ArTrx.COMMENTS).moveFieldToThis(((ReferenceField)recArTrx.getField(ArTrx.TRX_STATUS_ID)).getReference().getField(TrxStatus.STATUS_DESC));
                            recArTrx.add();
                            recArTrx.removeListener(recArTrx.getListener(UpdateCancelationAcctDetailHandler.class), true);
                            recArTrx.getListener(UpdateArTrxAcctDetailHandler.class, true).setEnabledListener(bOldState);
                        }
                        // Setup refund
                        double dRefund = Math.floor((dAmountPaid - dCancellationCharge) * 100 + 0.5) / 100;
                        if (dRefund > 0)
                        {
                            boolean bOldState = recArTrx.getListener(UpdateArTrxAcctDetailHandler.class, true).setEnabledListener(false);    // Since I will be doing the updating
                            recArTrx.addListener(new UpdateRefundAcctDetailHandler(recBooking));
                            recArTrx.addNew();
                            recArTrx.getField(ArTrx.AMOUNT).setValue(dRefund);
                            dDate = dDate + 1000;   // One second later
                            ((DateTimeField)recArTrx.getField(ArTrx.TRX_DATE)).setValue(dDate);
                            recArTrx.getField(ArTrx.TRX_STATUS_ID).setValue(iRefundPendingTrxStatus);
                            recArTrx.getField(ArTrx.COMMENTS).moveFieldToThis(((ReferenceField)recArTrx.getField(ArTrx.TRX_STATUS_ID)).getReference().getField(TrxStatus.STATUS_DESC));
                            recArTrx.add();
                            recArTrx.removeListener(recArTrx.getListener(UpdateRefundAcctDetailHandler.class), true);
                            recArTrx.getListener(UpdateArTrxAcctDetailHandler.class, true).setEnabledListener(bOldState);
                        }
                    } catch (DBException ex) {
                        ex.printStackTrace();
                    }
                }
            }
            
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7663">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BookingCancelledEventHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingCancelledEventHandler</MethodClassName>
		<LogicSource><![CDATA[super;

this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7664">
		<LastChanged>2012-04-12T22:09:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getCrAccount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateCancelationAcctDetailHandler</MethodClassName>
		<LogicSource>return (ReferenceField)this.getProductCategory().getField(ProductCategoryModel.XL_CHG_ACCOUNT_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7665">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UpdateCancelationAcctDetailHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>recBooking</MethodReturns>
		<MethodInterface>Record recBooking</MethodInterface>
		<MethodClassName>UpdateCancelationAcctDetailHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7666">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>71</Sequence>
		<MethodName>getStartDate</MethodName>
		<LogicDescription/>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource><![CDATA[Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
if (recTour != null)
    return ((DateTimeField)recTour.getField(Tour.DEPARTURE_DATE)).getDateTime();
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7667">
		<LastChanged>2012-01-31T10:43:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>72</Sequence>
		<MethodName>getSelectDate</MethodName>
		<LogicDescription/>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BookingCalendar</MethodClassName>
		<LogicSource><![CDATA[Tour recTour = (Tour)this.getRecord(Tour.TOUR_FILE);
if (recTour != null)
    return ((DateTimeField)recTour.getField(Tour.DEPARTURE_DATE)).getDateTime();
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7668">
		<LastChanged>2012-02-01T08:27:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>9,000</Sequence>
		<MethodName>setSyncFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String iSyncedSourceFieldSeq, String iSyncedDestFieldSeq</MethodInterface>
		<MethodClassName>ProductMessageData</MethodClassName>
		<LogicSource><![CDATA[m_iSyncedSourceFieldSeq = iSyncedSourceFieldSeq;
m_iSyncedDestFieldSeq = iSyncedDestFieldSeq;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7669">
		<LastChanged>2012-04-11T16:00:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>HotelRateAvailRequest</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateAvailRequest</MethodClassName>
		<LogicSource><![CDATA[super;
((ProductMessageData)this.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE)).setSyncFields(BookingDetailModel.INVENTORY_STATUS_ID, BookingDetailModel.COST_STATUS_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7670">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createProductResponseMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateAvailResponse</MethodClassName>
		<LogicSource>return new HotelRateAvailResponseMessageData(this, PRODUCT_RESPONSE_MESSAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7671">
		<LastChanged>2012-04-11T00:10:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateAvailResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMessageFieldDesc(ProductModel.AVAILABILITY_PARAM, Integer.class, MessageFieldDesc.REQUIRED, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7672">
		<LastChanged>2012-06-13T14:10:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>getSFieldCount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductReportDetail</MethodClassName>
		<LogicSource><![CDATA[int iFieldCount = super;
Record recBookingDetail = this.getRecord(BookingDetail.BOOKING_DETAIL_FILE);
if (recBookingDetail != null)
    if ((recBookingDetail.getEditMode() == DBConstants.EDIT_CURRENT) || (recBookingDetail.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
{
    BaseTable currentTable = recBookingDetail.getTable().getCurrentTable();
    if (currentTable == null)
        currentTable = recBookingDetail.getTable();    // First time only
    recBookingDetail = currentTable.getRecord();
    Record recProduct = ((ReferenceField)recBookingDetail.getField(BookingDetail.PRODUCT_ID)).getReferenceRecord();
    if (recProduct != null)
    {
        //iFieldCount = iFieldCount - (recProduct.getFieldSeq(Hotel.MEAL_PLAN_DAYS_PARAM) + 1) + recProduct.getFieldCount();
        if ((DBConstants.TRUE.equalsIgnoreCase(this.getProperty(City.CITY_FILE))) || (DBConstants.YES.equalsIgnoreCase(this.getProperty(City.CITY_FILE))))
        {
            Record recCity = this.getRecord(City.CITY_FILE);
            ((ReferenceField)recProduct.getField(Product.CITY_ID)).setReferenceRecord(recCity);
            ((ReferenceField)recProduct.getField(Product.CITY_ID)).getReference();
            ((ReferenceField)recProduct.getField(Product.CITY_ID)).setReferenceRecord(null);
            Record recCity2 = this.getRecord("To" + City.CITY_FILE);
            try {
                recCity2.addNew();
            } catch (DBException e) {
                e.printStackTrace();
            }
            if (recProduct instanceof TransportProduct)
            {
                recCity2.setTableNames(City.CITY_FILE);
                ((ReferenceField)recProduct.getField(TransportProduct.TO_CITY_ID)).setReferenceRecord(recCity2);
                ((ReferenceField)recProduct.getField(TransportProduct.TO_CITY_ID)).getReference();
                ((ReferenceField)recProduct.getField(TransportProduct.TO_CITY_ID)).setReferenceRecord(null);                   
                recCity2.setTableNames("To" + recCity2.getTableNames(false));
            }
        }
        if ((DBConstants.TRUE.equalsIgnoreCase(this.getProperty(Vendor.VENDOR_FILE))) || (DBConstants.YES.equalsIgnoreCase(this.getProperty(Vendor.VENDOR_FILE))))
        {
            Record recVendor = this.getRecord(Vendor.VENDOR_FILE);
            ((ReferenceField)recProduct.getField(Product.VENDOR_ID)).setReferenceRecord(recVendor);
            ((ReferenceField)recProduct.getField(Product.VENDOR_ID)).getReference();
            ((ReferenceField)recProduct.getField(Product.VENDOR_ID)).setReferenceRecord(null);
        }
    }
}
return iFieldCount;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7673">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProductReportDetail</MethodClassName>
		<LogicSource><![CDATA[super;
new Vendor(this);
new City(this);
City record = new City(this);
try {
    record.hasNext();   // Make sure this is open before I change the name.
} catch (DBException e) {
    e.printStackTrace();
}
record.setTableNames("To" + record.getTableNames(false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7674">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getRequestType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ItemBookingRequest</MethodClassName>
		<LogicSource>return RequestType.BOOKING_ADD;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7675">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>checkSecurity</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getProperty(DBParams.HELP) != null)
    return DBConstants.NORMAL_RETURN;	// Make sure I don't get a login required if this is a help (menu) screen.
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7676">
		<LastChanged>2012-01-31T10:43:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,000</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Booking</MethodClassName>
		<LogicSource><![CDATA[if ("addTourDetail".equalsIgnoreCase(strCommand))
{
	Object objID = properties.get(TourHeader.TOUR_HEADER_FILE);
	if (objID instanceof Integer)
	{	// Always
		Tour recTour = (Tour)((ReferenceField)this.getField(Booking.TOUR_ID)).getReference();
		TourHeader recTourHeader = (TourHeader)((ReferenceField)recTour.getField(Tour.TOUR_HEADER_ID)).getReferenceRecord(this.findRecordOwner());
		try {
			recTourHeader.addNew();
			recTourHeader.setKeyArea(Tour.ID_KEY);
			recTourHeader.getCounterField().setData(objID);
			if (recTourHeader.seek(DBConstants.EQUALS))
			{
				Date dateStart = (Date)properties.get(recTour.getField(Tour.DEPARTURE_DATE).getFieldName());
			    BookingAnswer recBookingAnswer = null;  // This causes addTourDetail to resolve the answers automatically
			    BookingPax recBookingPax = null;
			    int iErrorCode = this.addTourDetail(recTour, recTourHeader, recBookingPax, recBookingAnswer, dateStart, this.getField(Booking.ASK_FOR_ANSWER));
				return new Integer(iErrorCode);	// Success
			}
		} catch (DBException e) {
			e.printStackTrace();
		} finally {
			recTour.free();
			recTourHeader.free();
		}
	}
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7677">
		<LastChanged>2012-03-26T10:08:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>makeLinkTrxScreen</MethodName>
		<LogicDescription/>
		<MethodReturns>ScreenParent</MethodReturns>
		<MethodInterface>ScreenLoc itsLocation, ComponentParent parentScreen, int iDocMode, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>TrxDesc</MethodClassName>
		<LogicSource><![CDATA[Record record = this.makeSourceRecord(this.findRecordOwner());

ScreenParent screen = record.makeScreen(itsLocation, parentScreen, iDocMode, properties);

return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7678">
		<LastChanged>2012-01-31T10:43:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>makeSourceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>RecordOwner recordOwner</MethodInterface>
		<MethodClassName>TrxDesc</MethodClassName>
		<LogicSource><![CDATA[String strClassName = this.getField(TrxDesc.SOURCE_FILE).toString();
return Record.makeRecordFromClassName(strClassName, recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7679">
		<LastChanged>2012-01-31T10:43:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addPaxDetail</MethodName>
		<LogicDescription>Add these booking passengers to the profile.</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Record recBookingPax, Record recProfile</MethodInterface>
		<MethodClassName>BookingPax</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
int iOldOpenMode = recProfile.getOpenMode();
recProfile.setOpenMode(iOldOpenMode & ~DBConstants.OPEN_READ_ONLY);
if (!(recBookingPax.getTable() instanceof GridTable))
	{new GridTable(null, recBookingPax);}	// Never (just being careful)

try
{
    Object bookmarkMain = null;
    for (int i = 0; ; i++)
    {
        recBookingPax = (Record)recBookingPax.getTable().get(i);
        if (recBookingPax == null)
        	break;
        if (!recBookingPax.getField(BookingPax.PROFILE_ID).isNull())
        {
        	if (bookmarkMain == null)
        	{
        		recProfile = ((ReferenceField)recBookingPax.getField(BookingPax.PROFILE_ID)).getReference();
        		if (recProfile != null)
        			bookmarkMain = recProfile.getField(Profile.MAIN_PROFILE_ID).getData();
        	}
        	continue;
        }

        recProfile.addNew();
        recProfile.getField(Profile.NAME_PREFIX).moveFieldToThis(recBookingPax.getField(BookingPax.NAME_PREFIX));
        recProfile.getField(Profile.NAME_FIRST).moveFieldToThis(recBookingPax.getField(BookingPax.FIRST_NAME));
        recProfile.getField(Profile.NAME_MIDDLE).moveFieldToThis(recBookingPax.getField(BookingPax.MIDDLE_NAME));
        recProfile.getField(Profile.NAME_SUR).moveFieldToThis(recBookingPax.getField(BookingPax.SUR_NAME));
        recProfile.getField(Profile.SMOKER).moveFieldToThis(recBookingPax.getField(BookingPax.SMOKER));
        recProfile.getField(Profile.MAIN_PROFILE_ID).setData(bookmarkMain);
        recProfile.add();

        Object bookmark = recProfile.getLastModified(DBConstants.BOOKMARK_HANDLE);
        if (bookmarkMain == null)
        {
            bookmarkMain = bookmark;
            if (recProfile.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE) != null)    // always
            {
                recProfile.edit();
                recProfile.getField(Profile.MAIN_PROFILE_ID).setData(bookmarkMain);
                recProfile.set();
            }
        }

        recBookingPax.edit();
        recBookingPax.getField(BookingPax.PROFILE_ID).setData(bookmark);
        recBookingPax.set();
    }
    if (bookmarkMain != null) // Return the main profile entry
        recProfile.setHandle(bookmarkMain, DBConstants.BOOKMARK_HANDLE);
} catch (DBException ex) {
    iErrorCode = ex.getErrorCode();
} finally {
    recProfile.setOpenMode(iOldOpenMode);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7683">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestJibxMessageOut2014B</MethodClassName>
		<LogicSource><![CDATA[BaseMessage message = this.getMessage();
String strMessage = message.getString(PingRequestMessageInProcessor.MESSAGE_PARAM);
	
PingRQ root = new PingRQ();
root.setEchoData(strMessage);

OTAPayloadStdAttributes payloadStdAttributes = new OTAPayloadStdAttributes();
this.setPayloadProperties(message, payloadStdAttributes);
root.setPayloadStdAttributes(payloadStdAttributes);

return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7684">
		<LastChanged>2012-05-29T16:41:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingResponseJibxMessageIn2014B</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof PingRS)
{       // Always
    PingRS msg = (PingRS)root;
    java.util.List<PingRS.Sequence> list = msg.getSuccessList();
    Errors errors = msg.getErrors();
    String messageText = null;
    String errorMessage = null;
    boolean bSuccess = true;    // Who uses this?
    for (PingRS.Sequence data : list)
    {
        Success success = data.getSuccess();
        if (success != null)
            bSuccess = true;
        messageText = data.getEchoData();
    }
    if (errors != null)
    for (_Error error : errors.getErrorList())
    {
        errorMessage = error.getString();
    }
    
    BaseMessage message = this.getMessage();
    message.put(PingRequestMessageInProcessor.MESSAGE_PARAM, messageText);
    
    OTAPayloadStdAttributes payloadStdAttributes = msg.getPayloadStdAttributes();
    this.addPayloadProperties(payloadStdAttributes, message);
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7685">
		<LastChanged>2012-05-29T16:42:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingResponseJibxMessageOut2014B</MethodClassName>
		<LogicSource><![CDATA[BaseMessage message = this.getMessage();
String strMessage = message.getString(PingRequestMessageInProcessor.MESSAGE_PARAM);

PingRS root = new PingRS();
if (strMessage != null)
{
    PingRS.Sequence item = new PingRS.Sequence();
    item.setSuccess(new Success());
    item.setEchoData(strMessage);
    root.addSuccess(item);
}
else
{
    String strErrorMessage = null;
    if (message.getMessageDataDesc(null) instanceof BaseProductResponse)
    {   // Always
        BaseProductResponse productResponse = (BaseProductResponse)message.getMessageDataDesc(null);
        if (productResponse.getMessageDataStatus() == MessageDataDesc.ERROR)
        {   // Always
            strErrorMessage = productResponse.getMessageDataError();
        }
    }
    if (strErrorMessage == null)
        strErrorMessage = "Error - No data to PING";

    Errors errors = new Errors();
    _Error item = new _Error();
    item.setType("1");
    item.setString(strErrorMessage);
    item.setLanguage("en");    // TODO
    errors.addError(item);
    root.setErrors(errors);
}

OTAPayloadStdAttributes payloadStdAttributes = new OTAPayloadStdAttributes();
this.setPayloadProperties(message, payloadStdAttributes);
root.setPayloadStdAttributes(payloadStdAttributes);

return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7686">
		<LastChanged>2012-04-11T14:52:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>190</Sequence>
		<MethodName>setMessageDataStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iMessageStatus</MethodInterface>
		<MethodClassName>ProductResponseMessageData</MethodClassName>
		<LogicSource>this.put(BaseDataStatusModel.DATA_STATUS, new Integer(iMessageStatus));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7687">
		<LastChanged>2012-04-11T13:50:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>180</Sequence>
		<MethodName>setMessageDataError</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strErrorMessage</MethodInterface>
		<MethodClassName>ProductResponseMessageData</MethodClassName>
		<LogicSource>this.put(BaseDataStatusModel.DATA_ERROR_MESSAGE, strErrorMessage);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7688">
		<LastChanged>2012-04-11T13:50:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>170</Sequence>
		<MethodName>getMessageDataStatus</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[Integer intMessageStatus = (Integer)this.get(BaseDataStatusModel.DATA_STATUS);
if (intMessageStatus == null)
    intMessageStatus = new Integer(BaseDataStatusModel.NO_STATUS);
return intMessageStatus.intValue();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7689">
		<LastChanged>2012-04-11T13:50:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>160</Sequence>
		<MethodName>getMessageDataError</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProductResponseMessageData</MethodClassName>
		<LogicSource><![CDATA[String strErrorMessage = (String)this.get(BaseDataStatusModel.DATA_ERROR_MESSAGE);
if (strErrorMessage == null)
    strErrorMessage = DBConstants.BLANK;
return strErrorMessage;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7690">
		<LastChanged>2012-03-28T08:30:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>37</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderOptionGridScreen</MethodClassName>
		<LogicSource><![CDATA[this.getMainRecord().setKeyArea(TourHeaderOption.TOUR_OR_OPTION_KEY);
StringField fldTourOrOption = new StringField(null, TourHeaderOption.TOUR_OR_OPTION, 1, null, null);
if (this.getHeaderRecord() instanceof TourHeader)
    fldTourOrOption.setString(TourHeaderOption.TOUR);
else
{
    fldTourOrOption.setString(TourHeaderOption.OPTION);
    this.getMainRecord().addListener(new SubCountHandler(this.getHeaderRecord().getField(TourHeaderOption.DETAIL_OPTION_COUNT), false, true));
}
this.getMainRecord().addListener(new FreeOnFreeHandler(fldTourOrOption));
this.getMainRecord().addListener(new SubFileFilter(fldTourOrOption, TourHeaderOption.TOUR_OR_OPTION, (BaseField)this.getHeaderRecord().getCounterField(), TourHeaderOption.TOUR_OR_OPTION_ID, null, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7691">
		<LastChanged>2012-01-31T10:43:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourReportScreen</MethodClassName>
		<LogicSource><![CDATA[super;
((ReferenceField)this.getRecord(Tour.TOUR_FILE).getField(Tour.TOUR_HEADER_ID)).addListener(new ReadSecondaryHandler(this.getRecord(TourHeader.TOUR_HEADER_FILE)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7692">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourReportScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new TourHeader(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7693">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourGridScreenAnon</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7694">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderGridScreenAnon</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7695">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequestSOAPMessageIn2014B</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof AvailRQ)
{       // Always
	AvailRQ msg = (AvailRQ)root;

	AvailRequestSegments segments = msg.getAvailRequestSegmentsAvailRequestSegments();
	java.util.List<AvailRequestSegments.AvailRequestSegment> listSegments = segments.getAvailRequestSegmentList();
	AvailRequestSegments.AvailRequestSegment segType = listSegments.get(0);
	
	DateTimeSpan dateTimeSpan = segType.getStayDateRange();
	DateTimeSpanGroup dateTime = dateTimeSpan.getDateTimeSpanGroup();
    Date dateStart = this.dateStringToDateFormat(dateTime.getStart());

    Date dateEnd = this.dateStringToDateFormat(dateTime.getEnd());
    long lmsChange = dateEnd.getTime() - dateStart.getTime();
    long lDuration = (lmsChange + 1000) / DBConstants.KMS_IN_A_DAY;

    RatePlanCandidates ratePlanCans = segType.getRatePlanCandidates();
    RatePlanCandidates.RatePlanCandidate ratePlanCandidate = ratePlanCans.getRatePlanCandidate(0);
    RatePlanGroup ratePlanGroup = ratePlanCandidate.getRatePlanGroup();
    String strRatePlan = ratePlanGroup.getRatePlanCode();
    String strHotelName = ratePlanGroup.getPromotionCode();

    AvailRequestSegments.AvailRequestSegment.RoomStayCandidates roomStayCands = segType.getRoomStayCandidates();
    RoomStayCandidate roomStayCand = roomStayCands.getRoomStayCandidate(0);
    String roomStays = roomStayCand.getRoomGroup().getRoomCategory();

//            properties.put(TrxMessageHeader.DESTINATION_PARAM, strTo);
//            properties.put(TrxMessageHeader.SOURCE_PARAM, strFrom);
//            properties.put(TrxMessageHeader.REPLY_TO_PARAM, strReplyTo);
//x    HotelRateRequest hotelRateRequestIn = new HotelRateRequest(null, null);
//x    BaseMessage messageIn = new TreeMessage(null, hotelRateRequestIn);
    ProductMessageData messageData = (ProductMessageData)this.getMessage().getMessageDataDesc(HotelRateRequest.PRODUCT_MESSAGE);
    messageData.put(BookingDetail.RATE_ID, strRatePlan);
    messageData.put(BookingDetail.CLASS_ID, roomStays);
    messageData.put(BookingDetail.DETAIL_DATE, dateStart);
    messageData.put(BookingHotel.NIGHTS, new Long(lDuration));
    if (!Utility.isNumeric(strHotelName))
        messageData.put(Product.CODE, strHotelName);
    else
        messageData.put(BookingDetail.PRODUCT_ID, strHotelName);
//+ Fix this next line!
    PassengerMessageData passengerMessageData = (PassengerMessageData)this.getMessage().getMessageDataDesc(HotelRateRequest.PASSENGER_MESSAGE);
    int iRoomCategory = 2;
    passengerMessageData.put(Product.ROOM_TYPE_PARAM + Integer.toString(iRoomCategory), new Short((short)2));  // Twin ROOM HACK
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7696">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateRequestSOAPMessageOut2014B</MethodClassName>
		<LogicSource><![CDATA[BaseMessage message = this.getMessage();
    
AvailRQ root = new AvailRQ();

OTAPayloadStdAttributes payloadStdAttributes = new OTAPayloadStdAttributes();
this.setPayloadProperties(message, payloadStdAttributes);
root.setOTAPayloadStdAttributes(payloadStdAttributes);

HotelRateRequest hotelRateRequestOut = (HotelRateRequest)message.getMessageDataDesc(null);
HotelMessageData messageData = (HotelMessageData)hotelRateRequestOut.getMessageDataDesc(ProductRequest.PRODUCT_MESSAGE);
TrxMessageHeader messageHeader = (TrxMessageHeader)message.getMessageHeader();
String strMessageType = (String)messageHeader.get(TrxMessageHeader.MESSAGE_CODE);

AvailRequestSegments availRequestSegmentsAvailRequestSegments = new AvailRequestSegments();
root.setAvailRequestSegmentsAvailRequestSegments(availRequestSegmentsAvailRequestSegments);

AvailRequestSegments.AvailRequestSegment availRequestSegment = new AvailRequestSegments.AvailRequestSegment();
availRequestSegmentsAvailRequestSegments.addAvailRequestSegment(availRequestSegment);

DateTimeSpan dateTime = new DateTimeSpan();
availRequestSegment.setStayDateRange(dateTime);
DateTimeSpanGroup dateTimeSpanGroup = new DateTimeSpanGroup();
dateTime.setDateTimeSpanGroup(dateTimeSpanGroup);

Date date = (Date)messageData.get(BookingDetail.DETAIL_DATE);
Calendar cal = Calendar.getInstance();
cal.setTime(date);
dateTimeSpanGroup.setStart(this.dateToStringDateFormat(cal.getTime()));

cal = Calendar.getInstance();
cal.setTime(date);
// The default HotelRateRequest.DURATION_DEFAULT is temporary.
Short shNights = (Short)messageData.get(BookingHotel.NIGHTS);
if (shNights == null)
    shNights = HotelMessageData.DURATION_DEFAULT;
int iDuration = shNights.intValue(); 
cal.add(Calendar.DATE, iDuration);
dateTimeSpanGroup.setEnd(this.dateToStringDateFormat(cal.getTime()));
//?            dateTime.setDuration(strDuration);

//        header.setToURI(this.getMessageDestination(messageHeader));
//        header.setFromURI(messageHeader.getSourceAddress());
//        header.setReplyToURI(messageHeader.getReplyToAddress());
//        operation.setOperationName((String)map.get(EXTERNAL_OPERATION));    // Need a constant for this
RatePlanCandidates ratePlanCans = new RatePlanCandidates();
availRequestSegment.setRatePlanCandidates(ratePlanCans);
RatePlanCandidates.RatePlanCandidate ratePlan = new RatePlanCandidates.RatePlanCandidate();
ratePlanCans.addRatePlanCandidate(ratePlan);
RatePlanGroup ratePlanGroup = new RatePlanGroup();
ratePlan.setRatePlanGroup(ratePlanGroup);

Integer intRatePlan = (Integer)messageData.get(BookingDetail.RATE_ID);
if (intRatePlan != null)
	ratePlanGroup.setRatePlanCode(intRatePlan.toString());

String strHotelCode = null;
if (messageData.get(Product.CODE) != null)
    strHotelCode = messageData.get(Product.CODE).toString();
if ((strHotelCode == null) || (strHotelCode.length() == 0))
    strHotelCode = ((Integer)messageData.get(BookingDetail.PRODUCT_ID)).toString();
ratePlanGroup.setPromotionCode(strHotelCode);    // NO NO NO

AvailRequestSegments.AvailRequestSegment.RoomStayCandidates roomStayCandidates = new AvailRequestSegments.AvailRequestSegment.RoomStayCandidates();
availRequestSegment.setRoomStayCandidates(roomStayCandidates);
AvailRequestSegments.AvailRequestSegment.RoomStayCandidates.RoomStayCandidate roomStayCandidate = new AvailRequestSegments.AvailRequestSegment.RoomStayCandidates.RoomStayCandidate();
roomStayCandidates.addRoomStayCandidate(roomStayCandidate);
RoomGroup roomGroup = new RoomGroup();
roomStayCandidate.setRoomGroup(roomGroup);

Integer intRoomStays = (Integer)messageData.get(BookingDetail.CLASS_ID);
String roomStays = DBConstants.BLANK;
if (intRoomStays != null)
    roomStays = intRoomStays.toString();
// NEXT LINES are LAME LAME LAME!
if (roomStays.length() > 3)
    roomStays = roomStays.substring(0, 3);  // Restriction on length!
roomStays = roomStays.toUpperCase();
roomGroup.setRoomCategory(roomStays);
// create a Marshaller and marshal to System.out
//            Marshaller m = jc.createMarshaller();
//            m.setProperty( Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE );
//            m.marshal( po, System.out );
return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7697">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseSOAPMsgReplyIn2014B</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof AvailRS)
{
    AvailRS msg = (AvailRS)root;

//        if (GET_HOTEL_RATE.equalsIgnoreCase(strMessageType))
//        {
//            properties.put(DESTINATION_MESSAGE_PARAM, "/receiver"); // The URL extension

//            Header header = msg.getHeader();
//            String strTo = header.getToURI();
//            String strFrom = header.getFromURI();
//            String strReplyTo = header.getReplyToURI();

//            Body body = msg.getBody();
//            HITISOperation operation = body.getHITISOperation();
//            String strOperationName = operation.getOperationName();    // Need a constant for this
    String strPrice = msg.getOTAPayloadStdAttributes().getEchoToken();
    Double dblPrice = new Double(strPrice);
//            AvailabilityResponse availability = operation.getAvailabilityResponse();
//            QuotedRateAmount ratePlan = availability.getQuotedRateAmount();
//            double dPrice = ratePlan.getCurrency();

    ProductRateResponse productResponseData = (ProductRateResponse)this.getMessage().getMessageDataDesc(null);
    ProductResponseMessageData productMessageData = (ProductResponseMessageData)this.getMessage().getMessageDataDesc(BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);
    productMessageData.put(BookingDetail.TOTAL_COST, dblPrice);
    if (dblPrice != null)
        if (dblPrice != 0)
            productResponseData.setMessageDataStatus(MessageDataDesc.VALID);
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7698">
		<LastChanged>2011-08-05T15:59:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HotelRateResponseSOAPMsgReplyOut2014B</MethodClassName>
		<LogicSource><![CDATA[BaseMessage message = this.getMessage();
HotelRateResponse hotelRateResponseOut = (HotelRateResponse)message.getMessageDataDesc(null);
TrxMessageHeader messageHeader = (TrxMessageHeader)message.getMessageHeader();
String strMessageType = (String)hotelRateResponseOut.get(TrxMessageHeader.MESSAGE_CODE);
if (true)//GET_HOTEL_RATE.equalsIgnoreCase(strMessageType))
{
    AvailRS root = new AvailRS();

    OTAPayloadStdAttributes payloadStdAttributes = new OTAPayloadStdAttributes();
    this.setPayloadProperties(message, payloadStdAttributes);
    root.setOTAPayloadStdAttributes(payloadStdAttributes);
    
    POS pos = new POS();
    root.setPOS(pos);
    Source source = new Source();
    pos.addSource(source);

//+        SourceType.RequestorID uniqueId = null;
//+        source.setRequestorID(uniqueId = factory.createSourceTypeRequestorID());
//+        uniqueId.setID(messageHeader.get(TrxMessageHeader.LOG_TRX_ID).toString());
//+        uniqueId.setType("12");
//                source.setAgentSine("Test Agent");

    Success successType = new Success();
    root.setSuccess(successType);

//                ErrorsTypeTypes errorsType = null;
//                root.setErrors(errorsType = ObjectFactory.createErrorsTypeTypes());
//            operation.setOperationName(AVAILABILITY_RESPONSE);    // Need a constant for this
//            AvailabilityResponse availability = new AvailabilityResponse();
//            operation.setAvailabilityResponse(availability);
//            QuotedRateAmount rateAmount = new QuotedRateAmount();
//            availability.setQuotedRateAmount(rateAmount);
    
    AvailRS.RoomStays roomStays = new AvailRS.RoomStays();
    root.setRoomStays(roomStays);
    
    roomStays.setMoreIndicator("No");
    AvailRS.RoomStays.RoomStay roomStay = new AvailRS.RoomStays.RoomStay();
    roomStays.addRoomStay(roomStay);
    
    roomStay.setIsAlternate(false);
	/*
	org.w3._2001.xmlschema.ObjectFactory w3Factory = new org.w3._2001.xmlschema.ObjectFactory();
	org.w3._2001.xmlschema.AnyType anyType = w3Factory.createAnyType();
	roomStay.setAlternateInfo(anyType);
	java.util.List listContent = anyType.getContent();
	BasicPropertyInfoTypez propInfo = factory.createBasicPropertyInfoTypez();
	roomStay.setBasicPropertyInfo(propInfo);
	propInfo.setHotelName("Test Hotel");
	//roomStay.setGuestCounts(value);
	*/
	    
	RoomStay.RatePlans ratePlans = new RoomStay.RatePlans();
	roomStay.setRatePlans(ratePlans);
	
	RatePlan ratePlan = new RatePlan();
	ratePlans.addRatePlan(ratePlan);
	
	ratePlan.setRatePlanCode("XYZ");
	ratePlan.setRateIndicator(RateIndicator.ON_REQUEST);
	
	RoomStay.RoomRates listRoomRate = new RoomStay.RoomRates();
	roomStay.setRoomRates(listRoomRate);
	
	RoomStay.RoomRates.RoomRate roomRate = new RoomStay.RoomRates.RoomRate();
	listRoomRate.addRoomRate(roomRate);
	
	Rate rates = new Rate();
	roomRate.setRates(rates);
	java.util.List<Rate.RateInner> listRates = rates.getRateList();
	Rate.RateInner rateType = new Rate.RateInner();
	listRates.add(rateType);
	
	String duration = "12345";
	rateType.setDuration(duration);
	AgeQualifyingGroup ageQualifyingGroup = new AgeQualifyingGroup();
	rateType.setAgeQualifyingGroup(ageQualifyingGroup);
	ageQualifyingGroup.setAgeQualifyingCode("AAA");
	ageQualifyingGroup.setAgeTimeUnit(TimeUnit.DAY);
	//rateType.setAmountAddlInfo(value);
	Total types = new Total();
	CurrencyCodeGroup currencyCodeGroup = new CurrencyCodeGroup();
	types.setCurrencyCodeGroup(currencyCodeGroup);
	currencyCodeGroup.setCurrencyCode("USD");
	Float bigAfter = new Float(20.00);
	types.setAmountAfterTax(bigAfter);
	rateType.setBase(types);
	String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000);
	SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]);
	GregorianCalendar calendar = new GregorianCalendar(pdt);
	calendar.setTime(new Date());
	int iDuration2 = 2;
	EffectiveExpireOptionalDateGroup effectiveExpireOptionalDateGroup = new EffectiveExpireOptionalDateGroup();
	rateType.setEffectiveExpireOptionalDateGroup(effectiveExpireOptionalDateGroup);
	LocalDate effectiveDate = new LocalDate(calendar);
	effectiveExpireOptionalDateGroup.setEffectiveDate(effectiveDate);
	calendar.add(Calendar.DATE, iDuration2);
	LocalDate expireDate = new LocalDate(calendar);
	effectiveExpireOptionalDateGroup.setExpireDate(expireDate);
	
	ageQualifyingGroup.setMaxAge(20);
	ageQualifyingGroup.setMinAge(1);
	//rateType.setTPAExtensions(value);
	listRates.add(rateType);
	roomRate.setRates(rates);
	
	listRoomRate.addRoomRate(roomRate);
	//HotelAvailRSType.RoomStaysTypez.RoomRatesType roomRates = factory.createRoomStayTypezRoomRatesType();
	//roomStay.setRoomRates(value);
	
	//roomStay.setRoomStayAddlInfo(value);
	//roomStay.setRoomTypes(value);        
	DateTimeSpan timeSpan = new DateTimeSpan();
	roomStay.setTimeSpan(timeSpan);
	
	Calendar cal = Calendar.getInstance();
	cal.setTime(new Date());
	DateTimeSpanGroup dateTimeSpanGroup = new DateTimeSpanGroup();
	timeSpan.setDateTimeSpanGroup(dateTimeSpanGroup);
	
	dateTimeSpanGroup.setStart(this.dateToStringDateFormat(cal.getTime()));
	int iDuration = 2;
	cal.add(Calendar.DATE, iDuration);
	dateTimeSpanGroup.setEnd(this.dateToStringDateFormat(cal.getTime()));
	
	ProductResponseMessageData messageData = (ProductResponseMessageData)hotelRateResponseOut.getMessageDataDesc(BaseProductResponse.PRODUCT_RESPONSE_MESSAGE);
	Double dblCurrency = (Double)messageData.get(BookingDetail.TOTAL_COST);
	
	root.getOTAPayloadStdAttributes().setEchoToken(dblCurrency.toString());
	//            double dCurrency = 0.00;
	//            if (dblCurrency != null)
	//                dCurrency = dblCurrency.doubleValue();
	//            rateAmount.setCurrency(dCurrency);        
	return root;
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7699">
		<LastChanged>2012-03-27T20:31:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BookingAirHeaderScreenField</MethodClassName>
		<LogicSource><![CDATA[BaseField fldBookingAirHeaderID = (BaseField)this.getConverter().getField();
Record recBookingAir = fldBookingAirHeaderID.getRecord();
Record recBookingAirHeader = ((ReferenceField)this.getField()).makeReferenceRecord();

String strOptionID = recBookingAir.getField(BookingAir.BOOKING_ID).toString();
ScreenLocation itsLocation = null;

Task task = null;
if (recBookingAirHeader.getRecordOwner() != null)
    task = recBookingAirHeader.getRecordOwner().getTask();
if (task == null)
    task = BaseApplet.getSharedInstance();
App application = task.getApplication();

BasePanel parent = Screen.makeWindow(application);
int iDocMode = ScreenConstants.SELECT_MODE;
boolean bCloneThisQuery = true;
boolean bReadCurrentRecord = true;
boolean bUseBaseTable = true;
boolean bLinkGridToQuery = true;
Map<String,Object> properties = new Hashtable<String,Object>();
properties.put(DBParams.HEADER_OBJECT_ID, strOptionID);
recBookingAirHeader.makeScreen(itsLocation, parent, iDocMode, bCloneThisQuery, bReadCurrentRecord, bUseBaseTable, bLinkGridToQuery, properties);

return true;    // Handled]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7700">
		<LastChanged>2012-03-27T20:52:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UseTourHeaderOptionScreenField</MethodClassName>
		<LogicSource><![CDATA[Task task = null;
if (m_record.getRecordOwner() != null)
    task = m_record.getRecordOwner().getTask();
if (task == null)
    task = BaseApplet.getSharedInstance();
Application application = (Application)task.getApplication();

BasePanel parentScreen = Screen.makeWindow(application);

BaseField fldTourHeaderOptionID = (BaseField)this.getConverter().getField();
Record recTourHeaderOption = fldTourHeaderOptionID.getRecord();
ReferenceField fldTourOrOptionID = (ReferenceField)recTourHeaderOption.getField(TourHeaderOption.TOUR_OR_OPTION_ID);
Record recTourOrOption = fldTourOrOptionID.getReferenceRecord();
try {
    recTourOrOption = (Record)recTourOrOption.clone();
    recTourOrOption.readSameRecord(fldTourOrOptionID.getReferenceRecord(), false, true);
} catch (CloneNotSupportedException ex) {
    ex.printStackTrace();
}
GridScreen screen = new TourHeaderOptionGridScreen(recTourOrOption, null, null, parentScreen, null, ScreenConstants.SELECT_MODE | ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
//x if (m_record.getScreen() == null)
    screen.setSelectQuery(m_record, false); // Since this record isn't linked to the screen, manually link it.
return true;    // Handled]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7701">
		<LastChanged>2012-03-27T21:39:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TourHeaderAirHeaderScreenField</MethodClassName>
		<LogicSource><![CDATA[BaseField fldTourSubID = (BaseField)this.getConverter().getField();
Record recTourHeaderAir = fldTourSubID.getRecord();
Record recTourHeaderAirHeader = ((ReferenceField)this.getField()).makeReferenceRecord();

String strOptionID = recTourHeaderAir.getField(TourSub.TOUR_HEADER_OPTION_ID).toString();
ScreenLocation itsLocation = null;

Task task = null;
if (recTourHeaderAirHeader.getRecordOwner() != null)
    task = recTourHeaderAirHeader.getRecordOwner().getTask();
if (task == null)
    task = BaseApplet.getSharedInstance();
Application application = (Application)task.getApplication();

BasePanel parent = Screen.makeWindow(application);
int iDocMode = ScreenConstants.SELECT_MODE;
boolean bCloneThisQuery = true;
boolean bReadCurrentRecord = true;
boolean bUseBaseTable = true;
boolean bLinkGridToQuery = true;
Map<String,Object> properties = new Hashtable<String,Object>();
properties.put(DBParams.HEADER_OBJECT_ID, strOptionID);
recTourHeaderAirHeader.makeScreen(itsLocation, parent, iDocMode, bCloneThisQuery, bReadCurrentRecord, bUseBaseTable, bLinkGridToQuery, properties);

return true;    // Handled]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7702">
		<LastChanged>2012-03-28T09:09:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ModifyTourSubScreenField</MethodClassName>
		<LogicSource><![CDATA[Task task = null;
if (m_record.getRecordOwner() != null)
    task = m_record.getRecordOwner().getTask();
if (task == null)
    task = BaseApplet.getSharedInstance();
Application application = (Application)task.getApplication();

BaseField fldTourSubID = (BaseField)this.getConverter().getField();
Record recTourSub = fldTourSubID.getRecord();
Record recTourHeaderOption = null;
Record recTourHeader = null;
try {
    RecordOwner recordOwner = this.getRecord().findRecordOwner();
    recTourHeaderOption = new TourHeaderOption(recordOwner);
    recordOwner.removeRecord(recTourHeaderOption);
    recTourHeaderOption.getField(TourHeaderOption.ID).moveFieldToThis(recTourSub.getField(TourSub.TOUR_HEADER_OPTION_ID));
    while (recTourHeaderOption.seek(null) == true)
    {
        if (TourHeaderOption.TOUR.equals(recTourHeaderOption.getField(TourHeaderOption.TOUR_OR_OPTION).toString()))
        {   // Finally made it to the tour.
            recTourHeader = new TourHeader(recordOwner);
            recordOwner.removeRecord(recTourHeader); // This is belong to the new option screen
            recTourHeader.getField(TourHeader.ID).moveFieldToThis(recTourHeaderOption.getField(TourHeaderOption.TOUR_OR_OPTION_ID));
            boolean bSuccess = recTourHeader.seek(DBConstants.EQUALS);
            break;
        }
        recTourHeaderOption.getField(TourHeaderOption.ID).moveFieldToThis(recTourHeaderOption.getField(TourHeaderOption.TOUR_OR_OPTION_ID));
    }
    if (recTourHeader != null)
    {
        BasePanel parentScreen = Screen.makeWindow(application);
        String strQueueName = ModifyTourSubField.SELECT_QUEUE;   // This is my private queue
        parentScreen.setProperty(MessageConstants.QUEUE_NAME, strQueueName);
        parentScreen.setProperty(RecordMessageConstants.TABLE_NAME, recTourSub.getTableNames(false));
        GridScreen screen = new TourHeaderOptionGridScreen(recTourHeader, null, null, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
        MessageManager messageManager = application.getMessageManager();
        BaseMessageReceiver receiver = (BaseMessageReceiver)messageManager.getMessageQueue(strQueueName, MessageConstants.INTRANET_QUEUE).getMessageReceiver();
        BaseScreen screenTarget = (BaseScreen)sourceSField.getParentScreen();
        receiver.createDefaultFilter(screenTarget);
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    if (recTourHeaderOption != null)
        recTourHeaderOption.free();
    recTourHeaderOption = null;
}
return true;    // Handled]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7703">
		<LastChanged>2012-04-06T00:07:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,501</Sequence>
		<MethodName>updateBookingLine*1</MethodName>
		<LogicDescription>No thin implementation</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BookingLineModel recBookingLine, int iPricingType, int iPaxCategory,  int iQuantity, double dAmount, boolean bCommissionable, double dCommissionRate, String strPayAt, int iPricingStatusID, int iChangeType</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>return -1;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>2</IncludeScope>
	</LogicFile>
	<LogicFile ID="7704">
		<LastChanged>2012-04-06T00:10:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>801</Sequence>
		<MethodName>getNoPax*1</MethodName>
		<LogicDescription>No thin implementation</LogicDescription>
		<MethodReturns>short</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>BookingDetail</MethodClassName>
		<LogicSource>return -1;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>2</IncludeScope>
	</LogicFile>
	<LogicFile ID="7705">
		<LastChanged>2012-04-08T08:59:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setMessageDataStatus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iMessageStatus</MethodInterface>
		<MethodClassName>ProductResponse</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>7</IncludeScope>
	</LogicFile>
	<LogicFile ID="7707">
		<LastChanged>2012-04-11T10:06:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>7,500</Sequence>
		<MethodName>getProductRate</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TransportationMessageData</MethodClassName>
		<LogicSource>return (TransportationRateModel)Record.makeRecordFromClassName(TransportationRateModel.THICK_CLASS, recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7708">
		<LastChanged>2012-05-29T11:45:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addPayloadProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseJibxMessageIn2014B</MethodClassName>
		<LogicSource><![CDATA[super;

OTAPayloadStdAttributes payloadStdAttributes = (OTAPayloadStdAttributes)msg;
// Actually, super.addPayloadProperties should have worked correctly]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7709">
		<LastChanged>2012-05-29T14:33:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingRequestJibxMessageIn2014B</MethodClassName>
		<LogicSource><![CDATA[if (root instanceof PingRQ)
{       // Always
    PingRQ msg = (PingRQ)root;
    String strMessage = msg.getEchoData();
    
    BaseMessage message = this.getMessage();
    message.put(PingRequestMessageInProcessor.MESSAGE_PARAM, strMessage);

    OTAPayloadStdAttributes payloadStdAttributes = msg.getPayloadStdAttributes();
    this.addPayloadProperties(payloadStdAttributes, message);
    return DBConstants.NORMAL_RETURN;
}
else
    return DBConstants.ERROR_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7710">
		<LastChanged>2012-05-29T14:34:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setPayloadProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseJibxMessageOut2014B</MethodClassName>
		<LogicSource><![CDATA[super; // Doesn't hurt to try this

OTAPayloadStdAttributes payloadStdAttributes = (OTAPayloadStdAttributes)msg;
DateTime timeStamp = new DateTime();
payloadStdAttributes.setTimeStamp(timeStamp);
Float version = new Float(1.00);
payloadStdAttributes.setVersion(version);
payloadStdAttributes.setTarget(OTAPayloadStdAttributes.Target.PRODUCTION);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7711">
		<LastChanged>2012-06-09T12:40:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createMessageService</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingServiceActivator</MethodClassName>
		<LogicSource>return new PingService2014BImpl(task, null, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7712">
		<LastChanged>2012-06-09T12:41:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getInterfaceClass</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PingServiceActivator</MethodClassName>
		<LogicSource>return org.jibx.schema.org.opentravel._2014B.ping.ws.PingService.class;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7713">
		<LastChanged>2012-06-09T12:47:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ping</MethodName>
		<LogicDescription/>
		<MethodReturns>PingRS</MethodReturns>
		<MethodInterface>PingRQ request</MethodInterface>
		<MethodClassName>PingService2014BImpl</MethodClassName>
		<LogicSource>return (PingRS)this.processMessage(request);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7714">
		<LastChanged>2012-06-13T14:11:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>addDetailXMLColumn*3</MethodName>
		<LogicDescription/>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>Record record, int iFieldSeq, int iSecondFieldSeq</MethodInterface>
		<MethodClassName>RecordReportDetail</MethodClassName>
		<LogicSource>return this.addColumn(new MultipleTableFieldConverter(record, iFieldSeq, iSecondFieldSeq));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7715">
		<LastChanged>2012-06-15T14:12:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AcctBatchDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
SubFileFilter listener = (SubFileFilter)this.getMainRecord().getListener(SubFileFilter.class);
if (listener != null)
    listener.setAddNewHeaderOnAdd(true);    // Create header record if none]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7716">
		<LastChanged>2012-06-15T16:59:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TrxIDSField</MethodClassName>
		<LogicSource><![CDATA[if (fieldConverter != null)
{ // Make sure this field comes back on the query
    ((BaseField)fieldConverter.getField()).getRecord().getField(AcctDetailDist.ACCT_DETAIL_ID).setSelected(true);
}
if (properties == null)
    properties = new HashMap<String,Object>();
String strDesc = AcctDetailDist.DIST_SOURCE;
if (parentScreen != null)
    if (parentScreen.getTask() != null)
        if (parentScreen.getTask().getApplication() instanceof BaseApplication)
            strDesc = ((BaseApplication)parentScreen.getTask().getApplication()).getResources(ResourceConstants.GENLED_RESOURCE, true).getString(strDesc);
if (!(parentScreen instanceof GridScreen))
    if (strDesc != null)
        properties.put(ScreenModel.DESC, strDesc);
properties.put(ScreenModel.IMAGE, AcctDetailDist.DIST_SOURCE);
properties.put(ScreenModel.COMMAND, AcctDetailDist.DIST_SOURCE);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
</file>